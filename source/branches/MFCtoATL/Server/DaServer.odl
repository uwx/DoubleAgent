#include "..\Include\DaGuid.h"

[
	uuid(1147E501-A208-11DE-ABF2-002421116FB2),
	version(_SERVER_VER),
	helpstring("Double Agent Server")
]
library DoubleAgentSvr
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	interface IDaServer;
	interface IDaSvrUserInput;
	interface IDaSvrCommand;
	interface IDaSvrCommands;
	interface IDaSvrSpeechInput;
	interface IDaSvrAudioOutput;
	interface IDaSvrPropertySheet;
	interface IDaSvrBalloon;
	interface IDaSvrCharacter;
	interface IDaSvrCommandsWindow;
	interface IDaSvrNotifySink15;
	interface IDaSvrNotifySink;

	interface IDaSvrCharacterFiles;
	interface IDaSvrSpeechEngine;
	interface IDaSvrSpeechEngines;
	interface IDaSvrRecognitionEngine;
	interface IDaSvrRecognitionEngines;
	interface IDaServer2;
	interface IDaSvrCharacter2;

	/////////////////////////////////////////////////////////////////////////////
	// Types
	/////////////////////////////////////////////////////////////////////////////

#include "DaCommon.odl"

	typedef enum FilesFilter
	{
		FilesFilter_PathDoubleAgent = 0x00000001,
		FilesFilter_PathMsAgent = 0x00000002,
		FilesFilter_PathMsOffice = 0x00000004,
		FilesFilter_PathMask = 0x00000007,
		FilesFilter_ExcludeNonSpeaking = 0x00000010,
		FilesFilter_ExcludeSpeaking = 0x00000020,
		FilesFilter_ExcludeMask = 0x00000030,
		FilesFilter_NoValidateVersion = 0x00010000,
		FilesFilter_FilterMask = 0x00010030,
		FilesFilter_ValidMask = 0x00010037
	}   FilesFilter;

	/////////////////////////////////////////////////////////////////////////////
	// Compatibility Types
	/////////////////////////////////////////////////////////////////////////////

	const long	NeverMoved								= MoveCause_NeverMoved;
	const long	UserMoved								= MoveCause_UserMoved;
	const long	ProgramMoved							= MoveCause_ProgramMoved;
	const long	OtherProgramMoved						= MoveCause_OtherProgramMoved;
	const long	SystemMoved								= 4;

	const long	NeverShown								= VisibilityCause_NeverShown;
	const long	UserHid									= VisibilityCause_UserHid;
	const long	UserShowed								= VisibilityCause_UserShowed;
	const long	ProgramHid								= VisibilityCause_ProgramHid;
	const long	ProgramShowed							= VisibilityCause_ProgramShowed;
	const long	OtherProgramHid							= VisibilityCause_OtherProgramHid;
	const long	OtherProgramShowed						= VisibilityCause_OtherProgramShowed;
	const long	UserHidViaCharacterMenu					= 7;
	const long	UserHidViaTaskbarIcon					= VisibilityCause_UserHid;

	const long	CSHELPCAUSE_COMMAND						= 1;
	const long	CSHELPCAUSE_OTHERPROGRAM				= 2;
	const long	CSHELPCAUSE_OPENCOMMANDSWINDOW			= 3;
	const long	CSHELPCAUSE_CLOSECOMMANDSWINDOW			= 4;
	const long	CSHELPCAUSE_SHOWCHARACTER				= 5;
	const long	CSHELPCAUSE_HIDECHARACTER				= 6;
	const long	CSHELPCAUSE_CHARACTER					= 7;

	const long	ACTIVATE_NOTTOPMOST						= ActiveType_Inactive;
	const long	ACTIVATE_TOPMOST						= ActiveType_Active;
	const long	ACTIVATE_NOTACTIVE						= ActiveType_Inactive;
	const long	ACTIVATE_ACTIVE							= ActiveType_Active;
	const long	ACTIVATE_INPUTACTIVE					= ActiveType_InputActive;

	const long	PREPARE_ANIMATION						= PrepareType_Animation;
	const long	PREPARE_STATE							= PrepareType_State;
	const long	PREPARE_WAVE							= PrepareType_Wave;

	const long	STOP_TYPE_PLAY							= StopType_Play;
	const long	STOP_TYPE_MOVE							= StopType_Move;
	const long	STOP_TYPE_SPEAK							= StopType_Speak;
	const long	STOP_TYPE_PREPARE						= StopType_QueuedPrepare;
	const long	STOP_TYPE_NONQUEUEDPREPARE				= StopType_ImmediatePrepare;
	const long	STOP_TYPE_VISIBLE						= StopType_Visibility;
	const long	STOP_TYPE_ALL							= StopType_All;

	const long	BALLOON_STYLE_BALLOON_ON				= BalloonStyle_Enabled;
	const long	BALLOON_STYLE_SIZETOTEXT				= BalloonStyle_SizeToText;
	const long	BALLOON_STYLE_AUTOHIDE					= BalloonStyle_AutoHide;
	const long	BALLOON_STYLE_AUTOPACE					= BalloonStyle_AutoPace;
	const long	BALLOON_STYLE_PARTIAL_LINES				= BalloonStyle_ShowPartialLines;

	const long	AUDIO_STATUS_AVAILABLE					= AudioStatus_Available;
	const long	AUDIO_STATUS_NOAUDIO					= AudioStatus_Disabled;
	const long	AUDIO_STATUS_CANTOPENAUDIO				= 2;
	const long	AUDIO_STATUS_USERSPEAKING				= AudioStatus_UserSpeaking;
	const long	AUDIO_STATUS_CHARACTERSPEAKING			= AudioStatus_CharacterSpeaking;
	const long	AUDIO_STATUS_SROVERRIDEABLE				= AudioStatus_CharacterListening;
	const long	AUDIO_STATUS_ERROR						= AudioStatus_Error;

	const long	LISTEN_STATUS_CANLISTEN					= ListenStatus_Available;
	const long	LISTEN_STATUS_NOAUDIO					= 1;
	const long	LISTEN_STATUS_NOTACTIVE					= ListenStatus_CharacterInactive;
	const long	LISTEN_STATUS_CANTOPENAUDIO				= 3;
	const long	LISTEN_STATUS_COULDNTINITIALIZESPEECH	= ListenStatus_InitializeFailed;
	const long	LISTEN_STATUS_SPEECHDISABLED			= ListenStatus_SpeechDisabled;
	const long	LISTEN_STATUS_ERROR						= ListenStatus_Error;

	const long	LSCOMPLETE_CAUSE_PROGRAMDISABLED		= ListenComplete_ProgramDisabled;
	const long	LSCOMPLETE_CAUSE_PROGRAMTIMEDOUT		= ListenComplete_ProgramTimedOut;
	const long	LSCOMPLETE_CAUSE_USERTIMEDOUT			= ListenComplete_UserTimedOut;
	const long	LSCOMPLETE_CAUSE_USERRELEASEDKEY		= ListenComplete_UserReleasedKey;
	const long	LSCOMPLETE_CAUSE_USERUTTERANCEENDED		= ListenComplete_UserSpeechEnded;
	const long	LSCOMPLETE_CAUSE_CLIENTDEACTIVATED		= ListenComplete_CharacterClientDeactivated;
	const long	LSCOMPLETE_CAUSE_DEFAULTCHARCHANGE		= ListenComplete_DefaultCharacterChanged;
	const long	LSCOMPLETE_CAUSE_USERDISABLED			= ListenComplete_UserDisabled;

cpp_quote("#ifndef GENDER_NEUTRAL")
cpp_quote("#define GENDER_NEUTRAL 0")
cpp_quote("#endif")
cpp_quote("#ifndef GENDER_FEMALE")
cpp_quote("#define GENDER_FEMALE 1")
cpp_quote("#endif")
cpp_quote("#ifndef GENDER_MALE")
cpp_quote("#define GENDER_MALE 2")
cpp_quote("#endif")

	/////////////////////////////////////////////////////////////////////////////
	// Interfaces
	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IAgent_Load = 0x60020000;
	const DISPID DISPID_IAgent_Unload = 0x60020001;
	const DISPID DISPID_IAgent_Register = 0x60020002;
	const DISPID DISPID_IAgent_Unregister = 0x60020003;
	const DISPID DISPID_IAgent_GetCharacter = 0x60020004;
	const DISPID DISPID_IAgent_GetSuspended = 0x60020005;
	const DISPID DISPID_IAgentEx_GetCharacterEx = 0x60030000;
	const DISPID DISPID_IAgentEx_GetVersion = 0x60030001;
	const DISPID DISPID_IAgentEx_ShowDefaultCharacterProperties = 0x60030002;

	[
		odl,
		uuid(1147E502-A208-11DE-ABF2-002421116FB2),
		helpstring("IDaServer Interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaServer : IDispatch
	{
		[id(DISPID_IAgent_Load)] HRESULT Load ([in] VARIANT vLoadKey, [out] long* pdwCharID, [out] long* pdwReqID);
		[id(DISPID_IAgent_Unload)] HRESULT Unload ([in] long dwCharID);
		[id(DISPID_IAgent_Register)] HRESULT Register ([in] IUnknown* punkNotifySink, [out] long* pdwSinkID);
		[id(DISPID_IAgent_Unregister)] HRESULT Unregister ([in] long dwSinkID);
		[id(DISPID_IAgent_GetCharacter)] HRESULT GetCharacter ([in] long dwCharID, [out] IDispatch** ppunkCharacter);
		[id(DISPID_IAgent_GetSuspended), hidden] HRESULT GetSuspended ([out] long* pbSuspended);

		[id(DISPID_IAgentEx_GetCharacterEx)] HRESULT GetCharacterEx ([in] long dwCharID, [out] IDaSvrCharacter** ppCharacterEx);
		[id(DISPID_IAgentEx_GetVersion)] HRESULT GetVersion ([out] short* psMajor, [out] short* psMinor);
		[id(DISPID_IAgentEx_ShowDefaultCharacterProperties)] HRESULT ShowDefaultCharacterProperties ([in] short x, [in] short y, [in] long bUseDefaultPosition);
	};

	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IAgentUserInput_GetCount = 0x60020000;
	const DISPID DISPID_IAgentUserInput_GetItemID = 0x60020001;
	const DISPID DISPID_IAgentUserInput_GetItemConfidence = 0x60020002;
	const DISPID DISPID_IAgentUserInput_GetItemText = 0x60020003;
	const DISPID DISPID_IAgentUserInput_GetAllItemData = 0x60020004;

	[
		odl,
		uuid(1147E508-A208-11DE-ABF2-002421116FB2),
		helpstring("IDaSvrUserInput Interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaSvrUserInput : IDispatch
	{
		[id(DISPID_IAgentUserInput_GetCount)] HRESULT GetCount ([out] long* pdwCount);
		[id(DISPID_IAgentUserInput_GetItemID)] HRESULT GetItemID([in] long dwItemIndex, [out] long* pdwCommandID);
		[id(DISPID_IAgentUserInput_GetItemConfidence)] HRESULT GetItemConfidence ([in] long dwItemIndex, [out] long* plConfidence);
		[id(DISPID_IAgentUserInput_GetItemText)] HRESULT GetItemText ([in] long dwItemIndex, [out] BSTR* pbszText);
		[id(DISPID_IAgentUserInput_GetAllItemData)] HRESULT GetAllItemData ([out] VARIANT* pdwItemIndices, [out] VARIANT* plConfidences, [out] VARIANT* pbszText);
	};

	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IAgentCommand_SetCaption = 0x60020000;
	const DISPID DISPID_IAgentCommand_GetCaption = 0x60020001;
	const DISPID DISPID_IAgentCommand_SetVoice = 0x60020002;
	const DISPID DISPID_IAgentCommand_GetVoice = 0x60020003;
	const DISPID DISPID_IAgentCommand_SetEnabled = 0x60020004;
	const DISPID DISPID_IAgentCommand_GetEnabled = 0x60020005;
	const DISPID DISPID_IAgentCommand_SetVisible = 0x60020006;
	const DISPID DISPID_IAgentCommand_GetVisible = 0x60020007;
	const DISPID DISPID_IAgentCommand_SetConfidenceThreshold = 0x60020008;
	const DISPID DISPID_IAgentCommand_GetConfidenceThreshold = 0x60020009;
	const DISPID DISPID_IAgentCommand_SetConfidenceText = 0x6002000a;
	const DISPID DISPID_IAgentCommand_GetConfidenceText = 0x6002000b;
	const DISPID DISPID_IAgentCommand_GetID = 0x6002000c;
	const DISPID DISPID_IAgentCommandEx_SetHelpContextID = 0x60030000;
	const DISPID DISPID_IAgentCommandEx_GetHelpContextID = 0x60030001;
	const DISPID DISPID_IAgentCommandEx_SetVoiceCaption = 0x60030002;
	const DISPID DISPID_IAgentCommandEx_GetVoiceCaption = 0x60030003;

	[
		odl,
		uuid(1147E506-A208-11DE-ABF2-002421116FB2),
		helpstring("IDaSvrCommand Interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaSvrCommand : IDispatch
	{
		[id(DISPID_IAgentCommand_SetCaption)] HRESULT SetCaption ([in] BSTR bszCaption);
		[id(DISPID_IAgentCommand_GetCaption)] HRESULT GetCaption ([out] BSTR* pbszCaption);
		[id(DISPID_IAgentCommand_SetVoice)] HRESULT SetVoice ([in] BSTR bszVoice);
		[id(DISPID_IAgentCommand_GetVoice)] HRESULT GetVoice ([out] BSTR* pbszVoice);
		[id(DISPID_IAgentCommand_SetEnabled)] HRESULT SetEnabled ([in] long bEnabled);
		[id(DISPID_IAgentCommand_GetEnabled)] HRESULT GetEnabled ([out] long* pbEnabled);
		[id(DISPID_IAgentCommand_SetVisible)] HRESULT SetVisible ([in] long bVisible);
		[id(DISPID_IAgentCommand_GetVisible)] HRESULT GetVisible ([out] long* pbVisible);
		[id(DISPID_IAgentCommand_SetConfidenceThreshold)] HRESULT SetConfidenceThreshold ([in] long lThreshold);
		[id(DISPID_IAgentCommand_GetConfidenceThreshold)] HRESULT GetConfidenceThreshold ([out] long* plThreshold);
		[id(DISPID_IAgentCommand_SetConfidenceText)] HRESULT SetConfidenceText ([in] BSTR bszTipText);
		[id(DISPID_IAgentCommand_GetConfidenceText)] HRESULT GetConfidenceText ([out] BSTR* pbszTipText);
		[id(DISPID_IAgentCommand_GetID)] HRESULT GetID([out] long* pdwID);

		[id(DISPID_IAgentCommandEx_SetHelpContextID), hidden] HRESULT SetHelpContextID([in] long ulID);
		[id(DISPID_IAgentCommandEx_GetHelpContextID), hidden] HRESULT GetHelpContextID([out] long* pulID);
		[id(DISPID_IAgentCommandEx_SetVoiceCaption)] HRESULT SetVoiceCaption ([in] BSTR bszVoiceCaption);
		[id(DISPID_IAgentCommandEx_GetVoiceCaption)] HRESULT GetVoiceCaption ([out] BSTR* pbszVoiceCaption);
	};

	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IAgentCommands_GetCommand = 0x60020000;
	const DISPID DISPID_IAgentCommands_GetCount = 0x60020001;
	const DISPID DISPID_IAgentCommands_SetCaption = 0x60020002;
	const DISPID DISPID_IAgentCommands_GetCaption = 0x60020003;
	const DISPID DISPID_IAgentCommands_SetVoice = 0x60020004;
	const DISPID DISPID_IAgentCommands_GetVoice = 0x60020005;
	const DISPID DISPID_IAgentCommands_SetVisible = 0x60020006;
	const DISPID DISPID_IAgentCommands_GetVisible = 0x60020007;
	const DISPID DISPID_IAgentCommands_Add = 0x60020008;
	const DISPID DISPID_IAgentCommands_Insert = 0x60020009;
	const DISPID DISPID_IAgentCommands_Remove = 0x6002000a;
	const DISPID DISPID_IAgentCommands_RemoveAll = 0x6002000b;

	const DISPID DISPID_IAgentCommandsEx_GetCommandEx = 0x60030000;
	const DISPID DISPID_IAgentCommandsEx_SetDefaultID = 0x60030001;
	const DISPID DISPID_IAgentCommandsEx_GetDefaultID = 0x60030002;
	const DISPID DISPID_IAgentCommandsEx_SetHelpContextID = 0x60030003;
	const DISPID DISPID_IAgentCommandsEx_GetHelpContextID = 0x60030004;
	const DISPID DISPID_IAgentCommandsEx_SetFontName = 0x60030005;
	const DISPID DISPID_IAgentCommandsEx_GetFontName = 0x60030006;
	const DISPID DISPID_IAgentCommandsEx_SetFontSize = 0x60030007;
	const DISPID DISPID_IAgentCommandsEx_GetFontSize = 0x60030008;
	const DISPID DISPID_IAgentCommandsEx_SetVoiceCaption = 0x60030009;
	const DISPID DISPID_IAgentCommandsEx_GetVoiceCaption = 0x6003000a;
	const DISPID DISPID_IAgentCommandsEx_AddEx = 0x6003000b;
	const DISPID DISPID_IAgentCommandsEx_InsertEx = 0x6003000c;
	const DISPID DISPID_IAgentCommandsEx_SetGlobalVoiceCommandsEnabled = 0x6003000d;
	const DISPID DISPID_IAgentCommandsEx_GetGlobalVoiceCommandsEnabled = 0x6003000e;

	[
		odl,
		uuid(1147E505-A208-11DE-ABF2-002421116FB2),
		helpstring ("IDaSvrCommands Interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaSvrCommands : IDispatch {
		[id(DISPID_IAgentCommands_GetCommand)] HRESULT GetCommand ([in] long dwCommandID, [out] IUnknown** ppunkCommand);
		[id(DISPID_IAgentCommands_GetCount)] HRESULT GetCount ([out] long* pdwCount);
		[id(DISPID_IAgentCommands_SetCaption)] HRESULT SetCaption ([in] BSTR bszCaption);
		[id(DISPID_IAgentCommands_GetCaption)] HRESULT GetCaption ([out] BSTR* pbszCaption);
		[id(DISPID_IAgentCommands_SetVoice)] HRESULT SetVoice ([in] BSTR bszVoice);
		[id(DISPID_IAgentCommands_GetVoice)] HRESULT GetVoice ([out] BSTR* pbszVoice);
		[id(DISPID_IAgentCommands_SetVisible)] HRESULT SetVisible ([in] long bVisible);
		[id(DISPID_IAgentCommands_GetVisible)] HRESULT GetVisible ([out] long* pbVisible);
		[id(DISPID_IAgentCommands_Add)] HRESULT Add ([in] BSTR bszCaption, [in] BSTR bszVoice, [in] long bEnabled, [in] long bVisible, [out] long* pdwID);
		[id(DISPID_IAgentCommands_Insert)] HRESULT Insert ([in] BSTR bszCaption, [in] BSTR bszVoice, [in] long bEnabled, [in] long bVisible, [in] long dwRefID, [in] long bBefore, [out] long* pdwID);
		[id(DISPID_IAgentCommands_Remove)] HRESULT Remove ([in] long dwID);
		[id(DISPID_IAgentCommands_RemoveAll)] HRESULT RemoveAll ();

		[id(DISPID_IAgentCommandsEx_GetCommandEx)] HRESULT GetCommandEx ([in] long dwCommandID, [out] IDaSvrCommand** ppCommandEx);
		[id(DISPID_IAgentCommandsEx_SetDefaultID)] HRESULT SetDefaultID([in] long dwID);
		[id(DISPID_IAgentCommandsEx_GetDefaultID)] HRESULT GetDefaultID([out] long* pdwID);
		[id(DISPID_IAgentCommandsEx_SetHelpContextID), hidden] HRESULT SetHelpContextID([in] long ulHelpID);
		[id(DISPID_IAgentCommandsEx_GetHelpContextID), hidden] HRESULT GetHelpContextID([out] long* pulHelpID);
		[id(DISPID_IAgentCommandsEx_SetFontName)] HRESULT SetFontName ([in] BSTR bszFontName);
		[id(DISPID_IAgentCommandsEx_GetFontName)] HRESULT GetFontName ([out] BSTR* pbszFontName);
		[id(DISPID_IAgentCommandsEx_SetFontSize)] HRESULT SetFontSize ([in] long lFontSize);
		[id(DISPID_IAgentCommandsEx_GetFontSize)] HRESULT GetFontSize ([out] long* lFontSize);
		[id(DISPID_IAgentCommandsEx_SetVoiceCaption)] HRESULT SetVoiceCaption ([in] BSTR bszVoiceCaption);
		[id(DISPID_IAgentCommandsEx_GetVoiceCaption)] HRESULT GetVoiceCaption ([out] BSTR* bszVoiceCaption);
		[id(DISPID_IAgentCommandsEx_AddEx)] HRESULT AddEx ([in] BSTR bszCaption, [in] BSTR bszVoice, [in] BSTR bszVoiceCaption, [in] long bEnabled, [in] long bVisible, [in] long ulHelpID, [out] long* pdwID);
		[id(DISPID_IAgentCommandsEx_InsertEx)] HRESULT InsertEx ([in] BSTR bszCaption, [in] BSTR bszVoice, [in] BSTR bszVoiceCaption, [in] long bEnabled, [in] long bVisible, [in] long ulHelpID, [in] long dwRefID, [in] long bBefore, [out] long* pdwID);
		[id(DISPID_IAgentCommandsEx_SetGlobalVoiceCommandsEnabled)] HRESULT SetGlobalVoiceCommandsEnabled ([in] long bEnable);
		[id(DISPID_IAgentCommandsEx_GetGlobalVoiceCommandsEnabled)] HRESULT GetGlobalVoiceCommandsEnabled ([out] long* pbEnabled);
	};

	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IAgentSpeechInputProperties_GetInstalled = 0x60020000;
	const DISPID DISPID_IAgentSpeechInputProperties_GetEnabled = 0x60020001;
	const DISPID DISPID_IAgentSpeechInputProperties_GetHotKey = 0x60020002;
	const DISPID DISPID_IAgentSpeechInputProperties_GetLCID = 0x60020003;
	const DISPID DISPID_IAgentSpeechInputProperties_GetEngine = 0x60020004;
	const DISPID DISPID_IAgentSpeechInputProperties_SetEngine = 0x60020005;
	const DISPID DISPID_IAgentSpeechInputProperties_GetListeningTip = 0x60020006;

	[
		odl,
		uuid(1147E50C-A208-11DE-ABF2-002421116FB2),
		helpstring ("IDaSvrSpeechInput Interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaSvrSpeechInput : IDispatch
	{
		[id(DISPID_IAgentSpeechInputProperties_GetInstalled), hidden] HRESULT GetInstalled ([out] long* pbInstalled);
		[id(DISPID_IAgentSpeechInputProperties_GetEnabled)] HRESULT GetEnabled ([out] long* pbEnabled);
		[id(DISPID_IAgentSpeechInputProperties_GetHotKey)] HRESULT GetHotKey ([out] BSTR* pbszHotCharKey);
		[id(DISPID_IAgentSpeechInputProperties_GetLCID), hidden] HRESULT GetLCID([out] unsigned long* plcidCurrent);
		[id(DISPID_IAgentSpeechInputProperties_GetEngine), hidden] HRESULT GetEngine ([out] BSTR* pbszEngine);
		[id(DISPID_IAgentSpeechInputProperties_SetEngine), hidden] HRESULT SetEngine ([in] BSTR bszEngine);
		[id(DISPID_IAgentSpeechInputProperties_GetListeningTip)] HRESULT GetListeningTip ([out] long* pbListeningTip);
	};

	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IAgentAudioOutputProperties_GetEnabled = 0x60020000;
	const DISPID DISPID_IAgentAudioOutputProperties_GetUsingSoundEffects = 0x60020001;

	const DISPID DISPID_IAgentAudioOutputPropertiesEx_GetStatus = 0x60030000;

	[
		odl,
		uuid(1147E50B-A208-11DE-ABF2-002421116FB2),
		helpstring ("IDaSvrAudioOutput Interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaSvrAudioOutput : IDispatch
	{
		[id(DISPID_IAgentAudioOutputProperties_GetEnabled)] HRESULT GetEnabled ([out] long* pbEnabled);
		[id(DISPID_IAgentAudioOutputProperties_GetUsingSoundEffects)] HRESULT GetUsingSoundEffects ([out] long* pbUsingSoundEffects);
		[id(DISPID_IAgentAudioOutputPropertiesEx_GetStatus), hidden] HRESULT GetStatus ([out] long* plStatus);
	};

	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_ISvrPropertySheet_GetVisible = 0x60020000;
	const DISPID DISPID_ISvrPropertySheet_SetVisible = 0x60020001;
	const DISPID DISPID_ISvrPropertySheet_GetPosition = 0x60020002;
	const DISPID DISPID_ISvrPropertySheet_GetSize = 0x60020003;
	const DISPID DISPID_ISvrPropertySheet_GetPage = 0x60020004;
	const DISPID DISPID_ISvrPropertySheet_SetPage = 0x60020005;

	[
		odl,
		uuid(1147E50A-A208-11DE-ABF2-002421116FB2),
		helpstring ("IDaSvrPropertySheet Interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaSvrPropertySheet : IDispatch
	{
		[id(DISPID_ISvrPropertySheet_GetVisible)] HRESULT GetVisible ([out] long* pbVisible);
		[id(DISPID_ISvrPropertySheet_SetVisible)] HRESULT SetVisible ([in] long bVisible);
		[id(DISPID_ISvrPropertySheet_GetPosition)] HRESULT GetPosition ([out] long* plLeft, [out] long* plTop);
		[id(DISPID_ISvrPropertySheet_GetSize)] HRESULT GetSize ([out] long* plWidth, [out] long* plHeight);
		[id(DISPID_ISvrPropertySheet_GetPage)] HRESULT GetPage ([out] BSTR* pbszPage);
		[id(DISPID_ISvrPropertySheet_SetPage)] HRESULT SetPage ([in] BSTR bszPage);
	};

	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IAgentBalloon_GetEnabled = 0x60020000;
	const DISPID DISPID_IAgentBalloon_GetNumLines = 0x60020001;
	const DISPID DISPID_IAgentBalloon_GetNumCharsPerLine = 0x60020002;
	const DISPID DISPID_IAgentBalloon_GetFontName = 0x60020003;
	const DISPID DISPID_IAgentBalloon_GetFontSize = 0x60020004;
	const DISPID DISPID_IAgentBalloon_GetFontBold = 0x60020005;
	const DISPID DISPID_IAgentBalloon_GetFontItalic = 0x60020006;
	const DISPID DISPID_IAgentBalloon_GetFontStrikethru = 0x60020007;
	const DISPID DISPID_IAgentBalloon_GetFontUnderline = 0x60020008;
	const DISPID DISPID_IAgentBalloon_GetForeColor = 0x60020009;
	const DISPID DISPID_IAgentBalloon_GetBackColor = 0x6002000a;
	const DISPID DISPID_IAgentBalloon_GetBorderColor = 0x6002000b;
	const DISPID DISPID_IAgentBalloon_SetVisible = 0x6002000c;
	const DISPID DISPID_IAgentBalloon_GetVisible = 0x6002000d;
	const DISPID DISPID_IAgentBalloon_SetFontName = 0x6002000e;
	const DISPID DISPID_IAgentBalloon_SetFontSize = 0x6002000f;
	const DISPID DISPID_IAgentBalloon_SetFontCharSet = 0x60020010;
	const DISPID DISPID_IAgentBalloon_GetFontCharSet = 0x60020011;

	const DISPID DISPID_IAgentBalloonEx_SetStyle = 0x60030000;
	const DISPID DISPID_IAgentBalloonEx_GetStyle = 0x60030001;
	const DISPID DISPID_IAgentBalloonEx_SetNumLines = 0x60030002;
	const DISPID DISPID_IAgentBalloonEx_SetNumCharsPerLine = 0x60030003;

	[
		odl,
		uuid(1147E509-A208-11DE-ABF2-002421116FB2),
		helpstring ("IDaSvrBalloon Interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaSvrBalloon : IDispatch
	{
		[id(DISPID_IAgentBalloon_GetEnabled)] HRESULT GetEnabled ([out] long* pbEnabled);
		[id(DISPID_IAgentBalloon_GetNumLines)] HRESULT GetNumLines ([out] long* plLines);
		[id(DISPID_IAgentBalloon_GetNumCharsPerLine)] HRESULT GetNumCharsPerLine ([out] long* plCharsPerLine);
		[id(DISPID_IAgentBalloon_GetFontName)] HRESULT GetFontName ([out] BSTR* pbszFontName);
		[id(DISPID_IAgentBalloon_GetFontSize)] HRESULT GetFontSize ([out] long* plFontSize);
		[id(DISPID_IAgentBalloon_GetFontBold)] HRESULT GetFontBold ([out] long* pbFontBold);
		[id(DISPID_IAgentBalloon_GetFontItalic)] HRESULT GetFontItalic ([out] long* pbFontItalic);
		[id(DISPID_IAgentBalloon_GetFontStrikethru)] HRESULT GetFontStrikethru ([out] long* pbFontStrikethru);
		[id(DISPID_IAgentBalloon_GetFontUnderline)] HRESULT GetFontUnderline ([out] long* pbFontUnderline);
		[id(DISPID_IAgentBalloon_GetForeColor)] HRESULT GetForeColor ([out] long* plFGColor);
		[id(DISPID_IAgentBalloon_GetBackColor)] HRESULT GetBackColor ([out] long* plBGColor);
		[id(DISPID_IAgentBalloon_GetBorderColor)] HRESULT GetBorderColor ([out] long* plBorderColor);
		[id(DISPID_IAgentBalloon_SetVisible)] HRESULT SetVisible ([in] long bVisible);
		[id(DISPID_IAgentBalloon_GetVisible)] HRESULT GetVisible ([out] long* pbVisible);
		[id(DISPID_IAgentBalloon_SetFontName)] HRESULT SetFontName ([in] BSTR bszFontName);
		[id(DISPID_IAgentBalloon_SetFontSize)] HRESULT SetFontSize ([in] long lFontSize);
		[id(DISPID_IAgentBalloon_SetFontCharSet)] HRESULT SetFontCharSet ([in] short sFontCharSet);
		[id(DISPID_IAgentBalloon_GetFontCharSet)] HRESULT GetFontCharSet ([out] short* psFontCharSet);

		[id(DISPID_IAgentBalloonEx_SetStyle)] HRESULT SetStyle ([in] long lStyle);
		[id(DISPID_IAgentBalloonEx_GetStyle)] HRESULT GetStyle ([out] long* plStyle);
		[id(DISPID_IAgentBalloonEx_SetNumLines)] HRESULT SetNumLines ([in] long lLines);
		[id(DISPID_IAgentBalloonEx_SetNumCharsPerLine)] HRESULT SetNumCharsPerLine ([in] long lCharsPerLine);
	};

	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IAgentCharacter_GetVisible = 0x60020000;
	const DISPID DISPID_IAgentCharacter_SetPosition = 0x60020001;
	const DISPID DISPID_IAgentCharacter_GetPosition = 0x60020002;
	const DISPID DISPID_IAgentCharacter_SetSize = 0x60020003;
	const DISPID DISPID_IAgentCharacter_GetSize = 0x60020004;
	const DISPID DISPID_IAgentCharacter_GetName = 0x60020005;
	const DISPID DISPID_IAgentCharacter_GetDescription = 0x60020006;
	const DISPID DISPID_IAgentCharacter_GetTTSSpeed = 0x60020007;
	const DISPID DISPID_IAgentCharacter_GetTTSPitch = 0x60020008;
	const DISPID DISPID_IAgentCharacter_Activate = 0x60020009;
	const DISPID DISPID_IAgentCharacter_SetIdleOn = 0x6002000a;
	const DISPID DISPID_IAgentCharacter_GetIdleOn = 0x6002000b;
	const DISPID DISPID_IAgentCharacter_Prepare = 0x6002000c;
	const DISPID DISPID_IAgentCharacter_Play = 0x6002000d;
	const DISPID DISPID_IAgentCharacter_Stop = 0x6002000e;
	const DISPID DISPID_IAgentCharacter_StopAll = 0x6002000f;
	const DISPID DISPID_IAgentCharacter_Wait = 0x60020010;
	const DISPID DISPID_IAgentCharacter_Interrupt = 0x60020011;
	const DISPID DISPID_IAgentCharacter_Show = 0x60020012;
	const DISPID DISPID_IAgentCharacter_Hide = 0x60020013;
	const DISPID DISPID_IAgentCharacter_Speak = 0x60020014;
	const DISPID DISPID_IAgentCharacter_MoveTo = 0x60020015;
	const DISPID DISPID_IAgentCharacter_GestureAt = 0x60020016;
	const DISPID DISPID_IAgentCharacter_GetMoveCause = 0x60020017;
	const DISPID DISPID_IAgentCharacter_GetVisibilityCause = 0x60020018;
	const DISPID DISPID_IAgentCharacter_HasOtherClients = 0x60020019;
	const DISPID DISPID_IAgentCharacter_SetSoundEffectsOn = 0x6002001a;
	const DISPID DISPID_IAgentCharacter_GetSoundEffectsOn = 0x6002001b;
	const DISPID DISPID_IAgentCharacter_SetName = 0x6002001c;
	const DISPID DISPID_IAgentCharacter_SetDescription = 0x6002001d;
	const DISPID DISPID_IAgentCharacter_GetExtraData = 0x6002001e;

	const DISPID DISPID_IAgentCharacterEx_ShowPopupMenu = 0x60030000;
	const DISPID DISPID_IAgentCharacterEx_SetAutoPopupMenu = 0x60030001;
	const DISPID DISPID_IAgentCharacterEx_GetAutoPopupMenu = 0x60030002;
	const DISPID DISPID_IAgentCharacterEx_GetHelpFileName = 0x60030003;
	const DISPID DISPID_IAgentCharacterEx_SetHelpFileName = 0x60030004;
	const DISPID DISPID_IAgentCharacterEx_SetHelpModeOn = 0x60030005;
	const DISPID DISPID_IAgentCharacterEx_GetHelpModeOn = 0x60030006;
	const DISPID DISPID_IAgentCharacterEx_SetHelpContextID = 0x60030007;
	const DISPID DISPID_IAgentCharacterEx_GetHelpContextID = 0x60030008;
	const DISPID DISPID_IAgentCharacterEx_GetActive = 0x60030009;
	const DISPID DISPID_IAgentCharacterEx_Listen = 0x6003000a;
	const DISPID DISPID_IAgentCharacterEx_SetLanguageID = 0x6003000b;
	const DISPID DISPID_IAgentCharacterEx_GetLanguageID = 0x6003000c;
	const DISPID DISPID_IAgentCharacterEx_GetTTSModeID = 0x6003000d;
	const DISPID DISPID_IAgentCharacterEx_SetTTSModeID = 0x6003000e;
	const DISPID DISPID_IAgentCharacterEx_GetSRModeID = 0x6003000f;
	const DISPID DISPID_IAgentCharacterEx_SetSRModeID = 0x60030010;
	const DISPID DISPID_IAgentCharacterEx_GetGUID = 0x60030011;
	const DISPID DISPID_IAgentCharacterEx_GetOriginalSize = 0x60030012;
	const DISPID DISPID_IAgentCharacterEx_Think = 0x60030013;
	const DISPID DISPID_IAgentCharacterEx_GetVersion = 0x60030014;
	const DISPID DISPID_IAgentCharacterEx_GetAnimationNames = 0x60030015;
	const DISPID DISPID_IAgentCharacterEx_GetSRStatus = 0x60030016;

	[
		odl,
		uuid(1147E504-A208-11DE-ABF2-002421116FB2),
		helpstring ("IDaSvrCharacter Interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaSvrCharacter : IDispatch
	{
		[id(DISPID_IAgentCharacter_GetVisible)] HRESULT GetVisible ([out] long* pbVisible);
		[id(DISPID_IAgentCharacter_SetPosition)] HRESULT SetPosition ([in] long lLeft, [in] long lTop);
		[id(DISPID_IAgentCharacter_GetPosition)] HRESULT GetPosition ([out] long* plLeft, [out] long* plTop);
		[id(DISPID_IAgentCharacter_SetSize)] HRESULT SetSize ([in] long lWidth, [in] long lHeight);
		[id(DISPID_IAgentCharacter_GetSize)] HRESULT GetSize ([out] long* plWidth, [out] long* plHeight);
		[id(DISPID_IAgentCharacter_GetName)] HRESULT GetName ([out] BSTR* pbszName);
		[id(DISPID_IAgentCharacter_GetDescription)] HRESULT GetDescription ([out] BSTR* pbszDescription);
		[id(DISPID_IAgentCharacter_GetTTSSpeed)] HRESULT GetTTSSpeed ([out] long* pdwSpeed);
		[id(DISPID_IAgentCharacter_GetTTSPitch)] HRESULT GetTTSPitch ([out] short* pwPitch);
		[id(DISPID_IAgentCharacter_Activate)] HRESULT Activate ([in] short sState);
		[id(DISPID_IAgentCharacter_SetIdleOn)] HRESULT SetIdleOn ([in] long bOn);
		[id(DISPID_IAgentCharacter_GetIdleOn)] HRESULT GetIdleOn ([out] long* pbOn);
		[id(DISPID_IAgentCharacter_Prepare)] HRESULT Prepare ([in] long dwType, [in] BSTR bszName, [in] long bQueue, [out] long* pdwReqID);
		[id(DISPID_IAgentCharacter_Play)] HRESULT Play ([in] BSTR bszAnimation, [out] long* pdwReqID);
		[id(DISPID_IAgentCharacter_Stop)] HRESULT Stop ([in] long dwReqID);
		[id(DISPID_IAgentCharacter_StopAll)] HRESULT StopAll ([in] long lTypes);
		[id(DISPID_IAgentCharacter_Wait)] HRESULT Wait ([in] long dwReqID, [out] long* pdwReqID);
		[id(DISPID_IAgentCharacter_Interrupt)] HRESULT Interrupt ([in] long dwReqID, [out] long* pdwReqID);
		[id(DISPID_IAgentCharacter_Show)] HRESULT Show ([in] long bFast, [out] long* pdwReqID);
		[id(DISPID_IAgentCharacter_Hide)] HRESULT Hide ([in] long bFast, [out] long* pdwReqID);
		[id(DISPID_IAgentCharacter_Speak)] HRESULT Speak ([in] BSTR bszText, [in] BSTR bszUrl, [out] long* pdwReqID);
		[id(DISPID_IAgentCharacter_MoveTo)] HRESULT MoveTo ([in] short x, [in] short y, [in] long lSpeed, [out] long* pdwReqID);
		[id(DISPID_IAgentCharacter_GestureAt)] HRESULT GestureAt ([in] short x, [in] short y, [out] long* pdwReqID);
		[id(DISPID_IAgentCharacter_GetMoveCause)] HRESULT GetMoveCause ([out] long* pdwCause);
		[id(DISPID_IAgentCharacter_GetVisibilityCause)] HRESULT GetVisibilityCause ([out] long* pdwCause);
		[id(DISPID_IAgentCharacter_HasOtherClients)] HRESULT HasOtherClients ([out] long* plNumOtherClients);
		[id(DISPID_IAgentCharacter_SetSoundEffectsOn)] HRESULT SetSoundEffectsOn ([in] long bOn);
		[id(DISPID_IAgentCharacter_GetSoundEffectsOn)] HRESULT GetSoundEffectsOn ([out] long* pbOn);
		[id(DISPID_IAgentCharacter_SetName)] HRESULT SetName ([in] BSTR bszName);
		[id(DISPID_IAgentCharacter_SetDescription)] HRESULT SetDescription ([in] BSTR bszDescription);
		[id(DISPID_IAgentCharacter_GetExtraData)] HRESULT GetExtraData ([out] BSTR* pbszExtraData);

		[id(DISPID_IAgentCharacterEx_ShowPopupMenu)] HRESULT ShowPopupMenu ([in] short x, [in] short y);
		[id(DISPID_IAgentCharacterEx_SetAutoPopupMenu)] HRESULT SetAutoPopupMenu ([in] long bAutoPopupMenu);
		[id(DISPID_IAgentCharacterEx_GetAutoPopupMenu)] HRESULT GetAutoPopupMenu ([out] long* pbAutoPopupMenu);
		[id(DISPID_IAgentCharacterEx_GetHelpFileName), hidden] HRESULT GetHelpFileName ([out] BSTR* pbszName);
		[id(DISPID_IAgentCharacterEx_SetHelpFileName), hidden] HRESULT SetHelpFileName ([in] BSTR bszName);
		[id(DISPID_IAgentCharacterEx_SetHelpModeOn), hidden] HRESULT SetHelpModeOn ([in] long bHelpModeOn);
		[id(DISPID_IAgentCharacterEx_GetHelpModeOn), hidden] HRESULT GetHelpModeOn ([out] long* pbHelpModeOn);
		[id(DISPID_IAgentCharacterEx_SetHelpContextID), hidden] HRESULT SetHelpContextID([in] long ulID);
		[id(DISPID_IAgentCharacterEx_GetHelpContextID), hidden] HRESULT GetHelpContextID([out] long* pulID);
		[id(DISPID_IAgentCharacterEx_GetActive)] HRESULT GetActive ([out] short* psState);
		[id(DISPID_IAgentCharacterEx_Listen)] HRESULT Listen ([in] long bListen);
		[id(DISPID_IAgentCharacterEx_SetLanguageID)] HRESULT SetLanguageID([in] long langid);
		[id(DISPID_IAgentCharacterEx_GetLanguageID)] HRESULT GetLanguageID([out] long* plangid);
		[id(DISPID_IAgentCharacterEx_GetTTSModeID)] HRESULT GetTTSModeID([out] BSTR* pbszModeID);
		[id(DISPID_IAgentCharacterEx_SetTTSModeID)] HRESULT SetTTSModeID([in] BSTR bszModeID);
		[id(DISPID_IAgentCharacterEx_GetSRModeID)] HRESULT GetSRModeID([out] BSTR* pbszModeID);
		[id(DISPID_IAgentCharacterEx_SetSRModeID)] HRESULT SetSRModeID([in] BSTR bszModeID);
		[id(DISPID_IAgentCharacterEx_GetGUID)] HRESULT GetGUID([out] BSTR* pbszID);
		[id(DISPID_IAgentCharacterEx_GetOriginalSize)] HRESULT GetOriginalSize ([out] long* plWidth, [out] long* plHeight);
		[id(DISPID_IAgentCharacterEx_Think)] HRESULT Think ([in] BSTR bszText, [out] long* pdwReqID);
		[id(DISPID_IAgentCharacterEx_GetVersion)] HRESULT GetVersion ([out] short* psMajor, [out] short* psMinor);
		[id(DISPID_IAgentCharacterEx_GetAnimationNames)] HRESULT GetAnimationNames ([out] IUnknown** punkEnum);
		[id(DISPID_IAgentCharacterEx_GetSRStatus)] HRESULT GetSRStatus ([out] long* plStatus);
	};

	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IAgentNotifySink_Command = 0x60020000;
	const DISPID DISPID_IAgentNotifySink_ActivateInputState = 0x60020001;
	const DISPID DISPID_IAgentNotifySink_Restart = 0x60020002;
	const DISPID DISPID_IAgentNotifySink_Shutdown = 0x60020003;
	const DISPID DISPID_IAgentNotifySink_VisibleState = 0x60020004;
	const DISPID DISPID_IAgentNotifySink_Click = 0x60020005;
	const DISPID DISPID_IAgentNotifySink_DblClick = 0x60020006;
	const DISPID DISPID_IAgentNotifySink_DragStart = 0x60020007;
	const DISPID DISPID_IAgentNotifySink_DragComplete = 0x60020008;
	const DISPID DISPID_IAgentNotifySink_RequestStart = 0x60020009;
	const DISPID DISPID_IAgentNotifySink_RequestComplete = 0x6002000a;
	const DISPID DISPID_IAgentNotifySink_BookMark = 0x6002000b;
	const DISPID DISPID_IAgentNotifySink_Idle = 0x6002000c;
	const DISPID DISPID_IAgentNotifySink_Move = 0x6002000d;
	const DISPID DISPID_IAgentNotifySink_Size = 0x6002000e;
	const DISPID DISPID_IAgentNotifySink_BalloonVisibleState = 0x6002000f;

	[
		odl,
		uuid(1147E503-A208-11DE-ABF2-002421116FB2),
		helpstring ("IDaSvrNotifySink15 Interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaSvrNotifySink15 : IDispatch
	{
		[id(DISPID_IAgentNotifySink_Command)] HRESULT Command ([in] long dwCommandID, [in] IUnknown* punkUserInput);
		[id(DISPID_IAgentNotifySink_ActivateInputState)] HRESULT ActivateInputState ([in] long dwCharID, [in] long bActivated);
		[id(DISPID_IAgentNotifySink_Restart), hidden] HRESULT Restart ();
		[id(DISPID_IAgentNotifySink_Shutdown), hidden] HRESULT Shutdown ();
		[id(DISPID_IAgentNotifySink_VisibleState)] HRESULT VisibleState ([in] long dwCharID, [in] long bVisible, [in] long dwCause);
		[id(DISPID_IAgentNotifySink_Click)] HRESULT Click ([in] long dwCharID, [in] short fwKeys, [in] long x, [in] long y);
		[id(DISPID_IAgentNotifySink_DblClick)] HRESULT DblClick ([in] long dwCharID, [in] short fwKeys, [in] long x, [in] long y);
		[id(DISPID_IAgentNotifySink_DragStart)] HRESULT DragStart ([in] long dwCharID, [in] short fwKeys, [in] long x, [in] long y);
		[id(DISPID_IAgentNotifySink_DragComplete)] HRESULT DragComplete ([in] long dwCharID, [in] short fwKeys, [in] long x, [in] long y);
		[id(DISPID_IAgentNotifySink_RequestStart)] HRESULT RequestStart ([in] long dwRequestID);
		[id(DISPID_IAgentNotifySink_RequestComplete)] HRESULT RequestComplete ([in] long dwRequestID, [in] long hrStatus);
		[id(DISPID_IAgentNotifySink_BookMark)] HRESULT BookMark ([in] long dwBookMarkID);
		[id(DISPID_IAgentNotifySink_Idle)] HRESULT Idle ([in] long dwCharID, [in] long bStart);
		[id(DISPID_IAgentNotifySink_Move)] HRESULT Move ([in] long dwCharID, [in] long x, [in] long y, [in] long dwCause);
		[id(DISPID_IAgentNotifySink_Size)] HRESULT Size ([in] long dwCharID, [in] long lWidth, [in] long lHeight);
		[id(DISPID_IAgentNotifySink_BalloonVisibleState)] HRESULT BalloonVisibleState ([in] long dwCharID, [in] long bVisible);
	};

	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IAgentNotifySinkEx_HelpComplete = 0x60030000;
	const DISPID DISPID_IAgentNotifySinkEx_ListeningState = 0x60030001;
	const DISPID DISPID_IAgentNotifySinkEx_DefaultCharacterChange = 0x60030002;
	const DISPID DISPID_IAgentNotifySinkEx_AgentPropertyChange = 0x60030003;
	const DISPID DISPID_IAgentNotifySinkEx_ActiveClientChange = 0x60030004;

	[
		odl,
		uuid(1147E516-A208-11DE-ABF2-002421116FB2),
		helpstring ("IDaSvrNotifySink Interface"),
		dual,
		oleautomation
	]
	interface IDaSvrNotifySink : IDaSvrNotifySink15
	{
		[id(DISPID_IAgentNotifySinkEx_HelpComplete), hidden] HRESULT HelpComplete ([in] long dwCharID, [in] long dwCommandID, [in] long dwCause);
		[id(DISPID_IAgentNotifySinkEx_ListeningState)] HRESULT ListeningState ([in] long dwCharID, [in] long bListening, [in] long dwCause);
		[id(DISPID_IAgentNotifySinkEx_DefaultCharacterChange)] HRESULT DefaultCharacterChange ([in] BSTR bszGUID);
		[id(DISPID_IAgentNotifySinkEx_AgentPropertyChange)] HRESULT AgentPropertyChange ();
		[id(DISPID_IAgentNotifySinkEx_ActiveClientChange)] HRESULT ActiveClientChange ([in] long dwCharID, [in] long lStatus);
	};

	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_ISvrCommandWindow_SetVisible = 0x60020000;
	const DISPID DISPID_ISvrCommandWindow_GetVisible = 0x60020001;
	const DISPID DISPID_ISvrCommandWindow_GetPosition = 0x60020002;
	const DISPID DISPID_ISvrCommandWindow_GetSize = 0x60020003;

	[
		odl,
		uuid(1147E507-A208-11DE-ABF2-002421116FB2),
		helpstring ("IDaSvrCommandsWindow Interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaSvrCommandsWindow : IDispatch
	{
		[id(DISPID_ISvrCommandWindow_SetVisible)] HRESULT SetVisible ([in] long bVisible);
		[id(DISPID_ISvrCommandWindow_GetVisible)] HRESULT GetVisible ([out] long* pbVisible);
		[id(DISPID_ISvrCommandWindow_GetPosition)] HRESULT GetPosition ([out] long* plLeft, [out] long* plTop);
		[id(DISPID_ISvrCommandWindow_GetSize)] HRESULT GetSize ([out] long* plWidth, [out] long* plHeight);
	};

	/////////////////////////////////////////////////////////////////////////////
	// Version 1.1 Interfaces
	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IDaSvrCharacterFiles_FilePaths = DISPID_VALUE;
	const DISPID DISPID_IDaSvrCharacterFiles_SearchPath = 0x60020000;
	const DISPID DISPID_IDaSvrCharacterFiles_DefaultSearchPath = 0x60020001;
	const DISPID DISPID_IDaSvrCharacterFiles_Filter = 0x60020003;

	[
		odl,
		uuid(1147E523-A208-11DE-ABF2-002421116FB2),
		helpstring ("IDaSvrCharacterFiles Interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaSvrCharacterFiles : IDispatch
	{
		[id(DISPID_IDaSvrCharacterFiles_FilePaths), propget] HRESULT FilePaths ([out, retval] SAFEARRAY(BSTR) *FilePaths);
		[id(DISPID_IDaSvrCharacterFiles_SearchPath), propget] HRESULT SearchPath ([out, retval] BSTR *SearchPath);
		[id(DISPID_IDaSvrCharacterFiles_SearchPath), propput] HRESULT SearchPath ([in] BSTR SearchPath);
		[id(DISPID_IDaSvrCharacterFiles_DefaultSearchPath), propget] HRESULT DefaultSearchPath ([out, retval] BSTR *DefaultSearchPath);
		[id(DISPID_IDaSvrCharacterFiles_Filter), propget] HRESULT Filter ([out, retval] long *Filter);
		[id(DISPID_IDaSvrCharacterFiles_Filter), propput] HRESULT Filter ([in] long Filter);
	};

	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IDaSvrSpeechEngine_GetTTSModeID = 0x60020000;
	const DISPID DISPID_IDaSvrSpeechEngine_GetDisplayName = 0x60020001;
	const DISPID DISPID_IDaSvrSpeechEngine_GetManufacturer = 0x60020002;
	const DISPID DISPID_IDaSvrSpeechEngine_GetVersion = 0x60020003;
	const DISPID DISPID_IDaSvrSpeechEngine_GetGender = 0x60020004;
	const DISPID DISPID_IDaSvrSpeechEngine_GetLanguageID = 0x60020005;
	const DISPID DISPID_IDaSvrSpeechEngine_GetLanguageName = 0x60020006;

	[
		odl,
		uuid(1147E519-A208-11DE-ABF2-002421116FB2),
		helpstring ("IDaSvrSpeechEngine Interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaSvrSpeechEngine : IDispatch
	{
		[id(DISPID_IDaSvrSpeechEngine_GetTTSModeID)] HRESULT GetTTSModeID ([out] BSTR* TTSModeID);
		[id(DISPID_IDaSvrSpeechEngine_GetDisplayName)] HRESULT GetDisplayName ([out] BSTR* DisplayName);
		[id(DISPID_IDaSvrSpeechEngine_GetManufacturer)] HRESULT GetManufacturer ([out] BSTR* Manufacturer);
		[id(DISPID_IDaSvrSpeechEngine_GetVersion)] HRESULT GetVersion ([out] short* MajorVersion, [out] short* MinorVersion);
		[id(DISPID_IDaSvrSpeechEngine_GetGender)] HRESULT GetGender ([out] short* Gender);
		[id(DISPID_IDaSvrSpeechEngine_GetLanguageID)] HRESULT GetLanguageID ([out] long* LanguageID);
		[id(DISPID_IDaSvrSpeechEngine_GetLanguageName)] HRESULT GetLanguageName ([out] BSTR* LanguageName, [in, defaultvalue(TRUE)] boolean EnglishName);
	};

	/////////////////////////////////////////////////////////////////////////////

	[
		odl,
		uuid(1147E51A-A208-11DE-ABF2-002421116FB2),
		helpstring ("IDaSvrSpeechEngines Interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaSvrSpeechEngines : IDispatch
	{
		[id(DISPID_VALUE), propget] HRESULT Item ([in] long Index, [out, retval] IDaSvrSpeechEngine ** SpeechEngine);
		[id(DISPID_COLLECT), propget] HRESULT Count ([out, retval] long * Count);
	};

	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IDaSvrRecognitionEngine_GetSRModeID = 0x60020000;
	const DISPID DISPID_IDaSvrRecognitionEngine_GetDisplayName = 0x60020001;
	const DISPID DISPID_IDaSvrRecognitionEngine_GetManufacturer = 0x60020002;
	const DISPID DISPID_IDaSvrRecognitionEngine_GetVersion = 0x60020003;
	const DISPID DISPID_IDaSvrRecognitionEngine_GetLanguageID = 0x60020004;
	const DISPID DISPID_IDaSvrRecognitionEngine_GetLanguageName = 0x60020005;
	const DISPID DISPID_IDaSvrRecognitionEngine_GetLanguageIDs = 0x60020006;
	const DISPID DISPID_IDaSvrRecognitionEngine_GetLanguageNames = 0x60020007;

	[
		odl,
		uuid(1147E51B-A208-11DE-ABF2-002421116FB2),
		helpstring ("IDaSvrRecognitionEngine Interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaSvrRecognitionEngine : IDispatch
	{
		[id(DISPID_IDaSvrRecognitionEngine_GetSRModeID)] HRESULT GetSRModeID ([out] BSTR* SRModeID);
		[id(DISPID_IDaSvrRecognitionEngine_GetDisplayName)] HRESULT GetDisplayName ([out] BSTR* DisplayName);
		[id(DISPID_IDaSvrRecognitionEngine_GetManufacturer)] HRESULT GetManufacturer ([out] BSTR* Manufacturer);
		[id(DISPID_IDaSvrRecognitionEngine_GetVersion)] HRESULT GetVersion ([out] short* MajorVersion, [out] short* MinorVersion);
		[id(DISPID_IDaSvrRecognitionEngine_GetLanguageID)] HRESULT GetLanguageID ([out] long* LanguageID);
		[id(DISPID_IDaSvrRecognitionEngine_GetLanguageName)] HRESULT GetLanguageName ([out] BSTR* LanguageName, [in, defaultvalue(TRUE)] boolean EnglishName);
		[id(DISPID_IDaSvrRecognitionEngine_GetLanguageIDs)] HRESULT GetLanguageIDs ([out] SAFEARRAY(long) * LanguageIDs);
		[id(DISPID_IDaSvrRecognitionEngine_GetLanguageNames)] HRESULT GetLanguageNames ([out] SAFEARRAY(BSTR) * LanguageNames, [in, defaultvalue(TRUE)] boolean EnglishNames);
	};

	/////////////////////////////////////////////////////////////////////////////

	[
		odl,
		uuid(1147E51C-A208-11DE-ABF2-002421116FB2),
		helpstring ("IDaSvrRecognitionEngines Interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaSvrRecognitionEngines : IDispatch
	{
		[id(DISPID_VALUE), propget] HRESULT Item ([in] long Index, [out, retval] IDaSvrRecognitionEngine ** RecognitionEngine);
		[id(DISPID_COLLECT), propget] HRESULT Count ([out, retval] long * Count);
	};

	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IDaServer2_GetCharacter2 = 0x60040000;
	const DISPID DISPID_IDaServer2_GetCharacterFiles = 0x60040001;
	const DISPID DISPID_IDaServer2_CharacterStyle = 0x60040002;
	const DISPID DISPID_IDaServer2_GetSpeechEngines = 0x60040003;
	const DISPID DISPID_IDaServer2_FindSpeechEngines = 0x60040004;
	const DISPID DISPID_IDaServer2_GetCharacterSpeechEngine = 0x60040005;
	const DISPID DISPID_IDaServer2_FindCharacterSpeechEngines = 0x60040006;
	const DISPID DISPID_IDaServer2_GetRecognitionEngines = 0x60040007;
	const DISPID DISPID_IDaServer2_FindRecognitionEngines = 0x60040008;
	const DISPID DISPID_IDaServer2_GetCharacterRecognitionEngine = 0x60040009;
	const DISPID DISPID_IDaServer2_FindCharacterRecognitionEngines = 0x6004000A;

	[
		odl,
		uuid(1147E51D-A208-11DE-ABF2-002421116FB2),
		helpstring ("IDaServer2 Interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaServer2 : IDaServer
	{
		[id(DISPID_IDaServer2_GetCharacter2)] HRESULT GetCharacter2 ([in] long CharacterID, [out, retval] IDaSvrCharacter2** Character2);
		[id(DISPID_IDaServer2_GetCharacterFiles)] HRESULT GetCharacterFiles ([out, retval] IDaSvrCharacterFiles** CharacterFiles);
		[id(DISPID_IDaServer2_CharacterStyle), propget] HRESULT CharacterStyle ([out, retval] long *CharacterStyle);
		[id(DISPID_IDaServer2_CharacterStyle), propput] HRESULT CharacterStyle ([in] long CharacterStyle);
		[id(DISPID_IDaServer2_GetSpeechEngines)] HRESULT GetSpeechEngines ([out, retval] IDaSvrSpeechEngines** SpeechEngines);
		[id(DISPID_IDaServer2_FindSpeechEngines)] HRESULT FindSpeechEngines ([in] long LanguageID, [in] short Gender, [out, retval] IDaSvrSpeechEngines** SpeechEngines);
		[id(DISPID_IDaServer2_GetCharacterSpeechEngine)] HRESULT GetCharacterSpeechEngine ([in] VARIANT LoadKey, [out, retval] IDaSvrSpeechEngine** SpeechEngine);
		[id(DISPID_IDaServer2_FindCharacterSpeechEngines)] HRESULT FindCharacterSpeechEngines ([in] VARIANT LoadKey, [in, defaultvalue(0)] long LanguageID, [out, retval] IDaSvrSpeechEngines** SpeechEngines);
		[id(DISPID_IDaServer2_GetRecognitionEngines)] HRESULT GetRecognitionEngines ([out, retval] IDaSvrRecognitionEngines** RecognitionEngines);
		[id(DISPID_IDaServer2_FindRecognitionEngines)] HRESULT FindRecognitionEngines ([in] long LanguageID, [out, retval] IDaSvrRecognitionEngines** RecognitionEngines);
		[id(DISPID_IDaServer2_GetCharacterRecognitionEngine)] HRESULT GetCharacterRecognitionEngine ([in] VARIANT LoadKey, [out, retval] IDaSvrRecognitionEngine** RecognitionEngine);
		[id(DISPID_IDaServer2_FindCharacterRecognitionEngines)] HRESULT FindCharacterRecognitionEngines ([in] VARIANT LoadKey, [in, defaultvalue(0)] long LanguageID, [out, retval] IDaSvrRecognitionEngines** RecognitionEngines);
	};

	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IDaSvrCharacter2_Style = 0x60040000;
	const DISPID DISPID_IDaSvrCharacter2_HasIcon = 0x60040001;
	const DISPID DISPID_IDaSvrCharacter2_GenerateIcon = 0x60040002;
	const DISPID DISPID_IDaSvrCharacter2_IconVisible = 0x60040003;
	const DISPID DISPID_IDaSvrCharacter2_GetIconIdentity = 0x60040004;
	const DISPID DISPID_IDaSvrCharacter2_SetIconIdentity = 0x60040005;
	const DISPID DISPID_IDaSvrCharacter2_IconIdentity = 0x60040006;
	const DISPID DISPID_IDaSvrCharacter2_IconTip = 0x60040007;
	const DISPID DISPID_IDaSvrCharacter2_GetSpeechEngine = 0x60040008;
	const DISPID DISPID_IDaSvrCharacter2_FindSpeechEngines = 0x60040009;
	const DISPID DISPID_IDaSvrCharacter2_GetRecognitionEngine = 0x6004000A;
	const DISPID DISPID_IDaSvrCharacter2_FindRecognitionEngines = 0x6004000B;

	[
		odl,
		uuid(1147E51E-A208-11DE-ABF2-002421116FB2),
		helpstring ("IDaSvrCharacter2 Interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaSvrCharacter2 : IDaSvrCharacter
	{
		[id(DISPID_IDaSvrCharacter2_Style), propget] HRESULT Style ([out, retval] long * Style);
		[id(DISPID_IDaSvrCharacter2_Style), propput] HRESULT Style ([in] long Style);
		[id(DISPID_IDaSvrCharacter2_HasIcon), propget] HRESULT HasIcon ([out, retval] boolean *HasIcon);
		[id(DISPID_IDaSvrCharacter2_GenerateIcon)] HRESULT GenerateIcon ([in, defaultvalue(0)] long ClipLeft, [in, defaultvalue(0)] long ClipTop, [in, defaultvalue(-1)] long ClipWidth, [in, defaultvalue(-1)] long ClipHeight);
		[id(DISPID_IDaSvrCharacter2_IconVisible), propget] HRESULT IconVisible ([out, retval] boolean * IconVisible);
		[id(DISPID_IDaSvrCharacter2_IconIdentity), propget] HRESULT IconIdentity ([out, retval] BSTR * IconIdentity);
		[id(DISPID_IDaSvrCharacter2_GetIconIdentity), hidden, restricted] HRESULT GetIconIdentity ([out] GUID * IconIdentity);
		[id(DISPID_IDaSvrCharacter2_SetIconIdentity), hidden, restricted] HRESULT SetIconIdentity ([in] const GUID * IconIdentity);
		[id(DISPID_IDaSvrCharacter2_IconIdentity), propput] HRESULT IconIdentity ([in] BSTR IconIdentity);
		[id(DISPID_IDaSvrCharacter2_IconTip), propget] HRESULT IconTip ([out, retval] BSTR * IconTip);
		[id(DISPID_IDaSvrCharacter2_IconTip), propput] HRESULT IconTip ([in] BSTR IconTip);
		[id(DISPID_IDaSvrCharacter2_GetSpeechEngine)] HRESULT GetSpeechEngine ([in, defaultvalue(FALSE)] boolean GetDefault, [out, retval] IDaSvrSpeechEngine** SpeechEngine);
		[id(DISPID_IDaSvrCharacter2_FindSpeechEngines)] HRESULT FindSpeechEngines ([in, defaultvalue(0)] long LanguageID, [out, retval] IDaSvrSpeechEngines** SpeechEngines);
		[id(DISPID_IDaSvrCharacter2_GetRecognitionEngine)] HRESULT GetRecognitionEngine ([in, defaultvalue(FALSE)] boolean GetDefault, [out, retval] IDaSvrRecognitionEngine** RecognitionEngine);
		[id(DISPID_IDaSvrCharacter2_FindRecognitionEngines)] HRESULT FindRecognitionEngines ([in, defaultvalue(0)] long LanguageID, [out, retval] IDaSvrRecognitionEngines** RecognitionEngines);
	}

	/////////////////////////////////////////////////////////////////////////////
	// Classes
	/////////////////////////////////////////////////////////////////////////////

	[
		uuid(1147E500-A208-11DE-ABF2-002421116FB2),
		helpstring("Agent Class")
	]
	coclass DaServer
	{
		[default] interface IDaServer2;
		interface IDaServer;
	};

	[
		uuid(1147E50D-A208-11DE-ABF2-002421116FB2),
		helpstring("Character Object"),
		noncreatable
	]
	coclass DaSvrCharacter
	{
		[default] interface IDaSvrCharacter2;
		interface IDaSvrCharacter;
	};

	[
		uuid(1147E50E-A208-11DE-ABF2-002421116FB2),
		helpstring("Command Object"),
		noncreatable
	]
	coclass DaSvrCommand
	{
		[default] interface IDaSvrCommand;
	};

	[
		uuid(1147E50F-A208-11DE-ABF2-002421116FB2),
		helpstring("Commands Object"),
		noncreatable
	]
	coclass DaSvrCommands
	{
		[default] interface IDaSvrCommands;
	};

	[
		uuid(1147E510-A208-11DE-ABF2-002421116FB2),
		helpstring("Command Window Object"),
		noncreatable
	]
	coclass DaSvrCommandsWindow
	{
		[default] interface IDaSvrCommandsWindow;
	};

	[
		uuid(1147E511-A208-11DE-ABF2-002421116FB2),
		helpstring("User Input Object"),
		noncreatable
	]
	coclass DaSvrUserInput
	{
		[default] interface IDaSvrUserInput;
	};

	[
		uuid(1147E512-A208-11DE-ABF2-002421116FB2),
		helpstring("Balloon Object"),
		noncreatable
	]
	coclass DaSvrBalloon
	{
		[default] interface IDaSvrBalloon;
	};

	[
		uuid(1147E513-A208-11DE-ABF2-002421116FB2),
		helpstring("Property Sheet Object"),
		noncreatable
	]
	coclass DaSvrPropertySheet
	{
		[default] interface IDaSvrPropertySheet;
	};

	[
		uuid(1147E514-A208-11DE-ABF2-002421116FB2),
		helpstring("Audio Output Properties Object"),
		noncreatable
	]
	coclass DaSvrAudioOutput
	{
		[default] interface IDaSvrAudioOutput;
	};

	[
		uuid(1147E515-A208-11DE-ABF2-002421116FB2),
		helpstring("Speech Input Properties Object"),
		noncreatable
	]
	coclass DaSvrSpeechInput
	{
		[default] interface IDaSvrSpeechInput;
	};

	[
		uuid(1147E517-A208-11DE-ABF2-002421116FB2),
		helpstring("Animation Names Object"),
		hidden,
		noncreatable
	]
	coclass DaSvrAnimationNames
	{
		[default] interface IEnumVARIANT;
	};

	/////////////////////////////////////////////////////////////////////////////
	// Version 1.1 Classes
	/////////////////////////////////////////////////////////////////////////////

	[
		uuid(1147E524-A208-11DE-ABF2-002421116FB2),
		helpstring("Character Files Object")
	]
	coclass DaSvrCharacterFiles
	{
		[default] interface IDaSvrCharacterFiles;
	};

	[
		uuid(1147E51F-A208-11DE-ABF2-002421116FB2),
		helpstring("Speech Engine Object"),
		noncreatable
	]
	coclass DaSvrSpeechEngine
	{
		[default] interface IDaSvrSpeechEngine;
	};

	[
		uuid(1147E520-A208-11DE-ABF2-002421116FB2),
		helpstring("Speech Engines Object"),
		noncreatable
	]
	coclass DaSvrSpeechEngines
	{
		[default] interface IDaSvrSpeechEngines;
	};

	[
		uuid(1147E521-A208-11DE-ABF2-002421116FB2),
		helpstring("Recognition Engine Object"),
		noncreatable
	]
	coclass DaSvrRecognitionEngine
	{
		[default] interface IDaSvrRecognitionEngine;
	};

	[
		uuid(1147E522-A208-11DE-ABF2-002421116FB2),
		helpstring("Recognition Engines Object"),
		noncreatable
	]
	coclass DaSvrRecognitionEngines
	{
		[default] interface IDaSvrRecognitionEngines;
	};

	/////////////////////////////////////////////////////////////////////////////

//{{AFX_APPEND_ODL}}
//}}AFX_APPEND_ODL}}
};
