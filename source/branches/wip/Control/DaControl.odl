#include <olectl.h>
#include <idispids.h>
#include "..\Include\DaGuid.h"

/////////////////////////////////////////////////////////////////////////////

[
	uuid(1147E550-A208-11DE-ABF2-002421116FB2),
	version(_CONTROL_VER),
	helpstring("Double Agent ActiveX Control"),
	control
]
library DoubleAgentCtl
{
	importlib(STDOLE_TLB);
	importlib(STDTYPE_TLB);

	interface IDaCtlCharacters;
	interface IDaCtlCharacter;
	interface IDaCtlBalloon;
	interface IDaCtlCommands;
	interface IDaCtlCommand;
	interface IDaCtlRequest;
	interface IDaCtlAudioObject;
	interface IDaCtlSpeechInput;
	interface IDaCtlPropertySheet;
	interface IDaCtlUserInput;
	interface IDaCtlCommandsWindow;
	interface IDaCtlAnimationNames;
	interface IDaControl;
	dispinterface _DaCtlEvents;

	interface IDaCtlCharacterFiles;
	interface IDaCtlSpeechEngine;
	interface IDaCtlSpeechEngines;
	interface IDaCtlRecognitionEngine;
	interface IDaCtlRecognitionEngines;
	interface IDaControl2;
	interface IDaCtlCharacter2;

	/////////////////////////////////////////////////////////////////////////////
	// Interfaces
	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IAgentCtlCharacters_Load = 1;
	const DISPID DISPID_IAgentCtlCharacters_Unload = 2;
	const DISPID DISPID_IAgentCtlCharacters_CharacterID = 3;

	[
		odl,
		uuid(1147E53C-A208-11DE-ABF2-002421116FB2),
		helpstring("IDaCtlCharacters interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaCtlCharacters : IDispatch
	{
		[id(DISPID_VALUE), propget] HRESULT Item ([in] BSTR CharacterID, [out, retval] IDaCtlCharacter2** ppidItem);
		[id(DISPID_IAgentCtlCharacters_CharacterID)] HRESULT Character ([in] BSTR CharacterID, [out, retval] IDaCtlCharacter2** ppidItem);
		[id(DISPID_NEWENUM), propget, hidden, restricted] HRESULT _NewEnum ([out, retval] IUnknown** ppunkEnum);
		[id(DISPID_IAgentCtlCharacters_Unload)] HRESULT Unload ([in] BSTR CharacterID);
		[id(DISPID_IAgentCtlCharacters_Load)]HRESULT Load ([in] BSTR CharacterID, [in, optional] VARIANT LoadKey, [out, retval] IDaCtlRequest** ppidRequest);
	};

	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IAgentCtlCharacter_Visible = 2;
	const DISPID DISPID_IAgentCtlCharacter_Left = 3;
	const DISPID DISPID_IAgentCtlCharacter_Top = 4;
	const DISPID DISPID_IAgentCtlCharacter_Height = 5;
	const DISPID DISPID_IAgentCtlCharacter_Width = 6;
	const DISPID DISPID_IAgentCtlCharacter_Speed = 10;
	const DISPID DISPID_IAgentCtlCharacter_Pitch = 11;
	const DISPID DISPID_IAgentCtlCharacter_Play = 13;
	const DISPID DISPID_IAgentCtlCharacter_Stop = 14;
	const DISPID DISPID_IAgentCtlCharacter_Speak = 15;
	const DISPID DISPID_IAgentCtlCharacter_GestureAt = 17;
	const DISPID DISPID_IAgentCtlCharacter_MoveTo = 18;
	const DISPID DISPID_IAgentCtlCharacter_Hide = 19;
	const DISPID DISPID_IAgentCtlCharacter_Show = 20;
	const DISPID DISPID_IAgentCtlCharacter_Interrupt = 21;
	const DISPID DISPID_IAgentCtlCharacter_Wait = 22;
	const DISPID DISPID_IAgentCtlCharacter_Balloon = 23;
	const DISPID DISPID_IAgentCtlCharacter_Name = 24;
	const DISPID DISPID_IAgentCtlCharacter_Commands = 25;
	const DISPID DISPID_IAgentCtlCharacter_Activate = 26;
	const DISPID DISPID_IAgentCtlCharacter_Get = 27;
	const DISPID DISPID_IAgentCtlCharacter_Description = 28;
	const DISPID DISPID_IAgentCtlCharacter_IdleOn = 29;
	const DISPID DISPID_IAgentCtlCharacter_StopAll = 31;
	const DISPID DISPID_IAgentCtlCharacter_MoveCause = 32;
	const DISPID DISPID_IAgentCtlCharacter_VisibilityCause = 33;
	const DISPID DISPID_IAgentCtlCharacter_HasOtherClients = 34;
	const DISPID DISPID_IAgentCtlCharacter_SoundEffectsOn = 35;
	const DISPID DISPID_IAgentCtlCharacter_ExtraData = 36;

	const DISPID DISPID_IAgentCtlCharacterEx_ShowPopupMenu = 37;
	const DISPID DISPID_IAgentCtlCharacterEx_AutoPopupMenu = 38;
	const DISPID DISPID_IAgentCtlCharacterEx_HelpModeOn = 39;
	const DISPID DISPID_IAgentCtlCharacterEx_HelpContextID = 40;
	const DISPID DISPID_IAgentCtlCharacterEx_Active = 41;
	const DISPID DISPID_IAgentCtlCharacterEx_Listen = 42;
	const DISPID DISPID_IAgentCtlCharacterEx_LanguageID = 43;
	const DISPID DISPID_IAgentCtlCharacterEx_SRModeID = 46;
	const DISPID DISPID_IAgentCtlCharacterEx_TTSModeID = 47;
	const DISPID DISPID_IAgentCtlCharacterEx_HelpFile = 48;
	const DISPID DISPID_IAgentCtlCharacterEx_GUID = 49;
	const DISPID DISPID_IAgentCtlCharacterEx_OriginalHeight = 50;
	const DISPID DISPID_IAgentCtlCharacterEx_OriginalWidth = 51;
	const DISPID DISPID_IAgentCtlCharacterEx_Think = 52;
	const DISPID DISPID_IAgentCtlCharacterEx_Version = 53;
	const DISPID DISPID_IAgentCtlCharacterEx_AnimationNames = 54;
	const DISPID DISPID_IAgentCtlCharacterEx_SRStatus = 55;

	[
		odl,
		uuid(1147E53D-A208-11DE-ABF2-002421116FB2),
		helpstring("IDaCtlCharacter interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaCtlCharacter : IDispatch
	{
		[id(DISPID_IAgentCtlCharacter_Balloon), propget] HRESULT Balloon ([out, retval] IDaCtlBalloon** ppidBalloon);
		[id(DISPID_IAgentCtlCharacter_Commands), propget] HRESULT Commands ([out, retval] IDaCtlCommands** ppidCommands);
		[id(DISPID_IAgentCtlCharacter_Name), propget] HRESULT Name ([out, retval] BSTR* Name);
		[id(DISPID_IAgentCtlCharacter_Description), propget] HRESULT Description ([out, retval] BSTR* Description);
		[id(DISPID_IAgentCtlCharacter_Visible), propget] HRESULT Visible ([out, retval] VARIANT_BOOL* Visible);
		[id(DISPID_IAgentCtlCharacter_Left), propput] HRESULT Left (short Left);
		[id(DISPID_IAgentCtlCharacter_Left), propget] HRESULT Left ([out, retval] short* Left);
		[id(DISPID_IAgentCtlCharacter_Top), propput] HRESULT Top (short Top);
		[id(DISPID_IAgentCtlCharacter_Top), propget] HRESULT Top ([out, retval] short* Top);
		[id(DISPID_IAgentCtlCharacter_Height), propput] HRESULT Height (short Height);
		[id(DISPID_IAgentCtlCharacter_Height), propget] HRESULT Height ([out, retval] short* Height);
		[id(DISPID_IAgentCtlCharacter_Width), propput] HRESULT Width (short Width);
		[id(DISPID_IAgentCtlCharacter_Width), propget] HRESULT Width ([out, retval] short* Width);
		[id(DISPID_IAgentCtlCharacter_Speed), propget] HRESULT Speed ([out, retval] long* Speed);
		[id(DISPID_IAgentCtlCharacter_Pitch), propget] HRESULT Pitch ([out, retval] long* Pitch);
		[id(DISPID_IAgentCtlCharacter_IdleOn), propput] HRESULT IdleOn (VARIANT_BOOL On);
		[id(DISPID_IAgentCtlCharacter_IdleOn), propget] HRESULT IdleOn ([out, retval] VARIANT_BOOL* On);
		[id(DISPID_IAgentCtlCharacter_Activate)] HRESULT Activate ([in, optional] VARIANT State, [out, retval] VARIANT_BOOL* Success);
		[id(DISPID_IAgentCtlCharacter_Play)] HRESULT Play ([in] BSTR Animation, [out, retval] IDaCtlRequest** Request);
		[id(DISPID_IAgentCtlCharacter_Get)] HRESULT Get ([in] BSTR Type, [in] BSTR Name, [in, optional] VARIANT Queue, [out, retval] IDaCtlRequest** Request);
		[id(DISPID_IAgentCtlCharacter_Stop)] HRESULT Stop ([in, optional] VARIANT Request);
		[id(DISPID_IAgentCtlCharacter_Wait)] HRESULT Wait ([in] IDaCtlRequest* WaitForRequest, [out, retval] IDaCtlRequest** Request);
		[id(DISPID_IAgentCtlCharacter_Interrupt)] HRESULT Interrupt ([in] IDaCtlRequest* InterruptRequest, [out, retval] IDaCtlRequest** Request);
		[id(DISPID_IAgentCtlCharacter_Speak)] HRESULT Speak ([in, optional] VARIANT Text, [in, optional] VARIANT Url, [out, retval] IDaCtlRequest** Request);
		[id(DISPID_IAgentCtlCharacter_GestureAt)] HRESULT GestureAt ([in] short x, [in] short y, [out, retval] IDaCtlRequest** Request);
		[id(DISPID_IAgentCtlCharacter_MoveTo)] HRESULT MoveTo ([in] short x, [in] short y, [in, optional] VARIANT Speed, [out, retval] IDaCtlRequest** Request);
		[id(DISPID_IAgentCtlCharacter_Hide)] HRESULT Hide ([in, optional] VARIANT Fast, [out, retval] IDaCtlRequest** Request);
		[id(DISPID_IAgentCtlCharacter_Show)] HRESULT Show ([in, optional] VARIANT Fast, [out, retval] IDaCtlRequest** Request);
		[id(DISPID_IAgentCtlCharacter_StopAll)] HRESULT StopAll ([in, optional] VARIANT Types);
		[id(DISPID_IAgentCtlCharacter_MoveCause), propget] HRESULT MoveCause ([out, retval] short* MoveCause);
		[id(DISPID_IAgentCtlCharacter_VisibilityCause), propget] HRESULT VisibilityCause ([out, retval] short* VisibilityCause);
		[id(DISPID_IAgentCtlCharacter_HasOtherClients), propget] HRESULT HasOtherClients ([out, retval] VARIANT_BOOL* HasOtherClients);
		[id(DISPID_IAgentCtlCharacter_SoundEffectsOn), propput] HRESULT SoundEffectsOn (VARIANT_BOOL On);
		[id(DISPID_IAgentCtlCharacter_SoundEffectsOn), propget] HRESULT SoundEffectsOn ([out, retval] VARIANT_BOOL* On);
		[id(DISPID_IAgentCtlCharacter_Name), propput] HRESULT Name ([in] BSTR Name);
		[id(DISPID_IAgentCtlCharacter_Description), propput] HRESULT Description ([in] BSTR Description);
		[id(DISPID_IAgentCtlCharacter_ExtraData), propget] HRESULT ExtraData ([out, retval] BSTR* ExtraData);

		[id(DISPID_IAgentCtlCharacterEx_ShowPopupMenu)] HRESULT ShowPopupMenu ([in] short x, [in] short y, [out, retval] VARIANT_BOOL* Showed);
		[id(DISPID_IAgentCtlCharacterEx_AutoPopupMenu), propput] HRESULT AutoPopupMenu ([in] VARIANT_BOOL On);
		[id(DISPID_IAgentCtlCharacterEx_AutoPopupMenu), propget] HRESULT AutoPopupMenu ([out, retval] VARIANT_BOOL* On);
		[id(DISPID_IAgentCtlCharacterEx_HelpModeOn), propput, hidden] HRESULT HelpModeOn ([in] VARIANT_BOOL On);
		[id(DISPID_IAgentCtlCharacterEx_HelpModeOn), propget, hidden] HRESULT HelpModeOn ([out, retval] VARIANT_BOOL* On);
		[id(DISPID_IAgentCtlCharacterEx_HelpContextID), propput, hidden] HRESULT HelpContextID ([in] long ID);
		[id(DISPID_IAgentCtlCharacterEx_HelpContextID), propget, hidden] HRESULT HelpContextID ([out, retval] long* ID);
		[id(DISPID_IAgentCtlCharacterEx_Active), propget] HRESULT Active ([out, retval] short* State);
		[id(DISPID_IAgentCtlCharacterEx_Listen)] HRESULT Listen ([in] VARIANT_BOOL Listen, [out, retval] VARIANT_BOOL* StartedListening);
		[id(DISPID_IAgentCtlCharacterEx_LanguageID), propput] HRESULT LanguageID ([in] long LanguageID);
		[id(DISPID_IAgentCtlCharacterEx_LanguageID), propget] HRESULT LanguageID ([out, retval] long* LanguageID);
		[id(DISPID_IAgentCtlCharacterEx_SRModeID), propget] HRESULT SRModeID ([out, retval] BSTR* EngineModeId);
		[id(DISPID_IAgentCtlCharacterEx_SRModeID), propput] HRESULT SRModeID ([in] BSTR EngineModeId);
		[id(DISPID_IAgentCtlCharacterEx_TTSModeID), propget] HRESULT TTSModeID ([out, retval] BSTR* EngineModeId);
		[id(DISPID_IAgentCtlCharacterEx_TTSModeID), propput] HRESULT TTSModeID ([in] BSTR EngineModeId);
		[id(DISPID_IAgentCtlCharacterEx_HelpFile), propget, hidden] HRESULT HelpFile ([out, retval] BSTR* File);
		[id(DISPID_IAgentCtlCharacterEx_HelpFile), propput, hidden] HRESULT HelpFile ([in] BSTR File);
		[id(DISPID_IAgentCtlCharacterEx_GUID), propget] HRESULT GUID ([out, retval] BSTR* GUID);
		[id(DISPID_IAgentCtlCharacterEx_OriginalHeight), propget] HRESULT OriginalHeight ([out, retval] short* Height);
		[id(DISPID_IAgentCtlCharacterEx_OriginalWidth), propget] HRESULT OriginalWidth ([out, retval] short* Width);
		[id(DISPID_IAgentCtlCharacterEx_Think)] HRESULT Think ([in] BSTR Text, [out, retval] IDaCtlRequest** Request);
		[id(DISPID_IAgentCtlCharacterEx_Version), propget] HRESULT Version ([out, retval] BSTR* Version);
		[id(DISPID_IAgentCtlCharacterEx_AnimationNames), propget] HRESULT AnimationNames ([out, retval] IDaCtlAnimationNames** Names);
		[id(DISPID_IAgentCtlCharacterEx_SRStatus), propget] HRESULT SRStatus ([out, retval] long* Status);
	};

	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IAgentCtlBalloon_Enabled = 1;
	const DISPID DISPID_IAgentCtlBalloon_NumberOfLines = 2;
	const DISPID DISPID_IAgentCtlBalloon_CharsPerLine = 3;
	const DISPID DISPID_IAgentCtlBalloon_FontName = 4;
	const DISPID DISPID_IAgentCtlBalloon_FontSize = 5;
	const DISPID DISPID_IAgentCtlBalloon_ForeColor = 7;
	const DISPID DISPID_IAgentCtlBalloon_BackColor = 8;
	const DISPID DISPID_IAgentCtlBalloon_BorderColor = 9;
	const DISPID DISPID_IAgentCtlBalloon_FontBold = 10;
	const DISPID DISPID_IAgentCtlBalloon_FontItalic = 11;
	const DISPID DISPID_IAgentCtlBalloon_FontStrikethru = 12;
	const DISPID DISPID_IAgentCtlBalloon_FontUnderline = 13;
	const DISPID DISPID_IAgentCtlBalloon_Visible = 14;
	const DISPID DISPID_IAgentCtlBalloon_FontCharSet = 15;

	const DISPID DISPID_IAgentCtlBalloonEx_Style = 16;

	[
		odl,
		uuid(1147E53F-A208-11DE-ABF2-002421116FB2),
		helpstring("IDaCtlBalloon interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaCtlBalloon : IDispatch
	{
		[id(DISPID_IAgentCtlBalloon_Enabled), propget] HRESULT Enabled ([out, retval] VARIANT_BOOL* Enabled);
		[id(DISPID_IAgentCtlBalloon_NumberOfLines), propget] HRESULT NumberOfLines ([out, retval] long* Lines);
		[id(DISPID_IAgentCtlBalloon_CharsPerLine), propget] HRESULT CharsPerLine ([out, retval] long* CharsPerLine);
		[id(DISPID_IAgentCtlBalloon_FontName), propget] HRESULT FontName ([out, retval] BSTR* FontName);
		[id(DISPID_IAgentCtlBalloon_FontSize), propget] HRESULT FontSize ([out, retval] long* FontSize);
		[id(DISPID_IAgentCtlBalloon_FontBold), propget] HRESULT FontBold ([out, retval] VARIANT_BOOL* FontBold);
		[id(DISPID_IAgentCtlBalloon_FontItalic), propget] HRESULT FontItalic ([out, retval] VARIANT_BOOL* FontItalic);
		[id(DISPID_IAgentCtlBalloon_FontStrikethru), propget] HRESULT FontStrikethru ([out, retval] VARIANT_BOOL* FontStrikethru);
		[id(DISPID_IAgentCtlBalloon_FontUnderline), propget] HRESULT FontUnderline ([out, retval] VARIANT_BOOL* FontUnderline);
		[id(DISPID_IAgentCtlBalloon_ForeColor), propget] HRESULT ForeColor ([out, retval] long* ForeColor);
		[id(DISPID_IAgentCtlBalloon_BackColor), propget] HRESULT BackColor ([out, retval] long* BackColor);
		[id(DISPID_IAgentCtlBalloon_BorderColor), propget] HRESULT BorderColor ([out, retval] long* BorderColor);
		[id(DISPID_IAgentCtlBalloon_Visible), propput] HRESULT Visible ([in] VARIANT_BOOL Visible);
		[id(DISPID_IAgentCtlBalloon_Visible), propget] HRESULT Visible ([out, retval] VARIANT_BOOL* Visible);
		[id(DISPID_IAgentCtlBalloon_FontName), propput] HRESULT FontName ([in] BSTR FontName);
		[id(DISPID_IAgentCtlBalloon_FontSize), propput] HRESULT FontSize ([in] long FontSize);
		[id(DISPID_IAgentCtlBalloon_FontCharSet), propput] HRESULT FontCharSet ([in] short FontCharSet);
		[id(DISPID_IAgentCtlBalloon_FontCharSet), propget] HRESULT FontCharSet ([out, retval] short* FontCharSet);

		[id(DISPID_IAgentCtlBalloonEx_Style), propput] HRESULT Style ([in] long Style);
		[id(DISPID_IAgentCtlBalloonEx_Style), propget] HRESULT Style ([out, retval] long* Style);
	};

	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IAgentCtlCommands_Count = 2;
	const DISPID DISPID_IAgentCtlCommands_Caption = 3;
	const DISPID DISPID_IAgentCtlCommands_Voice = 4;
	const DISPID DISPID_IAgentCtlCommands_Visible = 5;
	const DISPID DISPID_IAgentCtlCommands_Add = 10;
	const DISPID DISPID_IAgentCtlCommands_Insert = 11;
	const DISPID DISPID_IAgentCtlCommands_Remove = 13;
	const DISPID DISPID_IAgentCtlCommands_RemoveAll = 14;
	const DISPID DISPID_IAgentCtlCommands_Command = 15;

	const DISPID DISPID_IAgentCtlCommandsEx_DefaultCommand = 16;
	const DISPID DISPID_IAgentCtlCommandsEx_HelpContextID = 17;
	const DISPID DISPID_IAgentCtlCommandsEx_FontName = 21;
	const DISPID DISPID_IAgentCtlCommandsEx_FontSize = 23;
	const DISPID DISPID_IAgentCtlCommandsEx_VoiceCaption = 22;
	const DISPID DISPID_IAgentCtlCommandsEx_GlobalVoiceCommandsEnabled = 24;

	[
		odl,
		uuid(1147E540-A208-11DE-ABF2-002421116FB2),
		helpstring("IDaCtlCommands interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaCtlCommands : IDispatch
	{
		[id(DISPID_VALUE), propget] HRESULT Item ([in] BSTR Name, [out, retval] IDaCtlCommand** Item);
		[id(DISPID_IAgentCtlCommands_Command)] HRESULT Command ([in] BSTR Name, [out, retval] IDaCtlCommand** Item);
		[id(DISPID_IAgentCtlCommands_Count), propget] HRESULT Count ([out, retval] long* Count);
		[id(DISPID_IAgentCtlCommands_Caption), propget] HRESULT Caption ([out, retval] BSTR* Caption);
		[id(DISPID_IAgentCtlCommands_Caption), propput] HRESULT Caption ([in] BSTR Caption);
		[id(DISPID_IAgentCtlCommands_Voice), propget] HRESULT Voice ([out, retval] BSTR* Voice);
		[id(DISPID_IAgentCtlCommands_Voice), propput] HRESULT Voice ([in] BSTR Voice);
		[id(DISPID_IAgentCtlCommands_Visible), propget] HRESULT Visible ([out, retval] VARIANT_BOOL* Visible);
		[id(DISPID_IAgentCtlCommands_Visible), propput]	HRESULT Visible ([in] VARIANT_BOOL Visible);
		[id(DISPID_NEWENUM), propget, hidden, restricted] HRESULT _NewEnum ([out, retval] IUnknown** ppunkEnum);
		[id(DISPID_IAgentCtlCommands_Add)] HRESULT Add ([in] BSTR Name, [in, optional] VARIANT Caption, [in, optional] VARIANT Voice, [in, optional] VARIANT Enabled, [in, optional] VARIANT Visible, [out, retval] IDaCtlCommand** Command);
		[id(DISPID_IAgentCtlCommands_Insert)] HRESULT Insert ([in] BSTR Name, [in] BSTR RefName, [in, optional] VARIANT Before, [in, optional] VARIANT Caption, [in, optional] VARIANT Voice, [in, optional] VARIANT Enabled, [in, optional] VARIANT Visible, [out, retval] IDaCtlCommand** Command);
		[id(DISPID_IAgentCtlCommands_Remove)] HRESULT Remove ([in] BSTR Name);
		[id(DISPID_IAgentCtlCommands_RemoveAll)] HRESULT RemoveAll ();

		[id(DISPID_IAgentCtlCommandsEx_DefaultCommand), propget] HRESULT DefaultCommand ([out, retval] BSTR* Name);
		[id(DISPID_IAgentCtlCommandsEx_DefaultCommand), propput] HRESULT DefaultCommand ([in] BSTR Name);
		[id(DISPID_IAgentCtlCommandsEx_HelpContextID), propget, hidden] HRESULT HelpContextID ([out, retval] long* ID);
		[id(DISPID_IAgentCtlCommandsEx_HelpContextID), propput, hidden] HRESULT HelpContextID ([in] long ID);
		[id(DISPID_IAgentCtlCommandsEx_FontName), propget] HRESULT FontName ([out, retval] BSTR* FontName);
		[id(DISPID_IAgentCtlCommandsEx_FontName), propput] HRESULT FontName ([in] BSTR FontName);
		[id(DISPID_IAgentCtlCommandsEx_FontSize), propget] HRESULT FontSize ([out, retval] long* FontSize);
		[id(DISPID_IAgentCtlCommandsEx_FontSize), propput] HRESULT FontSize ([in] long FontSize);
		[id(DISPID_IAgentCtlCommandsEx_VoiceCaption), propget] HRESULT VoiceCaption ([out, retval] BSTR* VoiceCaption);
		[id(DISPID_IAgentCtlCommandsEx_VoiceCaption), propput] HRESULT VoiceCaption ([in] BSTR VoiceCaption);
		[id(DISPID_IAgentCtlCommandsEx_GlobalVoiceCommandsEnabled), propget] HRESULT GlobalVoiceCommandsEnabled ([out, retval] VARIANT_BOOL* Enable);
		[id(DISPID_IAgentCtlCommandsEx_GlobalVoiceCommandsEnabled), propput] HRESULT GlobalVoiceCommandsEnabled ([in] VARIANT_BOOL Enable);
	};

	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IAgentCtlCommand_Voice = 1;
	const DISPID DISPID_IAgentCtlCommand_Caption = 2;
	const DISPID DISPID_IAgentCtlCommand_Confidence = 3;
	const DISPID DISPID_IAgentCtlCommand_ConfidenceText = 4;
	const DISPID DISPID_IAgentCtlCommand_Enabled = 5;
	const DISPID DISPID_IAgentCtlCommand_Visible = 6;

	const DISPID DISPID_IAgentCtlCommandEx_HelpContextID = 7;
	const DISPID DISPID_IAgentCtlCommandEx_VoiceCaption = 8;

	[
		odl,
		uuid(1147E541-A208-11DE-ABF2-002421116FB2),
		helpstring("IDaCtlCommand interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaCtlCommand : IDispatch
	{
		[id(DISPID_IAgentCtlCommand_Voice), propget] HRESULT Voice ([out, retval] BSTR* Voice);
		[id(DISPID_IAgentCtlCommand_Voice), propput] HRESULT Voice ([in] BSTR Voice);
		[id(DISPID_IAgentCtlCommand_Caption), propget] HRESULT Caption ([out, retval] BSTR* Caption);
		[id(DISPID_IAgentCtlCommand_Caption), propput] HRESULT Caption ([in] BSTR Caption);
		[id(DISPID_IAgentCtlCommand_Enabled), propget] HRESULT Enabled ([out, retval] VARIANT_BOOL* Enabled);
		[id(DISPID_IAgentCtlCommand_Enabled), propput] HRESULT Enabled ([in] VARIANT_BOOL Enabled);
		[id(DISPID_IAgentCtlCommand_Visible), propget] HRESULT Visible ([out, retval] VARIANT_BOOL* Visible);
		[id(DISPID_IAgentCtlCommand_Visible), propput] HRESULT Visible ([in] VARIANT_BOOL Visible);
		[id(DISPID_IAgentCtlCommand_Confidence), propget] HRESULT Confidence ([out, retval] long* Confidence);
		[id(DISPID_IAgentCtlCommand_Confidence), propput] HRESULT Confidence ([in] long Confidence);
		[id(DISPID_IAgentCtlCommand_ConfidenceText), propget] HRESULT ConfidenceText ([out, retval] BSTR* Text);
		[id(DISPID_IAgentCtlCommand_ConfidenceText), propput] HRESULT ConfidenceText ([in] BSTR Text);

		[id(DISPID_IAgentCtlCommandEx_HelpContextID), propget, hidden] HRESULT HelpContextID ([out, retval] long* ID);
		[id(DISPID_IAgentCtlCommandEx_HelpContextID), propput, hidden] HRESULT HelpContextID ([in] long ID);
		[id(DISPID_IAgentCtlCommandEx_VoiceCaption), propget] HRESULT VoiceCaption ([out, retval] BSTR* Caption);
		[id(DISPID_IAgentCtlCommandEx_VoiceCaption), propput] HRESULT VoiceCaption ([in] BSTR Caption);
	};

	/////////////////////////////////////////////////////////////////////////////

	const long RequestSuccess = 0;
	const long RequestFailed = 1;
	const long RequestPending = 2;
	const long RequestInterrupted = 3;
	const long RequestInProgress = 4;

	const DISPID DISPID_IAgentCtlRequest_Status = 1;
	const DISPID DISPID_IAgentCtlRequest_Description = 2;
	const DISPID DISPID_IAgentCtlRequest_Number = 3;

	[
		odl,
		uuid(1147E542-A208-11DE-ABF2-002421116FB2),
		helpstring("IDaCtlRequest interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaCtlRequest : IDispatch
	{
		[id(DISPID_VALUE), propget, hidden] HRESULT ID ([out, retval] long* ID);
		[id(DISPID_IAgentCtlRequest_Status), propget] HRESULT Status ([out, retval] long* Status);
		[id(DISPID_IAgentCtlRequest_Description), propget] HRESULT Description ([out, retval] BSTR* Description);
		[id(DISPID_IAgentCtlRequest_Number), propget] HRESULT Number ([out, retval] long* Number);
	};

	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IAgentCtlAudioObject_Enabled = 1;
	const DISPID DISPID_IAgentCtlAudioObject_SoundEffects = 2;
	const DISPID DISPID_IAgentCtlAudioObjectEx_Status = 3;

	[
		odl,
		uuid(1147E543-A208-11DE-ABF2-002421116FB2),
		helpstring("IDaCtlAudioObject interface"),
		dual,
		oleautomation,
		hidden,
		hidden
	]
	interface IDaCtlAudioObject : IDispatch
	{
		[id(DISPID_IAgentCtlAudioObject_Enabled), propget] HRESULT Enabled ([out, retval] VARIANT_BOOL* AudioEnabled);
		[id(DISPID_IAgentCtlAudioObject_SoundEffects), propget] HRESULT SoundEffects ([out, retval] VARIANT_BOOL* SoundEffects);
		[id(DISPID_IAgentCtlAudioObjectEx_Status), propget, hidden] HRESULT Status ([out, retval] short* Available);
	};

	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IAgentCtlSpeechInput_Enabled = 1;
	const DISPID DISPID_IAgentCtlSpeechInput_Language = 2;
	const DISPID DISPID_IAgentCtlSpeechInput_HotKey = 3;
	const DISPID DISPID_IAgentCtlSpeechInput_Installed = 4;
	const DISPID DISPID_IAgentCtlSpeechInput_Engine = 5;
	const DISPID DISPID_IAgentCtlSpeechInput_ListeningTip = 6;

	[
		odl,
		uuid(1147E544-A208-11DE-ABF2-002421116FB2),
		helpstring("IDaCtlSpeechInput interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaCtlSpeechInput : IDispatch
	{
		[id(DISPID_IAgentCtlSpeechInput_Enabled), propget] HRESULT Enabled ([out, retval] VARIANT_BOOL* VoiceEnabled);
		[id(DISPID_IAgentCtlSpeechInput_Language), propget, hidden] HRESULT Language ([out, retval] BSTR* Language);
		[id(DISPID_IAgentCtlSpeechInput_HotKey), propget] HRESULT HotKey ([out, retval] BSTR* HotKey);
		[id(DISPID_IAgentCtlSpeechInput_Installed), propget, hidden] HRESULT Installed ([out, retval] VARIANT_BOOL* VoiceInstalled);
		[id(DISPID_IAgentCtlSpeechInput_Engine), propget, hidden] HRESULT Engine ([out, retval] BSTR* Engine);
		[id(DISPID_IAgentCtlSpeechInput_Engine), propput, hidden] HRESULT Engine ([in] BSTR Engine);
		[id(DISPID_IAgentCtlSpeechInput_ListeningTip), propget] HRESULT ListeningTip ([out, retval] VARIANT_BOOL* ListeningTip);
	};

	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IAgentCtlPropertySheet_Left = 1;
	const DISPID DISPID_IAgentCtlPropertySheet_Top = 2;
	const DISPID DISPID_IAgentCtlPropertySheet_Height = 3;
	const DISPID DISPID_IAgentCtlPropertySheet_Width = 4;
	const DISPID DISPID_IAgentCtlPropertySheet_Page = 5;
	const DISPID DISPID_IAgentCtlPropertySheet_Visible = 6;

	[
		odl,
		uuid(1147E545-A208-11DE-ABF2-002421116FB2),
		helpstring("IDaCtlPropertySheet interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaCtlPropertySheet : IDispatch
	{
		[id(DISPID_IAgentCtlPropertySheet_Left), propget] HRESULT Left ([out, retval] short* Left);
		[id(DISPID_IAgentCtlPropertySheet_Top), propget] HRESULT Top ([out, retval] short* Top);
		[id(DISPID_IAgentCtlPropertySheet_Height), propget] HRESULT Height ([out, retval] short* Height);
		[id(DISPID_IAgentCtlPropertySheet_Width), propget] HRESULT Width ([out, retval] short* Width);
		[id(DISPID_IAgentCtlPropertySheet_Visible), propput] HRESULT Visible ([in] VARIANT_BOOL Visible);
		[id(DISPID_IAgentCtlPropertySheet_Visible), propget] HRESULT Visible ([out, retval] VARIANT_BOOL* Visible);
		[id(DISPID_IAgentCtlPropertySheet_Page), propput] HRESULT Page ([in] BSTR Page);
		[id(DISPID_IAgentCtlPropertySheet_Page), propget] HRESULT Page ([out, retval] BSTR* Page);
	};

	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IAgentCtlUserInput_Count = 0x60020000;
	const DISPID DISPID_IAgentCtlUserInput_Name = 0x60020001;
	const DISPID DISPID_IAgentCtlUserInput_CharacterID = 0x60020002;
	const DISPID DISPID_IAgentCtlUserInput_Confidence = 0x60020003;
	const DISPID DISPID_IAgentCtlUserInput_Voice = 0x60020004;
	const DISPID DISPID_IAgentCtlUserInput_Alt1Name = 0x60020005;
	const DISPID DISPID_IAgentCtlUserInput_Alt1Confidence = 0x60020006;
	const DISPID DISPID_IAgentCtlUserInput_Alt1Voice = 0x60020007;
	const DISPID DISPID_IAgentCtlUserInput_Alt2Name= 0x60020008;
	const DISPID DISPID_IAgentCtlUserInput_Alt2Confidence = 0x60020009;
	const DISPID DISPID_IAgentCtlUserInput_Alt2Voice = 0x6002000a;

	[
		odl,
		uuid(1147E546-A208-11DE-ABF2-002421116FB2),
		helpstring("IDaCtlUserInput interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaCtlUserInput : IDispatch
	{
		[id(DISPID_IAgentCtlUserInput_Count), propget] HRESULT Count ([out, retval] short* pCount);
		[id(DISPID_IAgentCtlUserInput_Name), propget] HRESULT Name ([out, retval] BSTR* pName);
		[id(DISPID_IAgentCtlUserInput_CharacterID), propget] HRESULT CharacterID ([out, retval] BSTR* pCharacterID);
		[id(DISPID_IAgentCtlUserInput_Confidence), propget] HRESULT Confidence ([out, retval] long* pConfidence);
		[id(DISPID_IAgentCtlUserInput_Voice), propget] HRESULT Voice ([out, retval] BSTR* pVoice);
		[id(DISPID_IAgentCtlUserInput_Alt1Name), propget] HRESULT Alt1Name ([out, retval] BSTR* pAlt1Name);
		[id(DISPID_IAgentCtlUserInput_Alt1Confidence), propget] HRESULT Alt1Confidence ([out, retval] long* pAlt1Confidence);
		[id(DISPID_IAgentCtlUserInput_Alt1Voice), propget] HRESULT Alt1Voice ([out, retval] BSTR* pAlt1Voice);
		[id(DISPID_IAgentCtlUserInput_Alt2Name), propget] HRESULT Alt2Name ([out, retval] BSTR* pAlt2Name);
		[id(DISPID_IAgentCtlUserInput_Alt2Confidence), propget] HRESULT Alt2Confidence ([out, retval] long* pAlt2Confidence);
		[id(DISPID_IAgentCtlUserInput_Alt2Voice), propget] HRESULT Alt2Voice ([out, retval] BSTR* pAlt2Voice);
	};

	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IAgentCtlCommandsWindow_Visible = 5;
	const DISPID DISPID_IAgentCtlCommandsWindow_Left = 6;
	const DISPID DISPID_IAgentCtlCommandsWindow_Top = 7;
	const DISPID DISPID_IAgentCtlCommandsWindow_Height = 8;
	const DISPID DISPID_IAgentCtlCommandsWindow_Width = 9;

	[
		odl,
		uuid(1147E547-A208-11DE-ABF2-002421116FB2),
		helpstring("IDaCtlCommandsWindow interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaCtlCommandsWindow : IDispatch
	{
		[id(DISPID_IAgentCtlCommandsWindow_Visible), propget] HRESULT Visible ([out, retval] VARIANT_BOOL* Visible);
		[id(DISPID_IAgentCtlCommandsWindow_Visible), propput] HRESULT Visible ([in] VARIANT_BOOL Visible);
		[id(DISPID_IAgentCtlCommandsWindow_Left), propget] HRESULT Left ([out, retval] short* Left);
		[id(DISPID_IAgentCtlCommandsWindow_Top), propget] HRESULT Top ([out, retval] short* Top);
		[id(DISPID_IAgentCtlCommandsWindow_Height), propget] HRESULT Height ([out, retval] short* Height);
		[id(DISPID_IAgentCtlCommandsWindow_Width), propget] HRESULT Width ([out, retval] short* Width);
	};

	/////////////////////////////////////////////////////////////////////////////

	[
		odl,
		uuid(1147E548-A208-11DE-ABF2-002421116FB2),
		helpstring("IDaCtlAnimationNames interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaCtlAnimationNames : IDispatch
	{
		[id(DISPID_NEWENUM), propget, hidden, restricted] HRESULT _NewEnum ([out, retval] IUnknown** ppunkEnum);
	};

	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IAgentCtl_Characters = 3;
	const DISPID DISPID_IAgentCtl_AudioOutput = 4;
	const DISPID DISPID_IAgentCtl_SpeechInput = 5;
	const DISPID DISPID_IAgentCtl_PropertySheet = 8;
	const DISPID DISPID_IAgentCtl_Connected = 9;
	const DISPID DISPID_IAgentCtl_CommandsWindow = 12;
	const DISPID DISPID_IAgentCtl_Suspended = 14;

	const DISPID DISPID_IAgentCtlEx_ShowDefaultCharacterProperties = 20;
	const DISPID DISPID_IAgentCtlEx_RaiseRequestErrors = 21;

	[
		odl,
		uuid(1147E549-A208-11DE-ABF2-002421116FB2),
		helpstring("IDaControl interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaControl : IDispatch
	{
		[id(DISPID_IAgentCtl_Characters), propget] HRESULT Characters ([out, retval] IDaCtlCharacters** Characters);
		[id(DISPID_IAgentCtl_AudioOutput), propget] HRESULT AudioOutput ([out, retval] IDaCtlAudioObject** AudioOutput);
		[id(DISPID_IAgentCtl_SpeechInput), propget] HRESULT SpeechInput ([out, retval] IDaCtlSpeechInput** SpeechInput);
		[id(DISPID_IAgentCtl_PropertySheet), propget] HRESULT PropertySheet ([out, retval] IDaCtlPropertySheet** PropSheet);
		[id(DISPID_IAgentCtl_CommandsWindow), propget] HRESULT CommandsWindow ([out, retval] IDaCtlCommandsWindow** CommandsWindow);
		[id(DISPID_IAgentCtl_Connected), propget] HRESULT Connected ([out, retval] VARIANT_BOOL* Connected);
		[id(DISPID_IAgentCtl_Connected), propput] HRESULT Connected (VARIANT_BOOL Connected);
		[id(DISPID_IAgentCtl_Suspended), propget, hidden] HRESULT Suspended ([out, retval] VARIANT_BOOL* Suspended);

		[id(DISPID_IAgentCtlEx_ShowDefaultCharacterProperties)] HRESULT ShowDefaultCharacterProperties ([in, optional] VARIANT x, [in, optional] VARIANT y);
		[id(DISPID_IAgentCtlEx_RaiseRequestErrors), propget] HRESULT RaiseRequestErrors ([out, retval] VARIANT_BOOL* RaiseErrors);
		[id(DISPID_IAgentCtlEx_RaiseRequestErrors), propput] HRESULT RaiseRequestErrors ([in] VARIANT_BOOL RaiseErrors);
	};

	const DISPID DISPID_AgentEvents_ActivateInput = 1;
	const DISPID DISPID_AgentEvents_Click = 2;
	const DISPID DISPID_AgentEvents_DeactivateInput = 3;
	const DISPID DISPID_AgentEvents_DblClick = 4;
	const DISPID DISPID_AgentEvents_DragStart = 5;
	const DISPID DISPID_AgentEvents_DragComplete = 6;
	const DISPID DISPID_AgentEvents_Hide = 7;
	const DISPID DISPID_AgentEvents_RequestStart = 9;
	const DISPID DISPID_AgentEvents_RequestComplete = 11;
	const DISPID DISPID_AgentEvents_Shutdown = 12;
	const DISPID DISPID_AgentEvents_Show = 15;
	const DISPID DISPID_AgentEvents_Bookmark = 16;
	const DISPID DISPID_AgentEvents_Command = 17;
	const DISPID DISPID_AgentEvents_IdleStart = 19;
	const DISPID DISPID_AgentEvents_IdleComplete = 20;
	const DISPID DISPID_AgentEvents_Restart = 21;
	const DISPID DISPID_AgentEvents_Move = 22;
	const DISPID DISPID_AgentEvents_Size = 23;
	const DISPID DISPID_AgentEvents_BalloonShow = 24;
	const DISPID DISPID_AgentEvents_BalloonHide = 25;
	const DISPID DISPID_AgentEvents_HelpComplete = 26;
	const DISPID DISPID_AgentEvents_ListenStart = 27;
	const DISPID DISPID_AgentEvents_ListenComplete = 28;
	const DISPID DISPID_AgentEvents_DefaultCharacterChange = 30;
	const DISPID DISPID_AgentEvents_AgentPropertyChange = 31;
	const DISPID DISPID_AgentEvents_ActiveClientChange = 32;

	[
		uuid(1147E54A-A208-11DE-ABF2-002421116FB2),
		helpstring("IDaControl event interface"),
		hidden
	]
	dispinterface _DaCtlEvents
	{
		properties:
		methods:
			[id(DISPID_AgentEvents_ActivateInput)] void ActivateInput ([in] BSTR CharacterID);
			[id(DISPID_AgentEvents_DeactivateInput)] void DeactivateInput ([in] BSTR CharacterID);
			[id(DISPID_AgentEvents_Click)] void Click ([in] BSTR CharacterID, [in] short Button, [in] short Shift, [in] short x, [in] short y);
			[id(DISPID_AgentEvents_DblClick)] void DblClick ([in] BSTR CharacterID, [in] short Button, [in] short Shift, [in] short x, [in] short y);
			[id(DISPID_AgentEvents_DragStart)] void DragStart ([in] BSTR CharacterID, [in] short Button, [in] short Shift, [in] short x, [in] short y);
			[id(DISPID_AgentEvents_DragComplete)] void DragComplete ([in] BSTR CharacterID, [in] short Button, [in] short Shift, [in] short x, [in] short y);
			[id(DISPID_AgentEvents_Show)] void Show ([in] BSTR CharacterID, [in] short Cause);
			[id(DISPID_AgentEvents_Hide)] void Hide ([in] BSTR CharacterID, [in] short Cause);
			[id(DISPID_AgentEvents_RequestStart)] void RequestStart ([in] IDaCtlRequest Request);
			[id(DISPID_AgentEvents_RequestComplete)] void RequestComplete ([in] IDaCtlRequest* Request);
			[id(DISPID_AgentEvents_Restart), hidden] void Restart ();
			[id(DISPID_AgentEvents_Shutdown), hidden] void Shutdown ();
			[id(DISPID_AgentEvents_Bookmark)] void Bookmark ([in] long BookmarkID);
			[id(DISPID_AgentEvents_Command)] void Command ([in] IDaCtlUserInput* UserInput);
			[id(DISPID_AgentEvents_IdleStart)] void IdleStart ([in] BSTR CharacterID);
			[id(DISPID_AgentEvents_IdleComplete)] void IdleComplete ([in] BSTR CharacterID);
			[id(DISPID_AgentEvents_Move)] void Move ([in] BSTR CharacterID, [in] short x, [in] short y, [in] short Cause);
			[id(DISPID_AgentEvents_Size)] void Size ([in] BSTR CharacterID, [in] short Width, [in] short Height);
			[id(DISPID_AgentEvents_BalloonShow)] void BalloonShow([in] BSTR CharacterID);
			[id(DISPID_AgentEvents_BalloonHide)] void BalloonHide([in] BSTR CharacterID);
			[id(DISPID_AgentEvents_HelpComplete), hidden] void HelpComplete ([in] BSTR CharacterID, [in] BSTR Name, [in] short Cause);
			[id(DISPID_AgentEvents_ListenStart)] void ListenStart ([in] BSTR CharacterID);
			[id(DISPID_AgentEvents_ListenComplete)] void ListenComplete ([in] BSTR CharacterID, [in] short Cause);
			[id(DISPID_AgentEvents_DefaultCharacterChange)] void DefaultCharacterChange ([in] BSTR GUID);
			[id(DISPID_AgentEvents_AgentPropertyChange)] void AgentPropertyChange (void);
			[id(DISPID_AgentEvents_ActiveClientChange)] void ActiveClientChange ([in] BSTR CharacterID, [in] VARIANT_BOOL Active);
	};

	/////////////////////////////////////////////////////////////////////////////
	// Version 1.1 Interfaces
	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IDaCtlCharacterFiles_FilePaths = DISPID_VALUE;
	const DISPID DISPID_IDaCtlCharacterFiles_SearchPath = 0x60020000;
	const DISPID DISPID_IDaCtlCharacterFiles_DefaultSearchPath = 0x60020001;
	const DISPID DISPID_IDaCtlCharacterFiles_DoubleAgentFiles = 0x60020003;
	const DISPID DISPID_IDaCtlCharacterFiles_MsAgentFiles = 0x60020004;
	const DISPID DISPID_IDaCtlCharacterFiles_MsOfficeFiles = 0x60020005;
	const DISPID DISPID_IDaCtlCharacterFiles_SpeakingCharacters = 0x60020006;
	const DISPID DISPID_IDaCtlCharacterFiles_NonSpeakingCharacters = 0x60020007;
	const DISPID DISPID_IDaCtlCharacterFiles_VerifyVersion = 0x60020008;

	[
		odl,
		uuid(1147E557-A208-11DE-ABF2-002421116FB2),
		helpstring ("IDaCtlCharacterFiles Interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaCtlCharacterFiles : IDispatch
	{
		[id(DISPID_IDaCtlCharacterFiles_FilePaths), propget] HRESULT FilePaths ([out, retval] SAFEARRAY(BSTR) *FilePaths);
		[id(DISPID_IDaCtlCharacterFiles_SearchPath), propget] HRESULT SearchPath ([out, retval] BSTR *SearchPath);
		[id(DISPID_IDaCtlCharacterFiles_SearchPath), propput] HRESULT SearchPath ([in] BSTR SearchPath);
		[id(DISPID_IDaCtlCharacterFiles_DefaultSearchPath), propget] HRESULT DefaultSearchPath ([out, retval] BSTR *DefaultSearchPath);
		[id(DISPID_IDaCtlCharacterFiles_DoubleAgentFiles), propget] HRESULT DoubleAgentFiles ([out, retval] VARIANT_BOOL *DoubleAgentFiles);
		[id(DISPID_IDaCtlCharacterFiles_DoubleAgentFiles), propput] HRESULT DoubleAgentFiles ([in] VARIANT_BOOL DoubleAgentFiles);
		[id(DISPID_IDaCtlCharacterFiles_MsAgentFiles), propget] HRESULT MsAgentFiles ([out, retval] VARIANT_BOOL *MsAgentFiles);
		[id(DISPID_IDaCtlCharacterFiles_MsAgentFiles), propput] HRESULT MsAgentFiles ([in] VARIANT_BOOL MsAgentFiles);
		[id(DISPID_IDaCtlCharacterFiles_MsOfficeFiles), propget] HRESULT MsOfficeFiles ([out, retval] VARIANT_BOOL *MsOfficeFiles);
		[id(DISPID_IDaCtlCharacterFiles_MsOfficeFiles), propput] HRESULT MsOfficeFiles ([in] VARIANT_BOOL MsOfficeFiles);
		[id(DISPID_IDaCtlCharacterFiles_SpeakingCharacters), propget] HRESULT SpeakingCharacters ([out, retval] VARIANT_BOOL *SpeakingCharacters);
		[id(DISPID_IDaCtlCharacterFiles_SpeakingCharacters), propput] HRESULT SpeakingCharacters ([in] VARIANT_BOOL SpeakingCharacters);
		[id(DISPID_IDaCtlCharacterFiles_NonSpeakingCharacters), propget] HRESULT NonSpeakingCharacters ([out, retval] VARIANT_BOOL *NonSpeakingCharacters);
		[id(DISPID_IDaCtlCharacterFiles_NonSpeakingCharacters), propput] HRESULT NonSpeakingCharacters ([in] VARIANT_BOOL NonSpeakingCharacters);
		[id(DISPID_IDaCtlCharacterFiles_VerifyVersion), propget] HRESULT VerifyVersion ([out, retval] VARIANT_BOOL *VerifyVersion);
		[id(DISPID_IDaCtlCharacterFiles_VerifyVersion), propput] HRESULT VerifyVersion ([in] VARIANT_BOOL VerifyVersion);
	};

	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IDaCtlSpeechEngine_TTSModeID = DISPID_VALUE;
	const DISPID DISPID_IDaCtlSpeechEngine_DisplayName = 1;
	const DISPID DISPID_IDaCtlSpeechEngine_Manufacturer = 2;
	const DISPID DISPID_IDaCtlSpeechEngine_GetVersion = 3;
	const DISPID DISPID_IDaCtlSpeechEngine_Gender = 4;
	const DISPID DISPID_IDaCtlSpeechEngine_LanguageID = 5;
	const DISPID DISPID_IDaCtlSpeechEngine_LanguageName = 6;

	[
		odl,
		uuid(1147E54C-A208-11DE-ABF2-002421116FB2),
		helpstring("IDaCtlSpeechEngine interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaCtlSpeechEngine : IDispatch
	{
		[id(DISPID_IDaCtlSpeechEngine_TTSModeID), propget] HRESULT TTSModeID ([out, retval] BSTR* TTSModeID);
		[id(DISPID_IDaCtlSpeechEngine_DisplayName), propget] HRESULT DisplayName ([out, retval] BSTR* DisplayName);
		[id(DISPID_IDaCtlSpeechEngine_Manufacturer), propget] HRESULT Manufacturer ([out, retval] BSTR* Manufacturer);
		[id(DISPID_IDaCtlSpeechEngine_GetVersion)] HRESULT GetVersion ([out] short* MajorVersion, [out] short* MinorVersion);
		[id(DISPID_IDaCtlSpeechEngine_Gender), propget] HRESULT Gender ([out, retval] short* Gender);
		[id(DISPID_IDaCtlSpeechEngine_LanguageID), propget] HRESULT LanguageID ([out, retval] long* LanguageID);
		[id(DISPID_IDaCtlSpeechEngine_LanguageName), propget] HRESULT LanguageName ([in, defaultvalue(-1)] VARIANT_BOOL EnglishName, [out, retval] BSTR* LanguageName);
	};

	[
		odl,
		uuid(1147E54D-A208-11DE-ABF2-002421116FB2),
		helpstring("IDaCtlSpeechEngines interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaCtlSpeechEngines : IDispatch
	{
		[id(DISPID_VALUE), propget] HRESULT Item ([in] VARIANT Index, [out, retval] IDaCtlSpeechEngine ** SpeechEngine);
		[id(DISPID_COLLECT), propget] HRESULT Count ([out, retval] long * Value);
		[id(DISPID_NEWENUM), propget, hidden, restricted] HRESULT _NewEnum ([out, retval] IUnknown ** Enum);
	};

	const DISPID DISPID_IDaCtlRecognitionEngine_SRModeID = DISPID_VALUE;
	const DISPID DISPID_IDaCtlRecognitionEngine_DisplayName = 1;
	const DISPID DISPID_IDaCtlRecognitionEngine_Manufacturer = 2;
	const DISPID DISPID_IDaCtlRecognitionEngine_GetVersion = 3;
	const DISPID DISPID_IDaCtlRecognitionEngine_LanguageID = 4;
	const DISPID DISPID_IDaCtlRecognitionEngine_LanguageName = 5;
	const DISPID DISPID_IDaCtlRecognitionEngine_LanguageIDs = 6;
	const DISPID DISPID_IDaCtlRecognitionEngine_LanguageNames = 7;

	[
		odl,
		uuid(1147E54E-A208-11DE-ABF2-002421116FB2),
		helpstring("IDaCtlRecognitionEngine interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaCtlRecognitionEngine : IDispatch
	{
		[id(DISPID_IDaCtlRecognitionEngine_SRModeID), propget] HRESULT SRModeID ([out, retval] BSTR* SRModeID);
		[id(DISPID_IDaCtlRecognitionEngine_DisplayName), propget] HRESULT DisplayName ([out, retval] BSTR* DisplayName);
		[id(DISPID_IDaCtlRecognitionEngine_Manufacturer), propget] HRESULT Manufacturer ([out, retval] BSTR* Manufacturer);
		[id(DISPID_IDaCtlRecognitionEngine_GetVersion)] HRESULT GetVersion ([out] short* MajorVersion, [out] short* MinorVersion);
		[id(DISPID_IDaCtlRecognitionEngine_LanguageID), propget] HRESULT LanguageID ([out, retval] long* LanguageID);
		[id(DISPID_IDaCtlRecognitionEngine_LanguageName), propget] HRESULT LanguageName ([in, defaultvalue(-1)] VARIANT_BOOL EnglishName, [out, retval] BSTR* LanguageName);
		[id(DISPID_IDaCtlRecognitionEngine_LanguageIDs), propget] HRESULT LanguageIDs ([out, retval] SAFEARRAY(long)* LanguageIDs);
		[id(DISPID_IDaCtlRecognitionEngine_LanguageNames), propget] HRESULT LanguageNames ([in, defaultvalue(-1)] VARIANT_BOOL EnglishNames, [out, retval] SAFEARRAY(BSTR)* LanguageNames);
	};

	[
		odl,
		uuid(1147E54F-A208-11DE-ABF2-002421116FB2),
		helpstring("IDaCtlRecognitionEngines interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaCtlRecognitionEngines : IDispatch
	{
		[id(DISPID_VALUE), propget] HRESULT Item ([in] VARIANT Index, [out, retval] IDaCtlRecognitionEngine ** RecognitionEngine);
		[id(DISPID_COLLECT), propget] HRESULT Count ([out, retval] long * Value);
		[id(DISPID_NEWENUM), propget, hidden, restricted] HRESULT _NewEnum ([out, retval] IUnknown ** Enum);
	};

	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IDaControl2_CharacterFiles = 30;
	const DISPID DISPID_IDaControl2_IsCharacterIconShown = 31;
	const DISPID DISPID_IDaControl2_SpeechEngines = 32;
	const DISPID DISPID_IDaControl2_FindSpeechEngines = 33;
	const DISPID DISPID_IDaControl2_GetCharacterSpeechEngine = 34;
	const DISPID DISPID_IDaControl2_FindCharacterSpeechEngines = 35;
	const DISPID DISPID_IDaControl2_RecognitionEngines = 36;
	const DISPID DISPID_IDaControl2_FindRecognitionEngines = 37;
	const DISPID DISPID_IDaControl2_GetCharacterRecognitionEngine = 38;
	const DISPID DISPID_IDaControl2_FindCharacterRecognitionEngines = 39;

	[
		odl,
		uuid(1147E551-A208-11DE-ABF2-002421116FB2),
		helpstring("IDaControl2 interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaControl2 : IDaControl
	{
		[id(DISPID_IDaControl2_CharacterFiles), propget] HRESULT CharacterFiles ([out, retval] IDaCtlCharacterFiles** CharacterFiles);
		[id(DISPID_IDaControl2_IsCharacterIconShown), propget] HRESULT IsCharacterIconShown ([out, retval] VARIANT_BOOL * IsCharacterIconShown);
		[id(DISPID_IDaControl2_IsCharacterIconShown), propput] HRESULT IsCharacterIconShown ([in] VARIANT_BOOL IsCharacterIconShown);
		[id(DISPID_IDaControl2_SpeechEngines), propget] HRESULT SpeechEngines ([out, retval] IDaCtlSpeechEngines** SpeechEngines);
		[id(DISPID_IDaControl2_FindSpeechEngines)] HRESULT FindSpeechEngines ([in, optional] VARIANT LanguageID, [in, optional] VARIANT Gender, [out, retval] IDaCtlSpeechEngines** SpeechEngines);
		[id(DISPID_IDaControl2_GetCharacterSpeechEngine)] HRESULT GetCharacterSpeechEngine ([in, optional] VARIANT LoadKey, [out, retval] IDaCtlSpeechEngine** SpeechEngine);
		[id(DISPID_IDaControl2_FindCharacterSpeechEngines)] HRESULT FindCharacterSpeechEngines ([in, optional] VARIANT LoadKey, [in, optional] VARIANT LanguageID, [out, retval] IDaCtlSpeechEngines** SpeechEngines);
		[id(DISPID_IDaControl2_RecognitionEngines), propget] HRESULT RecognitionEngines ([out, retval] IDaCtlRecognitionEngines** RecognitionEngines);
		[id(DISPID_IDaControl2_FindRecognitionEngines)] HRESULT FindRecognitionEngines ([in, optional] VARIANT LanguageID, [out, retval] IDaCtlRecognitionEngines** RecognitionEngines);
		[id(DISPID_IDaControl2_GetCharacterRecognitionEngine)] HRESULT GetCharacterRecognitionEngine ([in, optional] VARIANT LoadKey, [out, retval] IDaCtlRecognitionEngine** RecognitionEngine);
		[id(DISPID_IDaControl2_FindCharacterRecognitionEngines)] HRESULT FindCharacterRecognitionEngines ([in, optional] VARIANT LoadKey, [in, optional] VARIANT LanguageID, [out, retval] IDaCtlRecognitionEngines** RecognitionEngines);
	};

	/////////////////////////////////////////////////////////////////////////////

	const DISPID DISPID_IDaCtlCharacter2_HasIcon = 60;
	const DISPID DISPID_IDaCtlCharacter2_GenerateIcon = 61;
	const DISPID DISPID_IDaCtlCharacter2_IsIconShown = 62;
	const DISPID DISPID_IDaCtlCharacter2_IsIconVisible = 63;
	const DISPID DISPID_IDaCtlCharacter2_IconIdentity = 64;
	const DISPID DISPID_IDaCtlCharacter2_IconTip = 65;
	const DISPID DISPID_IDaCtlCharacter2_SpeechEngine = 66;
	const DISPID DISPID_IDaCtlCharacter2_FindSpeechEngines = 67;
	const DISPID DISPID_IDaCtlCharacter2_RecognitionEngine = 68;
	const DISPID DISPID_IDaCtlCharacter2_FindRecognitionEngines = 69;

	[
		odl,
		uuid(1147E552-A208-11DE-ABF2-002421116FB2),
		helpstring("IDaCtlCharacter2 interface"),
		dual,
		oleautomation,
		hidden
	]
	interface IDaCtlCharacter2 : IDaCtlCharacter
	{
		[id(DISPID_IDaCtlCharacter2_HasIcon), propget] HRESULT HasIcon ([out, retval] VARIANT_BOOL * HasIcon);
		[id(DISPID_IDaCtlCharacter2_GenerateIcon)] HRESULT GenerateIcon ([in, defaultvalue(0)] long ClipLeft, [in, defaultvalue(0)] long ClipTop, [in, defaultvalue(-1)] long ClipWidth, [in, defaultvalue(-1)] long ClipHeight);
		[id(DISPID_IDaCtlCharacter2_IsIconShown), propget] HRESULT IsIconShown ([out, retval] VARIANT_BOOL * IsIconShown);
		[id(DISPID_IDaCtlCharacter2_IsIconShown), propput] HRESULT IsIconShown ([in] VARIANT_BOOL IsIconShown);
		[id(DISPID_IDaCtlCharacter2_IsIconVisible), propget] HRESULT IsIconVisible ([out, retval] VARIANT_BOOL * IsIconVisible);
		[id(DISPID_IDaCtlCharacter2_IconIdentity), propget] HRESULT IconIdentity ([out, retval] BSTR * IconIdentity);
		[id(DISPID_IDaCtlCharacter2_IconIdentity), propput] HRESULT IconIdentity ([in] BSTR IconIdentity);
		[id(DISPID_IDaCtlCharacter2_IconTip), propget] HRESULT IconTip ([out, retval] BSTR * IconTip);
		[id(DISPID_IDaCtlCharacter2_IconTip), propput] HRESULT IconTip ([in] BSTR IconTip);
		[id(DISPID_IDaCtlCharacter2_SpeechEngine), propget] HRESULT SpeechEngine ([in, defaultvalue(0)] VARIANT_BOOL GetDefault, [out, retval] IDaCtlSpeechEngine** SpeechEngine);
		[id(DISPID_IDaCtlCharacter2_FindSpeechEngines)] HRESULT FindSpeechEngines ([in, optional] VARIANT LanguageID, [out, retval] IDaCtlSpeechEngines** SpeechEngines);
		[id(DISPID_IDaCtlCharacter2_RecognitionEngine), propget] HRESULT RecognitionEngine ([in, defaultvalue(0)] VARIANT_BOOL GetDefault, [out, retval] IDaCtlRecognitionEngine** RecognitionEngine);
		[id(DISPID_IDaCtlCharacter2_FindRecognitionEngines)] HRESULT FindRecognitionEngines ([in, optional] VARIANT LanguageID, [out, retval] IDaCtlRecognitionEngines** RecognitionEngines);
	};

	/////////////////////////////////////////////////////////////////////////////
	// Classes
	/////////////////////////////////////////////////////////////////////////////

	[
		uuid(1147E530-A208-11DE-ABF2-002421116FB2),
		control,
		helpstring("Agent Control")
	]
	coclass DaControl
	{
		[default] interface IDaControl2;
		interface IDaControl;
		[default, source] dispinterface _DaCtlEvents;
	};

	[
		uuid(1147E531-A208-11DE-ABF2-002421116FB2),
		helpstring("Characters Object"),
		noncreatable
	]
	coclass DaCtlCharacters
	{
		[default] interface IDaCtlCharacters;
	};

	[
		uuid(1147E532-A208-11DE-ABF2-002421116FB2),
		helpstring("Character Object"),
		noncreatable
	]
	coclass DaCtlCharacter
	{
		[default] interface IDaCtlCharacter2;
		interface IDaCtlCharacter;
	};

	[
		uuid(1147E533-A208-11DE-ABF2-002421116FB2),
		helpstring("Balloon Object"),
		noncreatable
	]
	coclass DaCtlBalloon
	{
		[default] interface IDaCtlBalloon;
	};

	[
		uuid(1147E534-A208-11DE-ABF2-002421116FB2),
		helpstring("Commands Object"),
		noncreatable
	]
	coclass DaCtlCommands
	{
		[default] interface IDaCtlCommands;
	};

	[
		uuid(1147E535-A208-11DE-ABF2-002421116FB2),
		helpstring("Command Object"),
		noncreatable
	]
	coclass DaCtlCommand
	{
		[default] interface IDaCtlCommand;
	};

	[
		uuid(1147E536-A208-11DE-ABF2-002421116FB2),
		helpstring("Request Object"),
		noncreatable
	]
	coclass DaCtlRequest
	{
		[default] interface IDaCtlRequest;
	};

	[
		uuid(1147E537-A208-11DE-ABF2-002421116FB2),
		helpstring("AudioOutput Object"),
		noncreatable
	]
	coclass DaCtlAudioOutput
	{
		[default] interface IDaCtlAudioObject;
	};

	[
		uuid(1147E538-A208-11DE-ABF2-002421116FB2),
		helpstring("SpeechInput Object"),
		noncreatable
	]
	coclass DaCtlSpeechInput
	{
		[default] interface IDaCtlSpeechInput;
	};

	[
		uuid(1147E539-A208-11DE-ABF2-002421116FB2),
		helpstring("PropertySheet Object"),
		noncreatable
	]
	coclass DaCtlPropertySheet
	{
		[default] interface IDaCtlPropertySheet;
	};

	[
		uuid(1147E53A-A208-11DE-ABF2-002421116FB2),
		helpstring("UserInput Object"),
		noncreatable
	]
	coclass DaCtlUserInput
	{
		[default] interface IDaCtlUserInput;
	};

	[
		uuid(1147E53B-A208-11DE-ABF2-002421116FB2),
		helpstring("CommandsWindow Object"),
		noncreatable
	]
	coclass DaCtlCommandsWindow
	{
		[default] interface IDaCtlCommandsWindow;
	};

	[
		uuid(1147E54B-A208-11DE-ABF2-002421116FB2),
		helpstring("AnimationNames Object"),
		noncreatable
	]
	coclass DaCtlAnimationNames
	{
		[default] interface IDaCtlAnimationNames;
	};

	/////////////////////////////////////////////////////////////////////////////
	// Version 1.1 Classes
	/////////////////////////////////////////////////////////////////////////////

	[
		uuid(1147E558-A208-11DE-ABF2-002421116FB2),
		helpstring("CharacterFiles Object"),
		noncreatable
	]
	coclass DaCtlCharacterFiles
	{
		[default] interface IDaCtlCharacterFiles;
	};

	[
		uuid(1147E553-A208-11DE-ABF2-002421116FB2),
		helpstring("SpeechEngine Object"),
		noncreatable
	]
	coclass DaCtlSpeechEngine
	{
		[default] interface IDaCtlSpeechEngine;
	};

	[
		uuid(1147E554-A208-11DE-ABF2-002421116FB2),
		helpstring("SpeechEngines Object"),
		noncreatable
	]
	coclass DaCtlSpeechEngines
	{
		[default] interface IDaCtlSpeechEngines;
	};

	[
		uuid(1147E555-A208-11DE-ABF2-002421116FB2),
		helpstring("RecognitionEngine Object"),
		noncreatable
	]
	coclass DaCtlRecognitionEngine
	{
		[default] interface IDaCtlRecognitionEngine;
	};

	[
		uuid(1147E556-A208-11DE-ABF2-002421116FB2),
		helpstring("RecognitionEngines Object"),
		noncreatable
	]
	coclass DaCtlRecognitionEngines
	{
		[default] interface IDaCtlRecognitionEngines;
	};

	/////////////////////////////////////////////////////////////////////////////

	//{{AFX_APPEND_ODL}}
	//}}AFX_APPEND_ODL}}
};
