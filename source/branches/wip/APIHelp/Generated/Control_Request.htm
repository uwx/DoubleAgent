<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN" ""[]>
<HTML>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252" />
		<title>The Request Object</title>
		<link rel="STYLESHEET" href="../css/dahelp.css" />
	</head>
	<body>
		<table class="pagetable" cellspacing="0" cellpadding="0">
			<tr>
				<td class="runninghead">Double Agent API</td>
			</tr>
			<tr>
				<td class="pagehead">
					<h3>The Request Object</h3>
				</td>
			</tr>
			<tr>
				<td class="page">
					<h4 class="summary">Description</h4>
				<p>
					Double Agent processes some methods, such as <a href="Control_Characters_Load.htm" class="see keyword">Load</a>, <a href="Control_Character_Play.htm" class="see keyword">Play</a>,
					and <a href="Control_Character_Speak.htm" class="see keyword">Speak</a>, asynchronously. This allows your application code to continue while
					the method is completing. When a client application calls one of these methods, the control queues
					the request and returns a <em class="self keyword">Request Object</em>. The <em class="self keyword">Request Object</em> allows you to check
					the status of your request by keeping a reference to the object.
				</p>
			<div id="Syntax">
				<dl><dt>
							<h4>
								<a name="Properties"> </a>Properties
							</h4>
						</dt><dd>
							<table class="syntax"><tr><td width="275ex">
										<a href="Control_Request_Number.htm" class="see keyword">Number</a>
									</td><td>
										Returns the error or cause of the <a href="Control_Request_Status.htm" class="see keyword">Status</a> code.
									</td></tr><tr><td>
										<a href="Control_Request_Description.htm" class="see keyword">Description</a>
									</td><td>
										Returns a description of a request error <a href="Control_Request_Number.htm" class="see keyword">Number</a>.
									</td></tr><tr><td>
										<a href="Control_Request_Status.htm" class="see keyword">Status</a>
									</td><td>
										You can use the <em class="self keyword">Status</em> property to check the status of your request.
									</td></tr></table>
						</dd></dl>
			</div><h4 class="remarks">Remarks</h4>
				<p>
					If you create a <em class="self ">Request Object</em> reference, Double Agent automatically notifies you
					when an animation request has started or completed through the <a href="Control_Event_RequestStart.htm" class="see keyword">RequestStart</a>
					and <a href="Control_Event_RequestComplete.htm" class="see keyword">RequestComplete</a> events. Because methods that return <em class="self ">Request Objects</em>
					are asynchronous and may not complete during the scope of the calling function, declare your reference to
					the <em class="self ">Request Object</em> globally.
				</p>
				<p>
					The following methods can return a <em class="self ">Request Object</em>: <a href="Control_Character_GestureAt.htm" class="see ">GestureAt</a>,
					<a href="Control_Character_Hide.htm" class="see ">Hide</a>, <a href="Control_Character_Interrupt.htm" class="see ">Interrupt</a>,
					<a href="Control_Characters_Load.htm" class="see ">Load</a>, <a href="Control_Character_MoveTo.htm" class="see ">MoveTo</a>, <a href="Control_Character_Play.htm" class="see ">Play</a>,
					<a href="Control_Character_Prepare.htm" class="see ">Prepare</a>, <a href="Control_Character_Show.htm" class="see ">Show</a>, <a href="Control_Character_Speak.htm" class="see ">Speak</a>,
					<a href="Control_Character_Think.htm" class="see ">Think</a>, and <a href="Control_Character_Wait.htm" class="see ">Wait</a>.
				</p>
			
				<h4 class="details">Examples</h4>
				<div class="example">
					<p>
						In Visual Basic, first declare an object variable:
					</p>
					<pre class="example"><em class="keyword">Dim</em> MyRequest <em class="keyword">as</em> <em class="keyword">Object</em></pre>
					<p>
						In VBScript, you don't include the variable type in your declaration:
					</p>
					<pre class="example"><em class="keyword">Dim</em> MyRequest</pre>
					<p>
						And use Visual Basic's <em class="keyword">Set</em> statement to assign the variable to the return value of
						the method call:
					</p>
					<pre class="example"><em class="keyword">Set</em> MyRequest = <em class="token">control</em>.<em class="keyword">Characters</em>("<em class="token">CharacterID</em>").<em class="token">method</em> (<em class="token">parameter[s]</em>)</pre>
					<p>
						This adds a reference to the <em class="self ">Request Object</em>. The <em class="self ">Request Object</em>
						will be destroyed when there are no more references to it. Where you declare the <em class="self ">Request Object</em>
						and how you use it determines its lifetime. If the object is declared local to a subroutine or function,
						it will be destroyed when it goes out of scope; that is, when the subroutine or function ends.
						If the object is declared globally, it will not be destroyed until either the program terminates or
						a new value (or a value set to "empty") is assigned to the object.
					</p>
				</div>
			<h4 class="seealso">See Also</h4><a href="Control_Event_RequestStart.htm">The RequestStart Event</a><br /><a href="Control_Event_RequestComplete.htm">The RequestComplete Event</a></td>
			</tr>
		</table>
	</body>
</HTML>