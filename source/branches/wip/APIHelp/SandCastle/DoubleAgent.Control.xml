<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly> <name>Double Agent Control</name></assembly>
<members>

<member name="F:DoubleAgent.Control.ActiveStateType.Inactive">
<summary>Your client application is <em>not</em> the character's active client.</summary>
<value>0</value>
</member>

<member name="F:DoubleAgent.Control.ActiveStateType.Active">
<summary>Your client application is the character's active client.</summary>
<value>1</value>
</member>

<member name="F:DoubleAgent.Control.ActiveStateType.InputActive">
<summary>The character is the <glossary>input-active</glossary> character and will receive user input.</summary>
<value>2</value>
</member>

<member name="F:DoubleAgent.Control.ActiveStateType.Suspended">
<summary>Your client application is inactive, and is <em>not</em> the character's active client.</summary>
<value>4</value>
<remarks>
<para>This state applies only to a control in <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#standalone">stand-alone</a> mode.
</para>
</remarks>
</member>

<member name="F:DoubleAgent.Control.ActiveStateType.Suspended_Active">
<summary>Your client application is inactive, and is the character's active client.</summary>
<value>5</value>
<remarks>
<para>This state applies only to a control in <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#standalone">stand-alone</a> mode.
</para>
</remarks>
</member>

<member name="F:DoubleAgent.Control.ActiveStateType.Suspended_InputActive">
<summary>Your client application is inactive, and the character will be <glossary>input-active</glossary> when your application becomes active.</summary>
<value>6</value>
<remarks>
<para>This state applies only to a control in <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#standalone">stand-alone</a> mode.
</para>
</remarks>
</member>

<member name="T:DoubleAgent.Control.ActiveStateType" kind="Enumeration">
<summary>
<para>Enumerates a character's possible activation states.
</para>
</summary>
</member>

<member name="F:DoubleAgent.Control.AudioStatusType.Available">
<summary>Text-to-speech is available.</summary>
<value>0</value>
</member>

<member name="F:DoubleAgent.Control.AudioStatusType.CharacterListening">
<summary><glossary>Listening mode</glossary> is active.</summary>
<value>5</value>
</member>

<member name="F:DoubleAgent.Control.AudioStatusType.CharacterSpeaking">
<summary>A character is currently speaking.</summary>
<value>4</value>
</member>

<member name="F:DoubleAgent.Control.AudioStatusType.Disabled">
<summary>Text-to-speech is disabled in the <a class="see" href="../html/UI_PropSheet.htm#Output">Advanced Character Options</a> window.</summary>
<value>1</value>
</member>

<member name="F:DoubleAgent.Control.AudioStatusType.Error">
<summary>The audio status could not be determined.</summary>
<value>6</value>
</member>

<member name="F:DoubleAgent.Control.AudioStatusType.UserSpeaking">
<summary><glossary>Listening mode</glossary> is active and the user is currently speaking.</summary>
<value>3</value>
</member>

<member name="T:DoubleAgent.Control.AudioStatusType" kind="Enumeration">
<summary>
<para>Enumerates the possible states of the audio device.
</para>
</summary>
<seealso cref="P:DoubleAgent.Control.Settings.AudioStatus" />
</member>

<member name="F:DoubleAgent.Control.BalloonStyleFlags.AutoHide">
<summary>The <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> is hidden automatically after a short delay.</summary>
<value>&amp;H00000004</value>
<remarks>
<para>When the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.AutoHide" /> style is set, the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> automatically hides when spoken output completes. When it's not set, the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> remains displayed until the next <see cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" /> or <see cref="M:DoubleAgent.Control.Character.Think(System.String)" /> call, the character is hidden, or the user clicks or drags the character.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Balloon.AutoHide" />
</member>

<member name="F:DoubleAgent.Control.BalloonStyleFlags.AutoPace">
<summary>The text in the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> is shown one word at a time.</summary>
<value>&amp;H00000008</value>
<remarks>
<para>When the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.AutoPace" /> style is set, the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> paces its text output based on the current output rate, for example one word at a time. When output exceeds the size of the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>, the text is automatically scrolled. When it's not set, all text included in a <see cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" /> or <see cref="M:DoubleAgent.Control.Character.Think(System.String)" /> request is displayed at once.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Balloon.AutoPace" />
</member>

<member name="F:DoubleAgent.Control.BalloonStyleFlags.Enabled">
<summary>The <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> is enabled.</summary>
<value>&amp;H00000001</value>
<remarks>
<para>When the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.Enabled" /> style is set, the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> appears when the <see cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" /> or <see cref="M:DoubleAgent.Control.Character.Think(System.String)" /> method is used, unless the user overrides this setting in the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window. When it's not set, the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> does not appear.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Balloon.Enabled" />
</member>

<member name="F:DoubleAgent.Control.BalloonStyleFlags.ShowPartialLines">
<summary>Partial lines are shown when the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> text scrolls (for a <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> that's <em>not</em> <keyword>SizeToText</keyword>).</summary>
<value>&amp;H00000010</value>
<remarks>
<para>When the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.ShowPartialLines" /> style is set, the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> will show partial lines at the bottom as it scrolls its text. When it's not set, only full lines are shown. This style only applies when the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.SizeToText" /> style is <em>not</em> set.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Balloon.ShowPartialLines" />
</member>

<member name="F:DoubleAgent.Control.BalloonStyleFlags.SizeToText">
<summary>The <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> is automatically resized to fit the speech or thought text.</summary>
<value>&amp;H00000002</value>
<remarks>
<para>When the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.SizeToText" /> style is set, the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> automatically adjusts the height of the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> to the current size of the text for the <see cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" /> or <see cref="M:DoubleAgent.Control.Character.Think(System.String)" /> request. When it's not set, the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon's</a> height is based on the <see cref="P:DoubleAgent.Control.Balloon.NumberOfLines" /> property. If this style is set and you attempt to set the <see cref="P:DoubleAgent.Control.Balloon.NumberOfLines" /> property, Double Agent raises an error.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Balloon.SizeToText" />
</member>

<member name="T:DoubleAgent.Control.BalloonStyleFlags" kind="Enumeration">
<summary>
<para>Specifies settings that affect a <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon's</a> appearance and behaviour.
</para>
</summary>
<seealso cref="P:DoubleAgent.Control.Balloon.Style" />
</member>

<member name="F:DoubleAgent.Control.CharacterStyleFlags.AutoPopupMenu">
<summary>A right-click on the character or it's <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> automatically shows a <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a>.</summary>
<value>&amp;H00000004</value>
<seealso cref="P:DoubleAgent.Control.Character.AutoPopupMenu" />
</member>

<member name="F:DoubleAgent.Control.CharacterStyleFlags.IconShown">
<summary>The character has a <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> in the taskbar notification area.</summary>
<value>&amp;H00000008</value>
<seealso cref="P:DoubleAgent.Control.Character.IconShown" />
</member>

<member name="F:DoubleAgent.Control.CharacterStyleFlags.IdleEnabled">
<summary>The character enters idle mode and shows it's idling animations when it's not doing anything else.</summary>
<value>&amp;H00000002</value>
<seealso cref="P:DoubleAgent.Control.Character.IdleEnabled" />
</member>

<member name="F:DoubleAgent.Control.CharacterStyleFlags.Smoothed">
<summary>Image smoothing (antialiasing) is applied to the character's animations.</summary>
<value>&amp;H00000030</value>
<seealso cref="P:DoubleAgent.Control.Character.Smoothed" />
</member>

<member name="F:DoubleAgent.Control.CharacterStyleFlags.SmoothEdges">
<summary>Image smoothing (antialiasing) is applied to the edges of the character's animations.</summary>
<value>&amp;H00000020</value>
<seealso cref="P:DoubleAgent.Control.Character.SmoothEdges" />
</member>

<member name="F:DoubleAgent.Control.CharacterStyleFlags.SoundEffects">
<summary>The animation sound effects are played.</summary>
<value>&amp;H00000001</value>
<seealso cref="P:DoubleAgent.Control.Character.SoundEffectsEnabled" />
</member>

<member name="F:DoubleAgent.Control.CharacterStyleFlags.SuspendPause">
<summary>All requests are paused when the client is not in the foreground.</summary>
<value>&amp;H00000100</value>
<remarks>
<para>The <self>SuspendPause</self> and <see cref="F:DoubleAgent.Control.CharacterStyleFlags.SuspendStop" /> flags cannot both be set.
</para>
<note name="StandAloneOnly">This flag only applies to <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#standalone">stand-alone</a> mode.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.SuspendPause" />
</member>

<member name="F:DoubleAgent.Control.CharacterStyleFlags.SuspendStop">
<summary>All requests are stopped when the client is not in the foreground.</summary>
<value>&amp;H00000200</value>
<remarks>
<para>The <self>SuspendStop</self> and <see cref="F:DoubleAgent.Control.CharacterStyleFlags.SuspendPause" /> flags cannot both be set.
</para>
<note name="StandAloneOnly">This flag only applies to <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#standalone">stand-alone</a> mode.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.SuspendStop" />
</member>

<member name="F:DoubleAgent.Control.CharacterStyleFlags.SuspendHide">
<summary>All floating windows are hidden when the client is not in the foreground.</summary>
<value>&amp;H00000400</value>
<remarks>
<para>The <see cref="F:DoubleAgent.Control.CharacterStyleFlags.SuspendPause" /> or <see cref="F:DoubleAgent.Control.CharacterStyleFlags.SuspendStop" /> flag must also be set.
</para>
<note name="StandAloneOnly">This flag only applies to <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#standalone">stand-alone</a> mode.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.SuspendHide" />
</member>

<member name="T:DoubleAgent.Control.CharacterStyleFlags" kind="Enumeration">
<summary>
<para>Specifies settings that affect a character's appearance and behaviour.
</para>
</summary>
<seealso cref="P:DoubleAgent.Control.Character.Style" />
<seealso cref="P:DoubleAgent.Control.Control.CharacterStyle" />
</member>

<member name="F:DoubleAgent.Control.ListenCompleteType.CharacterClientDeactivated">
<summary>The character is no longer active or it's active client has changed.</summary>
<value>6</value>
</member>

<member name="F:DoubleAgent.Control.ListenCompleteType.DefaultCharacterChanged">
<summary>The default character was changed in the <a class="see" href="../html/UI_PropSheet.htm#Gallery">Advanced Character Options</a> window.</summary>
<value>7</value>
</member>

<member name="F:DoubleAgent.Control.ListenCompleteType.ProgramDisabled">
<summary>This program turned off the <glossary>Listening mode</glossary> with the <see cref="M:DoubleAgent.Control.Character.Listen(System.Boolean)" /> method.</summary>
<value>1</value>
</member>

<member name="F:DoubleAgent.Control.ListenCompleteType.ProgramTimedOut">
<summary>The <glossary>Listening mode</glossary> was started by this program with the <see cref="M:DoubleAgent.Control.Character.Listen(System.Boolean)" /> method, and it timed out.</summary>
<value>2</value>
</member>

<member name="F:DoubleAgent.Control.ListenCompleteType.UserDisabled">
<summary>Speech recognition was disabled in the <a class="see" href="../html/UI_PropSheet.htm#SpeechInput">Advanced Character Options</a> window.</summary>
<value>8</value>
</member>

<member name="F:DoubleAgent.Control.ListenCompleteType.UserReleasedKey">
<summary>The <glossary>Listening mode</glossary> was started with the <glossary>Listening key</glossary>, and the key was released.</summary>
<value>4</value>
</member>

<member name="F:DoubleAgent.Control.ListenCompleteType.UserSpeechEnded">
<summary>Speech recognition has produced a result.</summary>
<value>5</value>
</member>

<member name="F:DoubleAgent.Control.ListenCompleteType.UserTimedOut">
<summary>The <glossary>Listening mode</glossary> was started with the <glossary>Listening key</glossary>, and it timed out.</summary>
<value>3</value>
</member>

<member name="T:DoubleAgent.Control.ListenCompleteType" kind="Enumeration">
<summary>
<para>Enumerates the possible reasons that <glossary>Listening mode</glossary> could end.
</para>
</summary>
<seealso cref="E:DoubleAgent.Control.Control.ListenComplete" />
</member>

<member name="F:DoubleAgent.Control.ListeningStatusType.Available">
<summary>Conditions support speech input.</summary>
<value>0</value>
</member>

<member name="F:DoubleAgent.Control.ListeningStatusType.CharacterInactive">
<summary>Speech recognition is unavailable because another client is the active client of this character, or the current character is not <glossary>input-active</glossary>.</summary>
<value>2</value>
</member>

<member name="F:DoubleAgent.Control.ListeningStatusType.Error">
<summary>The speech recognition status could not be determined.</summary>
<value>6</value>
</member>

<member name="F:DoubleAgent.Control.ListeningStatusType.InitializeFailed">
<summary>Speech recognition is unavailable because it could not be initialized. This includes the possibility that there is no speech engine available matching the character's language setting.</summary>
<value>4</value>
</member>

<member name="F:DoubleAgent.Control.ListeningStatusType.InputDisabled">
<summary>The user has disabled speech input in the <a class="see" href="../html/UI_PropSheet.htm#SpeechInput">Advanced Character Options</a> window.</summary>
<value>5</value>
</member>

<member name="T:DoubleAgent.Control.ListeningStatusType" kind="Enumeration">
<summary>
<para>Indicates if a character can enter <glossary>Listening mode</glossary>, or why it cannot.
</para>
</summary>
<seealso cref="P:DoubleAgent.Control.Character.ListeningStatus" />
<seealso cref="P:DoubleAgent.Control.Settings.SREnabled" />
</member>

<member name="F:DoubleAgent.Control.MoveCauseType.NeverMoved">
<summary>The character hasn't moved.</summary>
<value>0</value>
</member>

<member name="F:DoubleAgent.Control.MoveCauseType.OtherProgramMoved">
<summary>Another client application moved the character.</summary>
<value>3</value>
</member>

<member name="F:DoubleAgent.Control.MoveCauseType.ProgramMoved">
<summary>Your client application moved the character.</summary>
<value>2</value>
</member>

<member name="F:DoubleAgent.Control.MoveCauseType.UserMoved">
<summary>The user dragged the character.</summary>
<value>1</value>
</member>

<member name="T:DoubleAgent.Control.MoveCauseType" kind="Enumeration">
<summary>
<para>Enumerates the possible reasons that a character moved.
</para>
</summary>
<seealso cref="P:DoubleAgent.Control.Character.MoveCause" />
<seealso cref="E:DoubleAgent.Control.Control.Move" />
</member>

<member name="F:DoubleAgent.Control.PrepareResourceType.Animation">
<summary>Download an animation.</summary>
<value>0</value>
</member>

<member name="F:DoubleAgent.Control.PrepareResourceType.State">
<summary>Download all animations for a state.</summary>
<value>1</value>
</member>

<member name="F:DoubleAgent.Control.PrepareResourceType.Wave">
<summary>Download a sound file.</summary>
<value>2</value>
</member>

<member name="T:DoubleAgent.Control.PrepareResourceType" kind="Enumeration">
<summary>
<para>Specifies the type of resource that is being requested with the <see cref="M:DoubleAgent.Control.Character.Prepare(DoubleAgent.Control.PrepareResourceType,System.String,System.Object)" /> method.
</para>
</summary>
<seealso cref="M:DoubleAgent.Control.Character.Prepare(DoubleAgent.Control.PrepareResourceType,System.String,System.Object)" />
</member>

<member name="F:DoubleAgent.Control.RequestStatus.Failed">
<summary>The request failed and an error code is available in the <see cref="T:DoubleAgent.Control.Request" /> Object's <see cref="P:DoubleAgent.Control.Request.Number" /> property.</summary>
<value>1</value>
</member>

<member name="F:DoubleAgent.Control.RequestStatus.InProgress">
<summary>The request is currently in progress.</summary>
<value>4</value>
</member>

<member name="F:DoubleAgent.Control.RequestStatus.Interrupted">
<summary>The request was interrupted and an error code is available in the <see cref="T:DoubleAgent.Control.Request" /> Object's <see cref="P:DoubleAgent.Control.Request.Number" /> property.</summary>
<value>3</value>
</member>

<member name="F:DoubleAgent.Control.RequestStatus.Pending">
<summary>The request is on the queue.</summary>
<value>2</value>
</member>

<member name="F:DoubleAgent.Control.RequestStatus.Success">
<summary>The request was successfully completed.</summary>
<value>0</value>
</member>

<member name="T:DoubleAgent.Control.RequestStatus" kind="Enumeration">
<summary>
<para>Specifies the <see cref="P:DoubleAgent.Control.Request.Status" /> of a <see cref="T:DoubleAgent.Control.Request" /> Object.
</para>
</summary>
<seealso cref="P:DoubleAgent.Control.Request.Status" />
</member>

<member name="F:DoubleAgent.Control.SpeechGenderType.Female">
<summary>A female voice.</summary>
<value>1</value>
</member>

<member name="F:DoubleAgent.Control.SpeechGenderType.Male">
<summary>A male voice.</summary>
<value>2</value>
</member>

<member name="F:DoubleAgent.Control.SpeechGenderType.Neutral">
<summary>Either a female or male voice.</summary>
<value>0</value>
</member>

<member name="T:DoubleAgent.Control.SpeechGenderType" kind="Enumeration">
<summary>
<para>Specifies the gender of a text-to-speech voice.
</para>
</summary>
</member>

<member name="F:DoubleAgent.Control.StopAllFlags.Everything">
<summary>Stop all pending requests.</summary>
<value>&amp;HFFFFFFFF</value>
</member>

<member name="F:DoubleAgent.Control.StopAllFlags.ImmediatePrepare">
<summary>Stop any non-queued animation or file downloads (<keyword>Prepare</keyword> method with <token>Queue</token> parameter set to <keyword>False</keyword>)</summary>
<value>&amp;H00000010</value>
</member>

<member name="F:DoubleAgent.Control.StopAllFlags.Move">
<summary>Stop any pending or running move requests.</summary>
<value>&amp;H00000002</value>
</member>

<member name="F:DoubleAgent.Control.StopAllFlags.Play">
<summary>Stop any pending or running animations.</summary>
<value>&amp;H00000001</value>
</member>

<member name="F:DoubleAgent.Control.StopAllFlags.QueuedPrepare">
<summary>Stop any queued animation or file downloads (<keyword>Prepare</keyword> method with <token>Queue</token> parameter set to <keyword>True</keyword>).</summary>
<value>&amp;H00000008</value>
</member>

<member name="F:DoubleAgent.Control.StopAllFlags.Speak">
<summary>Stop any pending or running speech requests.</summary>
<value>&amp;H00000004</value>
</member>

<member name="F:DoubleAgent.Control.StopAllFlags.Visibility">
<summary>Stop any pending show or hide requests.</summary>
<value>&amp;H00000020</value>
</member>

<member name="T:DoubleAgent.Control.StopAllFlags" kind="Enumeration">
<summary>
<para>Defines the scope of the <see cref="M:DoubleAgent.Control.Character.StopAll(System.Object)" /> method.
</para>
</summary>
</member>

<member name="F:DoubleAgent.Control.VisibilityCauseType.NeverShown">
<summary>The character has not been shown.</summary>
<value>0</value>
</member>

<member name="F:DoubleAgent.Control.VisibilityCauseType.OtherProgramHid">
<summary>Another client application hid the character.</summary>
<value>5</value>
</member>

<member name="F:DoubleAgent.Control.VisibilityCauseType.OtherProgramShowed">
<summary>Another client application showed the character.</summary>
<value>6</value>
</member>

<member name="F:DoubleAgent.Control.VisibilityCauseType.ProgramHid">
<summary>Your application hid the character.</summary>
<value>3</value>
</member>

<member name="F:DoubleAgent.Control.VisibilityCauseType.ProgramShowed">
<summary>Your application showed the character.</summary>
<value>4</value>
</member>

<member name="F:DoubleAgent.Control.VisibilityCauseType.UserHid">
<summary>The user hid the character using the command on the character's <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> or using speech input.</summary>
<value>1</value>
</member>

<member name="F:DoubleAgent.Control.VisibilityCauseType.UserShowed">
<summary>The user showed the character using the command on the character's <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> or using speech input.</summary>
<value>2</value>
</member>

<member name="T:DoubleAgent.Control.VisibilityCauseType" kind="Enumeration">
<summary>
<para>Enumerates the possible reasons that a character was shown or hidden.
</para>
</summary>
<seealso cref="P:DoubleAgent.Control.Character.VisibilityCause" />
<seealso cref="E:DoubleAgent.Control.Control.Show" />
<seealso cref="E:DoubleAgent.Control.Control.Hide" />
</member>

<member name="M:DoubleAgent.Control.Control.FindCharacterSREngines(System.Object,System.Object)">
<summary> Retrieves a collection of <see cref="T:DoubleAgent.Control.SREngine" /> Objects that meet a specific character's requirements.</summary>
<param name="Provider">A <typename>string</typename> value that specifies the character file, or an empty string for the default character.</param>
<param name="LanguageID">An optional <typename>numeric</typename> value that specifies the language to match, or <keyword>zero</keyword> to match any language.</param>
<returns name="SREngines">A <see class="typename" cref="T:DoubleAgent.Control.SREngines" /> Collection that matches the character's text-to-speech requirements and the specified <paramref name="LanguageID" /> (if any).</returns>
<remarks>
<para>This method allows you to choose a speech recognition engine without loading the character.
</para>
<para name="Provider">For more information on specifying character file names, see the <see cref="M:DoubleAgent.Control.Characters.Load(System.String,System.Object)" /> method.
</para>
<note name="Provider">This method does not support the HTTP protocol for character files.</note>
</remarks>
<seealso cref="T:DoubleAgent.Control.SREngines" />
<seealso cref="T:DoubleAgent.Control.SREngine" />
<seealso cref="M:DoubleAgent.Control.Characters.Load(System.String,System.Object)" />
</member>

<member name="M:DoubleAgent.Control.Control.FindCharacterTTSEngines(System.Object,System.Object)">
<summary> Retrieves a collection of <see cref="T:DoubleAgent.Control.TTSEngine" /> Objects that meet a specific character's requirements.</summary>
<param name="Provider">A <typename>string</typename> value that specifies the character file, or an empty string for the default character.</param>
<param name="LanguageID">An optional <typename>numeric</typename> value that specifies the language to match, or <keyword>zero</keyword> to match any language.</param>
<returns name="TTSEngines">A <see class="typename" cref="T:DoubleAgent.Control.TTSEngines" /> Collection that matches the character's text-to-speech requirements and the specified <paramref name="LanguageID" /> (if any).</returns>
<remarks>
<para>This method allows you to choose a text-to-speech engine without loading the character.
</para>
<para name="Provider">For more information on specifying character file names, see the <see cref="M:DoubleAgent.Control.Characters.Load(System.String,System.Object)" /> method.
</para>
<note name="Provider">This method does not support the HTTP protocol for character files.</note>
</remarks>
<seealso cref="T:DoubleAgent.Control.TTSEngines" />
<seealso cref="T:DoubleAgent.Control.TTSEngine" />
<seealso cref="M:DoubleAgent.Control.Characters.Load(System.String,System.Object)" />
</member>

<member name="M:DoubleAgent.Control.Control.FindSREngines(System.Object)">
<summary> Retrieves a collection of <see cref="T:DoubleAgent.Control.SREngine" /> Objects for a specific language.</summary>
<param name="LanguageID">A <typename>numeric</typename> value that specifies the language to match, or <keyword>zero</keyword> for any language.</param>
<returns name="SREngines">A <see class="typename" cref="T:DoubleAgent.Control.SREngines" /> Collection that matches the the specified <paramref name="LanguageID" />.</returns>
<remarks>
<para>This method allows you to query available speech recognition engines without loading a character.
</para>
<note>Using this method with zero for the <paramref name="LanguageID" /> is equivalent to using the <see cref="P:DoubleAgent.Control.Control.SREngines" /> property.</note>
</remarks>
<seealso cref="T:DoubleAgent.Control.SREngines" />
<seealso cref="T:DoubleAgent.Control.SREngine" />
</member>

<member name="M:DoubleAgent.Control.Control.FindTTSEngines(System.Object,System.Object)">
<summary> Retrieves a collection of <see cref="T:DoubleAgent.Control.TTSEngine" /> Objects for a specific language and gender.</summary>
<param name="LanguageID">A <typename>numeric</typename> value that specifies the language to match, or <keyword>zero</keyword> for any language.</param>
<param name="Gender">A <typename>numeric</typename> value, or a member of the <see class="typename" cref="T:DoubleAgent.Control.SpeechGenderType" /> Enumeration, that specifies the gender to match:
<list type="table">
<item name="Female"><term xml:space="preserve">
1 = <keyword>Female</keyword>
</term>
<description>A female voice.</description>
</item>
<item name="Male"><term xml:space="preserve">
2 = <keyword>Male</keyword>
</term>
<description>A male voice.</description>
</item>
<item name="Neutral"><term xml:space="preserve">
0 = <keyword>Neutral</keyword>
</term>
<description>Either a female or male voice.</description>
</item>
</list>
</param>
<returns name="TTSEngines">A <see class="typename" cref="T:DoubleAgent.Control.TTSEngines" /> Collection that matches the the specified <paramref name="LanguageID" /> and <paramref name="Gender" />.</returns>
<remarks>
<para>This method allows you to query available text-to-speech engines without loading a character.
</para>
</remarks>
<seealso cref="T:DoubleAgent.Control.SpeechGenderType" />
<seealso cref="T:DoubleAgent.Control.TTSEngines" />
<seealso cref="T:DoubleAgent.Control.TTSEngine" />
</member>

<member name="M:DoubleAgent.Control.Control.GetCharacterSREngine(System.Object)">
<summary> Retrieves a <see cref="T:DoubleAgent.Control.SREngine" /> Object that meets a specific character's requirements.</summary>
<param name="Provider">A <typename>string</typename> value that specifies the character file, or an empty string for the default character.</param>
<returns name="SREngine">The <see class="typename" cref="T:DoubleAgent.Control.SREngine" /> Object that matches the character's speech recognition requirements (if any).</returns>
<remarks>
<para>This method allows you to query a character's <em>default</em> speech recognition engine without loading the character.
</para>
<para name="Provider">For more information on specifying character file names, see the <see cref="M:DoubleAgent.Control.Characters.Load(System.String,System.Object)" /> method.
</para>
<note name="Provider">This method does not support the HTTP protocol for character files.</note>
</remarks>
<seealso cref="T:DoubleAgent.Control.SREngine" />
<seealso cref="M:DoubleAgent.Control.Characters.Load(System.String,System.Object)" />
</member>

<member name="M:DoubleAgent.Control.Control.GetCharacterTTSEngine(System.Object)">
<summary> Retrieves a <see cref="T:DoubleAgent.Control.TTSEngine" /> Object that meets a specific character's requirements.</summary>
<param name="Provider">A <typename>string</typename> value that specifies the character file, or an empty string for the default character.</param>
<returns name="TTSEngine">The <see class="typename" cref="T:DoubleAgent.Control.TTSEngine" /> Object that matches the character's text-to-speech requirements (if any).</returns>
<remarks>
<para>This method allows you to query a character's <em>default</em> text-to-speech engine without loading the character.
</para>
<para name="Provider">For more information on specifying character file names, see the <see cref="M:DoubleAgent.Control.Characters.Load(System.String,System.Object)" /> method.
</para>
<note name="Provider">This method does not support the HTTP protocol for character files.</note>
</remarks>
<seealso cref="T:DoubleAgent.Control.TTSEngine" />
<seealso cref="M:DoubleAgent.Control.Characters.Load(System.String,System.Object)" />
</member>

<member name="M:DoubleAgent.Control.Control.ShowDefaultCharacterProperties(System.Object,System.Object)">
<summary> Shows the <a class="see" href="../html/UI_PropSheet.htm#Gallery">Gallery</a> page of the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window.</summary>
<param name="X">The horizontal position, in pixels, of the <see cref="P:DoubleAgent.Control.PropertySheet.Left" /> window. This parameter is optional. For programming languages that don't support optional parameters, a negative value will be ignored.</param>
<param name="Y">The vertical position, in pixels, of the <see cref="P:DoubleAgent.Control.PropertySheet.Top" /> window. This parameter is optional. For programming languages that don't support optional parameters, a negative value will be ignored.</param>
<remarks>
<para>This method is obsolete, but is still supported for backward compatibility. Calling it shows the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window. New applications should use the <see cref="T:DoubleAgent.Control.PropertySheet"></see> Object instead.
</para>
<para>If you don't specify the <paramref name="X" /> and <paramref name="Y" /> coordinates (or use a negative value for programming languages that don't support optional parameters), the window appears at the last location it was displayed.
</para>
</remarks>
<seealso cref="T:DoubleAgent.Control.PropertySheet" />
<seealso cref="P:DoubleAgent.Control.PropertySheet.Page" />
<seealso cref="E:DoubleAgent.Control.Control.DefaultCharacterChange" />
</member>

<member name="P:DoubleAgent.Control.Control.AudioOutput">
<summary> deprecated</summary>
<remarks>
<para>This property has been replaced by the <see cref="P:DoubleAgent.Control.Control.Settings" /> property, but is still supported for backward compatibility.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Control.AutoConnect">
<summary> Specifies if the Double Agent control will automatically connect to the Double Agent server.</summary>
<value name="AutoConnect">A <typename>numeric</typename> value specifying whether automatic connection is enabled. 
<para>On a 32-bit system:
</para>
<list type="table">
<item>
<term width="150ex">0</term>
<description>The control will <em>not</em> automatically connect to the server.</description>
</item>
<item>
<term width="150ex">Any non-zero value</term>
<description>The control will automatically connect to the server.</description>
</item>
</list>
<para>On a 64-bit system:
</para>
<list type="table">
<item>
<term width="150ex">0</term>
<description>The control will <em>not</em> automatically connect to the server.</description>
</item>
<item>
<term width="150ex">32</term>
<description>The control will automatically connect to the 32-bit server. If the 32-bit server is not installed, the 64-bit server will be used.</description>
</item>
<item>
<term width="150ex">64</term>
<description>The control will automatically connect to the 64-bit server. If the 64-bit server is not installed, the 32-bit server will be used.</description>
</item>
<item>
<term width="150ex">Any other non-zero value</term>
<description>The control will automatically connect to server with the same architecture as the calling process. If the matching server is not installed, then the other server will be used.</description>
</item>
</list>
</value>
<remarks>
<para>If this property is <keyword>non-zero</keyword>, then the control will automatically establish a connection with the server the first time it's required. To use the control in <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#standalone">stand-alone</a> mode, you must set this property to <keyword>zero</keyword>.
</para>
<para>For compatibility with Microsoft Agent, the default value for this property is <keyword>True</keyword>.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Control.Connected" />
</member>

<member name="P:DoubleAgent.Control.Control.AutoSize">
<summary> Specifies if the ActiveX<sup>®</sup> control is automatically sized to fit the <see cref="P:DoubleAgent.Control.Control.ControlCharacter" />.</summary>
<value name="AutoSize">A <typename>boolean</typename> value that specifies if the control's size is automatically adjusted to exactly fit the <see class="see" cref="P:DoubleAgent.Control.Control.ControlCharacter" />.</value>
<remarks>
<note name="ContainedOnly">This property is relevant only when the control is visible (i.e. when it's used in <a class="see" href="..\Programming\Ctl_Programming_Modes.htm">contained</a> mode).</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Control.ControlCharacter" />
</member>

<member name="P:DoubleAgent.Control.Control.BackColor">
<summary> Specifies the ActiveX<sup>®</sup> control's background color.</summary>
<value name="BackColor">An <typename>OLECOLOR</typename> value for the control's background color.</value>
<remarks>
<para name="Color">The valid range for a normal RGB color is 0 to 16,777,215 (&amp;HFFFFFF). The high byte of a number in this range equals 0; the lower 3 bytes, from least to most significant byte, determine the amount of red, green, and blue, respectively. The red, green, and blue components are each represented by a number between 0 and 255 (&amp;HFF).
</para>
<para name="OleColor">If the high byte of an OLECOLOR is &amp;H80, the lower 3 bytes contain a <glossary>system color index</glossary>.
</para>
<note name="ContainedOnly">This property is relevant only when the control is visible (i.e. when it's used in <a class="see" href="..\Programming\Ctl_Programming_Modes.htm">contained</a> mode).</note>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Control.BorderColor">
<summary> Specifies the ActiveX<sup>®</sup> control's border color.</summary>
<value name="BorderColor">An <typename>OLECOLOR</typename> value for the control's border color.</value>
<remarks>
<para name="Color">The valid range for a normal RGB color is 0 to 16,777,215 (&amp;HFFFFFF). The high byte of a number in this range equals 0; the lower 3 bytes, from least to most significant byte, determine the amount of red, green, and blue, respectively. The red, green, and blue components are each represented by a number between 0 and 255 (&amp;HFF).
</para>
<para name="OleColor">If the high byte of an OLECOLOR is &amp;H80, the lower 3 bytes contain a <glossary>system color index</glossary>.
</para>
<note name="ContainedOnly">This property is relevant only when the control is visible (i.e. when it's used in <a class="see" href="..\Programming\Ctl_Programming_Modes.htm">contained</a> mode).</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Control.BorderStyle" />
<seealso cref="P:DoubleAgent.Control.Control.BorderVisible" />
</member>

<member name="P:DoubleAgent.Control.Control.BorderStyle">
<summary> Specifies the style of the ActiveX<sup>®</sup> control's border.</summary>
<value name="BorderStyle">A <typename>numeric</typename> value that specifies the border style as follows: 
<list type="table">
<item><term xml:space="preserve">0 = Default</term>
<description>The default border style (default for the target environment)</description>
</item>
<item><term xml:space="preserve">1 = FixedSingle</term>
<description>A fixed-width single line of width <see cref="P:DoubleAgent.Control.Control.BorderWidth" /> and color <see cref="P:DoubleAgent.Control.Control.BorderColor" /></description>
</item>
</list>
</value>
<remarks>
<note name="ContainedOnly">This property is relevant only when the control is visible (i.e. when it's used in <a class="see" href="..\Programming\Ctl_Programming_Modes.htm">contained</a> mode).</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Control.BorderVisible" />
<seealso cref="P:DoubleAgent.Control.Control.BorderColor" />
<seealso cref="P:DoubleAgent.Control.Control.BorderWidth" />
</member>

<member name="P:DoubleAgent.Control.Control.BorderVisible">
<summary> Specifies if the ActiveX<sup>®</sup> control's has a visible border.</summary>
<value name="BorderVisible">An <typename>boolean</typename> value that indicates if the border is visible.</value>
<remarks>
<note name="ContainedOnly">This property is relevant only when the control is visible (i.e. when it's used in <a class="see" href="..\Programming\Ctl_Programming_Modes.htm">contained</a> mode).</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Control.BorderColor" />
<seealso cref="P:DoubleAgent.Control.Control.BorderStyle" />
<seealso cref="P:DoubleAgent.Control.Control.BorderWidth" />
</member>

<member name="P:DoubleAgent.Control.Control.BorderWidth">
<summary> Specifies the width of the ActiveX<sup>®</sup> control's border.</summary>
<value name="BorderWidth">An <typename>numeric</typename> value that specifies the border width, in pixels.</value>
<remarks>
<note name="ContainedOnly">This property is relevant only when the control is visible (i.e. when it's used in <a class="see" href="..\Programming\Ctl_Programming_Modes.htm">contained</a> mode).</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Control.BorderVisible" />
<seealso cref="P:DoubleAgent.Control.Control.BorderColor" />
<seealso cref="P:DoubleAgent.Control.Control.BorderStyle" />
</member>

<member name="P:DoubleAgent.Control.Control.MousePointer">
<summary> Specifies the pointer to show when the mouse moves over the ActiveX<sup>®</sup> control.</summary>
<value name="MousePointer">A <typename>numeric</typename> value that specifies the pointer style as follows: 
<list type="table">
<item><term xml:space="preserve">0 = Default</term>
<description>The default pointer style (default for the target environment)</description>
</item>
<item><term xml:space="preserve">1 = Arrow</term>
<description>The arrow-shaped pointer</description>
</item>
<item><term xml:space="preserve">2 = Cross</term>
<description>The cross-shaped pointer</description>
</item>
<item><term xml:space="preserve">11 = Hourglass</term>
<description>The "wait" pointer</description>
</item>
<item><term xml:space="preserve">12 = No Drop</term>
<description>The pointer that indicates that drag-and-drop is not possible here</description>
</item>
<item><term xml:space="preserve">13 = Arrow and Hourglass</term>
<description>The pointer that indicates that an application is starting</description>
</item>
<item><term xml:space="preserve">14 = Arrow and Question</term>
<description>The pointer used for "What's this?" help</description>
</item>
<item><term xml:space="preserve">16 = Hand</term>
<description>The hand-shaped pointer</description>
</item>
</list>
</value>
<remarks>
<note name="ContainedOnly">This property is relevant only when the control is visible (i.e. when it's used in <a class="see" href="..\Programming\Ctl_Programming_Modes.htm">contained</a> mode).</note>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Control.CharacterFiles">
<summary> Returns the control's <see cref="T:DoubleAgent.Control.CharacterFiles" /> Object.</summary>
<value name="CharacterFiles">The control's <see class="typename" cref="T:DoubleAgent.Control.CharacterFiles" /> Object.</value>
</member>

<member name="P:DoubleAgent.Control.Control.Characters">
<summary> Returns the control's <see cref="T:DoubleAgent.Control.Characters" /> Collection.</summary>
<value name="Characters">The control's <see class="typename" cref="T:DoubleAgent.Control.Characters" /> Collection.</value>
</member>

<member name="P:DoubleAgent.Control.Control.CharacterStyle">
<summary> Specifies the initial style to use when a <see cref="T:DoubleAgent.Control.Character" /> is loaded.</summary>
<value name="CharacterStyle">A <typename>numeric</typename> bit-field value that specifies the <see cref="P:DoubleAgent.Control.Character.Style" /> to apply when a <see cref="T:DoubleAgent.Control.Character" /> is loaded:
<list type="table">
<item name="SoundEffects"><term xml:space="preserve">
&amp;H00000001 = <keyword>SoundEffects</keyword>
</term>
<description>The animation sound effects are played.</description>
</item>
<item name="IdleEnabled"><term xml:space="preserve">
&amp;H00000002 = <keyword>IdleEnabled</keyword>
</term>
<description>The character enters idle mode and shows it's idling animations when it's not doing anything else.</description>
</item>
<item name="AutoPopupMenu"><term xml:space="preserve">
&amp;H00000004 = <keyword>AutoPopupMenu</keyword>
</term>
<description>A right-click on the character or it's <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> automatically shows a <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a>.</description>
</item>
<item name="IconShown"><term xml:space="preserve">
&amp;H00000008 = <keyword>IconShown</keyword>
</term>
<description>The character has a <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> in the taskbar notification area.</description>
</item>
<item name="SmoothEdges"><term xml:space="preserve">
&amp;H00000020 = <keyword>SmoothEdges</keyword>
</term>
<description>Image smoothing (antialiasing) is applied to the edges of the character's animations.</description>
</item>
<item name="Smoothed"><term xml:space="preserve">
&amp;H00000030 = <keyword>Smoothed</keyword>
</term>
<description>Image smoothing (antialiasing) is applied to the character's animations.</description>
</item>
<item name="SuspendPause"><term xml:space="preserve">
&amp;H00000100 = <keyword>SuspendPause</keyword>
</term>
<description>All requests are paused when the client is not in the foreground.</description>
</item>
<item name="SuspendStop"><term xml:space="preserve">
&amp;H00000200 = <keyword>SuspendStop</keyword>
</term>
<description>All requests are stopped when the client is not in the foreground.</description>
</item>
<item name="SuspendHide"><term xml:space="preserve">
&amp;H00000400 = <keyword>SuspendHide</keyword>
</term>
<description>All floating windows are hidden when the client is not in the foreground.</description>
</item>
</list>
</value>
<remarks>
<para>Setting this property allows you to establish a default <see cref="T:DoubleAgent.Control.Character" />.<see cref="P:DoubleAgent.Control.Character.Style" /> for you application. It's initial value is <see class="" cref="F:DoubleAgent.Control.CharacterStyleFlags.AutoPopupMenu" />, <see class="" cref="F:DoubleAgent.Control.CharacterStyleFlags.IdleEnabled" />, <see class="" cref="F:DoubleAgent.Control.CharacterStyleFlags.IconShown" />, <see class="" cref="F:DoubleAgent.Control.CharacterStyleFlags.SoundEffects" />.
</para>
<para>The <see class="" cref="F:DoubleAgent.Control.CharacterStyleFlags.Smoothed" /> and <see class="" cref="F:DoubleAgent.Control.CharacterStyleFlags.SmoothEdges" /> flags can only be changed here. Once a <see cref="T:DoubleAgent.Control.Character" /> is loaded, these bits <strong>cannot</strong> be changed in it's <see cref="P:DoubleAgent.Control.Character.Style" /> property. Also, these two settings are only used the first time the character is loaded. If another client has already loaded the character, it's smoothing settings will not change. If your client application is the first client to load the character, then your smoothing settings will apply to all clients.
</para>
<note>For compatibility with Microsoft Agent, the <see class="" cref="F:DoubleAgent.Control.CharacterStyleFlags.IconShown" /> flag is set by default. To load a <see cref="T:DoubleAgent.Control.Character" /> without showing it's <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a>, set the <see class="" cref="F:DoubleAgent.Control.CharacterStyleFlags.IconShown" /> flag off.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.Style" />
<seealso cref="T:DoubleAgent.Control.CharacterStyleFlags" />
</member>

<member name="P:DoubleAgent.Control.Control.CommandsWindow">
<summary> Returns the control's <see cref="T:DoubleAgent.Control.CommandsWindow" /> Object.</summary>
<value name="CommandsWindow">The control's <see class="typename" cref="T:DoubleAgent.Control.CommandsWindow" /> Object.</value>
</member>

<member name="P:DoubleAgent.Control.Control.Connected">
<summary> Specifies if the control is currently connected to the Double Agent server. The Double Agent control will work whether or not it's connected to the server, but there are are special considerations in each case. See <a href="..\Programming\Ctl_Programming_Modes.htm">Connected, Stand-Alone, and Contained</a> for more information.</summary>
<value name="Connected">A <typename>boolean</typename> value specifying whether the control is connected.</value>
<remarks>
<para>You can manually open or close the connection to the server by changing the <self>Connected</self> property. When the connection state changes, any characters you've loaded are automatically unloaded. If you still have references to any objects except the control itself, any attempt to access the objects' properties or methods will fail.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Control.AutoConnect" />
</member>

<member name="P:DoubleAgent.Control.Control.ControlCharacter">
<summary> Specifies the control's <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#contained">contained</a> <see cref="T:DoubleAgent.Control.Character" />.</summary>
<value name="ControlCharacter">The <see class="typename" cref="T:DoubleAgent.Control.Character" /> Object object that's contained within the visible area of the control, or an empty reference (<keyword>Nothing</keyword>).</value>
<remarks>
<para>Setting the <self>ControlCharacter</self> property to a <see cref="T:DoubleAgent.Control.Character" /> Object changes the control from <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#standalone">stand-alone</a> mode to <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#contained">contained</a> mode. Setting <self>ControlCharacter</self> to an empty reference changes the control from <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#contained">contained</a> mode back to <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#standalone">stand-alone</a> mode.
</para>
<para>Normally, the control isn't visible at runtime, but when it has a <self>ControlCharacter</self> it will become visible as a child window of its containing form. This is the only time the ActiveX<sup>®</sup> <glossary>appearance</glossary> properties, such as <see cref="P:DoubleAgent.Control.Control.BackColor" /> and <see cref="P:DoubleAgent.Control.Control.BorderColor" />, are used.
</para>
<note>You cannot set the <self>ControlCharacter</self> property if the control is <see cref="P:DoubleAgent.Control.Control.Connected" /> to the server.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Control.Connected" />
<seealso cref="P:DoubleAgent.Control.Control.AutoSize" />
</member>

<member name="P:DoubleAgent.Control.Control.PropertySheet">
<summary> Returns the control's <see cref="T:DoubleAgent.Control.PropertySheet" /> Object.</summary>
<value name="PropertySheet">The control's <see class="typename" cref="T:DoubleAgent.Control.PropertySheet" /> Object.</value>
</member>

<member name="P:DoubleAgent.Control.Control.RaiseRequestErrors">
<summary> Specifies if an error condition is raised (an exception thrown) for failed requests.</summary>
<value name="RaiseRequestErrors">A <typename>boolean</typename> value that determines whether errors are raised for failed requests. The default value is <keyword>True</keyword>.</value>
<remarks>
<para>When a method that returns a <see cref="T:DoubleAgent.Control.Request" /> Object fails, there are two ways to detect the error. If <self>RaiseRequestErrors</self> is set, the Double Agent control will raise an error condition. If it's not set, you can check the <see cref="T:DoubleAgent.Control.Request" /> Object's <see cref="P:DoubleAgent.Control.Request.Status" /> property. An example of a request error is when you specify an animation name that doesn't exist for the <see cref="M:DoubleAgent.Control.Character.Play(System.String)" /> method.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Control.Settings">
<summary> Returns the control's <see cref="T:DoubleAgent.Control.Settings" /> Object.</summary>
<value name="Settings">The control's <see class="typename" cref="T:DoubleAgent.Control.Settings" /> Object.</value>
</member>

<member name="P:DoubleAgent.Control.Control.SpeechInput">
<summary> deprecated</summary>
<remarks>
<para>This property has been replaced by the <see cref="P:DoubleAgent.Control.Control.Settings" /> property, but is still supported for backward compatibility.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Control.SREngines">
<summary> Returns a collection of <see cref="T:DoubleAgent.Control.SREngine" /> Objects for all available speech recognition engines.</summary>
<value name="SREngines">A <see class="typename" cref="T:DoubleAgent.Control.SREngines" /> Collection that includes all available speech recognition engines.</value>
<remarks>
<para>This property allows you to query available speech recognition engines without loading a character.
</para>
</remarks>
<seealso cref="T:DoubleAgent.Control.SREngines" />
<seealso cref="T:DoubleAgent.Control.SREngine" />
</member>

<member name="P:DoubleAgent.Control.Control.TTSEngines">
<summary> Returns a collection of <see cref="T:DoubleAgent.Control.TTSEngine" /> Objects for all available text-to-speech engines.</summary>
<value name="TTSEngines">A <see class="typename" cref="T:DoubleAgent.Control.TTSEngines" /> Collection that includes all available text-to-speech engines.</value>
<remarks>
<para>This property allows you to query available text-to-speech engines without loading a character.
</para>
</remarks>
<seealso cref="T:DoubleAgent.Control.TTSEngines" />
<seealso cref="T:DoubleAgent.Control.TTSEngine" />
</member>

<member name="E:DoubleAgent.Control.Control.ActivateInput">
<summary> Signalled when a client becomes <glossary>input-active</glossary>.</summary>
<param name="CharacterID">The unique identifier of the character that has become <glossary>input-active</glossary>.</param>
<remarks>
<para>The <glossary>input-active</glossary> client receives mouse and speech input events for the character. Double Agent sends this event only to the client that becomes <glossary>input-active</glossary>.
</para>
<para>This event can occur when the user uses your <see cref="T:DoubleAgent.Control.Commands" /> Collection, for example, by choosing a <see cref="T:DoubleAgent.Control.Commands" /> Collection entry in the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window or in the <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a> window for a character. It can also occur when the user selects a character (by clicking or speaking its name), when a character becomes visible, or when the character of another client application becomes hidden.
</para>
<para>You can also call the <see cref="M:DoubleAgent.Control.Character.Activate(System.Object)" /> method with <paramref name="State" /> set to <keyword xml:space="preserve">2</keyword> (<see class="see" cref="F:DoubleAgent.Control.ActiveStateType.InputActive" />) to explicitly make the character topmost, which results in your client application becoming <glossary>input-active</glossary> and triggers this event. However, this event does not occur if you use the <see cref="M:DoubleAgent.Control.Character.Activate(System.Object)" /> method only to specify whether or not your client is the active client of the character.
</para>
</remarks>
<seealso cref="M:DoubleAgent.Control.Character.Activate(System.Object)" />
<seealso cref="E:DoubleAgent.Control.Control.DeactivateInput" />
<seealso cref="E:DoubleAgent.Control.Control.ActiveClientChange" />
</member>

<member name="E:DoubleAgent.Control.Control.ActiveClientChange">
<summary> Signalled when the active client of the character changes.</summary>
<param name="CharacterID">The unique identifier of the character that has become active or inactive.</param>
<param name="Active"> <keyword>True</keyword> if the character has become the active client or <keyword>False</keyword> if it's no longer the active client.</param>
<remarks>
<para>When multiple clients (<see cref="T:DoubleAgent.Control.Control" /> instances) share the same character, the active client of the character receives mouse input (for example, click or drag events). Similarly, when multiple characters are displayed, the active client of the topmost character (also known as the <glossary>input-active</glossary> client) receives <see cref="E:DoubleAgent.Control.Control.Command" /> events.
</para>
<para>A client application may receive this event when the user selects one of the client's entries in the character's <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a> or by voice command, when the client application changes its active status, or when another client terminates.
</para>
<para>Double Agent sends this event only to the clients that are directly affected; that either become the active client or stop being the active client.
</para>
</remarks>
<seealso cref="M:DoubleAgent.Control.Character.Activate(System.Object)" />
<seealso cref="P:DoubleAgent.Control.Character.ActiveState" />
<seealso cref="E:DoubleAgent.Control.Control.ActivateInput" />
<seealso cref="E:DoubleAgent.Control.Control.DeactivateInput" />
</member>

<member name="E:DoubleAgent.Control.Control.AgentPropertyChange">
<summary> Signalled when the user changes a property in the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window.</summary>
<remarks>
<para>This event indicates that the user has changed and applied any property in the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window. You can use the <see cref="T:DoubleAgent.Control.Settings" /> Object to query the specific property settings.
</para>
</remarks>
<seealso cref="E:DoubleAgent.Control.Control.DefaultCharacterChange" />
</member>

<member name="E:DoubleAgent.Control.Control.BalloonHide">
<summary> Signalled when a character's <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> is hidden.</summary>
<param name="CharacterID">The unique identifier of the character who's <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> was hidden.</param>
<remarks>
<para>Double Agent sends this event only to all clients of the character (applications that have loaded the character).
</para>
</remarks>
<seealso cref="E:DoubleAgent.Control.Control.BalloonShow" />
</member>

<member name="E:DoubleAgent.Control.Control.BalloonShow">
<summary> Signalled when a character's <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> is shown.</summary>
<param name="CharacterID">The unique identifier of the character who's <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> was shown.</param>
<remarks>
<para>Double Agent sends this event only to all clients of the character (applications that have loaded the character).
</para>
</remarks>
<seealso cref="E:DoubleAgent.Control.Control.BalloonHide" />
</member>

<member name="E:DoubleAgent.Control.Control.Bookmark">
<summary> Signalled when a bookmark defined by your application in a speech text string is reached.</summary>
<param name="BookmarkID">The bookmark's unique identifier.</param>
<remarks>
<para>To specify a bookmark event, use the <see cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" /> or <see cref="M:DoubleAgent.Control.Character.SpeakFormatted(DoubleAgent.Control.FormattedText)" /> method with a <keyword>Mrk</keyword> tag in your supplied text. For more information about tags, see <a href="MsAgent.chm::/hh/msagent/guidlin_2my6.htm">Speech Output Tags</a>.
</para>
</remarks>
<seealso cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" />
<seealso cref="M:DoubleAgent.Control.Character.SpeakFormatted(DoubleAgent.Control.FormattedText)" />
</member>

<member name="E:DoubleAgent.Control.Control.Click">
<summary> Signalled when the user clicks a character, or the character's <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a>.</summary>
<param name="CharacterID">The unique identifier of the character that was clicked.</param>
<param name="Button">A <typename>numeric</typename> value that identifies which mouse button was pressed and released to cause the event. The <paramref name="Button" /> parameter is a bit field with bits corresponding to the <filename>left</filename> button (bit 0) (&amp;H0001), <filename>right</filename> button (bit 1) (&amp;H0002), and <filename>middle</filename> button (bit 2) (&amp;H0004). Only one of the bits is set, indicating the mouse button that caused the event. If the character has a <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a>, and bit 13 (&amp;H1000) is also set, the click occurred on the <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a>.</param>
<param name="Shift">A <typename>numeric</typename> value that corresponds to the state of the <filename>Shift</filename>, <filename>Ctrl</filename>, and <filename>Alt</filename> keys when the mouse button was pressed or released. The <paramref name="Shift" /> parameter is a bit field with bits corresponding to the <filename>Shift</filename> key (bit 0) (&amp;H0001), the <filename>Ctrl</filename> key (bit 1) (&amp;H0002), and the <filename>Alt</filename> key (bit 2) (&amp;H0004). A bit is set if the key is down. Some, all, or none of the bits can be set, indicating that some, all, or none of the keys are down. For example, if both <filename>Ctrl</filename> and <filename>Alt</filename> were down, the  value of <paramref name="Shift" /> would be 6.</param>
<param name="X">The current horizontal location of the mouse pointer, in pixels, relative to the left side of the screen.</param>
<param name="Y">The current vertical location of the mouse pointer, in pixels, relative to the top of the screen.</param>
<remarks>
<para>This event is sent only to the <glossary>input-active</glossary> client of a character. When the user clicks a character or its <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> with no <glossary>input-active</glossary> client, Double Agent sends the event to its active client. If the character is visible (<see cref="P:DoubleAgent.Control.Character.Visible" /> is <keyword>True</keyword>), the user's action also sets the character's current <glossary>input-active</glossary> client as the last <glossary>input-active</glossary> client, sending the <see cref="E:DoubleAgent.Control.Control.ActivateInput" /> event to that client, and then sending the <keyword>Click</keyword> event. If the character is hidden (<see cref="P:DoubleAgent.Control.Character.Visible" /> is <keyword>False</keyword>), and the user clicks the character's <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> using button 1, the character is also automatically shown.
</para>
<note>Clicking a character does not disable all other character output. However, pressing the <glossary>Listening key</glossary> <em>does</em> flush the <glossary>input-active</glossary> character's output and triggers the <see cref="E:DoubleAgent.Control.Control.RequestComplete" /> event, passing a <see cref="P:DoubleAgent.Control.Request.Status" /> that indicates that the client's queue was interrupted.</note>
</remarks>
<seealso cref="E:DoubleAgent.Control.Control.DblClick" />
</member>

<member name="E:DoubleAgent.Control.Control.Command">
<summary> Signalled when the user chooses a (client's) command.</summary>
<param name="UserInput">A <see class="typename" cref="T:DoubleAgent.Control.UserInput" /> Object that identifies the chosen command.</param>
<remarks>
<para>Double Agent sends this event when your application is <glossary>input-active</glossary> and the user chooses a command from the character's <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a>, or by spoken input.
</para>
</remarks>
<seealso cref="T:DoubleAgent.Control.UserInput" />
</member>

<member name="E:DoubleAgent.Control.Control.DblClick">
<summary> Signalled when the user double-clicks a character.</summary>
<param name="CharacterID">The unique identifier of the character that was double-clicked.</param>
<param name="Button">A <typename>numeric</typename> value that identifies which mouse button was pressed and released to cause the event. The <paramref name="Button" /> parameter is a bit field with bits corresponding to the <filename>left</filename> button (bit 0) (&amp;H0001), <filename>right</filename> button (bit 1) (&amp;H0002), and <filename>middle</filename> button (bit 2) (&amp;H0004). Only one of the bits is set, indicating the mouse button that caused the event. If the character has a <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a>, and bit 13 (&amp;H1000) is also set, the click occurred on the <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a>.</param>
<param name="Shift">A <typename>numeric</typename> value that corresponds to the state of the <filename>Shift</filename>, <filename>Ctrl</filename>, and <filename>Alt</filename> keys when the mouse button was pressed or released. The <paramref name="Shift" /> parameter is a bit field with bits corresponding to the <filename>Shift</filename> key (bit 0) (&amp;H0001), the <filename>Ctrl</filename> key (bit 1) (&amp;H0002), and the <filename>Alt</filename> key (bit 2) (&amp;H0004). A bit is set if the key is down. Some, all, or none of the bits can be set, indicating that some, all, or none of the keys are down. For example, if both <filename>Ctrl</filename> and <filename>Alt</filename> were down, the  value of <paramref name="Shift" /> would be 6.</param>
<param name="X">The current horizontal location of the mouse pointer, in pixels, relative to the left side of the screen.</param>
<param name="Y">The current vertical location of the mouse pointer, in pixels, relative to the top of the screen.</param>
<remarks>
<para>This event is sent only to the <glossary>input-active</glossary> client of a character. When the user double-clicks a character or its <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> with no <glossary>input-active</glossary> client, Double Agent sends the event to its active client. If the character is visible (<see cref="P:DoubleAgent.Control.Character.Visible" /> is <keyword>True</keyword>), the user's action also sets the character's current <glossary>input-active</glossary> client as the last <glossary>input-active</glossary> client, sending the <see cref="E:DoubleAgent.Control.Control.ActivateInput" /> event to that client, and then sending the <keyword>DblClick</keyword> event. If the character is hidden (<see cref="P:DoubleAgent.Control.Character.Visible" /> is <keyword>False</keyword>), and the user double-clicks the character's <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> using button 1, the character is also automatically shown.
</para>
</remarks>
<seealso cref="E:DoubleAgent.Control.Control.Click" />
</member>

<member name="E:DoubleAgent.Control.Control.DeactivateInput">
<summary> Signalled when a client becomes <glossary>non-input-active</glossary>.</summary>
<param name="CharacterID">The unique identifier of the character that has become <glossary>non-input-active</glossary>.</param>
<remarks>
<para>A <glossary>non-input-active</glossary> client no longer receives mouse or speech events from Double Agent (unless it becomes <glossary>input-active</glossary> again). Double Agent sends this event only to the client that becomes <glossary>non-input-active</glossary>.
</para>
<para>This event is signalled when your client application is <glossary>input-active</glossary> and the user chooses a another client's <see cref="T:DoubleAgent.Control.Command" /> in a character's <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a> or the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window, or you call the <see cref="M:DoubleAgent.Control.Character.Activate(System.Object)" /> method and set the <paramref name="State" /> parameter to <keyword xml:space="preserve">0</keyword> (<see class="see" cref="F:DoubleAgent.Control.ActiveStateType.Inactive" />). It may also occur when the user selects the name of another character by clicking or speaking. You also get this event when your character is hidden or another character becomes visible.
</para>
</remarks>
<seealso cref="E:DoubleAgent.Control.Control.ActivateInput" />
<seealso cref="E:DoubleAgent.Control.Control.ActiveClientChange" />
</member>

<member name="E:DoubleAgent.Control.Control.DefaultCharacterChange">
<summary> Signalled when the user changes the default character.</summary>
<param name="CharGUID">The unique identifier of the new default character.</param>
<remarks>
<para>This event indicates that the user has changed the character assigned as the user's default character. Double Agent sends this only to clients that have loaded the default character.
</para>
<para>When the new character appears, it assumes the same size as any already loaded instance of the character, or the size of the previous default character (in that order).
</para>
</remarks>
<seealso cref="M:DoubleAgent.Control.Control.ShowDefaultCharacterProperties(System.Object,System.Object)" />
<seealso cref="M:DoubleAgent.Control.Characters.Load(System.String,System.Object)" />
<seealso cref="P:DoubleAgent.Control.CharacterFiles.DefaultFilePath" />
</member>

<member name="E:DoubleAgent.Control.Control.DragComplete">
<summary> Signalled when the user stops dragging a character.</summary>
<param name="CharacterID">The unique identifier of the character that was dragged.</param>
<param name="Button">A <typename>numeric</typename> value that identifies which mouse button was pressed and released to cause the event. The <paramref name="Button" /> parameter is a bit field with bits corresponding to the <filename>left</filename> button (bit 0) (&amp;H0001), <filename>right</filename> button (bit 1) (&amp;H0002), and <filename>middle</filename> button (bit 2) (&amp;H0004). Only one of the bits is set, indicating the mouse button that caused the event. If the character has a <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a>, and bit 13 (&amp;H1000) is also set, the click occurred on the <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a>.</param>
<param name="Shift">A <typename>numeric</typename> value that corresponds to the state of the <filename>Shift</filename>, <filename>Ctrl</filename>, and <filename>Alt</filename> keys when the mouse button was pressed or released. The <paramref name="Shift" /> parameter is a bit field with bits corresponding to the <filename>Shift</filename> key (bit 0) (&amp;H0001), the <filename>Ctrl</filename> key (bit 1) (&amp;H0002), and the <filename>Alt</filename> key (bit 2) (&amp;H0004). A bit is set if the key is down. Some, all, or none of the bits can be set, indicating that some, all, or none of the keys are down. For example, if both <filename>Ctrl</filename> and <filename>Alt</filename> were down, the  value of <paramref name="Shift" /> would be 6.</param>
<param name="X">The current horizontal location of the mouse pointer, in pixels, relative to the left side of the screen.</param>
<param name="Y">The current vertical location of the mouse pointer, in pixels, relative to the top of the screen.</param>
<remarks>
<para>This event is sent only to the <glossary>input-active</glossary> client of a character. When the user drags a character with no <glossary>input-active</glossary> client, Double Agent sets its current <glossary>input-active</glossary> client as the last <glossary>input-active</glossary> client, sending the <see cref="E:DoubleAgent.Control.Control.ActivateInput" /> event to that client, and then sending the <see cref="E:DoubleAgent.Control.Control.DragStart" /> and <keyword>DragComplete</keyword> events.
</para>
</remarks>
<seealso cref="E:DoubleAgent.Control.Control.DragStart" />
</member>

<member name="E:DoubleAgent.Control.Control.DragStart">
<summary> Signalled when the user starts dragging a character.</summary>
<param name="CharacterID">The unique identifier of the character that's being dragged.</param>
<param name="Button">A <typename>numeric</typename> value that identifies which mouse button was pressed and released to cause the event. The <paramref name="Button" /> parameter is a bit field with bits corresponding to the <filename>left</filename> button (bit 0) (&amp;H0001), <filename>right</filename> button (bit 1) (&amp;H0002), and <filename>middle</filename> button (bit 2) (&amp;H0004). Only one of the bits is set, indicating the mouse button that caused the event. If the character has a <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a>, and bit 13 (&amp;H1000) is also set, the click occurred on the <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a>.</param>
<param name="Shift">A <typename>numeric</typename> value that corresponds to the state of the <filename>Shift</filename>, <filename>Ctrl</filename>, and <filename>Alt</filename> keys when the mouse button was pressed or released. The <paramref name="Shift" /> parameter is a bit field with bits corresponding to the <filename>Shift</filename> key (bit 0) (&amp;H0001), the <filename>Ctrl</filename> key (bit 1) (&amp;H0002), and the <filename>Alt</filename> key (bit 2) (&amp;H0004). A bit is set if the key is down. Some, all, or none of the bits can be set, indicating that some, all, or none of the keys are down. For example, if both <filename>Ctrl</filename> and <filename>Alt</filename> were down, the  value of <paramref name="Shift" /> would be 6.</param>
<param name="X">The current horizontal location of the mouse pointer, in pixels, relative to the left side of the screen.</param>
<param name="Y">The current vertical location of the mouse pointer, in pixels, relative to the top of the screen.</param>
<remarks>
<para>This event is sent only to the <glossary>input-active</glossary> client of a character. When the user drags a character with no <glossary>input-active</glossary> client, Double Agent sets its current <glossary>input-active</glossary> client as the last <glossary>input-active</glossary> client, sending the <see cref="E:DoubleAgent.Control.Control.ActivateInput" /> event to that client, and then sending the <keyword>DragStart</keyword> event.
</para>
</remarks>
<seealso cref="E:DoubleAgent.Control.Control.DragComplete" />
</member>

<member name="E:DoubleAgent.Control.Control.Hide">
<summary> Signalled when a character is hidden.</summary>
<param name="CharacterID">The unique identifier of the character that was hidden.</param>
<param name="Cause">A <see class="typename" cref="T:DoubleAgent.Control.VisibilityCauseType" /> value that indicates what caused the character to be hidden: 
<list type="table">
<item name="UserHid"><term xml:space="preserve">
1 = <keyword>UserHid</keyword>
</term>
<description>The user hid the character using the command on the character's <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> or using speech input.</description>
</item>
<item name="ProgramHid"><term xml:space="preserve">
3 = <keyword>ProgramHid</keyword>
</term>
<description>Your application hid the character.</description>
</item>
<item name="OtherProgramHid"><term xml:space="preserve">
5 = <keyword>OtherProgramHid</keyword>
</term>
<description>Another client application hid the character.</description>
</item>
</list>
</param>
<remarks>
<para>Double Agent sends this event to all clients of the character. To query the current state of the character, use the <see cref="P:DoubleAgent.Control.Character.Visible" /> property.
</para>
</remarks>
<seealso cref="E:DoubleAgent.Control.Control.Show" />
<seealso cref="M:DoubleAgent.Control.Character.Hide(System.Object)" />
<seealso cref="P:DoubleAgent.Control.Character.Visible" />
<seealso cref="P:DoubleAgent.Control.Character.VisibilityCause" />
</member>

<member name="E:DoubleAgent.Control.Control.IdleComplete">
<summary> Signalled when Double Agent ends the <glossary>Idling</glossary> state of a character.</summary>
<param name="CharacterID">The unique identifier of the <glossary>Idling</glossary> character.</param>
<remarks>
<para>Double Agent sends this event to all clients of the character.
</para>
</remarks>
<seealso cref="E:DoubleAgent.Control.Control.IdleStart" />
<seealso cref="P:DoubleAgent.Control.Character.IdleEnabled" />
<seealso cref="P:DoubleAgent.Control.Character.IdleState" />
</member>

<member name="E:DoubleAgent.Control.Control.IdleStart">
<summary> Signalled when Double Agent sets a character to the <glossary>Idling</glossary> state.</summary>
<param name="CharacterID">The unique identifier of the <glossary>Idling</glossary> character.</param>
<remarks>
<para>Double Agent sends this event to all clients of the character.
</para>
</remarks>
<seealso cref="E:DoubleAgent.Control.Control.IdleComplete" />
<seealso cref="P:DoubleAgent.Control.Character.IdleEnabled" />
<seealso cref="P:DoubleAgent.Control.Character.IdleState" />
</member>

<member name="E:DoubleAgent.Control.Control.HelpComplete">
<summary> Not Implemented</summary>
</member>

<member name="E:DoubleAgent.Control.Control.ListenComplete">
<summary> Signalled when <glossary>Listening mode</glossary> (speech recognition) has ended.</summary>
<param name="CharacterID">The unique identifier of the listening character.</param>
<param name="Cause">The cause of the <keyword>ListenComplete</keyword> event.
<list type="table">
<item><term xml:space="preserve">
1 = <keyword>ProgramDisabled</keyword>
</term>
<description>This program turned off the <glossary>Listening mode</glossary> with the <see cref="M:DoubleAgent.Control.Character.Listen(System.Boolean)" /> method.</description>
</item>
<item><term xml:space="preserve">
2 = <keyword>ProgramTimedOut</keyword>
</term>
<description>The <glossary>Listening mode</glossary> was started by this program with the <see cref="M:DoubleAgent.Control.Character.Listen(System.Boolean)" /> method, and it timed out.</description>
</item>
<item><term xml:space="preserve">
3 = <keyword>UserTimedOut</keyword>
</term>
<description>The <glossary>Listening mode</glossary> was started with the <glossary>Listening key</glossary>, and it timed out.</description>
</item>
<item><term xml:space="preserve">
4 = <keyword>UserReleasedKey</keyword>
</term>
<description>The <glossary>Listening mode</glossary> was started with the <glossary>Listening key</glossary>, and the key was released.</description>
</item>
<item><term xml:space="preserve">
5 = <keyword>UserSpeechEnded</keyword>
</term>
<description>Speech recognition has produced a result.</description>
</item>
<item><term xml:space="preserve">
6 = <keyword>CharacterClientDeactivated</keyword>
</term>
<description>The character is no longer active or it's active client has changed.</description>
</item>
<item><term xml:space="preserve">
7 = <keyword>DefaultCharacterChanged</keyword>
</term>
<description>The default character was changed in the <a class="see" href="../html/UI_PropSheet.htm#Gallery">Advanced Character Options</a> window.</description>
</item>
<item><term xml:space="preserve">
8 = <keyword>UserDisabled</keyword>
</term>
<description>Speech recognition was disabled in the <a class="see" href="../html/UI_PropSheet.htm#SpeechInput">Advanced Character Options</a> window.</description>
</item>
</list>
</param>
<remarks>
<para>This event is sent to all clients when the <glossary>Listening mode</glossary> time-out ends, after the user releases the <glossary>Listening key</glossary>, when the <glossary>input-active</glossary> client calls the <see cref="M:DoubleAgent.Control.Character.Listen(System.Boolean)" /> method with <keyword>False</keyword>, or when the user has finished speaking. You can use this event to determine when to resume spoken output.
</para>
<para>If you turn on <glossary>Listening mode</glossary> using the <see cref="M:DoubleAgent.Control.Character.Listen(System.Boolean)" /> method and then the user presses the <glossary>Listening key</glossary>, the <glossary>Listening mode</glossary> resets and continues until the <glossary>Listening key</glossary> time-out completes, the <glossary>Listening key</glossary> is released, or the user finishes speaking, whichever is later. In this situation, you will <em>not</em> receive a <self>ListenComplete</self> event until the <glossary>Listening key</glossary>'s mode completes.
</para>
<para>The event returns the <paramref name="CharacterID" /> to the clients that currently have this character loaded. All other clients receive a null <paramref name="CharacterID" /> (empty string).
</para>
</remarks>
<seealso cref="T:DoubleAgent.Control.ListenCompleteType" />
<seealso cref="E:DoubleAgent.Control.Control.ListenStart" />
<seealso cref="M:DoubleAgent.Control.Character.Listen(System.Boolean)" />
<seealso cref="P:DoubleAgent.Control.Settings.SRHotKeyTime" />
</member>

<member name="E:DoubleAgent.Control.Control.ListenStart">
<summary> Signalled when <glossary>Listening mode</glossary> (speech recognition) begins.</summary>
<param name="CharacterID">The unique identifier of the listening character.</param>
<remarks>
<para>This event is sent to all clients when <glossary>Listening mode</glossary> begins because the user pressed the <glossary>Listening key</glossary> or the <glossary>input-active</glossary> client called the <see cref="M:DoubleAgent.Control.Character.Listen(System.Boolean)" /> method with <keyword>True</keyword>. You can use this event to avoid having your character speak while <glossary>Listening mode</glossary> is active.
</para>
<para>If you turn on <glossary>Listening mode</glossary> with the <see cref="M:DoubleAgent.Control.Character.Listen(System.Boolean)" /> method and then the user presses the <glossary>Listening key</glossary>, the <glossary>Listening mode</glossary> resets and continues until the <glossary>Listening key</glossary> time-out completes, the <glossary>Listening key</glossary> is released, or the user finishes speaking, whichever is later. In this situation, when <glossary>Listening mode</glossary> is already on, you will <em>not</em> get an additional <self>ListenStart</self> event when the user presses the <glossary>Listening key</glossary>.
</para>
<para>The event returns the <paramref name="CharacterID" /> to the clients that currently have this character loaded. All other clients receive a null <paramref name="CharacterID" /> (empty string).
</para>
</remarks>
<seealso cref="E:DoubleAgent.Control.Control.ListenComplete" />
<seealso cref="M:DoubleAgent.Control.Character.Listen(System.Boolean)" />
<seealso cref="P:DoubleAgent.Control.Settings.SRHotKey" />
</member>

<member name="E:DoubleAgent.Control.Control.Move">
<summary> Signalled when a character has moved.</summary>
<param name="CharacterID">The unique identifier of the character that was moved.</param>
<param name="X">The character's new horizontal location, in pixels, relative to the left side of the screen.</param>
<param name="Y">The character's new vertical location, in pixels, relative to the top of the screen.</param>
<param name="Cause">The reason the character moved:
<list type="table">
<item name="UserMoved"><term xml:space="preserve">
1 = <keyword>UserMoved</keyword>
</term>
<description>The user dragged the character.</description>
</item>
<item name="ProgramMoved"><term xml:space="preserve">
2 = <keyword>ProgramMoved</keyword>
</term>
<description>Your client application moved the character.</description>
</item>
<item name="OtherProgramMoved"><term xml:space="preserve">
3 = <keyword>OtherProgramMoved</keyword>
</term>
<description>Another client application moved the character.</description>
</item>
</list>
</param>
<remarks>
<para>This event is signalled when the user or an application changes the character's position. Coordinates are relevant to the upper left corner of the screen. This event is sent only to the clients of the character (applications that have loaded the character).
</para>
</remarks>
<seealso cref="E:DoubleAgent.Control.Control.Size" />
<seealso cref="M:DoubleAgent.Control.Character.MoveTo(System.Int16,System.Int16,System.Object)" />
<seealso cref="P:DoubleAgent.Control.Character.MoveCause" />
<seealso cref="T:DoubleAgent.Control.MoveCauseType" />
</member>

<member name="E:DoubleAgent.Control.Control.RequestComplete">
<summary> Signalled when Double Agent completes a queued request.</summary>
<param name="Request">The <see class="typename" cref="T:DoubleAgent.Control.Request" /> Object that identifies the completed request.</param>
<remarks>
<para>This event provides a <see cref="T:DoubleAgent.Control.Request" /> Object. Because requests are processed asynchronously, you can use this event to determine when Double Agent finishes processing a request (such as a <see cref="M:DoubleAgent.Control.Character.Get(System.String,System.String,System.Object)" />, <see cref="M:DoubleAgent.Control.Character.Play(System.String)" />, or <see cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" /> method) to synchronize this event with other requests generated by your application. Double Agent sends the event only to the client that created the reference to the <see cref="T:DoubleAgent.Control.Request" /> Object, and only if you defined a global variable for the request reference.
</para>
<example><code xml:space="preserve"><keyword>Dim</keyword> MyRequest 
<keyword>Dim</keyword> Genie

<keyword>Sub</keyword> <token>window</token>_<keyword>Onload</keyword>
    <token>control</token>.<keyword>Characters</keyword>.<keyword>Load</keyword> "Genie","Genie.acs"

    <keyword>Set</keyword> Genie = <token>control</token>.<keyword>Characters</keyword>("Genie")

    ' This syntax will generate RequestStart and RequestComplete events.
    <keyword>Set</keyword> MyRequest = Genie.<keyword>Show</keyword>(False)
    ' This syntax will not generate RequestStart and RequestComplete events.
    Genie.<keyword>Hide</keyword> False
<keyword>End Sub</keyword>

<keyword>Sub</keyword> <token>control</token>_<keyword>RequestComplete</keyword>(<keyword>ByVal</keyword> Request)
    <keyword>If</keyword> Request <keyword>Is</keyword> MyRequest <keyword>Then</keyword>
        <token>status</token> = "Genie was shown"
<keyword>End Sub</keyword></code></example>
<para>Because animation <see cref="T:DoubleAgent.Control.Request" /> Objects don't get assigned until Double Agent has queued the request, make sure that the <see cref="T:DoubleAgent.Control.Request" /> Object exists before you attempt to evaluate it. For example, in Visual Basic, if you use a conditional to test whether a specific request was completed, you can use the <keyword>Nothing</keyword> keyword.
</para>
<example><code xml:space="preserve"><keyword>Sub</keyword> <token>control</token>_<keyword>RequestComplete</keyword> (<keyword>ByVal</keyword> Request)
    <keyword>If</keyword> <keyword>Not</keyword> (MyRequest <keyword>Is</keyword> Nothing) <keyword>Then</keyword>
        <keyword>If</keyword> Request <keyword>Is</keyword> MyRequest <keyword>Then</keyword>
            '-- Do whatever
        <keyword>End If</keyword>
    <keyword>End If</keyword>
<keyword>End Sub</keyword></code></example></remarks>
<seealso cref="E:DoubleAgent.Control.Control.RequestStart" />
</member>

<member name="E:DoubleAgent.Control.Control.RequestStart">
<summary> Signalled when Double Agent begins a queued request.</summary>
<param name="Request">The <see class="typename" cref="T:DoubleAgent.Control.Request" /> Object that identifies the queued request.</param>
<remarks>
<para>The event provides a <see cref="T:DoubleAgent.Control.Request" /> Object. Because requests are processed asynchronously, you can use this event to determine when Double Agent begins processing a request (such as a <see cref="M:DoubleAgent.Control.Character.Get(System.String,System.String,System.Object)" />, <see cref="M:DoubleAgent.Control.Character.Play(System.String)" />, or <see cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" /> method) and thereby synchronize this with other requests generated by your application. The event is sent only to the client that created the reference to the <see cref="T:DoubleAgent.Control.Request" /> Object, and only if you defined a global variable for the request reference.
</para>
<example><code xml:space="preserve"><keyword>Dim</keyword> MyRequest 
<keyword>Dim</keyword> Genie 

<keyword>Sub</keyword> <token>window</token>_<keyword>Onload</keyword>
    <token>control</token>.<keyword>Characters</keyword>.<keyword>Load</keyword> "Genie", "Genie.acs"

    <keyword>Set</keyword> Genie = <token>control</token>.<keyword>Characters</keyword>("Genie")

    ' This syntax will generate RequestStart and RequestComplete events.
    <keyword>Set</keyword> MyRequest = Genie.<keyword>Show</keyword>(False)

    ' This syntax will not generate RequestStart and RequestComplete events.
    Genie.<keyword>Hide</keyword> False
<keyword>End Sub</keyword>

<keyword>Sub</keyword> <token>control</token>_<keyword>RequestStart</keyword>(<keyword>ByVal</keyword> Request)
    <keyword>If</keyword> Request <keyword>Is</keyword> MyRequest <keyword>Then</keyword>
        <token>status</token> = "Genie is showing"
<keyword>End Sub</keyword></code></example>
<para>The <see cref="P:DoubleAgent.Control.Request.Status" /> property is 4 (InProgress) for the <see cref="T:DoubleAgent.Control.Request" /> Object.
</para>
<para>Because animation <see cref="T:DoubleAgent.Control.Request" /> Objects don't get assigned until Double Agent has queued the request, make sure that the <see cref="T:DoubleAgent.Control.Request" /> Object exists before you attempt to evaluate it. For example, in Visual Basic, if you use a conditional to test whether a specific request was completed, you can use the <keyword>Nothing</keyword> keyword.
</para>
<example><code xml:space="preserve"><keyword>Sub</keyword> <token>control</token>_<keyword>RequestStart</keyword> (<keyword>ByVal</keyword> Request)
    <keyword>If</keyword> <keyword>Not</keyword> (MyRequest <keyword>Is</keyword> <keyword>Nothing</keyword>) <keyword>Then</keyword>
        <keyword>If</keyword> Request <keyword>Is</keyword> MyRequest <keyword>Then</keyword>
            '-- Do whatever
        <keyword>End If</keyword>
    <keyword>End If</keyword>
<keyword>End Sub</keyword></code></example></remarks>
<seealso cref="E:DoubleAgent.Control.Control.RequestComplete" />
</member>

<member name="E:DoubleAgent.Control.Control.Show">
<summary> Signalled when a character is displayed.</summary>
<param name="CharacterID">The unique identifier of the character that was shown.</param>
<param name="Cause">A <see class="typename" cref="T:DoubleAgent.Control.VisibilityCauseType" /> value that indicates what caused the character to be shown. 
<list type="table">
<item name="UserShowed"><term xml:space="preserve">
2 = <keyword>UserShowed</keyword>
</term>
<description>The user showed the character using the command on the character's <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> or using speech input.</description>
</item>
<item name="ProgramShowed"><term xml:space="preserve">
4 = <keyword>ProgramShowed</keyword>
</term>
<description>Your application showed the character.</description>
</item>
<item name="OtherProgramShowed"><term xml:space="preserve">
6 = <keyword>OtherProgramShowed</keyword>
</term>
<description>Another client application showed the character.</description>
</item>
</list>
</param>
<remarks>
<para>Double Agent sends this event to all clients of the character. To query the current state of the character, use the <see cref="P:DoubleAgent.Control.Character.Visible" /> property.
</para>
</remarks>
<seealso cref="E:DoubleAgent.Control.Control.Hide" />
<seealso cref="M:DoubleAgent.Control.Character.Show(System.Object)" />
<seealso cref="P:DoubleAgent.Control.Character.Visible" />
<seealso cref="P:DoubleAgent.Control.Character.VisibilityCause" />
</member>

<member name="E:DoubleAgent.Control.Control.Size">
<summary> Signalled when a character's size changes.</summary>
<param name="CharacterID">The unique identifier of the character that was resized.</param>
<param name="Width">The character's new width, in pixels.</param>
<param name="Height">The character's new height, in pixels.</param>
<remarks>
<para>This event is signalled when an application changes the size of a character. This event is sent only to the clients of the character (applications that have loaded the character).
</para>
</remarks>
<seealso cref="E:DoubleAgent.Control.Control.Move" />
</member>

<member name="E:DoubleAgent.Control.Control.SpeechStart">
<summary> Signalled when the character starts speaking for the <see cref="M:DoubleAgent.Control.Character.SpeakFormatted(DoubleAgent.Control.FormattedText)" /> method.</summary>
<param name="CharacterID">The unique identifier of the speaking character.</param>
<param name="FormattedText">The <see class="typename" cref="T:DoubleAgent.Control.FormattedText" /> that's being spoken.</param>
<remarks>
<note name="FormattedText">The <paramref name="FormattedText" /> parameter may not contain the same <glossary>reference pointer</glossary> as the <paramref name="FormattedText" /> parameter passed to the <see cref="M:DoubleAgent.Control.Character.SpeakFormatted(DoubleAgent.Control.FormattedText)" /> method, but the underlying data is the same.</note>
</remarks>
<seealso cref="E:DoubleAgent.Control.Control.SpeechEnd" />
<seealso cref="E:DoubleAgent.Control.Control.SpeechWord" />
<seealso cref="T:DoubleAgent.Control.FormattedText" />
<seealso cref="M:DoubleAgent.Control.Character.SpeakFormatted(DoubleAgent.Control.FormattedText)" />
</member>

<member name="E:DoubleAgent.Control.Control.SpeechEnd">
<summary> Signalled when the character stops speaking for the <see cref="M:DoubleAgent.Control.Character.SpeakFormatted(DoubleAgent.Control.FormattedText)" /> method.</summary>
<param name="CharacterID">The unique identifier of the speaking character.</param>
<param name="FormattedText">The <see class="typename" cref="T:DoubleAgent.Control.FormattedText" /> that's being spoken.</param>
<param name="Stopped">A <typename>boolean</typename> value that indicates if the speech was stopped before completion.</param>
<remarks>
<note name="FormattedText">The <paramref name="FormattedText" /> parameter may not contain the same <glossary>reference pointer</glossary> as the <paramref name="FormattedText" /> parameter passed to the <see cref="M:DoubleAgent.Control.Character.SpeakFormatted(DoubleAgent.Control.FormattedText)" /> method, but the underlying data is the same.</note>
</remarks>
<seealso cref="E:DoubleAgent.Control.Control.SpeechStart" />
<seealso cref="E:DoubleAgent.Control.Control.SpeechWord" />
<seealso cref="T:DoubleAgent.Control.FormattedText" />
<seealso cref="M:DoubleAgent.Control.Character.SpeakFormatted(DoubleAgent.Control.FormattedText)" />
<seealso cref="M:DoubleAgent.Control.Character.Stop(System.Object)" />
<seealso cref="M:DoubleAgent.Control.Character.StopAll(System.Object)" />
</member>

<member name="E:DoubleAgent.Control.Control.SpeechWord">
<summary> Signalled when the character reaches a new word for the <see cref="M:DoubleAgent.Control.Character.SpeakFormatted(DoubleAgent.Control.FormattedText)" /> method.</summary>
<param name="CharacterID">The unique identifier of the speaking character.</param>
<param name="FormattedText">The <see class="typename" cref="T:DoubleAgent.Control.FormattedText" /> that's being spoken.</param>
<param name="WordIndex">A <typename>numeric</typename> value that identifies the word that is currently being spoken.</param>
<remarks>
<para>Because events are signalled asynchronously, the synchronization between the speech output and the receipt of this event cannot be exact. However, <paramref name="WordIndex" /> will generally identify the <em>next</em> word to be spoken.
</para>
<note name="FormattedText">The <paramref name="FormattedText" /> parameter may not contain the same <glossary>reference pointer</glossary> as the <paramref name="FormattedText" /> parameter passed to the <see cref="M:DoubleAgent.Control.Character.SpeakFormatted(DoubleAgent.Control.FormattedText)" /> method, but the underlying data is the same.</note>
</remarks>
<seealso cref="E:DoubleAgent.Control.Control.SpeechStart" />
<seealso cref="E:DoubleAgent.Control.Control.SpeechEnd" />
<seealso cref="T:DoubleAgent.Control.FormattedText" />
<seealso cref="P:DoubleAgent.Control.FormattedText.WordIndex" />
<seealso cref="M:DoubleAgent.Control.Character.SpeakFormatted(DoubleAgent.Control.FormattedText)" />
</member>

<member name="T:DoubleAgent.Control.Control">
<summary>
<para>The Double Agent control has its own methods, properties and events, and provides access to most other objects supported by Double Agent.
</para>
</summary>
<remarks>
<para>Some programming environments may assign additional design-time or run-time properties. For example, Visual Basic adds a <a class="see keyword" href="../Programming/Ctl_Control_Name.htm">Name</a> property that identifies the control, and also <keyword>Left</keyword> and <keyword>Top</keyword> properties that define the location of the control on a form, even if the control doesn't appear on the form's page at run time.
</para>
</remarks>
</member>

<member name="M:DoubleAgent.Control.Characters.Unload(System.String)">
<summary> Unloads the character data for a loaded character.</summary>
<param name="CharacterID">A <typename>string</typename> value that contains the character's unique identifier, specified when the character was loaded.</param>
<remarks>
<para>Use this method when you no longer need a character, to free up memory used to store information about the character. If you access the character again, use the <see cref="M:DoubleAgent.Control.Characters.Load(System.String,System.Object)" /> method.
</para>
<para>This method does <strong>not</strong> return a <see cref="T:DoubleAgent.Control.Request" /> Object.
</para>
</remarks>
</member>

<member name="M:DoubleAgent.Control.Characters.Load(System.String,System.Object)">
<summary> Loads a character into the <see cref="T:DoubleAgent.Control.Characters" /> Collection.</summary>
<param name="CharacterID">A <typename>string</typename> value that you will use to refer to the character when it's loaded. See the <see cref="P:DoubleAgent.Control.Characters.Item" /> property.</param>
<param name="Provider">One of the following:
<list type="table">
<item>
<term> <token>Filespec</token></term>
<description>The location of a local character definition file (<filename>.ACS</filename> format)</description>
</item>
<item>
<term> <token>URL</token></term>
<description>The <glossary>HTTP</glossary> address of the character's definition file (<filename>.ACF</filename> format)</description>
</item>
</list>
</param>
<returns name="Request">A <see class="typename" cref="T:DoubleAgent.Control.Request" /> Object your application can use to track the status of the <self>Load</self> request. The <self>Load</self> method is asynchronous only when loading a character using the <glossary>HTTP</glossary> protocol.</returns>
<remarks>
<para>You can load characters from the default location(s) by specifying only a file name. For example, specifying the following would search for Genie.acs using the default search path.
</para>
<example><code xml:space="preserve"><token>control</token>.<keyword>Characters</keyword>.<keyword>Load</keyword> "Genie", "Genie.acs"</code>
<para>You can also specify an absolute location,
</para>
<code xml:space="preserve"><token>control</token>.<keyword>Characters</keyword>.<keyword>Load</keyword> "Genie", "C:\MyCharacters\Genie.acs"</code>
<para>or specify your own subdirectory by using a relative path.
</para>
<code xml:space="preserve"><token>control</token>.<keyword>Characters</keyword>.<keyword>Load</keyword> "Genie", "MyCharacters\Genie.acs"</code></example>
<para>You can load the default character by omitting the second parameter of the <self>Load</self> method, or passing an empty string. This will load the <a class="see" href="../html/UI_PropSheet.htm#Gallery">default character</a> from the <see class="see" cref="P:DoubleAgent.Control.CharacterFiles.DefaultFilePath" />.
</para>
<example><code xml:space="preserve"><token>control</token>.<keyword>Characters</keyword>.<keyword>Load</keyword> "DefChar"</code></example>
<para>You <strong>cannot</strong> load the same character (a character having the same <see cref="P:DoubleAgent.Control.Character.UniqueID" />) more than once from a single instance of the control. Similarly, you cannot load the default character and other characters at the same time from a single instance of the control because the default character could be the same as the other character. If you attempt to do this, Double Agent raises an error. However, you can create another instance of the Double Agent control and load the same character.
</para>
<para>Loading a character does not automatically display the character. Use the <see cref="M:DoubleAgent.Control.Character.Show(System.Object)" /> method first to make the character visible.
</para>
</remarks>
</member>

<member name="M:DoubleAgent.Control.Characters.Character(System.String)">
<summary> Returns a <see cref="T:DoubleAgent.Control.Character" /> Object in the <see cref="T:DoubleAgent.Control.Characters" /> Collection.</summary>
<param name="CharacterID">The character's unique identifier specified when the character was loaded.</param>
<returns name="Character">A loaded <see class="typename" cref="T:DoubleAgent.Control.Character" /> Object.</returns>
<remarks>
<para>You can use this method to access a <see cref="T:DoubleAgent.Control.Character" /> Object's methods and properties.
</para>
<note>This method may be required for some programming languages that don't support collections. For languages that <em>do</em> support collections, you can use the language's collection indexing syntax.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Characters.Item" />
</member>

<member name="P:DoubleAgent.Control.Characters.Count">
<summary> Returns the count of <see cref="T:DoubleAgent.Control.Character" /> Objects in the <see cref="T:DoubleAgent.Control.Characters" /> Collection.</summary>
<value name="Count">A <typename>numeric</typename> value that indicates the number of <see cref="T:DoubleAgent.Control.Character" /> Objects in the collection.</value>
</member>

<member name="P:DoubleAgent.Control.Characters.Index(System.Int32)">
<summary> Returns a <see cref="T:DoubleAgent.Control.Character" /> Object in the collection.</summary>
<param name="Index">A <typename>numeric</typename> value that specifies the zero-based index of the item to retrieve.</param>
<returns name="Character">The <see class="typename" cref="T:DoubleAgent.Control.Character" /> Object at the spedified <paramref name="Index" />.</returns>
<remarks>
<para>When you want to use the <see cref="T:DoubleAgent.Control.Characters" /> Collection as an <em>ordered</em> collection, you can use the <self>Index</self> property instead of the <see cref="P:DoubleAgent.Control.Characters.Item" /> property.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Characters.Count" />
<seealso cref="P:DoubleAgent.Control.Characters.Item" />
</member>

<member name="P:DoubleAgent.Control.Characters.Item(System.String)">
<summary> Returns a <see cref="T:DoubleAgent.Control.Character" /> Object in the collection.</summary>
<param name="CharacterID">A <typename>string</typename> value that specifies the <see cref="P:DoubleAgent.Control.Character.CharacterID" /> assigned to the character when it was loaded.</param>
<returns name="Character">The <see class="typename" cref="T:DoubleAgent.Control.Character" /> Object with the specified <paramref name="CharacterID" />.</returns>
<seealso cref="P:DoubleAgent.Control.Character.CharacterID" />
<seealso cref="P:DoubleAgent.Control.Characters.Index" />
</member>

<member name="T:DoubleAgent.Control.Characters" kind="Collection">
<summary>
<para>The <self>Characters Collection</self> includes methods and properties for loading, unloading, and accessing <see cref="T:DoubleAgent.Control.Character" /> Objects.
</para>
</summary>
<remarks>
<para>This object can be accessed using the <see class="" cref="T:DoubleAgent.Control.Control" /> Object's <see class="" cref="P:DoubleAgent.Control.Control.Characters" /> property.
</para>
</remarks>
</member>

<member name="M:DoubleAgent.Control.Character.Activate(System.Object)">
<summary> Sets the active client or character.</summary>
<param name="State">An optional <typename>numeric</typename> value from the <see class="typename" cref="T:DoubleAgent.Control.ActiveStateType" /> Enumeration: 
<list type="table">
<item name="Inactive"><term xml:space="preserve">
0 = <keyword>Inactive</keyword>
</term>
<description>Your client application is <em>not</em> the character's active client.</description>
</item>
<item name="Active"><term xml:space="preserve">
1 = <keyword>Active</keyword>
</term>
<description>Your client application is the character's active client.</description>
</item>
<item name="InputActive"><term xml:space="preserve">
2 = <keyword>InputActive</keyword>
</term>
<description>The character is the <glossary>input-active</glossary> character and will receive user input.</description>
</item>
<item name="Suspended"><term xml:space="preserve">
4 = <keyword>Suspended</keyword>
</term>
<description>Your client application is inactive, and is <em>not</em> the character's active client.</description>
</item>
<item name="Suspended_Active"><term xml:space="preserve">
5 = <keyword>Suspended_Active</keyword>
</term>
<description>Your client application is inactive, and is the character's active client.</description>
</item>
<item name="Suspended_InputActive"><term xml:space="preserve">
6 = <keyword>Suspended_InputActive</keyword>
</term>
<description>Your client application is inactive, and the character will be <glossary>input-active</glossary> when your application becomes active.</description>
</item>
</list>
</param>
<returns name="Success"> <keyword>True</keyword> if the method succeeded.</returns>
<remarks>
<para>Avoid calling this method directly after a <see cref="M:DoubleAgent.Control.Character.Show(System.Object)" /> method. <see cref="M:DoubleAgent.Control.Character.Show(System.Object)" /> automatically sets the <glossary>input-active</glossary> client. When the character is shown, the <self>Activate</self> call may fail if it gets processed before the <see cref="M:DoubleAgent.Control.Character.Show(System.Object)" /> method completes.
</para>
<note>Calling this method with <paramref name="State" /> set to <keyword xml:space="preserve">1</keyword> (<see class="see" cref="F:DoubleAgent.Control.ActiveStateType.Active" />) does not typically generate an <see cref="E:DoubleAgent.Control.Control.ActivateInput" /> event unless there are no other characters loaded or your application is already <glossary>input-active</glossary>.</note>
</remarks>
<seealso cref="E:DoubleAgent.Control.Control.ActivateInput" />
<seealso cref="E:DoubleAgent.Control.Control.DeactivateInput" />
</member>

<member name="M:DoubleAgent.Control.Character.FindSREngines(System.Object)">
<summary> Retrieves a collection of <see cref="T:DoubleAgent.Control.SREngine" /> Objects that meet the character's requirements.</summary>
<param name="LanguageID">A <typename>numeric</typename> value that specifies the language to match, or <keyword>zero</keyword> for any language.</param>
<returns name="SREngines">A <see class="typename" cref="T:DoubleAgent.Control.SREngines" /> Collection that matches the character's text-to-speech requirements and the specified <paramref name="LanguageID" />.</returns>
<seealso cref="T:DoubleAgent.Control.SREngines" />
<seealso cref="T:DoubleAgent.Control.SREngine" />
</member>

<member name="M:DoubleAgent.Control.Character.FindTTSEngines(System.Object)">
<summary> Retrieves a collection of <see cref="T:DoubleAgent.Control.TTSEngine" /> Objects that meet the character's requirements.</summary>
<param name="LanguageID">A <typename>numeric</typename> value that specifies the language to match, or <keyword>zero</keyword> for any language.</param>
<returns name="TTSEngines">A <see class="typename" cref="T:DoubleAgent.Control.TTSEngines" /> Collection that matches the character's text-to-speech requirements and the specified <paramref name="LanguageID" />.</returns>
<seealso cref="T:DoubleAgent.Control.TTSEngines" />
<seealso cref="T:DoubleAgent.Control.TTSEngine" />
</member>

<member name="M:DoubleAgent.Control.Character.GenerateIcon(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary> Generates a <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> from one frame of the character's animations.</summary>
<param name="ClipLeft">An optional <typename>numeric</typename> value that specifies the left side of the clipping area. The default value is 0.</param>
<param name="ClipTop">An optional <typename>numeric</typename> value that specifies the top of the clipping area. The default value is 0.</param>
<param name="ClipWidth">An optional <typename>numeric</typename> value that specifies the width of the clipping area. The default value is -1, meaning the full width of the animation frame.</param>
<param name="ClipHeight">An optional <typename>numeric</typename> value that specifies the height of the clipping area. The default value is -1, meaning the full width of the animation frame.</param>
<remarks>
<para>The icon is generated using the first frame of one of the character's animations as the source of the icon image. Which animation is used depends on which animations the character supports.
</para>
<para>You can specify an optional clipping area to generate the icon from only a part of the animation frame.
</para>
<para>If you don't specify a clipping area, the entire image is used (with any empty space around the edges removed).
</para>
<note>You can only use this method once per character. Once a <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> has been generated, it cannot be changed.</note>
<note>If you use this method for a character that has a <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> in its definition, the defined icon is replaced by the generated icon for as long as the character is loaded.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.HasIcon" />
<seealso cref="P:DoubleAgent.Control.Character.IconShown" />
</member>

<member name="M:DoubleAgent.Control.Character.GestureAt(System.Int16,System.Int16)">
<summary> Plays a character's gesturing animation towards the specified location.</summary>
<param name="X">A <typename>numeric</typename> value that indicates the horizontal screen coordinate, in pixels, to which the character will gesture.</param>
<param name="Y">A <typename>numeric</typename> value that indicates the vertical screen coordinate, in pixels, to which the character will gesture.</param>
<returns name="Request">A <see class="typename" cref="T:DoubleAgent.Control.Request" /> Object your application can use to track the method's status.</returns>
<remarks>
<para>Double Agent automatically plays the appropriate animation to gesture toward the specified location. The coordinates are always relative to the upper left corner of the screen.
</para>
</remarks>
<seealso cref="E:DoubleAgent.Control.Control.RequestStart" />
<seealso cref="E:DoubleAgent.Control.Control.RequestComplete" />
</member>

<member name="M:DoubleAgent.Control.Character.Get(System.String,System.String,System.Object)">
<summary> deprecated</summary>
<remarks>
<para>This method has been replaced by the <see cref="M:DoubleAgent.Control.Character.Prepare(DoubleAgent.Control.PrepareResourceType,System.String,System.Object)" /> method, but is still supported for backward compatibility.
</para>
</remarks>
</member>

<member name="M:DoubleAgent.Control.Character.Hide(System.Object)">
<summary> Hides the character.</summary>
<param name="Fast">A <typename>boolean</typename> value that indicates whether to skip the character's <glossary>Hiding</glossary> state animation.</param>
<returns name="Request">A <see class="typename" cref="T:DoubleAgent.Control.Request" /> Object your application can use to track the method's status.</returns>
<remarks>
<para>Double Agent queues the actions of the <self>Hide</self> method in the character's queue, so you can use it to hide the character after a sequence of other animations. You can play the action immediately by using the <see cref="M:DoubleAgent.Control.Character.Stop(System.Object)" /> or <see cref="M:DoubleAgent.Control.Character.StopAll(System.Object)" /> method before calling this method.
</para>
<note>Hiding a character can trigger the <see cref="E:DoubleAgent.Control.Control.ActivateInput" /> event of another client.</note>
<note>Hidden characters cannot access the screen or the audio channel. Double Agent will pass a failure status in the <see cref="E:DoubleAgent.Control.Control.RequestComplete" /> event if you attempt to animate a hidden character.</note>
</remarks>
<seealso cref="M:DoubleAgent.Control.Character.Show(System.Object)" />
<seealso cref="E:DoubleAgent.Control.Control.RequestStart" />
<seealso cref="E:DoubleAgent.Control.Control.RequestComplete" />
</member>

<member name="M:DoubleAgent.Control.Character.Interrupt(DoubleAgent.Control.Request)">
<summary> Interrupts an animation for another character.</summary>
<param name="InterruptRequest">The <see cref="T:DoubleAgent.Control.Request" /> Object for the animation call you want to interrupt.</param>
<returns name="Request">A <see class="typename" cref="T:DoubleAgent.Control.Request" /> Object your application can use to track the method's status.</returns>
<remarks>
<para>You can use this to synchronize animation between characters. For example, if another character is in a looping animation, this method will stop the loop and move to the next animation in the character's queue.
</para>
</remarks>
<seealso cref="M:DoubleAgent.Control.Character.Stop(System.Object)" />
<seealso cref="E:DoubleAgent.Control.Control.RequestStart" />
<seealso cref="E:DoubleAgent.Control.Control.RequestComplete" />
</member>

<member name="M:DoubleAgent.Control.Character.Listen(System.Boolean)">
<summary> Turns on <glossary>Listening mode</glossary> (speech recognition) for a timed period.</summary>
<param name="Listen">A <typename>boolean</typename> value that determines whether to turn <glossary>Listening mode</glossary> on or off.</param>
<returns name="StartedListening"> <keyword>True</keyword> if <glossary>Listening mode</glossary> was started.</returns>
<remarks>
<para>Setting the <paramref name="Listen" /> parameter to <keyword>True</keyword> enables <glossary>Listening mode</glossary> (turns on speech recognition) for a fixed period of time (10 seconds). While you cannot set the value of the time-out, you can turn off <glossary>Listening mode</glossary> before the time-out expires.
</para>
<para>If you (or another client) successfully set <glossary>Listening mode</glossary> on and you attempt to set this property to <keyword>True</keyword> before the time-out expires, the method succeeds and resets the time-out. However, if the <glossary>Listening mode</glossary> is on because the user is pressing the <glossary>Listening key</glossary>, the method succeeds, but the time-out is ignored and <glossary>Listening mode</glossary> ends based on the user's interaction with the <glossary>Listening key</glossary>.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.ListeningStatus" />
<seealso cref="E:DoubleAgent.Control.Control.ListenStart" />
<seealso cref="E:DoubleAgent.Control.Control.ListenComplete" />
<seealso cref="P:DoubleAgent.Control.Character.LanguageID" />
</member>

<member name="M:DoubleAgent.Control.Character.MoveTo(System.Int16,System.Int16,System.Object)">
<summary> Moves the character to the specified location.</summary>
<param name="X">The horizontal location, in pixels, relative to the left side of the screen.</param>
<param name="Y">The vertical location, in pixels, relative to the top of the screen.</param>
<param name="Speed">An optional <typename>numeric</typename> value specifying how quickly the character's image moves, in milliseconds. The default value is 1000. Specifying zero moves the image without playing an animation.</param>
<returns name="Request">A <see class="typename" cref="T:DoubleAgent.Control.Request" /> Object your application can use to track the method's status.</returns>
<remarks>
<para>The location of a character is based on the upper left corner of its image. Double Agent automatically plays the appropriate animation assigned to the <glossary>Moving</glossary> states.
</para>
<note>The <paramref name="Speed" /> parameter's actual effect may vary based on the computer's processor speed and the priority of other tasks running on the system.</note>
<note>If you call <self>MoveTo</self> with a non-zero <paramref name="Speed" /> before the character is shown, it will return a failure status if you assigned a <see cref="T:DoubleAgent.Control.Request" /> Object, because the non-zero value indicates that you're attempting to play an animation when the character isn't visible.</note>
</remarks>
<seealso cref="E:DoubleAgent.Control.Control.Move" />
<seealso cref="E:DoubleAgent.Control.Control.RequestStart" />
<seealso cref="E:DoubleAgent.Control.Control.RequestComplete" />
</member>

<member name="M:DoubleAgent.Control.Character.Play(System.String)">
<summary> Plays the specified animation.</summary>
<param name="Animation">A <typename>string</typename> value that specifies the name of an animation sequence.</param>
<returns name="Request">A <see class="typename" cref="T:DoubleAgent.Control.Request" /> Object your application can use to track the method's status.</returns>
<remarks>
<para>An animation's name is defined when the character is authored. Before playing the specified animation, Double Agent attempts to play the <glossary>Return</glossary> animation for the previous animation, if one has been assigned.
</para>
<para>The <self>Play</self> method does not make the character visible. If the character is not visible, Double Agent plays the animation invisibly, and sets the <see cref="P:DoubleAgent.Control.Request.Status" /> property of the <see cref="T:DoubleAgent.Control.Request" /> Object.
</para>
<para>When accessing a character's animations using a conventional file protocol, you can simply use the<self>Play</self> method specifying the name of the animation. However, if you're using the <glossary>HTTP</glossary> protocol to access character animation data, use the <see cref="M:DoubleAgent.Control.Character.Prepare(DoubleAgent.Control.PrepareResourceType,System.String,System.Object)" /> method to load the animation before calling the <self>Play</self> method.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.Animations" />
<seealso cref="E:DoubleAgent.Control.Control.RequestStart" />
<seealso cref="E:DoubleAgent.Control.Control.RequestComplete" />
</member>

<member name="M:DoubleAgent.Control.Character.Prepare(DoubleAgent.Control.PrepareResourceType,System.String,System.Object)">
<summary> Retrieves the specified animation data for the a remote character.</summary>
<param name="ResourceType">One of the following members of the <see class="typename" cref="T:DoubleAgent.Control.PrepareResourceType" /> Enumeration: 
<list type="table">
<item><term xml:space="preserve">
0 = <keyword>Animation</keyword>
</term>
<description>Download an animation.</description>
</item>
<item><term xml:space="preserve">
1 = <keyword>State</keyword>
</term>
<description>Download all animations for a state.</description>
</item>
<item><term xml:space="preserve">
2 = <keyword>Wave</keyword>
</term>
<description>Download a sound file.</description>
</item>
</list>
</param>
<param name="Name">A <typename>string</typename> that indicates the name of the animation resource. 
<list type="bullet">
<item>For animations, the name is one of those defined for the character when it was authored.</item>
<item>For states, the name is one of those defined for the character when it was authored. See the <see cref="P:DoubleAgent.Control.Character.States" /> property for details.</item>
<item>For audio files, specify the location of the .WAV file. If an incomplete path is specified, it's interpreted as being relative to the location used in the <see cref="M:DoubleAgent.Control.Characters.Load(System.String,System.Object)" /> method.</item>
<item>You can specify multiple animations and states by separating them with commas. However, you cannot mix types in the same <self>Prepare</self> call.</item>
</list>
</param>
<param name="Queue">A <typename>boolean</typename> value specifying whether the Double Agent queues the <self>Prepare</self>, or starts it immediately.</param>
<returns name="Request">A <see class="typename" cref="T:DoubleAgent.Control.Request" /> Object your application can use to track the method's status.</returns>
<remarks>
<para>If you load a character using the <glossary>HTTP</glossary> protocol (an <filename>.ACF</filename> file), you should use the <self>Prepare</self> method to retrieve animation data before you play the animation. You do not use this method if you loaded the character using the <glossary>UNC</glossary> protocol (an <filename>.ACS</filename> file).
</para>
<para>Using the <self>Prepare</self> method is <strong>not</strong> mandatory. If Double Agent requires an animation from an <filename>.ACS</filename> file, it will load the file automatically (from the same location the <filename>.ACF</filename> file was loaded). However, this may cause unexpected delays when using the <glossary>HTTP</glossary> protocol.
</para>
</remarks>
<seealso cref="T:DoubleAgent.Control.PrepareResourceType" />
<seealso cref="M:DoubleAgent.Control.Characters.Load(System.String,System.Object)" />
<seealso cref="P:DoubleAgent.Control.Character.Animations" />
<seealso cref="P:DoubleAgent.Control.Character.States" />
<seealso cref="E:DoubleAgent.Control.Control.RequestStart" />
<seealso cref="E:DoubleAgent.Control.Control.RequestComplete" />
</member>

<member name="M:DoubleAgent.Control.Character.Show(System.Object)">
<summary> Shows the character and optionally plays its associated <glossary>Showing</glossary> animation.</summary>
<param name="Fast">A <typename>boolean</typename> value specifying whether or not the <glossary>Showing</glossary> state animation is played.</param>
<returns name="Request">A <see class="typename" cref="T:DoubleAgent.Control.Request" /> Object your application can use to track the method's status.</returns>
<remarks>
<para>Avoid setting the <paramref name="Fast" /> parameter to <keyword>True</keyword> without first playing an animation; otherwise, the character may be shown with no image. In particular, note that if you call <see cref="M:DoubleAgent.Control.Character.MoveTo(System.Int16,System.Int16,System.Object)" /> when the character is not visible, it <em>does not</em> play any animation. Therefore, if you call the <self>Show</self> method with <paramref name="Fast" /> set to <keyword>True</keyword>, no image will display. Similarly, if you call <see cref="M:DoubleAgent.Control.Character.Hide(System.Object)" />, then <self>Show</self> with <paramref name="Fast" /> set to <keyword>True</keyword>, there will be no visible image.
</para>
</remarks>
<seealso cref="M:DoubleAgent.Control.Character.Hide(System.Object)" />
<seealso cref="E:DoubleAgent.Control.Control.RequestStart" />
<seealso cref="E:DoubleAgent.Control.Control.RequestComplete" />
</member>

<member name="M:DoubleAgent.Control.Character.ShowPopupMenu(System.Int16,System.Int16)">
<summary> Displays the character's <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a> at the specified location.</summary>
<param name="X">The horizontal screen coordinate to display the menu, in pixels.</param>
<param name="Y">The vertical screen coordinate to display the menu, in pixels.</param>
<returns name="Showed"> <keyword>True</keyword> if the method succeeded.</returns>
<remarks>
<para>If the <see cref="P:DoubleAgent.Control.Character.AutoPopupMenu" /> property is set to <keyword>True</keyword>, Double Agent automatically displays the character's <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a> when the user right-clicks the character. If you set <see cref="P:DoubleAgent.Control.Character.AutoPopupMenu" /> to <keyword>False</keyword>, you can use <self>ShowPopupMenu</self> to display the menu.
</para>
<para>The menu remains displayed until the user selects a command or displays another menu. Only one pop-up menu can be displayed at a time; therefore, calls to this method will cancel (remove) the former menu.
</para>
<para>This method should be called only when your client application is the active client of the character; otherwise it fails. To determine the success of this method you can call it as a function and it will return a boolean value indicating whether the method succeeded.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.AutoPopupMenu" />
</member>

<member name="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)">
<summary> Speaks the specified text or sound file.</summary>
<param name="Text">A <typename>string</typename> value that specifies what the character says.</param>
<param name="Url">A <typename>string</typename> value specifying the location of an audio file (.WAV format). The location can be specified as a file (including a <glossary>UNC</glossary> path specification) or URL (when character animation data is also being retrieved via <glossary>HTTP</glossary> protocol).</param>
<returns name="Request">A <see class="typename" cref="T:DoubleAgent.Control.Request" /> Object your application can use to track the method's status.</returns>
<remarks>
<para>At least one of the <paramref name="Text" /> and <paramref name="Url" /> parameters must be supplied. To use this method with a character configured to speak only in its <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> or using a text-to-speech (TTS) engine, simply provide the <paramref name="Text" /> parameter. Include a space between words to define appropriate word breaks in the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>, even for languages that do not traditionally include spaces.
</para>
<para>You can also include vertical bar '|' characters in the <paramref name="Text" /> parameter to designate alternative strings, so that Double Agent randomly chooses a different string each time it processes the method.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.LanguageID" />
<seealso cref="M:DoubleAgent.Control.Character.Think(System.String)" />
<seealso cref="E:DoubleAgent.Control.Control.Bookmark" />
<seealso cref="E:DoubleAgent.Control.Control.RequestStart" />
<seealso cref="E:DoubleAgent.Control.Control.RequestComplete" />
</member>

<member name="M:DoubleAgent.Control.Character.Stop(System.Object)">
<summary> Stops an animation.</summary>
<param name="Request">A <see class="typename" cref="T:DoubleAgent.Control.Request" /> Object specifying a particular animation call, or a null reference to stop all animations.</param>
<remarks>
<para>To specify the <paramref name="Request" /> parameter, you must create a variable and assign the animation request you want to stop. If you don't set the <paramref name="Request" /> parameter, Double Agent stops all animations for the character, including queued <see cref="M:DoubleAgent.Control.Character.Prepare(DoubleAgent.Control.PrepareResourceType,System.String,System.Object)" /> calls, and clears its animation queue (unless the character is currently playing its <glossary>Hiding</glossary> or <glossary>Showing</glossary> animation).
</para>
<note>This method is performed immediately and does not generate a <see cref="T:DoubleAgent.Control.Request" /> Object.</note>
<note>This method <em>does not</em> stop immediate <see cref="M:DoubleAgent.Control.Character.Prepare(DoubleAgent.Control.PrepareResourceType,System.String,System.Object)" /> calls.</note>
</remarks>
<seealso cref="M:DoubleAgent.Control.Character.StopAll(System.Object)" />
</member>

<member name="M:DoubleAgent.Control.Character.StopAll(System.Object)">
<summary> Stops all animation requests or specified types of requests.</summary>
<param name="Types">You can omit this parameter you or use any combination of the following members of the <see class="typename" cref="T:DoubleAgent.Control.StopAllFlags" /> Enumeration: 
<list type="table">
<item><term xml:space="preserve">
&amp;H00000001 = <keyword>Play</keyword>
</term>
<description>Stop any pending or running animations.</description>
</item>
<item><term xml:space="preserve">
&amp;H00000002 = <keyword>Move</keyword>
</term>
<description>Stop any pending or running move requests.</description>
</item>
<item><term xml:space="preserve">
&amp;H00000004 = <keyword>Speak</keyword>
</term>
<description>Stop any pending or running speech requests.</description>
</item>
<item><term xml:space="preserve">
&amp;H00000008 = <keyword>QueuedPrepare</keyword>
</term>
<description>Stop any queued animation or file downloads (<keyword>Prepare</keyword> method with <token>Queue</token> parameter set to <keyword>True</keyword>).</description>
</item>
<item><term xml:space="preserve">
&amp;H00000010 = <keyword>ImmediatePrepare</keyword>
</term>
<description>Stop any non-queued animation or file downloads (<keyword>Prepare</keyword> method with <token>Queue</token> parameter set to <keyword>False</keyword>)</description>
</item>
<item><term xml:space="preserve">
&amp;H00000020 = <keyword>Visibility</keyword>
</term>
<description>Stop any pending show or hide requests.</description>
</item>
<item><term xml:space="preserve">
&amp;HFFFFFFFF = <keyword>Everything</keyword>
</term>
<description>Stop all pending requests.</description>
</item>
</list>
<para>You can use a <typename>string</typename> value instead, with one or more of the following values, separated with commas:
</para>
<list type="table">
<item>
<term>"Play"</term>
<description>StopAllFlags.Play</description>
</item>
<item>
<term>"Move"</term>
<description>StopAllFlags.Move</description>
</item>
<item>
<term>"Speak"</term>
<description>StopAllFlags.Speak</description>
</item>
<item>
<term>"QueuedPrepare" (or "Get" for compatibility)</term>
<description>StopAllFlags.QueuedPrepare</description>
</item>
<item>
<term>"ImmediatePrepare" (or "NonQueuedGet" for compatibility)</term>
<description>StopAllFlags.ImmediatePrepare</description>
</item>
<item>
<term>"Visibility" or "Visible"</term>
<description>StopAllFlags.Visibility</description>
</item>
<item>
<term>"Everything" or "All"</term>
<description>StopAllFlags.Everything</description>
</item>
</list>
</param>
<remarks>
<para>If you don't set the <paramref name="Type" /> parameter, Double Agent stops all animations for the character, including queued and immediate <see cref="M:DoubleAgent.Control.Character.Prepare(DoubleAgent.Control.PrepareResourceType,System.String,System.Object)" /> requests, and clears its animation queue. It also stops playing a character's <glossary>Hiding</glossary> or <glossary>Showing</glossary> animation.
</para>
<para>This method is performed immediately and does not generate a <see cref="T:DoubleAgent.Control.Request" /> Object.
</para>
</remarks>
<seealso cref="M:DoubleAgent.Control.Character.Stop(System.Object)" />
<seealso cref="T:DoubleAgent.Control.StopAllFlags" />
</member>

<member name="M:DoubleAgent.Control.Character.Think(System.String)">
<summary> Displays the specified text in the character's <glossary>thought</glossary> <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>.</summary>
<param name="Text">A <typename>string</typename> value that specifies the character's thought output.</param>
<returns name="Request">A <see class="typename" cref="T:DoubleAgent.Control.Request" /> Object your application can use to track the method's status.</returns>
<remarks>
<para>Like the <see cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" /> method, the <self>Think</self> method is a queued request that displays text in a <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>, except that the <self>Think</self> <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> differs visually. In addition, the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> supports only the Bookmark speech control tag (<keyword>\Mrk</keyword>) and ignores any other speech control tags. Unlike <see cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" />, the <self>Think</self> method does not change the character's animation state.
</para>
<para>The <see cref="T:DoubleAgent.Control.Balloon" /> Object's properties affect the output of both the <see cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" /> and <self>Think</self> methods. For example, the <see cref="T:DoubleAgent.Control.Balloon" /> Object's <see cref="P:DoubleAgent.Control.Balloon.Enabled" /> property must be <keyword>True</keyword> for text to display.
</para>
<para>Agent's automatic word breaking in the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> breaks words using <glossary>white-space</glossary> characters (for example, SPACE or TAB). However, if it cannot, it may break a word to fit the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>. In languages like Japanese, Chinese, and Thai where spaces are not used to break words, insert a Unicode zero-width space character (0x200B) between characters to define logical word breaks.
</para>
<note>To track the method's status, you can declare an object reference and set it to the method's <see cref="T:DoubleAgent.Control.Request" /> Object return value.</note>
<note>Set the character's <see cref="P:DoubleAgent.Control.Character.LanguageID" /> before using the <self>Think</self> method to ensure appropriate text display within the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.LanguageID" />
<seealso cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" />
<seealso cref="E:DoubleAgent.Control.Control.RequestStart" />
<seealso cref="E:DoubleAgent.Control.Control.RequestComplete" />
</member>

<member name="M:DoubleAgent.Control.Character.Wait(DoubleAgent.Control.Request)">
<summary> Causes the character's animation queue to wait until the specified animation request completes.</summary>
<param name="WaitRequest">A <see class="typename" cref="T:DoubleAgent.Control.Request" /> Object specifying the animation to wait for.</param>
<returns name="Request">A <see class="typename" cref="T:DoubleAgent.Control.Request" /> Object your application can use to track the method's status.</returns>
<remarks>
<para>Use this method only when you are using multiple (simultaneous) characters and are trying to sequence the interaction of characters. (For a single character, each animation request is played sequentially--after the previous request completes.)
</para>
<para>If you have two characters and you want one character's animation request to wait until the other character's animation completes, use the <self>Wait</self> method with the other character's animation <see cref="T:DoubleAgent.Control.Request" /> Object.
</para>
</remarks>
<seealso cref="E:DoubleAgent.Control.Control.RequestStart" />
<seealso cref="E:DoubleAgent.Control.Control.RequestComplete" />
</member>

<member name="P:DoubleAgent.Control.Character.Active">
<summary> deprecated</summary>
<remarks>
<para>This property has been replaced by the <see cref="P:DoubleAgent.Control.Character.ActiveState" /> property, but is still supported for backward compatibility.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Character.ActiveState">
<summary> Indicates if your application is the character's active client and if the character is <glossary>input-active</glossary>.</summary>
<value name="ActiveState">A member of the <see class="typename" cref="T:DoubleAgent.Control.ActiveStateType" /> Enumeration indicating the state of the character and your client application: 
<list type="table">
<item name="Inactive"><term xml:space="preserve">
0 = <keyword>Inactive</keyword>
</term>
<description>Your client application is <em>not</em> the character's active client.</description>
</item>
<item name="Active"><term xml:space="preserve">
1 = <keyword>Active</keyword>
</term>
<description>Your client application is the character's active client.</description>
</item>
<item name="InputActive"><term xml:space="preserve">
2 = <keyword>InputActive</keyword>
</term>
<description>The character is the <glossary>input-active</glossary> character and will receive user input.</description>
</item>
<item name="Suspended"><term xml:space="preserve">
4 = <keyword>Suspended</keyword>
</term>
<description>Your client application is inactive, and is <em>not</em> the character's active client.</description>
</item>
<item name="Suspended_Active"><term xml:space="preserve">
5 = <keyword>Suspended_Active</keyword>
</term>
<description>Your client application is inactive, and is the character's active client.</description>
</item>
<item name="Suspended_InputActive"><term xml:space="preserve">
6 = <keyword>Suspended_InputActive</keyword>
</term>
<description>Your client application is inactive, and the character will be <glossary>input-active</glossary> when your application becomes active.</description>
</item>
</list>
</value>
<remarks>
<para>When multiple client applications share the same character, the character's active client receives mouse input (for example, Double Agent control <keyword>Click</keyword> or <keyword>Drag</keyword> events). Similarly, when multiple characters are displayed, the active client of the topmost character (also known as the <glossary>input-active</glossary> client) receives Command events.
</para>
<para>You can use the <see cref="M:DoubleAgent.Control.Character.Activate(System.Object)" /> method to set whether your application is the character's active client or to make your application the <glossary>input-active</glossary> client (which also makes the character topmost).
</para>
</remarks>
<seealso cref="M:DoubleAgent.Control.Character.Activate(System.Object)" />
</member>

<member name="P:DoubleAgent.Control.Character.AnimationNames">
<summary> deprecated</summary>
<remarks>
<para>This property has been replaced by the <see cref="P:DoubleAgent.Control.Character.Animations" /> property, but is still supported for backward compatibility.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Character.Animations">
<summary> Returns the names of the character's animations.</summary>
<value name="Animations">An array of <typename>string</typename> values that name all of the animations the character can play.</value>
<remarks>
<para>For <filename>.ACF</filename> characters, the array contains all the animations defined for the character, not just the ones that have been retrieved with the <see cref="M:DoubleAgent.Control.Character.Prepare(DoubleAgent.Control.PrepareResourceType,System.String,System.Object)" /> method.
</para>
</remarks>
<seealso cref="M:DoubleAgent.Control.Character.Play(System.String)" />
<seealso cref="M:DoubleAgent.Control.Character.Prepare(DoubleAgent.Control.PrepareResourceType,System.String,System.Object)" />
</member>

<member name="P:DoubleAgent.Control.Character.AutoPopupMenu">
<summary> Specifies if right-clicking the character or its <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> automatically displays the character's <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a>.</summary>
<value name="Enabled">A <typename>boolean</typename> value specifying whether Double Agent automatically displays the character's <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a> on right-click.</value>
<remarks>
<para>By setting this property to <keyword>False</keyword>, you can create your own menu-handling behaviour. To display the menu after setting this property to <keyword>False</keyword>, use the <see cref="M:DoubleAgent.Control.Character.ShowPopupMenu(System.Int16,System.Int16)" /> method.
</para>
<note name="ThisClientOnly">This property applies only to your client application's use of the character; the setting does not affect other clients of the character or other characters of your client application.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.Style" />
<seealso cref="F:DoubleAgent.Control.CharacterStyleFlags.AutoPopupMenu" />
<seealso cref="M:DoubleAgent.Control.Character.ShowPopupMenu(System.Int16,System.Int16)" />
</member>

<member name="P:DoubleAgent.Control.Character.Balloon">
<summary> Returns the character's <see cref="T:DoubleAgent.Control.Balloon" /> Object.</summary>
<value name="Balloon">The character's <see class="typename" cref="T:DoubleAgent.Control.Balloon" /> Object.</value>
</member>

<member name="P:DoubleAgent.Control.Character.CharacterID">
<summary> Returns the unique string that identifies the <see cref="T:DoubleAgent.Control.Character" /> Object in the <see cref="T:DoubleAgent.Control.Characters" /> Collection.</summary>
<value name="CharacterID">A <typename>string</typename> value that identifies the <see cref="T:DoubleAgent.Control.Character" /> Object.</value>
<remarks>
<para>When you keep a reference to a <see cref="T:DoubleAgent.Control.Character" /> Object, you can use this property to relate it back to it's owner <see cref="T:DoubleAgent.Control.Characters" /> Collection.
</para>
</remarks>
<seealso cref="M:DoubleAgent.Control.Characters.Load(System.String,System.Object)" />
<seealso cref="P:DoubleAgent.Control.Characters.Item" />
</member>

<member name="P:DoubleAgent.Control.Character.Commands">
<summary> Returns the character's <see cref="T:DoubleAgent.Control.Commands" /> Collection.</summary>
<value name="Commands">The character's <see class="typename" cref="T:DoubleAgent.Control.Commands" /> Collection.</value>
</member>

<member name="P:DoubleAgent.Control.Character.Connected">
<summary> Indicates if the <see cref="T:DoubleAgent.Control.Character" /> Object is <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#connected">connected</a> to the Double Agent server.</summary>
<value name="Connected">A <keyword>boolean</keyword> value that indicates if the character is running on the server or locally.</value>
<remarks>
<para>When the control is being used in <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#standalone">stand-alone</a> mode, any <see cref="T:DoubleAgent.Control.Character" /> you load <em>will</em> be <self>Connected</self>. When the control is being used in <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#standalone">stand-alone</a> mode, any <see cref="T:DoubleAgent.Control.Character" /> you load <em>will not</em> be <self>Connected</self>.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Character.Description">
<summary> Specifies a string that specifies the description for the specified character.</summary>
<value name="Description">A <typename>string</typename> value corresponding to the character's description (in the current language setting).</value>
<remarks>
<para>A character's <self>Description</self> may depend on the character's <see cref="P:DoubleAgent.Control.Character.LanguageID" /> setting. A character's description in one language may be different or use different characters than in another. The character's default <self>Description</self> for a specific language is defined when the character is compiled with the Microsoft Agent Character Editor.
</para>
<note>The <self>Description</self> property is optional and may not be supplied for all characters.</note>
<note name="AllClients">This property applies to all clients of the character.</note>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Character.ExtraData">
<summary> Returns a string that specifies additional data stored as part of the character.</summary>
<value name="ExtraData">A <typename>string</typename> that contains any additional data stored as part of the character.</value>
<remarks>
<para>The default value for a character's <self>ExtraData</self> property is defined when the character is compiled with the Microsoft Agent Character Editor. It cannot be changed or specified at run time.
</para>
<note>The <self>ExtraData</self> property setting is optional and may not be supplied for all characters.</note>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Character.FileName">
<summary> Returns the name of the character's definition file.</summary>
<value name="FileName">A <typename>string</typename> value that contains the character's definition file name.</value>
<remarks>
<para>This is the name of the file that was used to <see cref="M:DoubleAgent.Control.Characters.Load(System.String,System.Object)" /> the character.
</para>
</remarks>
<seealso cref="M:DoubleAgent.Control.Characters.Load(System.String,System.Object)" />
</member>

<member name="P:DoubleAgent.Control.Character.FilePath">
<summary> Returns the full path (<glossary>UNC</glossary> or <glossary>HTTP</glossary>) of the character's definition file.</summary>
<value name="FilePath">A <typename>string</typename> value that contains the character's definition file path.</value>
<remarks>
<para>This is the full path of the file that was used to <see cref="M:DoubleAgent.Control.Characters.Load(System.String,System.Object)" /> the character.
</para>
</remarks>
<seealso cref="M:DoubleAgent.Control.Characters.Load(System.String,System.Object)" />
</member>

<member name="P:DoubleAgent.Control.Character.GUID">
<summary> deprecated</summary>
<remarks>
<para>This property has been replaced by the <see cref="P:DoubleAgent.Control.Character.UniqueID" /> property, but is still supported for backward compatibility.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Character.HasIcon">
<summary> Indicates if the character has a <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> in its definition.</summary>
<value name="HasIcon">A <typename>boolean</typename> value that indicates if the character definition includes a <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a>.</value>
<remarks>
<para>If the character definition does not include an icon (or even if it does) you can use the <see cref="M:DoubleAgent.Control.Character.GenerateIcon(System.Int32,System.Int32,System.Int32,System.Int32)" /> method to create an icon from the character's animations.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.IconShown" />
<seealso cref="P:DoubleAgent.Control.Character.IconVisible" />
<seealso cref="M:DoubleAgent.Control.Character.GenerateIcon(System.Int32,System.Int32,System.Int32,System.Int32)" />
</member>

<member name="P:DoubleAgent.Control.Character.HasOtherClients">
<summary> Indicates if the specified character is in use by other applications.</summary>
<value name="HasOtherClients">A <typename>boolean</typename> value that indicates if another client application is using this character.</value>
<remarks>
<para>You can use this property to determine if your application is the character's only client, or if another application is sharing (has loaded) the same character.
</para>
<note>If your application uses multiple instances of the <see cref="T:DoubleAgent.Control.Control" /> Object, each instance is a treated as a different client and this property will return <keyword>True</keyword>.</note>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Character.Height">
<summary> Specifies the height of the character's image.</summary>
<value name="Height">A <typename>numeric</typename> value that specifies the height of the character's image.</value>
<remarks>
<para>The <self>Height</self> property is always expressed in pixels.
</para>
<para>Even though the character appears in an irregularly shaped region window, the dimensions of the character are based on the external dimensions of the rectangular animation frame used when the character was compiled with the Microsoft Agent Character Editor.
</para>
<note name="AllClients">This property applies to all clients of the character.</note>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Character.HelpContextID">
<summary>Not Implemented</summary>
</member>

<member name="P:DoubleAgent.Control.Character.HelpFile">
<summary>Not Implemented</summary>
</member>

<member name="P:DoubleAgent.Control.Character.HelpModeOn">
<summary>Not Implemented</summary>
</member>

<member name="P:DoubleAgent.Control.Character.IconIdentity">
<summary> Specifies the identity that Windows will use to remember the character's <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a>.</summary>
<value name="IconIdentity">A <typename>string</typename> value that allows Windows to uniquely identify this character's <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a>. It must be either a valid GUID string or an empty string.</value>
<remarks>
<para>Every <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> has an identity that allows Windows to remember it's state (shown, hidden, active, etc.). By default, Windows associates a <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> with the application that creates it.
</para>
<para>You can supply either a GUID identifier, or an empty string to use the default identity.
</para>
<list type="bullet">
<item>If the character was loaded by the Double Agent server, it's <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> will be associated with the server by default.</item>
<item>If you're using the control in <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#standalone">stand-alone</a> mode, the character's <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> will be associated with your client application by default.</item>
<item>You can supply a <em>single</em> GUID for all characters you load. All of their <a class="see" href="../html/UI_Intro.htm#Icon">notification icons</a> will be associated with that single identity.</item>
<item>You can supply a <em>unique</em> GUID for each character you load. Windows will then identify each character's <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> uniquely.</item>
</list>
<note name="ThisClientOnly">This property applies only to your client application's use of the character; the setting does not affect other clients of the character or other characters of your client application.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.IconShown" />
<seealso cref="P:DoubleAgent.Control.Character.IconVisible" />
</member>

<member name="P:DoubleAgent.Control.Character.IconShown">
<summary> Specifies if the character's <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> is shown in the Windows notification area.</summary>
<value name="IconShown">A <typename>boolean</typename> value that indicates if the icon is shown.</value>
<remarks>
<para>This property only specifies if the <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> is added to the Windows notification area. The user decides whether it's visible or hidden. See the <see cref="P:DoubleAgent.Control.Character.IconIdentity" /> property for more details.
</para>
<note>This property has no effect if the character doesn't have a <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a>.</note>
<note name="ThisClientOnly">This property applies only to your client application's use of the character; the setting does not affect other clients of the character or other characters of your client application.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.Style" />
<seealso cref="F:DoubleAgent.Control.CharacterStyleFlags.IconShown" />
<seealso cref="P:DoubleAgent.Control.Character.HasIcon" />
<seealso cref="P:DoubleAgent.Control.Character.IconVisible" />
<seealso cref="P:DoubleAgent.Control.Character.IconIdentity" />
<seealso cref="P:DoubleAgent.Control.Character.IconTip" />
<seealso cref="M:DoubleAgent.Control.Character.GenerateIcon(System.Int32,System.Int32,System.Int32,System.Int32)" />
</member>

<member name="P:DoubleAgent.Control.Character.IconTip">
<summary> Specifies the tip text associated with the character's <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a>.</summary>
<value name="IconTip">A <typename>string</typename> value that specifies the <a class="see" href="../html/UI_Intro.htm#Icon">notification icon's</a> tip text. An empty string means that the default tip (the character's name) is used.</value>
<remarks>
<para>By default, the character's <see cref="P:DoubleAgent.Control.Character.Name" /> is shown in the <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> tip. You can use <em>this</em> property to show your own tip.
</para>
<note name="ThisClientOnly">This property applies only to your client application's use of the character; the setting does not affect other clients of the character or other characters of your client application.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.IconShown" />
<seealso cref="P:DoubleAgent.Control.Character.IconVisible" />
<seealso cref="P:DoubleAgent.Control.Character.Name" />
</member>

<member name="P:DoubleAgent.Control.Character.IconVisible">
<summary> Indicates if the character has a <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> in the Windows notification area.</summary>
<value name="IconVisible">A <typename>boolean</typename> value that indicates if the character is showing a <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a>.</value>
<remarks>
<para>This property only indicates if the <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> has been created. The user decides if the icon is actually visible or hidden.
</para>
<para>The <see cref="F:DoubleAgent.Control.CharacterStyleFlags.IconShown" /> style only applies to your client application, so it is only in effect when you application is the character's active client. When your application is <em>not</em> the character's active client, you can use this property to determine if another client has shown or hidden the <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a>.
</para>
<note name="AllClients">This property applies to all clients of the character.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.IconShown" />
<seealso cref="P:DoubleAgent.Control.Character.IconIdentity" />
<seealso cref="P:DoubleAgent.Control.Character.IconTip" />
</member>

<member name="P:DoubleAgent.Control.Character.IdleEnabled">
<summary> Specifies if the character will show its <glossary>Idling</glossary> animations when it's not busy.</summary>
<value name="IdleEnabled">A <typename>boolean</typename> value specifying whether Double Agent manages idle mode.</value>
<remarks>
<para>Double Agent automatically sets a time-out after the last animation played for a character. When this timer's interval is complete, Double Agent begins the <glossary>Idling</glossary> state for a character, playing its associated <glossary>Idling</glossary> animations at regular intervals. If you want to disable Double Agent from automatically playing the <glossary>Idling</glossary> state animations, set the property to <keyword>False</keyword> and play an animation or call the <see cref="M:DoubleAgent.Control.Character.Stop(System.Object)" /> method. Setting this value does not affect the current animation state of the character.
</para>
<note name="ThisClientOnly">This property applies only to your client application's use of the character; the setting does not affect other clients of the character or other characters of your client application.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.Style" />
<seealso cref="F:DoubleAgent.Control.CharacterStyleFlags.IdleEnabled" />
<seealso cref="P:DoubleAgent.Control.Character.IdleState" />
</member>

<member name="P:DoubleAgent.Control.Character.IdleOn">
<summary> deprecated</summary>
<remarks>
<para>This property has been replaced by the <see cref="P:DoubleAgent.Control.Character.IdleEnabled" /> property, but is still supported for backward compatibility.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Character.IdleState">
<summary> Indicates if the character is currently playing its <glossary>Idling</glossary> animations.</summary>
<value name="IdleState">A <typename>boolean</typename> value that indicates if the character is idling.</value>
<remarks>
<note name="AllClients">This property applies to all clients of the character.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.IdleEnabled" />
</member>

<member name="P:DoubleAgent.Control.Character.LanguageID">
<summary> Specifies the character's language identifier.</summary>
<value name="LanguageID">A <typename>numeric</typename> value specifying the character's language ID. A character's language ID (LANGID) is a 16-bit value defined by Windows, consisting of a primary language ID and a secondary language ID.</value>
<remarks>
<para>If you do not set the character's <self>LanguageID</self>, its language will be the current system language, if the corresponding Agent language DLL is installed. Otherwise, the character's language will be English (US).
</para>
<para>This property also determines the language for <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> text, the commands in the character's <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a>, and the speech recognition engine. It also determines the default language for text-to-speech output.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.TTSModeID" />
<seealso cref="P:DoubleAgent.Control.Character.SRModeID" />
</member>

<member name="P:DoubleAgent.Control.Character.Left">
<summary> Specifies the left edge of the character's image.</summary>
<value name="Left">A <typename>numeric</typename> value that specifies the left edge of the character's image.</value>
<remarks>
<para>The <self>Left</self> property is always expressed in pixels, relative to screen origin (upper left).
</para>
<para>Even though the character appears in an irregularly shaped region window, the location of the character is based on the external dimensions of the rectangular animation frame used when the character was compiled with the Microsoft Agent Character Editor.
</para>
<note name="AllClients">This property applies to all clients of the character.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.Top" />
<seealso cref="M:DoubleAgent.Control.Character.MoveTo(System.Int16,System.Int16,System.Object)" />
</member>

<member name="P:DoubleAgent.Control.Character.ListeningStatus">
<summary> Indicates if speech input can be started for the character.</summary>
<value name="ListeningStatus">One of the following members of the <see class="typename" cref="T:DoubleAgent.Control.ListeningStatusType" /> Enumeration: 
<list type="table">
<item><term xml:space="preserve">
0 = <keyword>Available</keyword>
</term>
<description>Conditions support speech input.</description>
</item>
<item><term xml:space="preserve">
2 = <keyword>CharacterInactive</keyword>
</term>
<description>Speech recognition is unavailable because another client is the active client of this character, or the current character is not <glossary>input-active</glossary>.</description>
</item>
<item><term xml:space="preserve">
4 = <keyword>InitializeFailed</keyword>
</term>
<description>Speech recognition is unavailable because it could not be initialized. This includes the possibility that there is no speech engine available matching the character's language setting.</description>
</item>
<item><term xml:space="preserve">
5 = <keyword>InputDisabled</keyword>
</term>
<description>The user has disabled speech input in the <a class="see" href="../html/UI_PropSheet.htm#SpeechInput">Advanced Character Options</a> window.</description>
</item>
<item><term xml:space="preserve">
6 = <keyword>Error</keyword>
</term>
<description>The speech recognition status could not be determined.</description>
</item>
</list>
</value>
<remarks>
<para>This property checks for the conditions necessary to support speech input. You can check this property before you call the <see cref="M:DoubleAgent.Control.Character.Listen(System.Boolean)" /> method to better ensure its success.
</para>
</remarks>
<seealso cref="T:DoubleAgent.Control.ListeningStatusType" />
<seealso cref="P:DoubleAgent.Control.Settings.SREnabled" />
<seealso cref="M:DoubleAgent.Control.Character.Listen(System.Boolean)" />
</member>

<member name="P:DoubleAgent.Control.Character.MoveCause">
<summary> Returns the cause of the character's last move.</summary>
<value name="MoveCause">One of the following members of the <see class="typename" cref="T:DoubleAgent.Control.MoveCauseType" /> Enumeration: 
<list type="table">
<item name="NeverMoved"><term xml:space="preserve">
0 = <keyword>NeverMoved</keyword>
</term>
<description>The character hasn't moved.</description>
</item>
<item name="UserMoved"><term xml:space="preserve">
1 = <keyword>UserMoved</keyword>
</term>
<description>The user dragged the character.</description>
</item>
<item name="ProgramMoved"><term xml:space="preserve">
2 = <keyword>ProgramMoved</keyword>
</term>
<description>Your client application moved the character.</description>
</item>
<item name="OtherProgramMoved"><term xml:space="preserve">
3 = <keyword>OtherProgramMoved</keyword>
</term>
<description>Another client application moved the character.</description>
</item>
</list>
</value>
<remarks>
<para>You can use this property to determine what caused the character to move, when more than one application is sharing (has loaded) the same character. These values are the same as those returned by the <see cref="E:DoubleAgent.Control.Control.Move" /> event.
</para>
</remarks>
<seealso cref="T:DoubleAgent.Control.MoveCauseType" />
<seealso cref="E:DoubleAgent.Control.Control.Move" />
<seealso cref="M:DoubleAgent.Control.Character.MoveTo(System.Int16,System.Int16,System.Object)" />
</member>

<member name="P:DoubleAgent.Control.Character.Name">
<summary> Specifies the specified character's displayed name.</summary>
<value name="Name">A <typename>string</typename> value corresponding to the character's name (in the current language setting).</value>
<remarks>
<para>A character's <self>Name</self> may depend on the character's <see cref="P:DoubleAgent.Control.Character.LanguageID" /> setting. A character's name in one language may be different or use different characters than in another. The character's default <self>Name</self> for a specific language is defined when the character is compiled with the Microsoft Agent Character Editor.
</para>
<para>Avoid renaming a character, especially when using it in a scenario where other client applications may use the same character. Also, Double Agent uses the character's <self>Name</self> to automatically create commands for hiding and showing the character.
</para>
<note name="AllClients">This property applies to all clients of the character.</note>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Character.OriginalHeight">
<summary> Returns the character's default height.</summary>
<value name="OriginalHeight">The character's image height as defined with the Microsoft Agent Character Editor.</value>
<seealso cref="P:DoubleAgent.Control.Character.Height" />
<seealso cref="P:DoubleAgent.Control.Character.OriginalWidth" />
</member>

<member name="P:DoubleAgent.Control.Character.OriginalWidth">
<summary> Returns the character's default width.</summary>
<value name="OriginalWidth">The character's image width as defined with the Microsoft Agent Character Editor.</value>
<seealso cref="P:DoubleAgent.Control.Character.Width" />
<seealso cref="P:DoubleAgent.Control.Character.OriginalHeight" />
</member>

<member name="P:DoubleAgent.Control.Character.Pitch">
<summary> Returns the character's default speech output (text-to-speech) pitch setting.</summary>
<value name="Pitch">A <typename>numeric</typename> value that specifies the pitch (in hertz) of the character's <em>default</em> text-to-speech engine.</value>
<remarks>
<para>This property is of limited value since it only supplies the <em>default</em> pitch from the character's definition. It's supported for compatibility.
</para>
<para>Although your application cannot write this value, you can include <keyword>Pit</keyword> (pitch) tags in your speech output text that will temporarily change the pitch for a particular utterance. However, using the <keyword>Pit</keyword> tag to change the pitch will not change the <self>Pitch</self> property value. For further information, see <a href="MsAgent.chm::/hh/msagent/spoutput_2v1w.htm">Speech Output Tags</a>.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Character.Smoothed">
<summary> Indicates if image smoothing is being applied to the character's animations.</summary>
<value name="Smoothed">A <typename>boolean</typename> value that indicates if animation frames are smoothed.</value>
<remarks>
<para>Agent character animations are defined with an 8-bit color depth (256 color palette), which can result in low image quality and visible pixilation. Image smoothing reduces pixilation by applying a slight blur to each animation frame.
</para>
<note>This is a read-only property. Its value is initialized from the <see cref="T:DoubleAgent.Control.Control" />.<see cref="P:DoubleAgent.Control.Control.CharacterStyle" /> property.</note>
<note name="AllClients">This property applies to all clients of the character.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.SmoothEdges" />
<seealso cref="P:DoubleAgent.Control.Control.CharacterStyle" />
<seealso cref="P:DoubleAgent.Control.Character.Style" />
<seealso cref="F:DoubleAgent.Control.CharacterStyleFlags.Smoothed" />
</member>

<member name="P:DoubleAgent.Control.Character.SmoothEdges">
<summary> Indicates if image smoothing is being applied to the edges of the character's animations.</summary>
<value name="SmoothEdges">A <typename>boolean</typename> value that indicates if animation frames have smoothed edges.</value>
<remarks>
<para>Agent character animations are defined with an 8-bit color depth (256 color palette), which can result in low image quality and visible pixilation. Edge smoothing reduces pixilation by applying a slight blur to the edges of each animation frame.
</para>
<note>This is a read-only property. Its value is initialized from the <see cref="T:DoubleAgent.Control.Control" />.<see cref="P:DoubleAgent.Control.Control.CharacterStyle" /> property.</note>
<note name="AllClients">This property applies to all clients of the character.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.Smoothed" />
<seealso cref="P:DoubleAgent.Control.Control.CharacterStyle" />
<seealso cref="P:DoubleAgent.Control.Character.Style" />
<seealso cref="F:DoubleAgent.Control.CharacterStyleFlags.SmoothEdges" />
</member>

<member name="P:DoubleAgent.Control.Character.SoundEffectsEnabled">
<summary> Specifies if sound effects are enabled for your character.</summary>
<value name="SoundEffectsEnabled">A <typename>boolean</typename> value specifying whether sound effects are enabled.</value>
<remarks>
<para>This property determines whether the sound effects included as a part of a character's animations will play when an animation plays.
</para>
<note name="ThisClientOnly">This property applies only to your client application's use of the character; the setting does not affect other clients of the character or other characters of your client application.</note>
<note>This settings can be overridden by the user in the <a class="see" href="../html/UI_PropSheet.htm#Output">Advanced Character Options</a> window.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.Style" />
<seealso cref="F:DoubleAgent.Control.CharacterStyleFlags.SoundEffects" />
<seealso cref="P:DoubleAgent.Control.Settings.SoundEffectsEnabled" />
</member>

<member name="P:DoubleAgent.Control.Character.SoundEffectsOn">
<summary> deprecated</summary>
<remarks>
<para>This property has been replaced by the <see cref="P:DoubleAgent.Control.Character.SoundEffectsEnabled" /> property, but is still supported for backward compatibility.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Character.Speed">
<summary> Returns the character's speech output (text-to-speech) speed setting.</summary>
<value name="Speed">A <typename>numeric</typename> value that specifies the speed (in words-per-minute) of the character's <em>default</em> text-to-speech engine.</value>
<remarks>
<para>This property is of limited value since it only supplies the <em>default</em> speed from the character's definition, scaled by the <see cref="P:DoubleAgent.Control.Settings.TTSSpeed" /> property. It's supported for compatibility.
</para>
<para>Although your application cannot write this value, you can include <keyword>Spd</keyword> (speed) tags in your speech output text that will temporarily change the output speed for a particular utterance. However, using the <keyword>Spd</keyword> tag to change the character's spoken output does not affect the <self>Speed</self> property value. For further information, see <a href="MsAgent.chm::/hh/msagent/spoutput_2v1w.htm">Speech Output Tags</a>.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Character.SREngine(System.Object)">
<summary> Returns the character's current or default <see cref="T:DoubleAgent.Control.SREngine" /> Object.</summary>
<param name="GetDefault">An optional <typename>boolean</typename> value that indicates if you want the character's current or default speech recognition engine. The default value is <keyword>False</keyword>.</param>
<value name="SREngine">A <see class="typename" cref="T:DoubleAgent.Control.SREngine" /> Object that corresponds to the character's current or default <see class="typename" cref="P:DoubleAgent.Control.Character.SRModeID" />.</value>
<remarks>
<para>If you change the character's <see cref="P:DoubleAgent.Control.Character.SRModeID" /> you must re-access this property to get the correct current <see cref="T:DoubleAgent.Control.SREngine" /> Object.
</para>
</remarks>
<seealso cref="T:DoubleAgent.Control.SREngine" />
<seealso cref="P:DoubleAgent.Control.Character.SRModeID" />
</member>

<member name="P:DoubleAgent.Control.Character.SRModeID">
<summary> Specifies the speech recognition engine the character uses.</summary>
<value name="SRModeID">A <typename>string</typename> value that identifies a speech recognition engine.</value>
<remarks>
<para>This property determines the speech recognition engine used by the character for speech input. The <self>SRModeID</self> for a speech recognition engine is a formatted string defined by the vendor that uniquely identifies the engine.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.LanguageID" />
<seealso cref="M:DoubleAgent.Control.Character.Listen(System.Boolean)" />
<seealso cref="P:DoubleAgent.Control.Character.SREngine" />
</member>

<member name="P:DoubleAgent.Control.Character.SRStatus">
<summary> deprecated</summary>
<remarks>
<para>This property has been replaced by the <see cref="P:DoubleAgent.Control.Character.ListeningStatus" /> property, but is still supported for backward compatibility.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Character.States">
<summary> Returns the names of the character's <glossary>state</glossary> animations.</summary>
<value name="States">An array of <typename>string</typename> values that name all of the <glossary>state</glossary> animations the character can play.</value>
<remarks>
<para>For <filename>.ACF</filename> characters, the array contains all the states defined for the character, not just the ones that have been retrieved with the <see cref="M:DoubleAgent.Control.Character.Prepare(DoubleAgent.Control.PrepareResourceType,System.String,System.Object)" /> method.
</para>
<para> <em>Most</em> characters include the following states:
</para>
<list type="bullet">
<item>"Gesturing" or "GesturingDown", "GesturingLeft", "GesturingRight" and "GesturingUp"</item>
<item>"Hiding"</item>
<item>"Hearing"</item>
<item>"Idling" or "IdlingLevel1", "IdlingLevel2" and "IdlingLevel3"</item>
<item>"Listening"</item>
<item>"Moving" or "MovingDown", "MovingLeft", "MovingRight" and "MovingUp"</item>
<item>"Showing"</item>
<item>"Speaking"</item>
</list>
</remarks>
<seealso cref="M:DoubleAgent.Control.Character.Play(System.String)" />
<seealso cref="M:DoubleAgent.Control.Character.Prepare(DoubleAgent.Control.PrepareResourceType,System.String,System.Object)" />
</member>

<member name="P:DoubleAgent.Control.Character.Style">
<summary> Specifies a group of settings that affect the character's appearance.</summary>
<value name="Style">A <typename>numeric</typename> bit-field value that has one or more of the following:
<list type="table">
<item name="SoundEffects"><term xml:space="preserve">
&amp;H00000001 = <keyword>SoundEffects</keyword>
</term>
<description>The animation sound effects are played.</description>
</item>
<item name="IdleEnabled"><term xml:space="preserve">
&amp;H00000002 = <keyword>IdleEnabled</keyword>
</term>
<description>The character enters idle mode and shows it's idling animations when it's not doing anything else.</description>
</item>
<item name="AutoPopupMenu"><term xml:space="preserve">
&amp;H00000004 = <keyword>AutoPopupMenu</keyword>
</term>
<description>A right-click on the character or it's <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> automatically shows a <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a>.</description>
</item>
<item name="IconShown"><term xml:space="preserve">
&amp;H00000008 = <keyword>IconShown</keyword>
</term>
<description>The character has a <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> in the taskbar notification area.</description>
</item>
<item name="SmoothEdges"><term xml:space="preserve">
&amp;H00000020 = <keyword>SmoothEdges</keyword>
</term>
<description>Image smoothing (antialiasing) is applied to the edges of the character's animations.</description>
</item>
<item name="Smoothed"><term xml:space="preserve">
&amp;H00000030 = <keyword>Smoothed</keyword>
</term>
<description>Image smoothing (antialiasing) is applied to the character's animations.</description>
</item>
<item name="SuspendPause"><term xml:space="preserve">
&amp;H00000100 = <keyword>SuspendPause</keyword>
</term>
<description>All requests are paused when the client is not in the foreground.</description>
</item>
<item name="SuspendStop"><term xml:space="preserve">
&amp;H00000200 = <keyword>SuspendStop</keyword>
</term>
<description>All requests are stopped when the client is not in the foreground.</description>
</item>
<item name="SuspendHide"><term xml:space="preserve">
&amp;H00000400 = <keyword>SuspendHide</keyword>
</term>
<description>All floating windows are hidden when the client is not in the foreground.</description>
</item>
</list>
</value>
<remarks>
<para>Each style bit corresponds to a specific <see cref="T:DoubleAgent.Control.Character" /> Object property. You can use this property to query or modify all of the style settings at once.
</para>
<para name="LoadStyle">The <see cref="F:DoubleAgent.Control.CharacterStyleFlags.Smoothed" /> and <see cref="F:DoubleAgent.Control.CharacterStyleFlags.SmoothEdges" /> bits are read-only. They can only be set in the <see cref="T:DoubleAgent.Control.Control" />.<see cref="P:DoubleAgent.Control.Control.CharacterStyle" /> property before the <see cref="T:DoubleAgent.Control.Character" /> is loaded.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.AutoPopupMenu" />
<seealso cref="P:DoubleAgent.Control.Character.IconShown" />
<seealso cref="P:DoubleAgent.Control.Character.IdleEnabled" />
<seealso cref="P:DoubleAgent.Control.Character.Smoothed" />
<seealso cref="P:DoubleAgent.Control.Character.SmoothEdges" />
<seealso cref="P:DoubleAgent.Control.Character.SoundEffectsEnabled" />
<seealso cref="P:DoubleAgent.Control.Control.CharacterStyle" />
<seealso cref="T:DoubleAgent.Control.CharacterStyleFlags" />
</member>

<member name="P:DoubleAgent.Control.Character.Top">
<summary> Specifies the top edge of the character's image.</summary>
<value name="Top">A <typename>numeric</typename> value that specifies the top left edge of the character's image.</value>
<remarks>
<para>The <self>Top</self> property is always expressed in pixels, relative to screen origin (upper left).
</para>
<para>Even though the character appears in an irregularly shaped region window, the location of the character is based on the external dimensions of the rectangular animation frame used when the character was compiled with the Microsoft Agent Character Editor.
</para>
<note name="AllClients">This property applies to all clients of the character.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.Left" />
<seealso cref="M:DoubleAgent.Control.Character.MoveTo(System.Int16,System.Int16,System.Object)" />
</member>

<member name="P:DoubleAgent.Control.Character.TTSEngine(System.Object)">
<summary> Returns the character's current or default <see cref="T:DoubleAgent.Control.TTSEngine" /> Object.</summary>
<param name="GetDefault">An optional <typename>boolean</typename> value that indicates if you want the character's current or default text-to-speech engine. The default value is <keyword>False</keyword>.</param>
<value name="TTSEngine">A <see class="typename" cref="T:DoubleAgent.Control.TTSEngine" /> Object that corresponds to the character's current or default <see class="typename" cref="P:DoubleAgent.Control.Character.TTSModeID" />.</value>
<remarks>
<para>If you change the character's <see cref="P:DoubleAgent.Control.Character.TTSModeID" /> you must re-access this property to get the correct current <see cref="T:DoubleAgent.Control.TTSEngine" /> Object.
</para>
</remarks>
<seealso cref="T:DoubleAgent.Control.TTSEngine" />
<seealso cref="P:DoubleAgent.Control.Character.TTSModeID" />
</member>

<member name="P:DoubleAgent.Control.Character.TTSModeID">
<summary> Specifies the text-to-speech engine used for the character.</summary>
<value name="TTSModeID">A <typename>string</typename> value that uniquely identifies a text-to-speech engine and synthesis mode.</value>
<remarks>
<para>This property determines the TTS (text-to-speech) engine for a character's spoken output. The<self>TTSModeID</self> for a TTS engine is a formatted string defined by the vendor that uniquely identifies the engine and it's synthesis mode.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.LanguageID" />
<seealso cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" />
<seealso cref="P:DoubleAgent.Control.Character.TTSEngine" />
</member>

<member name="P:DoubleAgent.Control.Character.UniqueID">
<summary> Returns the unique identifier given to the character when it was defined.</summary>
<value name="UniqueID">A <typename>string</typename> value containing the the character's unique (GUID) identifier.</value>
<remarks>
<para>This property returns a string representing the internal identifier that Double Agent uses to uniquely identify the character. A character identifier is set when it is compiled with the Microsoft Agent Character Editor.
</para>
<note>This is the value that Double Agent uses to determine if a character has already been loaded. The character's file name or location <strong>does not</strong> uniquely identify the character.</note>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Character.Version">
<summary> Returns the character's version.</summary>
<value name="Version">A <typename>string</typename> that identifies the Microsoft Agent version for which the character was built.</value>
<remarks>
<para>The <self>Version</self> property returns a string that corresponds to the version of the standard animation set definition for which the character was compiled. The character's version number is automatically set when you build it with the Microsoft Agent Character Editor.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Character.VisibilityCause">
<summary> Returns a <see cref="T:DoubleAgent.Control.VisibilityCauseType" /> Enumeration value that specifies what caused the character's visible state to change.</summary>
<value name="VisibilityCause">A <see class="typename" cref="T:DoubleAgent.Control.VisibilityCauseType" /> Enumeration value: 
<list type="table">
<item name="NeverShown"><term xml:space="preserve">
0 = <keyword>NeverShown</keyword>
</term>
<description>The character has not been shown.</description>
</item>
<item name="UserHid"><term xml:space="preserve">
1 = <keyword>UserHid</keyword>
</term>
<description>The user hid the character using the command on the character's <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> or using speech input.</description>
</item>
<item name="UserShowed"><term xml:space="preserve">
2 = <keyword>UserShowed</keyword>
</term>
<description>The user showed the character using the command on the character's <a class="see" href="../html/UI_Intro.htm#Icon">notification icon</a> or using speech input.</description>
</item>
<item name="ProgramHid"><term xml:space="preserve">
3 = <keyword>ProgramHid</keyword>
</term>
<description>Your application hid the character.</description>
</item>
<item name="ProgramShowed"><term xml:space="preserve">
4 = <keyword>ProgramShowed</keyword>
</term>
<description>Your application showed the character.</description>
</item>
<item name="OtherProgramHid"><term xml:space="preserve">
5 = <keyword>OtherProgramHid</keyword>
</term>
<description>Another client application hid the character.</description>
</item>
<item name="OtherProgramShowed"><term xml:space="preserve">
6 = <keyword>OtherProgramShowed</keyword>
</term>
<description>Another client application showed the character.</description>
</item>
</list>
</value>
<remarks>
<para>You can use this property to determine what caused the character to change visibility when more than one application is sharing (has loaded) the same character. These values are the same as those received by the <see cref="E:DoubleAgent.Control.Control.Show" /> and <see cref="E:DoubleAgent.Control.Control.Hide" /> events.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.Visible" />
<seealso cref="E:DoubleAgent.Control.Control.Show" />
<seealso cref="E:DoubleAgent.Control.Control.Hide" />
<seealso cref="M:DoubleAgent.Control.Character.Show(System.Object)" />
<seealso cref="M:DoubleAgent.Control.Character.Hide(System.Object)" />
<seealso cref="T:DoubleAgent.Control.VisibilityCauseType" />
</member>

<member name="P:DoubleAgent.Control.Character.Visible">
<summary> Returns a boolean indicating whether or not the character is visible.</summary>
<value name="Visible"> <keyword>True</keyword> if the character is displayed, <keyword>False</keyword> if it's hidden</value>
<remarks>
<para>This property indicates whether the character's animations are being displayed. It does not necessarily mean that there is an image on the screen. For example, this property returns <keyword>True</keyword> even when the character is positioned off the visible display area or when the current character animation contains no images.
</para>
<para>This property is read-only. To change a character's visibility, use the <see cref="M:DoubleAgent.Control.Character.Show(System.Object)" /> or <see cref="M:DoubleAgent.Control.Character.Hide(System.Object)" /> method.
</para>
<note name="AllClients">This property applies to all clients of the character.</note>
</remarks>
<seealso cref="M:DoubleAgent.Control.Character.Show(System.Object)" />
<seealso cref="M:DoubleAgent.Control.Character.Hide(System.Object)" />
<seealso cref="P:DoubleAgent.Control.Character.VisibilityCause" />
</member>

<member name="P:DoubleAgent.Control.Character.Width">
<summary> Specifies the width of the character's image.</summary>
<value name="Width">A <typename>numeric</typename> value that specifies the width of the character's image.</value>
<remarks>
<para>The <self>Width</self> property is always expressed in pixels.
</para>
<para>Even though the character appears in an irregularly shaped region window, the dimensions of the character are based on the external dimensions of the rectangular animation frame used when the character was compiled with the Microsoft Agent Character Editor.
</para>
<note name="AllClients">This property applies to all clients of the character.</note>
</remarks>
</member>

<member name="M:DoubleAgent.Control.Character.NewFormattedText">
<summary> Returns an initialized, empty <see cref="T:DoubleAgent.Control.FormattedText" /> Object.</summary>
<returns name="FormattedText">A <see class="typename" cref="T:DoubleAgent.Control.FormattedText" /> Object.</returns>
<remarks>
<para>The returned <see cref="T:DoubleAgent.Control.FormattedText" /> Object is initialized to handle speech tags consistent with the <see cref="T:DoubleAgent.Control.Character" /> current Text-to-Speech engine.
</para>
<para>Once you have completed the <see cref="T:DoubleAgent.Control.FormattedText" /> Object, you can pass it to either the <see cref="M:DoubleAgent.Control.Character.SpeakFormatted(DoubleAgent.Control.FormattedText)" /> or <see cref="M:DoubleAgent.Control.Character.ThinkFormatted(DoubleAgent.Control.FormattedText)" /> method. If you plan to use the same text more than once, keep a reference to the <see cref="T:DoubleAgent.Control.FormattedText" /> Object and reuse it. This can improve the performance of your application.
</para>
</remarks>
<seealso cref="T:DoubleAgent.Control.FormattedText" />
<seealso cref="M:DoubleAgent.Control.Character.SpeakFormatted(DoubleAgent.Control.FormattedText)" />
<seealso cref="M:DoubleAgent.Control.Character.ThinkFormatted(DoubleAgent.Control.FormattedText)" />
<seealso cref="P:DoubleAgent.Control.Character.TTSModeID" />
<seealso cref="P:DoubleAgent.Control.Character.TTSEngine" />
</member>

<member name="M:DoubleAgent.Control.Character.SpeakFormatted(DoubleAgent.Control.FormattedText)">
<summary> Speaks the specified text.</summary>
<param name="FormattedText">A <see class="typename" cref="T:DoubleAgent.Control.FormattedText" /> Object object containing the text to be spoken.</param>
<returns name="Request">A <see class="typename" cref="T:DoubleAgent.Control.Request" /> Object your application can use to track the method's status.</returns>
<remarks>
<para>This method is the same as the <see cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" /> method, except that the input text is already parsed and formatted, and using this method triggers the <see cref="E:DoubleAgent.Control.Control.SpeechStart" />, <see cref="E:DoubleAgent.Control.Control.SpeechEnd" />, and <see cref="E:DoubleAgent.Control.Control.SpeechWord" /> events.
</para>
<para>Calling the <see cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" /> method with a specific text string is equivalent to: 
<list type="number">
<item>calling <see cref="M:DoubleAgent.Control.Character.NewFormattedText" /> to get a <see cref="T:DoubleAgent.Control.FormattedText" /> object;</item>
<item>calling the <see cref="T:DoubleAgent.Control.FormattedText" /> object's <see cref="M:DoubleAgent.Control.FormattedText.Parse(System.String)" /> method with the same text string;</item>
<item>calling <self>SpeakFormatted</self> with the <see cref="T:DoubleAgent.Control.FormattedText" /> object.</item>
</list>

</para>
</remarks>
<seealso cref="T:DoubleAgent.Control.FormattedText" />
<seealso cref="E:DoubleAgent.Control.Control.SpeechStart" />
<seealso cref="E:DoubleAgent.Control.Control.SpeechEnd" />
<seealso cref="E:DoubleAgent.Control.Control.SpeechWord" />
<seealso cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" />
<seealso cref="M:DoubleAgent.Control.Character.ThinkFormatted(DoubleAgent.Control.FormattedText)" />
<seealso cref="M:DoubleAgent.Control.Character.NewFormattedText" />
</member>

<member name="M:DoubleAgent.Control.Character.ThinkFormatted(DoubleAgent.Control.FormattedText)">
<summary> Displays the specified text in the character's <glossary>thought</glossary> <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>.</summary>
<param name="FormattedText">A <see class="typename" cref="T:DoubleAgent.Control.FormattedText" /> Object object containing the text to be displayed.</param>
<returns name="Request">A <see class="typename" cref="T:DoubleAgent.Control.Request" /> Object your application can use to track the method's status.</returns>
<remarks>
<para>Calling the <see cref="M:DoubleAgent.Control.Character.Think(System.String)" /> method with a specific text string is equivalent to: 
<list type="number">
<item>calling <see cref="M:DoubleAgent.Control.Character.NewFormattedText" /> to get a <see cref="T:DoubleAgent.Control.FormattedText" /> object;</item>
<item>calling the <see cref="T:DoubleAgent.Control.FormattedText" />  object's <see cref="M:DoubleAgent.Control.FormattedText.Parse(System.String)" /> method with the same text string;</item>
<item>calling <self>ThinkFormatted</self> with the <see cref="T:DoubleAgent.Control.FormattedText" /> object.</item>
</list>

</para>
<note>This methods <em>does not</em> trigger the <keyword>SpeechStart</keyword>, <keyword>SpeechEnd</keyword>, and <keyword>SpeechWord</keyword> events.</note>
</remarks>
<seealso cref="T:DoubleAgent.Control.FormattedText" />
<seealso cref="M:DoubleAgent.Control.Character.Think(System.String)" />
<seealso cref="M:DoubleAgent.Control.Character.SpeakFormatted(DoubleAgent.Control.FormattedText)" />
<seealso cref="M:DoubleAgent.Control.Character.NewFormattedText" />
</member>

<member name="P:DoubleAgent.Control.Character.SuspendPause">
<summary> Specifies if all requests are paused when the client is not in the foreground.</summary>
<value name="SuspendPause">A <typename>boolean</typename> value specifying if all requests are paused when the client is not in the foreground.</value>
<remarks>
<para>When <self>SuspendPause</self> is <keyword>True</keyword> and the user switches away from your application: 
<list type="bullet" class="close">
<item>the character's request queue is paused;</item>
<item>the current animation (if any) is paused;</item>
<item>the current speech output (if any) is paused;</item>
<item>the current <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> output (if any) is paused;</item>
<item> <glossary>Listening mode</glossary> is paused (if it's active).</item>
</list>
<list type="bullet" class="close">
<item>Immediate prepares are <em>not</em> paused.</item>
</list>
 When the user switches back to your application, everything that was paused is resumed.
</para>
<note>The <self>SuspendPause</self> and <see cref="P:DoubleAgent.Control.Character.SuspendStop" /> properties cannot both be <keyword>True</keyword>.</note>
<note name="StandAloneOnly">This property only applies to <a class="see" href="..\Programming\Ctl_Programming_Modes.htm">stand-alone</a> mode.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.SuspendStop" />
<seealso cref="P:DoubleAgent.Control.Character.SuspendHide" />
<seealso cref="P:DoubleAgent.Control.Character.Style" />
<seealso cref="F:DoubleAgent.Control.CharacterStyleFlags.SuspendPause" />
<seealso cref="P:DoubleAgent.Control.Character.ActiveState" />
</member>

<member name="P:DoubleAgent.Control.Character.SuspendStop">
<summary> Specifies if all requests are stopped when the client is not in the foreground.</summary>
<value name="SuspendStop">A <typename>boolean</typename> value specifying if all requests are stopped when the client is not in the foreground.</value>
<remarks>
<para>When <self>SuspendStop</self> is <keyword>True</keyword> and the user switches away from your application: 
<list type="bullet" class="close">
<item>the character's request queue is stopped, except for queued prepares;</item>
<item>the current animation (if any) is stopped;</item>
<item>the current speech output (if any) is stopped;</item>
<item>the current <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> output (if any) is stopped;</item>
<item> <glossary>Listening mode</glossary> is stopped (if it's active).</item>
</list>
<list type="bullet" class="close">
<item>Queued and immediate prepares are <em>not</em> stopped.</item>
</list>

</para>
<note>The <self>SuspendStop</self> and <see cref="P:DoubleAgent.Control.Character.SuspendPause" /> properties cannot both be <keyword>True</keyword>.</note>
<note name="StandAloneOnly">This property only applies to <a class="see" href="..\Programming\Ctl_Programming_Modes.htm">stand-alone</a> mode.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.SuspendPause" />
<seealso cref="P:DoubleAgent.Control.Character.SuspendHide" />
<seealso cref="P:DoubleAgent.Control.Character.Style" />
<seealso cref="F:DoubleAgent.Control.CharacterStyleFlags.SuspendStop" />
<seealso cref="P:DoubleAgent.Control.Character.ActiveState" />
</member>

<member name="P:DoubleAgent.Control.Character.SuspendHide">
<summary> Specifies if all floating windows are hidden when the client is not in the foreground.</summary>
<value name="SuspendHide">A <typename>boolean</typename> value specifying if all floating windows are hidden when the client is not in the foreground.</value>
<remarks>
<para>When <self>SuspendHide</self> is <keyword>True</keyword> and the user switches away from your application: 
<list type="bullet" class="close">
<item>the character window is hidden, if it's visible and not <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#contained">contained</a>;</item>
<item>the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> is hidden, if it's visible;</item>
<item>the <a class="see" href="../html/UI_Intro.htm#ListeningTip">Listening tip</a> is hidden, if it's visible;</item>
<item>the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window is hidden, if it's visible.</item>
</list>
 When the user switches back to your application, everything that was hidden is shown again.
</para>
<note>For <self>SuspendHide</self> to be <keyword>True</keyword>, either the <see cref="P:DoubleAgent.Control.Character.SuspendPause" /> or <see cref="P:DoubleAgent.Control.Character.SuspendStop" /> property must also be <keyword>True</keyword>.</note>
<note name="StandAloneOnly">This property only applies to <a class="see" href="..\Programming\Ctl_Programming_Modes.htm">stand-alone</a> mode.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.SuspendPause" />
<seealso cref="P:DoubleAgent.Control.Character.SuspendStop" />
<seealso cref="P:DoubleAgent.Control.Character.Style" />
<seealso cref="F:DoubleAgent.Control.CharacterStyleFlags.SuspendHide" />
<seealso cref="P:DoubleAgent.Control.Character.ActiveState" />
</member>

<member name="T:DoubleAgent.Control.Character">
<summary>
<para>The <self>Character Object</self> provides the methods and properties your application will use to access the bulk of Double Agent's features.
</para>
</summary>
<remarks>
<para>Because the server loads an <glossary>HTTP</glossary> character asynchronously, ensure that the character has been loaded before querying its properties, for example, using the <see cref="E:DoubleAgent.Control.Control.RequestComplete" /> event. Otherwise, the properties may return incorrect values.
</para>
</remarks>
</member>

<member name="M:DoubleAgent.Control.Commands.Add(System.String,System.Object,System.Object,System.Object,System.Object)">
<summary> Adds a <see cref="T:DoubleAgent.Control.Command" /> Object to the <see cref="T:DoubleAgent.Control.Commands" /> Collection.</summary>
<param name="Name">A <typename>string</typename> value that uniquely identifies the command.</param>
<param name="Caption">A <typename>string</typename> value specifying the name that will appear in the character's <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a> and in the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window when the client application is <glossary>input-active</glossary>. For more information, see the <see cref="T:DoubleAgent.Control.Command" /> Object's <see cref="P:DoubleAgent.Control.Command.Caption" /> property.</param>
<param name="VoiceGrammar">A <typename>string</typename> value specifying the words or phrase used by the speech engine for recognizing this command. For more information on formatting alternatives for the string, see the <see cref="T:DoubleAgent.Control.Command" /> Object's <see cref="P:DoubleAgent.Control.Command.VoiceGrammar" /> property.</param>
<param name="Enabled">A <typename>boolean</typename> value indicating whether the command is enabled. The default value is <keyword>True</keyword>. For more information, see the <see cref="T:DoubleAgent.Control.Command" /> Object's <see cref="P:DoubleAgent.Control.Command.Enabled" /> property.</param>
<param name="Visible">A <typename>boolean</typename> value indicating whether the command is visible in the character's <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a> when the client application is <glossary>input-active</glossary>. The default value is <keyword>True</keyword>. For more information, see the <see cref="T:DoubleAgent.Control.Command" /> Object's <see cref="P:DoubleAgent.Control.Command.Visible" /> property.</param>
<returns name="Command">The <see class="typename" cref="T:DoubleAgent.Control.Command" /> Object added, if successful.</returns>
<remarks>
<para>The value of a <see cref="T:DoubleAgent.Control.Command" /> Object's <see cref="P:DoubleAgent.Control.Command.Name" /> property must be unique within its <see cref="T:DoubleAgent.Control.Commands" /> Collection. You must remove a <see cref="T:DoubleAgent.Control.Command" /> before you can create a new <see cref="T:DoubleAgent.Control.Command" /> with the same <see cref="P:DoubleAgent.Control.Command.Name" /> property. Attempting to create a <see cref="T:DoubleAgent.Control.Command" /> with a <see cref="P:DoubleAgent.Control.Command.Name" /> property that already exists raises an error.
</para>
<para>This method returns a <see cref="T:DoubleAgent.Control.Command" /> Object. This allows you to declare an object and assign a <see cref="T:DoubleAgent.Control.Command" /> to it when you call the <self>Add</self> method.
</para>
<example><code xml:space="preserve"><keyword>Dim</keyword> Command1 <keyword>as</keyword> <keyword>DaControl</keyword>.<keyword>DaCtlCommand</keyword>
<keyword>Set</keyword> Command1 = Genie.<keyword>Commands</keyword>.<keyword>Add</keyword> ("my first command", "Test", "Test", True, True)
Command1.<keyword>VoiceCaption</keyword> = "this is a test"</code></example></remarks>
<seealso cref="M:DoubleAgent.Control.Commands.Insert(System.String,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)" />
<seealso cref="M:DoubleAgent.Control.Commands.Remove(System.String)" />
<seealso cref="M:DoubleAgent.Control.Commands.RemoveAll" />
</member>

<member name="M:DoubleAgent.Control.Commands.Command(System.String)">
<summary> Returns a <see cref="T:DoubleAgent.Control.Command" /> Object in a <see cref="T:DoubleAgent.Control.Commands" /> Collection.</summary>
<param name="Name">A <typename>string</typename> value that specifies the name of the <see cref="T:DoubleAgent.Control.Command" /> Object to retrieve.</param>
<returns name="Command">The <see class="typename" cref="T:DoubleAgent.Control.Command" /> Object with the specified <paramref name="Name" />, if successful.</returns>
<remarks>
<para>You can use this method to access a <see cref="T:DoubleAgent.Control.Command" /> Object's properties.
</para>
<note>This method may be required for some programming languages. It is not required for VBScript or Visual Basic. For further information on using <see cref="T:DoubleAgent.Control.Command" /> methods, see <see cref="T:DoubleAgent.Control.Command" bookmark="Properties" />.</note>
</remarks>
</member>

<member name="M:DoubleAgent.Control.Commands.Insert(System.String,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
<summary> Inserts a <see cref="T:DoubleAgent.Control.Command" /> Object in the <see cref="T:DoubleAgent.Control.Commands" /> Collection.</summary>
<param name="Name">A <typename>string</typename> value that uniquely identifies the command.</param>
<param name="RefName">A <typename>string</typename> value that specifies the name of the command just above or below where you want to insert the new command.</param>
<param name="Before">A <typename>boolean</typename> value indicating whether to insert the new command <strong>before</strong> the command specified by <paramref name="RefName" />.</param>
<param name="Caption">A <typename>string</typename> value specifying the name that will appear in the character's <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a> and in the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window when the client application is <glossary>input-active</glossary>. For more information, see the <see cref="T:DoubleAgent.Control.Command" /> Object's <see cref="P:DoubleAgent.Control.Command.Caption" /> property.</param>
<param name="VoiceGrammar">A <typename>string</typename> value specifying the words or phrase used by the speech engine for recognizing this command. For more information on formatting alternatives for the string, see the <see cref="T:DoubleAgent.Control.Command" /> Object's <see cref="P:DoubleAgent.Control.Command.VoiceGrammar" /> property.</param>
<param name="Enabled">A <typename>boolean</typename> value indicating whether the command is enabled. The default value is <keyword>True</keyword>. For more information, see the <see cref="T:DoubleAgent.Control.Command" /> Object's <see cref="P:DoubleAgent.Control.Command.Enabled" /> property.</param>
<param name="Visible">A <typename>boolean</typename> value indicating whether the command is visible in the character's <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a> when the client application is <glossary>input-active</glossary>. The default value is <keyword>True</keyword>. For more information, see the <see cref="T:DoubleAgent.Control.Command" /> Object's <see cref="P:DoubleAgent.Control.Command.Visible" /> property.</param>
<returns name="Command">The <see class="typename" cref="T:DoubleAgent.Control.Command" /> Object inserted, if successful.</returns>
<remarks>
<para>The value of a <see cref="T:DoubleAgent.Control.Command" /> Object's <see cref="P:DoubleAgent.Control.Command.Name" /> property must be unique within its <see cref="T:DoubleAgent.Control.Commands" /> Collection. You must remove a <see cref="T:DoubleAgent.Control.Command" /> before you can create a new <see cref="T:DoubleAgent.Control.Command" /> with the same <see cref="P:DoubleAgent.Control.Command.Name" /> property setting. Attempting to create a <see cref="T:DoubleAgent.Control.Command" /> with a <see cref="P:DoubleAgent.Control.Command.Name" /> property that already exists raises an error.
</para>
<para>This method returns a <see cref="T:DoubleAgent.Control.Command" /> Object. This allows you to declare an object and assign a <see cref="T:DoubleAgent.Control.Command" /> to it when you call the <self>Insert</self> method.
</para>
<example><code xml:space="preserve"><keyword>Dim</keyword> Command2 <keyword>as</keyword> <keyword>DaControl</keyword>.<keyword>DaCtlCommand</keyword>
<keyword>Set</keyword> Command2 = Genie.<keyword>Commands</keyword>.<keyword>Insert</keyword> ("my second command", "my first command", True, "Test", "Test", True, True)
Command2.<keyword>VoiceCaption</keyword> = "this is a test"</code></example></remarks>
<seealso cref="M:DoubleAgent.Control.Commands.Add(System.String,System.Object,System.Object,System.Object,System.Object)" />
<seealso cref="M:DoubleAgent.Control.Commands.Remove(System.String)" />
<seealso cref="M:DoubleAgent.Control.Commands.RemoveAll" />
</member>

<member name="M:DoubleAgent.Control.Commands.Remove(System.String)">
<summary> Removes a <see cref="T:DoubleAgent.Control.Command" /> Object from the <see cref="T:DoubleAgent.Control.Commands" /> Collection.</summary>
<param name="Name">The name of the <see cref="T:DoubleAgent.Control.Command" /> Object to remove.</param>
<remarks>
<para>When a <see cref="T:DoubleAgent.Control.Command" /> Object is removed from the collection, it no longer appears when the character's <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a> is displayed, nor in the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window when your client application is <glossary>input-active</glossary>.
</para>
</remarks>
<seealso cref="M:DoubleAgent.Control.Commands.RemoveAll" />
</member>

<member name="M:DoubleAgent.Control.Commands.RemoveAll">
<summary> Removes all <see cref="T:DoubleAgent.Control.Command" /> Objects from the <see cref="T:DoubleAgent.Control.Commands" /> Collection.</summary>
<remarks>
<para>An empty <see cref="T:DoubleAgent.Control.Commands" /> Collection no longer appears when the character's <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a> is displayed, nor in the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window when your client application is <glossary>input-active</glossary>.
</para>
</remarks>
<seealso cref="M:DoubleAgent.Control.Commands.Remove(System.String)" />
</member>

<member name="P:DoubleAgent.Control.Commands.Caption">
<summary> Specifies the text displayed for the <see cref="T:DoubleAgent.Control.Commands" /> Collection in the character's <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a>.</summary>
<value name="Caption">A <typename>string</typename> value that specifies the text displayed in the menu.</value>
<remarks>
<para>Setting the <self>Caption</self> property for your <see cref="T:DoubleAgent.Control.Commands" /> Collection defines how it will appear on the character's <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a> when its <see cref="P:DoubleAgent.Control.Commands.Visible" /> property is set to <keyword>True</keyword> and your application is <em>not</em> the <glossary>input-active</glossary> client. To specify an access key (underlined mnemonic) for your <self>Caption</self>, include an ampersand (&amp;) before the mnemonic character.
</para>
<para>If you define <see cref="T:DoubleAgent.Control.Command" /> Objects for a <see cref="T:DoubleAgent.Control.Commands" /> Collection, you typically also define a <self>Caption</self> for the <see cref="T:DoubleAgent.Control.Commands" /> Collection.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Commands.Count">
<summary> Returns the count of <see cref="T:DoubleAgent.Control.Command" /> Objects in the <see cref="T:DoubleAgent.Control.Commands" /> Collection.</summary>
<value name="Count">A <typename>numeric</typename> value that indicates the number of <see cref="T:DoubleAgent.Control.Command" /> Objects in the collection.</value>
<remarks>
<para> <self>Count</self> includes only the number of <see cref="T:DoubleAgent.Control.Command" /> Objects you define in <em>your</em> <see cref="T:DoubleAgent.Control.Commands" /> Collection. Pre-defined entries or entries defined by other clients are not included.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Commands.DefaultCommand">
<summary> Specifies the default command of the <see cref="T:DoubleAgent.Control.Commands" /> Collection.</summary>
<value name="DefaultCommand">The <see cref="P:DoubleAgent.Control.Command.Name" /> of the <see cref="T:DoubleAgent.Control.Command" /> that's shown bold in the <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a> (or an empty string if none).</value>
<remarks>
<para>This property allows you to set a <see cref="T:DoubleAgent.Control.Command" /> in your <see cref="T:DoubleAgent.Control.Commands" /> Collection as the default command, rendering it bold. This does not actually change command handling or double-click events.
</para>
<note name="ThisClientOnly">This property applies only to your client application's use of the character; the setting does not affect other clients of the character or other characters of your client application.</note>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Commands.FontName">
<summary> Specifies the font used in the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window.</summary>
<value name="FontName">A <typename>string</typename> value specifying the font name.</value>
<remarks>
<para>The <self>FontName</self> property defines the font used to display text in the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window. The default value for the font setting is based on the <em>menu font</em> for the character's <see cref="P:DoubleAgent.Control.Character.LanguageID" /> or, if that's not set, the user default language.
</para>
<note name="ThisClientOnly">This property applies only to your client application's use of the character; the setting does not affect other clients of the character or other characters of your client application.</note>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Commands.FontSize">
<summary> Specifies the font size used in the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window.</summary>
<value name="FontName">A <typename>numeric</typename> value specifying the font size (in points).</value>
<remarks>
<para>The <self>FontSize</self> property defines the point size of the font used to display text in the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window. The default value for the font setting is based on the <em>menu font</em> for the character's <see cref="P:DoubleAgent.Control.Character.LanguageID" /> or, if that's not set, the user default language.
</para>
<note name="ThisClientOnly">This property applies only to your client application's use of the character; the setting does not affect other clients of the character or other characters of your client application.</note>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Commands.GlobalVoiceCommandsEnabled">
<summary> Specifies if pre-defined commands appear in the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window.</summary>
<value name="Enabled">A <typename>boolean</typename> value that indicates if global voice commands are enabled.</value>
<remarks>
<para>Double Agent automatically adds voice commands (grammar) for opening and closing the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window and for showing and hiding the character. If you set <self>GlobalVoiceCommandsEnabled</self> to <keyword>False</keyword>, Agent disables any voice parameters for these voice commands as well as the voice commands for the <see cref="P:DoubleAgent.Control.Commands.Caption" /> of other clients' <see cref="T:DoubleAgent.Control.Commands" /> Collection. This allows you to eliminate these from your client's current active grammar. However, because this potentially blocks voice access to other clients, reset this property to <keyword>True</keyword> after processing the user's voice input.
</para>
<para>Disabling the property does not affect the character's <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a>. The global commands added by Double Agent will still appear; you cannot remove them from the <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a>.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Commands.HelpContextID">
<summary>Not Implemented</summary>
</member>

<member name="P:DoubleAgent.Control.Commands.Index(System.Int32)">
<summary> Returns a <see cref="T:DoubleAgent.Control.Command" /> Object in the collection.</summary>
<param name="Index">A <typename>numeric</typename> value that specifies the zero-based index of the item to retrieve.</param>
<returns name="Command">The <see class="typename" cref="T:DoubleAgent.Control.Command" /> Object at the specified <paramref name="Index" />.</returns>
<remarks>
<para>When you want to use the <see cref="T:DoubleAgent.Control.Commands" /> Collection as an <em>ordered</em> collection, you can use the <self>Index</self> property instead of the <see cref="P:DoubleAgent.Control.Commands.Item" /> property.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Commands.Count" />
<seealso cref="P:DoubleAgent.Control.Commands.Item" />
</member>

<member name="P:DoubleAgent.Control.Commands.Item(System.String)">
<summary> Returns a <see cref="T:DoubleAgent.Control.Command" /> Object in the collection.</summary>
<param name="Name">A <typename>string</typename> value that specifies the <see cref="P:DoubleAgent.Control.Command.Name" /> given to the command when it was defined.</param>
<returns name="Command">The <see class="typename" cref="T:DoubleAgent.Control.Command" /> Object with the specified <paramref name="Name" />.</returns>
<seealso cref="P:DoubleAgent.Control.Command.Name" />
<seealso cref="P:DoubleAgent.Control.Commands.Index" />
</member>

<member name="P:DoubleAgent.Control.Commands.Visible">
<summary> Specifies if the <see cref="T:DoubleAgent.Control.Commands" /> Collection appears in the character's <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a>.</summary>
<value name="Visible">A <typename>boolean</typename> value that indiciates if the <see cref="T:DoubleAgent.Control.Commands" /> <see cref="P:DoubleAgent.Control.Commands.Caption" /> is visible.</value>
<remarks>
<para>For the caption to appear in the character's <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a> when your application is not the <glossary>input-active</glossary> client, this property must be set to <keyword>True</keyword> and the <see cref="P:DoubleAgent.Control.Commands.Caption" /> property set for your <see cref="T:DoubleAgent.Control.Commands" /> Collection. In addition, this property must be set to <keyword>True</keyword> for commands in your collection to appear in the <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a> when your application is <glossary>input-active</glossary>.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Commands.Voice">
<summary> deprecated</summary>
<remarks>
<para>This property has been replaced by the <see cref="P:DoubleAgent.Control.Commands.VoiceGrammar" /> property, but is still supported for backward compatibility.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Commands.VoiceCaption">
<summary> Specifies the text displayed for the <see cref="T:DoubleAgent.Control.Commands" /> Collection in the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window.</summary>
<value name="VoiceCaption">A <typename>string</typename> value that specifies the caption text.</value>
<remarks>
<para>The <self>VoiceCaption</self> text appears in the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window when your client application is <glossary>input-active</glossary> and the character is visible. If this property is not set, the <see cref="P:DoubleAgent.Control.Commands.Caption" /> property is used instead. When neither the <self>VoiceCaption</self> nor <see cref="P:DoubleAgent.Control.Commands.Caption" /> property is set, then commands in the collection appear in the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window under an <em>(undefined command)</em> title when your client application becomes <glossary>input-active</glossary>.
</para>
<para>The <self>VoiceCaption</self> setting also determines the text displayed in the <a class="see" href="../html/UI_Intro.htm#ListeningTip">Listening tip</a> to indicate the commands for which the character listens.
</para>
<para>If you set the <see cref="P:DoubleAgent.Control.Commands.VoiceGrammar" /> property of your <see cref="T:DoubleAgent.Control.Commands" /> Collection, you will typically also set its <self>VoiceCaption</self> property.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Commands.Caption" />
</member>

<member name="P:DoubleAgent.Control.Commands.VoiceGrammar">
<summary> Specifies the text that is passed to the speech engine for recognition.</summary>
<value name="VoiceGrammar">A <typename>string</typename> value that specifies the recognition text.</value>
<remarks>
<para>If you do not supply this parameter, the <see cref="P:DoubleAgent.Control.Commands.VoiceCaption" /> for your <see cref="T:DoubleAgent.Control.Commands" /> Collection will not appear in the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window.
</para>
</remarks>
</member>

<member name="T:DoubleAgent.Control.Commands" kind="Collection">
<summary>
<para>The <self>Commands Collection</self> defines the <see cref="T:DoubleAgent.Control.Command" /> that the user can apply to a <see cref="T:DoubleAgent.Control.Character" />.
</para>
</summary>
<remarks>
<para>The <self>Commands Collection</self> can appear in both the <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a> and the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window for a character. To include commands in the <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a>, set its <see cref="P:DoubleAgent.Control.Commands.Caption" /> property. To include commands in the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window, set its <see cref="P:DoubleAgent.Control.Commands.VoiceCaption" /> property (for backward compatibility, if there is no <see cref="P:DoubleAgent.Control.Commands.VoiceCaption" />, the <see cref="P:DoubleAgent.Control.Commands.Caption" /> setting is used).
</para>
<para>This object can be accessed using the <see class="" cref="T:DoubleAgent.Control.Character" /> <see class="" cref="P:DoubleAgent.Control.Character.Commands" /> property.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Command.Caption">
<summary> Specifies the text displayed for a <see cref="T:DoubleAgent.Control.Command" /> in the character's <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a>.</summary>
<value name="Caption">A <typename>string</typename> value that specifies the text displayed in the menu.</value>
<remarks>
<para>To specify an access key (underlined mnemonic) for your <self>Caption</self>, include an ampersand (&amp;) before the mnemonic character.
</para>
<para>If you don't define a <see cref="P:DoubleAgent.Control.Command.VoiceCaption" /> for your command, the <self>Caption</self> property will be used.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Command.Confidence">
<summary> deprecated</summary>
<remarks>
<para>This property has been replaced by the <see cref="P:DoubleAgent.Control.Command.ConfidenceThreshold" /> property, but is still supported for backward compatibility.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Command.ConfidenceText">
<summary> Specifies the text that appears in the <a class="see" href="../html/UI_Intro.htm#ListeningTip">Listening tip</a>.</summary>
<value name="ConfidenceText">A <typename>string</typename> value that specifies the text displayed in the <a class="see" href="../html/UI_Intro.htm#ListeningTip">Listening tip</a>.</value>
<remarks>
<para>When the <see cref="P:DoubleAgent.Control.UserInput.Confidence" /> value of the best match <em>does not exceed</em> the command's <see cref="P:DoubleAgent.Control.Command.ConfidenceThreshold" /> property, Double Agent displays the text specified in <self>ConfidenceText</self> in the <a class="see" href="../html/UI_Intro.htm#ListeningTip">Listening tip</a>.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Command.ConfidenceThreshold" />
</member>

<member name="P:DoubleAgent.Control.Command.ConfidenceThreshold">
<summary> Specifies if the command's <see cref="P:DoubleAgent.Control.Command.ConfidenceText" /> appears in the <a class="see" href="../html/UI_Intro.htm#ListeningTip">Listening tip</a>.</summary>
<value name="ConfidenceThreshold">A <typename>numeric</typename> value that specifies the confidence threshold for the command.</value>
<remarks>
<para>If the <see cref="P:DoubleAgent.Control.UserInput.Confidence" /> value of the best match <em>does not exceed</em> the value you set for the <self>ConfidenceThreshold</self> property, the text supplied in <see cref="P:DoubleAgent.Control.Command.ConfidenceText" /> is displayed in the <a class="see" href="../html/UI_Intro.htm#ListeningTip">Listening tip</a>.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Command.ConfidenceText" />
</member>

<member name="P:DoubleAgent.Control.Command.Enabled">
<summary> Specifies if the <see cref="T:DoubleAgent.Control.Command" /> is enabled in the character's <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a>.</summary>
<value name="Enabled">A <typename>boolean</typename> value that indicates if the command is enabled.</value>
<remarks>
<para>If the <self>Enabled</self> property is set to <keyword>True</keyword>, the <see cref="T:DoubleAgent.Control.Command" /> Object's <see cref="P:DoubleAgent.Control.Command.Caption" /> appears as normal text in the character's <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a> when the client application is <glossary>input-active</glossary>. If the <self>Enabled</self> property is <keyword>False</keyword>, the <see cref="P:DoubleAgent.Control.Command.Caption" /> appears as unavailable (disabled) text. A disabled <see cref="T:DoubleAgent.Control.Command" /> is also not accessible for voice input.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Command.HelpContextID">
<summary>Not Implemented</summary>
</member>

<member name="P:DoubleAgent.Control.Command.Name">
<summary> The unique name that identifies the <see cref="T:DoubleAgent.Control.Command" /> Object in the <see cref="T:DoubleAgent.Control.Commands" /> Collection.</summary>
<value name="Name">A <typename>string</typename> value that identifies the <see cref="T:DoubleAgent.Control.Command" /> Object.</value>
<remarks>
<para>When you keep a reference to a <see cref="T:DoubleAgent.Control.Command" /> Object, you can use this property to relate it back to it's owner <see cref="T:DoubleAgent.Control.Commands" /> Collection.
</para>
</remarks>
<seealso cref="M:DoubleAgent.Control.Commands.Add(System.String,System.Object,System.Object,System.Object,System.Object)" />
<seealso cref="M:DoubleAgent.Control.Commands.Insert(System.String,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)" />
<seealso cref="P:DoubleAgent.Control.Commands.Item" />
</member>

<member name="P:DoubleAgent.Control.Command.Visible">
<summary> Specifies if the <see cref="T:DoubleAgent.Control.Command" /> is visible in the character's <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a>.</summary>
<value name="Visible">A <typename>boolean</typename> value that indicates if the command is visible.</value>
<remarks>
<para>Set this property to <keyword>False</keyword> when you want to include voice input for your command without having it appear in the <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a> for the character. If you set a <see cref="T:DoubleAgent.Control.Command" /> Object's <see cref="P:DoubleAgent.Control.Command.Caption" /> property to the empty string (""), the caption text will not appear in the <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a> (for example, as a blank line), regardless of its <self>Visible</self> property setting.
</para>
<para>The <self>Visible</self> property of a <see cref="T:DoubleAgent.Control.Command" /> Object's parent <see cref="T:DoubleAgent.Control.Commands" /> Collection does not affect the <self>Visible</self> property of the <see cref="T:DoubleAgent.Control.Command" />.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Command.Voice">
<summary> deprecated</summary>
<remarks>
<para>This property has been replaced by the <see cref="P:DoubleAgent.Control.Command.VoiceGrammar" /> property, but is still supported for backward compatibility.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Command.VoiceCaption">
<summary> Specifies the text displayed for the <see cref="T:DoubleAgent.Control.Command" /> Object in the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window.</summary>
<remarks>
<para>This text will appear in the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window when your client application is <glossary>input-active</glossary> and the character is visible. If this property is not set, the <see cref="P:DoubleAgent.Control.Command.Caption" /> property is used instead. When neither the <self>VoiceCaption</self> nor <see cref="P:DoubleAgent.Control.Command.Caption" /> property is set, the command does not appear in the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window.
</para>
<para>If you define a <see cref="T:DoubleAgent.Control.Command" /> Object in a <see cref="T:DoubleAgent.Control.Commands" /> Collection with a non-blank <see cref="P:DoubleAgent.Control.Commands.VoiceCaption" /> property, you will typically also set the <see cref="T:DoubleAgent.Control.Command" /> Object's <self>VoiceCaption</self> property.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Command.Caption" />
</member>

<member name="P:DoubleAgent.Control.Command.VoiceGrammar">
<summary> Specifies the grammar text that is passed to the speech recognition engine for matching this <see cref="T:DoubleAgent.Control.Command" />.</summary>
<value name="VoiceGrammar">A <typename>string</typename> value that specifies the recognition text.</value>
<remarks>
<para>If you do not supply this parameter, the <see cref="P:DoubleAgent.Control.Command.VoiceCaption" /> for your <see cref="T:DoubleAgent.Control.Command" /> Object will not appear in the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window. If you specify a <self>VoiceGrammar</self> parameter but not a <see cref="P:DoubleAgent.Control.Command.VoiceCaption" /> (or <see cref="P:DoubleAgent.Control.Command.Caption" />), the command will not appear in the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window, but it will be voice-accessible when the client application becomes <glossary>input-active</glossary>.
</para>
</remarks>
</member>

<member name="T:DoubleAgent.Control.Command">
<summary>
<para>A <self>Command Object</self> is an item in a <see cref="T:DoubleAgent.Control.Commands" /> Collection. Double Agent provides the user access to your <self>Command Objects</self> when your client application becomes <glossary>input-active</glossary>.
</para>
</summary>
<remarks>
<para>A command may appear in either the character's <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a> and the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window, or in both. To appear in the <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a> it must have a <see cref="P:DoubleAgent.Control.Command.Caption" /> and have the <see cref="P:DoubleAgent.Control.Command.Visible" /> property set to <keyword>True</keyword>. In addition, its <see cref="T:DoubleAgent.Control.Commands" /> Collection's <see cref="P:DoubleAgent.Control.Command.Visible" /> property must also be set to <keyword>True</keyword>. To appear in the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window, a <self>Command</self> must have its <see cref="P:DoubleAgent.Control.Command.Caption" /> and <see cref="P:DoubleAgent.Control.Command.VoiceGrammar" /> properties set.
</para>
<para>When Double Agent receives input for one of your commands, it sends a <see cref="E:DoubleAgent.Control.Control.Command" /> event, and passes back the name of the <self>Command</self> as an attribute of the <see cref="T:DoubleAgent.Control.UserInput" /> Object. You can then use conditional statements to match and process the <self>Command</self>.
</para>
<para>Note that a character's <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a> entries do not change while the menu is displayed. If you add or remove commands or change their properties while the character's <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a> is displayed, the menu reflects those changes whenever the user next shows it. However, the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window dynamically reflects any changes you make.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Balloon.BackColor">
<summary> Specifies the background color of a character's <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>.</summary>
<value name="BackColor">A <typename>numeric</typename> value that specifies the background color.</value>
<remarks>
<para name="Color">The valid range for a normal RGB color is 0 to 16,777,215 (&amp;HFFFFFF). The high byte of a number in this range equals 0; the lower 3 bytes, from least to most significant byte, determine the amount of red, green, and blue, respectively. The red, green, and blue components are each represented by a number between 0 and 255 (&amp;HFF).
</para>
<note name="ThisClientOnly">This property applies only to your client application's use of the character; the setting does not affect other clients of the character or other characters of your client application.</note>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Balloon.BorderColor">
<summary> Specifies the border color of a character's <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>.</summary>
<value name="BorderColor">A <typename>numeric</typename> value that specifies the outline color.</value>
<remarks>
<para name="Color">The valid range for a normal RGB color is 0 to 16,777,215 (&amp;HFFFFFF). The high byte of a number in this range equals 0; the lower 3 bytes, from least to most significant byte, determine the amount of red, green, and blue, respectively. The red, green, and blue components are each represented by a number between 0 and 255 (&amp;HFF).
</para>
<note name="ThisClientOnly">This property applies only to your client application's use of the character; the setting does not affect other clients of the character or other characters of your client application.</note>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Balloon.CharsPerLine">
<summary> Specifies the characters per line used for a character's <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>.</summary>
<value name="CharsPerLine">A <typename>numeric</typename> value that specifies the average number of characters per line.</value>
<remarks>
<para>The <self>CharsPerLine</self> property is the average number of characters (letters) displayed in the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>. For backward compatibility, you can also set the value using the <see cref="P:DoubleAgent.Control.Balloon.Style" /> property.
</para>
<note name="ThisClientOnly">This property applies only to your client application's use of the character; the setting does not affect other clients of the character or other characters of your client application.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Balloon.Style" />
</member>

<member name="P:DoubleAgent.Control.Balloon.Enabled">
<summary> Indicates if the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> is enabled for a character.</summary>
<value name="Enabled">A <typename>boolean</typename> value that indicates if the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.Enabled" /> style is set.</value>
<remarks>
<para>When the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.Enabled" /> style is set, the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> appears when the <see cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" /> or <see cref="M:DoubleAgent.Control.Character.Think(System.String)" /> method is used, unless the user overrides this setting in the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window. When it's not set, the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> does not appear.
</para>
<para>The default enabled style is set as part of a character's definition when the character is compiled in the Microsoft Agent Character Editor. If a character is defined to not support the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>, this property will always be <keyword>False</keyword> for the character.
</para>
<para>The user can override the enabled style for <em>all</em> characters in the <a class="see" href="../html/UI_PropSheet.htm#Output">Advanced Character Options</a> window.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Balloon.Style" />
<seealso cref="P:DoubleAgent.Control.Settings.BalloonEnabled" />
</member>

<member name="P:DoubleAgent.Control.Balloon.FontCharSet">
<summary> Specifies the character set for the font used in a character's <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>.</summary>
<value name="FontCharSet">A <typename>numeric</typename> value that specifies one of the character sets supported by Windows.</value>
<remarks>
<para name="DefaultBalloonFont">The default values for the font of a character's <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> are set in the Microsoft Agent Character Editor. In addition, the user can override font settings for all characters in the <a class="see" href="../html/UI_PropSheet.htm#Output">Advanced Character Options</a> window.
</para>
<note>If you're using a character that you didn't compile, check the <see cref="P:DoubleAgent.Control.Balloon.FontName" /> and <self>FontCharSet</self> properties for the character to determine whether they are appropriate for your locale. You may need to set these values before using the <see cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" /> method to ensure appropriate text display within the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>.</note>
<note name="ThisClientOnly">This property applies only to your client application's use of the character; the setting does not affect other clients of the character or other characters of your client application.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Balloon.FontName" />
<seealso cref="P:DoubleAgent.Control.Settings.BalloonFont" />
</member>

<member name="P:DoubleAgent.Control.Balloon.FontName">
<summary> Specifies the font used in the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> for the specified character.</summary>
<value name="FontName">A <typename>string</typename> value that specifies the font name.</value>
<remarks>
<para name="DefaultBalloonFont">The default values for the font of a character's <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> are set in the Microsoft Agent Character Editor. In addition, the user can override font settings for all characters in the <a class="see" href="../html/UI_PropSheet.htm#Output">Advanced Character Options</a> window.
</para>
<note>If you're using a character that you didn't compile, check the <self>FontName</self> and <see cref="P:DoubleAgent.Control.Balloon.FontCharSet" /> properties for the character to determine whether they are appropriate for your locale. You may need to set these values before using the <see cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" /> method to ensure appropriate text display within the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>.</note>
<note name="ThisClientOnly">This property applies only to your client application's use of the character; the setting does not affect other clients of the character or other characters of your client application.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Balloon.FontCharSet" />
<seealso cref="P:DoubleAgent.Control.Settings.BalloonFont" />
</member>

<member name="P:DoubleAgent.Control.Balloon.FontBold">
<summary> Specifies the font style of a character's the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>.</summary>
<value name="FontBold">A <typename>boolean</typename> value that indicates if the font is bold.</value>
<remarks>
<para name="DefaultBalloonFont">The default values for the font of a character's <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> are set in the Microsoft Agent Character Editor. In addition, the user can override font settings for all characters in the <a class="see" href="../html/UI_PropSheet.htm#Output">Advanced Character Options</a> window.
</para>
<note name="ThisClientOnly">This property applies only to your client application's use of the character; the setting does not affect other clients of the character or other characters of your client application.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Settings.BalloonFont" />
</member>

<member name="P:DoubleAgent.Control.Balloon.FontItalic">
<summary> Specifies the font style of a character's the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>.</summary>
<value name="FontItalic">A <typename>boolean</typename> value that indicates if the font is italic.</value>
<remarks>
<para name="DefaultBalloonFont">The default values for the font of a character's <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> are set in the Microsoft Agent Character Editor. In addition, the user can override font settings for all characters in the <a class="see" href="../html/UI_PropSheet.htm#Output">Advanced Character Options</a> window.
</para>
<note name="ThisClientOnly">This property applies only to your client application's use of the character; the setting does not affect other clients of the character or other characters of your client application.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Settings.BalloonFont" />
</member>

<member name="P:DoubleAgent.Control.Balloon.FontSize">
<summary> Specifies the font size supported for the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> for the specified character.</summary>
<value name="FontSize">A <typename>numeric</typename> value that specifies the font size, in points.</value>
<remarks>
<para name="DefaultBalloonFont">The default values for the font of a character's <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> are set in the Microsoft Agent Character Editor. In addition, the user can override font settings for all characters in the <a class="see" href="../html/UI_PropSheet.htm#Output">Advanced Character Options</a> window.
</para>
<note name="ThisClientOnly">This property applies only to your client application's use of the character; the setting does not affect other clients of the character or other characters of your client application.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Settings.BalloonFont" />
</member>

<member name="P:DoubleAgent.Control.Balloon.FontStrikethru">
<summary> Specifies the font style of a character's the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>.</summary>
<value name="FontStrikethru">A <typename>boolean</typename> value that indicates if the font has the <em>strikethru</em> style.</value>
<remarks>
<para name="DefaultBalloonFont">The default values for the font of a character's <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> are set in the Microsoft Agent Character Editor. In addition, the user can override font settings for all characters in the <a class="see" href="../html/UI_PropSheet.htm#Output">Advanced Character Options</a> window.
</para>
<note name="ThisClientOnly">This property applies only to your client application's use of the character; the setting does not affect other clients of the character or other characters of your client application.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Settings.BalloonFont" />
</member>

<member name="P:DoubleAgent.Control.Balloon.FontUnderline">
<summary> Specifies the font style of a character's <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>.</summary>
<value name="FontUnderline">A <typename>boolean</typename> value that indicates if the font is underlined.</value>
<remarks>
<para name="DefaultBalloonFont">The default values for the font of a character's <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> are set in the Microsoft Agent Character Editor. In addition, the user can override font settings for all characters in the <a class="see" href="../html/UI_PropSheet.htm#Output">Advanced Character Options</a> window.
</para>
<note name="ThisClientOnly">This property applies only to your client application's use of the character; the setting does not affect other clients of the character or other characters of your client application.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Settings.BalloonFont" />
</member>

<member name="P:DoubleAgent.Control.Balloon.ForeColor">
<summary> deprecated</summary>
<remarks>
<para>This property has been replaced by the <see cref="P:DoubleAgent.Control.Balloon.TextColor" /> property, but is still supported for backward compatibility.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Balloon.TextColor">
<summary> Returns the text color displayed in a character's <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>.</summary>
<value name="TextColor">A <typename>numeric</typename> value that specifies the text color.</value>
<remarks>
<para name="Color">The valid range for a normal RGB color is 0 to 16,777,215 (&amp;HFFFFFF). The high byte of a number in this range equals 0; the lower 3 bytes, from least to most significant byte, determine the amount of red, green, and blue, respectively. The red, green, and blue components are each represented by a number between 0 and 255 (&amp;HFF).
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Balloon.NumberOfLines">
<summary> Specifies the number of lines used for a character's <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>.</summary>
<value name="NumberOfLines">A <typename>numeric</typename> value that specifies the number of lines in a fixed-size <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>.</value>
<remarks>
<para>The <self>NumberOfLines</self> property is only used if the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> doesn't have the <keyword>AutoSize</keyword> style. For backward compatibility, you can also set the value using the <see cref="P:DoubleAgent.Control.Balloon.Style" /> property.
</para>
<note name="ThisClientOnly">This property applies only to your client application's use of the character; the setting does not affect other clients of the character or other characters of your client application.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Balloon.Style" />
</member>

<member name="P:DoubleAgent.Control.Balloon.Style">
<summary> Specifies the character's <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> output style.</summary>
<value name="Style">An <typename>numeric</typename> value that represents the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon's</a> output style. The style value is a bit field with bits defined as follows: 
<list type="table">
<item>
<term>bit 0 (&amp;H00000001)</term>
<description> <see cref="P:DoubleAgent.Control.Balloon.Enabled" /></description>
</item>
<item>
<term>bit 1 (&amp;H00000002)</term>
<description> <see cref="P:DoubleAgent.Control.Balloon.SizeToText" /></description>
</item>
<item>
<term>bit 2 (&amp;H00000004)</term>
<description> <see cref="P:DoubleAgent.Control.Balloon.AutoHide" /></description>
</item>
<item>
<term>bit 3 (&amp;H00000008)</term>
<description> <see cref="P:DoubleAgent.Control.Balloon.AutoPace" /></description>
</item>
<item>
<term>bit 4 (&amp;H00000010)</term>
<description> <see cref="P:DoubleAgent.Control.Balloon.ShowPartialLines" /></description>
</item>
<item>
<term>bits 16-23</term>
<description> <see cref="P:DoubleAgent.Control.Balloon.CharsPerLine" /></description>
</item>
<item>
<term>bits 24-31</term>
<description> <see cref="P:DoubleAgent.Control.Balloon.NumberOfLines" /></description>
</item>
</list>
</value>
<remarks>
<para>All of the settings included in the <self>Style</self> property can be accessed using specific <see cref="T:DoubleAgent.Control.Balloon" /> Object properties. The <self>Style</self> property lets you retrieve or set all of these settings at once.
</para>
<para>The defaults for the <self>Style</self> property are set when the character is compiled with the Microsoft Agent Character Editor.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Balloon.AutoHide" />
<seealso cref="P:DoubleAgent.Control.Balloon.AutoPace" />
<seealso cref="P:DoubleAgent.Control.Balloon.CharsPerLine" />
<seealso cref="P:DoubleAgent.Control.Balloon.NumberOfLines" />
<seealso cref="P:DoubleAgent.Control.Balloon.Enabled" />
<seealso cref="P:DoubleAgent.Control.Balloon.SizeToText" />
<seealso cref="P:DoubleAgent.Control.Balloon.ShowPartialLines" />
<seealso cref="T:DoubleAgent.Control.BalloonStyleFlags" />
</member>

<member name="P:DoubleAgent.Control.Balloon.Visible">
<summary> Specifies the visibility of a character's <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>.</summary>
<value name="Visible">A <typename>boolean</typename> value that indicates if the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> is visible.</value>
<remarks>
<para>If you follow a <see cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" /> or <see cref="M:DoubleAgent.Control.Character.Think(System.String)" /> call with a statement that changes this property, it may not affect the  <self>Visible</self> state because the <see cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" /> or <see cref="M:DoubleAgent.Control.Character.Think(System.String)" /> call gets queued, but the call to set this property does not. Therefore, only set this value when no <see cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" /> or <see cref="M:DoubleAgent.Control.Character.Think(System.String)" /> calls are in the character's request queue.
</para>
<para>If you attempt to set this property while the character is speaking, moving, or being dragged, the property setting does not take effect until the preceding operation is completed.
</para>
<para>Calling the <see cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" /> and <see cref="M:DoubleAgent.Control.Character.Think(System.String)" /> methods automatically makes the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> visible, setting the <self>Visible</self> property to <keyword>True</keyword>. If the <see cref="T:DoubleAgent.Control.Balloon" /> <see cref="P:DoubleAgent.Control.Balloon.AutoHide" /> property is enabled, the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> is automatically hidden after the text output is complete. Clicking or dragging a character that is not currently speaking also automatically hides the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>, even if its <see cref="P:DoubleAgent.Control.Balloon.AutoHide" /> setting is disabled.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Balloon.AutoHide" />
<seealso cref="P:DoubleAgent.Control.Balloon.Style" />
</member>

<member name="P:DoubleAgent.Control.Balloon.AutoHide">
<summary> Indicates if the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> will be automatically hidden after all of its text has been shown.</summary>
<value name="AutoHide">A <typename>boolean</typename> value that indicates if the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.AutoHide" /> style is enabled.</value>
<remarks>
<para>When the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.AutoHide" /> style is set, the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> automatically hides when spoken output completes. When it's not set, the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> remains displayed until the next <see cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" /> or <see cref="M:DoubleAgent.Control.Character.Think(System.String)" /> call, the character is hidden, or the user clicks or drags the character.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Balloon.Style" />
</member>

<member name="P:DoubleAgent.Control.Balloon.AutoPace">
<summary> Indicates if the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> paces its text display to the speech output.</summary>
<value name="AutoPace">A <typename>boolean</typename> value that indicates if the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.AutoPace" /> style is enabled.</value>
<remarks>
<para>When the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.AutoPace" /> style is set, the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> paces its text output based on the current output rate, for example one word at a time. When output exceeds the size of the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>, the text is automatically scrolled. When it's not set, all text included in a <see cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" /> or <see cref="M:DoubleAgent.Control.Character.Think(System.String)" /> request is displayed at once.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Balloon.Style" />
</member>

<member name="P:DoubleAgent.Control.Balloon.ShowPartialLines">
<summary> Indicates if the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> shows partial lines when it scrolls.</summary>
<value name="ShowPartialLines">A <typename>boolean</typename> value that indicates if the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.ShowPartialLines" /> style is enabled.</value>
<remarks>
<para>When the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.ShowPartialLines" /> style is set, the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> will show partial lines at the bottom as it scrolls its text. When it's not set, only full lines are shown. This style only applies when the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.SizeToText" /> style is <em>not</em> set.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Balloon.Style" />
</member>

<member name="P:DoubleAgent.Control.Balloon.SizeToText">
<summary> Indicates if the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> is automatically resized to fit it's contents.</summary>
<value name="SizeToText">A <typename>boolean</typename> value that indicates if the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.SizeToText" /> style is enabled.</value>
<remarks>
<para>When the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.SizeToText" /> style is set, the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> automatically adjusts the height of the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> to the current size of the text for the <see cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" /> or <see cref="M:DoubleAgent.Control.Character.Think(System.String)" /> request. When it's not set, the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon's</a> height is based on the <see cref="P:DoubleAgent.Control.Balloon.NumberOfLines" /> property. If this style is set and you attempt to set the <see cref="P:DoubleAgent.Control.Balloon.NumberOfLines" /> property, Double Agent raises an error.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.Balloon.Style" />
</member>

<member name="T:DoubleAgent.Control.Balloon">
<summary>
<para>Double Agent supports textual captioning of the <see cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" /> method using a cartoon <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>. The <see cref="M:DoubleAgent.Control.Character.Think(System.String)" /> method lets you display text without audio output in a <glossary>thought</glossary> <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>.
</para>
<para>The <self>Balloon Object</self> allows you to customize the appearance and behaviour of a character's <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>.
</para>
</summary>
<remarks>
<para>A character's initial <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> defaults are defined and compiled in the Microsoft Agent Character Editor. Once running, the <self>Balloon Object's</self> <keyword>Enabled</keyword> and <keyword>Font</keyword> properties may be overridden by the user. If a user changes the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon's</a> properties, they affect all characters. Both the <see cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" /> and <see cref="M:DoubleAgent.Control.Character.Think(System.String)" /> <a class="see" href="../html/UI_Intro.htm#Balloon">word balloons</a> use the same property settings for size. You can access the properties for a character's <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> through the <self>Balloon Object</self>, which is a child of the <see cref="T:DoubleAgent.Control.Character" /> Object.
</para>
<para>This object can be accessed using the <see class="" cref="T:DoubleAgent.Control.Character" /> Object's <see class="" cref="P:DoubleAgent.Control.Character.Balloon" /> property.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Request.Description">
<summary> Returns a description of a request error <see cref="P:DoubleAgent.Control.Request.Number" />.</summary>
<value name="Description">A string value that corresponds to the error <keyword>Number</keyword>. If no description is found for an error, <self>Description</self> contains <em>"Application-defined or object-defined error"</em>.</value>
</member>

<member name="P:DoubleAgent.Control.Request.Number">
<summary> Returns the error or cause of the <see cref="P:DoubleAgent.Control.Request.Status" /> code.</summary>
<value name="Number">The error or cause of the <keyword>Status</keyword> code. If there is no error, this value is zero.</value>
<remarks>
<para>For the values and meanings of the <self>Number</self> property, see <a href="MsAgent.chm::/hh/msagent/agenterr_6w36.htm">Microsoft Agent Error Codes</a>.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Request.Status">
<summary> You can use the <self>Status</self> property to check the status of your request.</summary>
<value name="Status">The current status of the request:
<list type="table">
<item><term xml:space="preserve">
0 = <keyword>Success</keyword>
</term>
<description>The request was successfully completed.</description>
</item>
<item><term xml:space="preserve">
1 = <keyword>Failed</keyword>
</term>
<description>The request failed and an error code is available in the <see cref="T:DoubleAgent.Control.Request" /> Object's <see cref="P:DoubleAgent.Control.Request.Number" /> property.</description>
</item>
<item><term xml:space="preserve">
2 = <keyword>Pending</keyword>
</term>
<description>The request is on the queue.</description>
</item>
<item><term xml:space="preserve">
3 = <keyword>Interrupted</keyword>
</term>
<description>The request was interrupted and an error code is available in the <see cref="T:DoubleAgent.Control.Request" /> Object's <see cref="P:DoubleAgent.Control.Request.Number" /> property.</description>
</item>
<item><term xml:space="preserve">
4 = <keyword>InProgress</keyword>
</term>
<description>The request is currently in progress.</description>
</item>
</list>
</value>
</member>

<member name="T:DoubleAgent.Control.Request">
<summary>
<para>Double Agent processes some methods, such as <see cref="M:DoubleAgent.Control.Characters.Load(System.String,System.Object)" />, <see cref="M:DoubleAgent.Control.Character.Play(System.String)" />, and <see cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" />, asynchronously. This allows your application code to continue while the method is completing. When a client application calls one of these methods, the control queues the request and returns a <self>Request Object</self>. The <self>Request Object</self> allows you to check the status of your request by keeping a reference to the object.
</para>
</summary>
<remarks>
<para>If you create a <self class="">Request Object</self> reference, Double Agent automatically notifies you when an animation request has started or completed through the <see cref="E:DoubleAgent.Control.Control.RequestStart" /> and <see cref="E:DoubleAgent.Control.Control.RequestComplete" /> events. Because methods that return <self class="">Request Objects</self> are asynchronous and may not complete during the scope of the calling function, declare your reference to the <self class="">Request Object</self> globally.
</para>
<para>The following methods can return a <self class="">Request Object</self>: <see class="" cref="M:DoubleAgent.Control.Character.GestureAt(System.Int16,System.Int16)" />, <see class="" cref="M:DoubleAgent.Control.Character.Hide(System.Object)" />, <see class="" cref="M:DoubleAgent.Control.Character.Interrupt(DoubleAgent.Control.Request)" />, <see class="" cref="M:DoubleAgent.Control.Characters.Load(System.String,System.Object)" />, <see class="" cref="M:DoubleAgent.Control.Character.MoveTo(System.Int16,System.Int16,System.Object)" />, <see class="" cref="M:DoubleAgent.Control.Character.Play(System.String)" />, <see class="" cref="M:DoubleAgent.Control.Character.Prepare(DoubleAgent.Control.PrepareResourceType,System.String,System.Object)" />, <see class="" cref="M:DoubleAgent.Control.Character.Show(System.Object)" />, <see class="" cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" />, <see class="" cref="M:DoubleAgent.Control.Character.Think(System.String)" />, and <see class="" cref="M:DoubleAgent.Control.Character.Wait(DoubleAgent.Control.Request)" />.
</para>
</remarks>
<seealso cref="E:DoubleAgent.Control.Control.RequestStart" />
<seealso cref="E:DoubleAgent.Control.Control.RequestComplete" />
</member>

<member name="T:DoubleAgent.Control.AnimationNames" kind="Collection">
<summary>
<para>deprecated
</para>
</summary>
<remarks>
<para>This object has been replaced by the <see cref="P:DoubleAgent.Control.Character.Animations" /> property, but is still supported for backward compatibility.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.UserInput.Alt1Confidence">
<summary> Returns the speech recognition confidence scoring for the second-best matching <see cref="T:DoubleAgent.Control.Command" />.</summary>
<value name="Alt1Confidence">The relative confidence scoring of second-best match, from -100 to 100 (0 if the <see cref="T:DoubleAgent.Control.Command" /> was chosen from the <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a>)</value>
<seealso cref="E:DoubleAgent.Control.Control.Command" />
</member>

<member name="P:DoubleAgent.Control.UserInput.Alt1Name">
<summary> Returns the name of the second-best matching <see cref="T:DoubleAgent.Control.Command" /></summary>
<value name="Alt1Name">The name of the second-best matching <see cref="T:DoubleAgent.Control.Command" />.</value>
<seealso cref="E:DoubleAgent.Control.Control.Command" />
</member>

<member name="P:DoubleAgent.Control.UserInput.Alt1Voice">
<summary> Returns the voice text the speech recognition engine matched for the second-best matching <see cref="T:DoubleAgent.Control.Command" />.</summary>
<value name="Alt1Voice">The second-best matching voice text</value>
<seealso cref="E:DoubleAgent.Control.Control.Command" />
</member>

<member name="P:DoubleAgent.Control.UserInput.Alt2Confidence">
<summary> Returns the speech recognition confidence scoring for the third-best matching <see cref="T:DoubleAgent.Control.Command" />.</summary>
<value name="Alt2Confidence">The relative confidence scoring of third-best match, from -100 to 100 (0 if the <see cref="T:DoubleAgent.Control.Command" /> was chosen from the <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a>)</value>
<seealso cref="E:DoubleAgent.Control.Control.Command" />
</member>

<member name="P:DoubleAgent.Control.UserInput.Alt2Name">
<summary> Returns the name of the third-best matching <see cref="T:DoubleAgent.Control.Command" /></summary>
<value name="Alt2Name">The name of the third-best matching <see cref="T:DoubleAgent.Control.Command" />.</value>
<seealso cref="E:DoubleAgent.Control.Control.Command" />
</member>

<member name="P:DoubleAgent.Control.UserInput.Alt2Voice">
<summary> Returns the voice text the speech recognition engine matched for the third-best matching <see cref="T:DoubleAgent.Control.Command" />.</summary>
<value name="Alt2Voice">The third-best matching voice text</value>
<seealso cref="E:DoubleAgent.Control.Control.Command" />
</member>

<member name="P:DoubleAgent.Control.UserInput.CharacterID">
<summary> Returns the unique identifier of the <see cref="T:DoubleAgent.Control.Character" /> that is the object of the <see cref="E:DoubleAgent.Control.Control.Command" /> event.</summary>
<value name="CharacterID">Identifies the <see cref="T:DoubleAgent.Control.Character" /> whose <see cref="T:DoubleAgent.Control.Command" /> was chosen.</value>
<seealso cref="E:DoubleAgent.Control.Control.Command" />
</member>

<member name="P:DoubleAgent.Control.UserInput.Confidence">
<summary> Returns the speech recognition confidence scoring for the best matching <see cref="T:DoubleAgent.Control.Command" />.</summary>
<value name="Confidence">The relative confidence scoring of best match, from -100 to 100 (100 if the <see cref="T:DoubleAgent.Control.Command" /> was chosen from the <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a>)</value>
<seealso cref="E:DoubleAgent.Control.Control.Command" />
</member>

<member name="P:DoubleAgent.Control.UserInput.Count">
<summary> Returns the number of possible matching commands.</summary>
<value name="Count">The number of possible matching commands, from 0 to 3.</value>
<remarks>Even if the <self>Count</self> is zero (no commands were matched), the <see cref="P:DoubleAgent.Control.UserInput.Voice" /> property will still return the spoken text.</remarks>
<seealso cref="E:DoubleAgent.Control.Control.Command" />
</member>

<member name="P:DoubleAgent.Control.UserInput.Name">
<summary> Identifies the chosen <see cref="T:DoubleAgent.Control.Command" />, if chosen from the <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a>, or the best matching <see cref="T:DoubleAgent.Control.Command" />, if voice input triggers the <see cref="E:DoubleAgent.Control.Control.Command" /> event.</summary>
<value name="Name">The name of the chosen <see cref="T:DoubleAgent.Control.Command" />, or an empty string if the chose command was pre-defined (for example, the <keyword>Hide</keyword> command).</value>
<seealso cref="E:DoubleAgent.Control.Control.Command" />
</member>

<member name="P:DoubleAgent.Control.UserInput.Voice">
<summary> Returns the voice text the speech recognition engine matched for the best matching <see cref="T:DoubleAgent.Control.Command" />.</summary>
<value name="Voice">The best matching voice text (or an empty string if the <see cref="T:DoubleAgent.Control.Command" /> was chosen from the <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a>)</value>
<remarks>Even if no command was matched, the text that the speech engine heard is returned.</remarks>
<seealso cref="E:DoubleAgent.Control.Control.Command" />
</member>

<member name="T:DoubleAgent.Control.UserInput">
<summary>
<para>Double Agent sends the <see cref="E:DoubleAgent.Control.Control.Command" /> event when your application is <glossary>input-active</glossary> and the user chooses a command from the character's <a class="see" href="../html/UI_Intro.htm#Menu">pop-up menu</a> or by spoken input. The event passes a <self>UserInput Object</self> that identifies the number of possible matching commands as well as the name, confidence scoring, and voice text for those matches.
</para>
</summary>
<remarks>
<para>Not all speech recognition engines may return all the values for all the properties of this object. Check with your engine vendor to determine whether the engine supports the Microsoft Speech API interface for returning alternatives and confidence scores.
</para>
</remarks>
<seealso cref="E:DoubleAgent.Control.Control.Command" />
<seealso cref="T:DoubleAgent.Control.Command" />
</member>

<member name="P:DoubleAgent.Control.CommandsWindow.Height">
<summary> Returns the current height, in pixels, of the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window.</summary>
<value name="Height">A <typename>numeric</typename> value that indicates the height, in pixels, of the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window.</value>
<remarks>
<para>Double Agent remembers and reuses the window size set by the user.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.CommandsWindow.Left">
<summary> Returns the horizontal location, in pixels, of the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window.</summary>
<value name="Left">A <typename>numeric</typename> value that specifies the left edge, in pixels, of the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window.</value>
<remarks>
<para>Double Agent remembers and reuses the window location set by the user.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.CommandsWindow.Top">
<summary> Returns the vertical location, in pixels, of the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window.</summary>
<value name="Top">A <typename>numeric</typename> value that specifies the top edge, in pixels, of the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window.</value>
<remarks>
<para>Double Agent remembers and reuses the window location set by the user.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.CommandsWindow.Visible">
<summary> Specifies if the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window is visible.</summary>
<value name="Visible">A <typename>boolean</typename> value indicating whether or not the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window is visible.</value>
</member>

<member name="P:DoubleAgent.Control.CommandsWindow.Width">
<summary> Returns current width, in pixels, of the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window.</summary>
<value name="Width">A <typename>numeric</typename> value that indicates the width, in pixels, of the <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window.</value>
<remarks>
<para>Double Agent remembers and reuses the window size set by the user.
</para>
</remarks>
</member>

<member name="T:DoubleAgent.Control.CommandsWindow">
<summary>
<para>The <self>CommandsWindow Object</self> provides access to Double Agent's <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window. It allows you to show and hide the window, and retrieve the window's location and size.
</para>
</summary>
<remarks>
<para>The <a class="see" href="../html/UI_Intro.htm#VoiceCommands">Voice Commands</a> window is shared among all Double Agent clients. Changes to the window's visibility should be made with this in mind.
</para>
<para>This object can be accessed using the <see class="" cref="T:DoubleAgent.Control.Control" /> Object's <see class="" cref="P:DoubleAgent.Control.Control.CommandsWindow" /> property.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.PropertySheet.Height">
<summary> Returns the current height, in pixels, of the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window.</summary>
<value name="Height">A <typename>numeric</typename> value that indicates the height, in pixels, of the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window.</value>
</member>

<member name="P:DoubleAgent.Control.PropertySheet.Left">
<summary> Specifies the horizontal location, in pixels, of the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window.</summary>
<value name="Left">A <typename>numeric</typename> value that specifies the left edge, in pixels, of the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window.</value>
<remarks>
<para>Double Agent remembers and reuses the window location set by the user.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.PropertySheet.Page">
<summary> Specifies the page displayed in the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window.</summary>
<value name="Page">A <typename>string</typename> value indicating the visible page. 
<list type="table">
<item>
<term> <literal>"Output"</literal></term>
<description>Selects the <a class="see" href="../html/UI_PropSheet.htm#Output">Output</a> page.</description>
</item>
<item>
<term> <literal>"Speech"</literal></term>
<description>Selects the <a class="see" href="../html/UI_PropSheet.htm#SpeechInput">Speech Input</a> page.</description>
</item>
<item>
<term> <literal>"Character"</literal></term>
<description>Selects the <a class="see" href="../html/UI_PropSheet.htm#Gallery">Gallery</a> (default character selection) page.</description>
</item>
<item>
<term> <literal>"Copyright"</literal></term>
<description>Selects the <a class="see" href="../html/UI_PropSheet.htm#Copyright">Copyright</a> page.</description>
</item>
</list>
</value>
<remarks>
<para>If no speech engine is installed, setting <self>Page</self> to <literal>"Speech"</literal> has no effect. Also, the window's <see cref="P:DoubleAgent.Control.PropertySheet.Visible" /> property must be set to <keyword>True</keyword> for the user to see the page.
</para>
<note>When the user closes the window, this property is set to the last page shown.</note>
</remarks>
</member>

<member name="P:DoubleAgent.Control.PropertySheet.Top">
<summary> Specifies the vertical location, in pixels, of the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window.</summary>
<value name="Top">A <typename>numeric</typename> value that specifies the top edge, in pixels, of the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window.</value>
<remarks>
<para>Double Agent remembers and reuses the window location set by the user.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.PropertySheet.Visible">
<summary> Specifies if the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window is visible (open).</summary>
<value name="Visible">A <typename>boolean</typename> value indicating whether or not the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window is visible.</value>
</member>

<member name="P:DoubleAgent.Control.PropertySheet.Width">
<summary> Returns current width, in pixels, of the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window.</summary>
<value name="Width">A <typename>numeric</typename> value that indicates the width, in pixels, of the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window.</value>
</member>

<member name="T:DoubleAgent.Control.PropertySheet">
<summary>
<para>The <self>PropertySheet Object</self> provides access to the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window. It allows you to show and hide the window, and retrieve and update the window's location and current page.
</para>
</summary>
<remarks>
<para>The <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window is shared among all Double Agent clients. Changes to the window's location and visibility should be made with this in mind.
</para>
<para>This object can be accessed using the <see class="" cref="T:DoubleAgent.Control.Control" /> Object's <see class="" cref="P:DoubleAgent.Control.Control.PropertySheet" /> property.
</para>
<note>The <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window combines the Microsoft Agent <glossary>Advanced Character Options</glossary> and <glossary>Default Character Properties</glossary> windows.</note>
</remarks>
</member>

<member name="P:DoubleAgent.Control.Settings.AudioStatus">
<summary> Returns the status of the audio output channel.</summary>
<value name="AudioStatus">A member of the <see class="typename" cref="T:DoubleAgent.Control.AudioStatusType" /> Enumeration that indicates the current audio output status: 
<list type="table">
<item><term xml:space="preserve">
0 = <keyword>Available</keyword>
</term>
<description>Text-to-speech is available.</description>
</item>
<item><term xml:space="preserve">
1 = <keyword>Disabled</keyword>
</term>
<description>Text-to-speech is disabled in the <a class="see" href="../html/UI_PropSheet.htm#Output">Advanced Character Options</a> window.</description>
</item>
<item><term xml:space="preserve">
3 = <keyword>UserSpeaking</keyword>
</term>
<description> <glossary>Listening mode</glossary> is active and the user is currently speaking.</description>
</item>
<item><term xml:space="preserve">
4 = <keyword>CharacterSpeaking</keyword>
</term>
<description>A character is currently speaking.</description>
</item>
<item><term xml:space="preserve">
5 = <keyword>CharacterListening</keyword>
</term>
<description> <glossary>Listening mode</glossary> is active.</description>
</item>
<item><term xml:space="preserve">
6 = <keyword>Error</keyword>
</term>
<description>The audio status could not be determined.</description>
</item>
</list>
</value>
<remarks>
<para>Your client application can use this property to determine whether it is appropriate to have your character speak or whether it is appropriate to try to turn on <glossary>Listening mode</glossary> (using the <see cref="M:DoubleAgent.Control.Character.Listen(System.Boolean)" /> method).
</para>
</remarks>
<seealso cref="T:DoubleAgent.Control.AudioStatusType" />
<seealso cref="M:DoubleAgent.Control.Character.Listen(System.Boolean)" />
<seealso cref="E:DoubleAgent.Control.Control.ListenStart" />
<seealso cref="E:DoubleAgent.Control.Control.ListenComplete" />
</member>

<member name="P:DoubleAgent.Control.Settings.BalloonEnabled">
<summary> Indicates if the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> for the <see cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" /> and <see cref="M:DoubleAgent.Control.Character.Think(System.String)" /> methods is enabled.</summary>
<value name="BalloonEnabled">A <typename>boolean</typename> value that indicates if the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> is enabled.</value>
<remarks>
<para>This property reflects the <literal>"Display spoken output in word balloon …"</literal> option on the <a class="see" href="../html/UI_PropSheet.htm#Output">Output</a> page of the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window.
</para>
<note name="ReadOnlySetting">The property setting affects all characters and is read-only; only the user can set this property value.</note>
</remarks>
<seealso cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" />
<seealso cref="M:DoubleAgent.Control.Character.Think(System.String)" />
<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" />
</member>

<member name="P:DoubleAgent.Control.Settings.BalloonFont">
<summary> Returns the font that will be used for all <a class="see" href="../html/UI_Intro.htm#Balloon">word balloons</a>, if any.</summary>
<value name="BalloonFont">An optional <typename>font</typename> object that specifies the font the user has chosen to override all <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> fonts.</value>
<remarks>
<para>This property reflects the <literal>"A single font for all characters"</literal> option on the <a class="see" href="../html/UI_PropSheet.htm#Output">Output</a> page of the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window.
</para>
<note name="ReadOnlySetting">The property setting affects all characters and is read-only; only the user can set this property value.</note>
</remarks>
<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" />
<seealso cref="P:DoubleAgent.Control.Balloon.FontName" />
<seealso cref="P:DoubleAgent.Control.Balloon.FontSize" />
<seealso cref="P:DoubleAgent.Control.Balloon.FontBold" />
<seealso cref="P:DoubleAgent.Control.Balloon.FontItalic" />
<seealso cref="P:DoubleAgent.Control.Balloon.FontUnderline" />
<seealso cref="P:DoubleAgent.Control.Balloon.FontStrikethru" />
<seealso cref="P:DoubleAgent.Control.Balloon.FontCharSet" />
</member>

<member name="P:DoubleAgent.Control.Settings.SoundEffectsEnabled">
<summary> Indicates if sound effects associated with a character's animations will play.</summary>
<value name="SoundEffectsEnabled">A <typename>boolean</typename> value that indicates if sound effects are enabled.</value>
<remarks>
<para>This property reflects the <literal>"Play character sound effects"</literal> option on the <a class="see" href="../html/UI_PropSheet.htm#Output">Output</a> page of the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window.
</para>
<note name="ReadOnlySetting">The property setting affects all characters and is read-only; only the user can set this property value.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.Character.SoundEffectsEnabled" />
<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" />
</member>

<member name="P:DoubleAgent.Control.Settings.SREnabled">
<summary> Indicates if speech input is enabled.</summary>
<value name="SREnabled">A <typename>boolean</typename> value that indicates if speech input is enabled.</value>
<remarks>
<para>This property reflects the <literal>"Characters listen for input"</literal> option on the <a class="see" href="../html/UI_PropSheet.htm#SpeechInput">Speech Input</a> page of the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window.
</para>
<note name="ReadOnlySetting">The property setting affects all characters and is read-only; only the user can set this property value.</note>
</remarks>
<seealso cref="M:DoubleAgent.Control.Character.Listen(System.Boolean)" />
<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" />
</member>

<member name="P:DoubleAgent.Control.Settings.SRHotKey">
<summary> Returns the user's current setting for the <glossary>Listening key</glossary>.</summary>
<value name="SRHotKey">A <typename>string</typename> value that describes the current <glossary>Listening key</glossary>.</value>
<remarks>
<para>This property reflects the <literal>"When you press the … key"</literal> option on the <a class="see" href="../html/UI_PropSheet.htm#SpeechInput">Speech Input</a> page of the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window.
</para>
<note name="ReadOnlySetting">The property setting affects all characters and is read-only; only the user can set this property value.</note>
</remarks>
<seealso cref="M:DoubleAgent.Control.Character.Listen(System.Boolean)" />
<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" />
</member>

<member name="P:DoubleAgent.Control.Settings.SRHotKeyTime">
<summary> Returns the current timeout delay for the <glossary>Listening key</glossary>.</summary>
<value name="SRHotKeyTime">A <typename>numeric</typename> value that indicates the <glossary>Listening key</glossary> timeout, in seconds.</value>
<remarks>
<para>This property reflects the <literal>"And continue for … seconds …"</literal> option on the <a class="see" href="../html/UI_PropSheet.htm#SpeechInput">Speech Input</a> page of the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window.
</para>
<note name="ReadOnlySetting">The property setting affects all characters and is read-only; only the user can set this property value.</note>
</remarks>
<seealso cref="M:DoubleAgent.Control.Character.Listen(System.Boolean)" />
<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" />
</member>

<member name="P:DoubleAgent.Control.Settings.SRListeningPrompt">
<summary> Indicates if a sound is played when <glossary>Listening mode</glossary> is activated or deactivated.</summary>
<value name="SRListeningPrompt">A <typename>boolean</typename> value that indicates if the <glossary>Listening prompt</glossary> is enabled.</value>
<remarks>
<para>This property reflects the <literal>"Play tone when you can speak"</literal> option on the <a class="see" href="../html/UI_PropSheet.htm#SpeechInput">Speech Input</a> page of the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window.
</para>
<note name="ReadOnlySetting">The property setting affects all characters and is read-only; only the user can set this property value.</note>
</remarks>
<seealso cref="M:DoubleAgent.Control.Character.Listen(System.Boolean)" />
<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" />
</member>

<member name="P:DoubleAgent.Control.Settings.SRListeningTip">
<summary> Indicates if the <a class="see" href="../html/UI_Intro.htm#ListeningTip">Listening tip</a> is shown when <glossary>Listening mode</glossary> is active.</summary>
<value name="SRListeningTip">A <typename>boolean</typename> value that indicates if the <a class="see" href="../html/UI_Intro.htm#ListeningTip">Listening tip</a> is enabled.</value>
<remarks>
<para>This property reflects the <literal>"Display listening tips"</literal> option on the <a class="see" href="../html/UI_PropSheet.htm#SpeechInput">Speech Input</a> page of the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window.
</para>
<note name="ReadOnlySetting">The property setting affects all characters and is read-only; only the user can set this property value.</note>
</remarks>
<seealso cref="M:DoubleAgent.Control.Character.Listen(System.Boolean)" />
<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" />
</member>

<member name="P:DoubleAgent.Control.Settings.TTSEnabled">
<summary> Indicates if spoken audio output is enabled.</summary>
<value name="TTSEnabled">A <typename>boolean</typename> value indicating if spoken output is enabled.</value>
<remarks>
<para>This property reflects the <literal>"Play spoken audio"</literal> option on the <a class="see" href="../html/UI_PropSheet.htm#Output">Output</a> page of the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window.
</para>
<note name="ReadOnlySetting">The property setting affects all characters and is read-only; only the user can set this property value.</note>
</remarks>
<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" />
</member>

<member name="P:DoubleAgent.Control.Settings.TTSSpeed">
<summary> Returns the text-to-speech rate configured by the user.</summary>
<value name="TTSSpeed">A <typename>numeric</typename> value that indicates the relative rate applied to text-to-speech. It ranges from 0 (slow) to 10 (fast). A value of 5 indicates no change to the speech engine's normal speaking speed.</value>
<remarks>
<para>This property reflects the <literal>"Speaking speed"</literal> option on the <a class="see" href="../html/UI_PropSheet.htm#Output">Output</a> page of the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window.
</para>
<note name="ReadOnlySetting">The property setting affects all characters and is read-only; only the user can set this property value.</note>
</remarks>
<seealso cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" />
<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" />
</member>

<member name="T:DoubleAgent.Control.Settings">
<summary>
<para>The <self>Settings Object</self> provides access to various settings maintained by Double Agent. The properties are read-only for client applications, but the user can change them in the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window.
</para>
</summary>
<remarks>
<para>The <self>Settings Object</self> replaces and extends the <see cref="T:DoubleAgent.Control.AudioOutput" /> and <see cref="T:DoubleAgent.Control.SpeechInput" /> Objects.
</para>
<para>This object can be accessed using the <see class="" cref="T:DoubleAgent.Control.Control" /> Object's <see class="" cref="P:DoubleAgent.Control.Control.Settings" /> property.
</para>
<note>For some properties, Double Agent returns a relevant value only if a compatible speech engine has been installed and is enabled.</note>
</remarks>
</member>

<member name="P:DoubleAgent.Control.AudioOutput.Enabled">
<summary> deprecated</summary>
<remarks>
<para>This property has been replaced by the <see cref="P:DoubleAgent.Control.Settings.TTSEnabled" /> property, but is still supported for backward compatibility.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.AudioOutput.SoundEffects">
<summary> deprecated</summary>
<remarks>
<para>This property has been replaced by the <see cref="P:DoubleAgent.Control.Settings.SoundEffectsEnabled" /> property, but is still supported for backward compatibility.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.AudioOutput.Status">
<summary> deprecated</summary>
<remarks>
<para>This property has been replaced by the <see cref="P:DoubleAgent.Control.Settings.AudioStatus" /> property, but is still supported for backward compatibility.
</para>
</remarks>
</member>

<member name="T:DoubleAgent.Control.AudioOutput">
<summary>
<para>deprecated
</para>
</summary>
<remarks>
<para>This object has been replaced by the <see cref="T:DoubleAgent.Control.Settings" /> Object, but is still supported for backward compatibility.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.SpeechInput.Enabled">
<summary> deprecated</summary>
<remarks>
<para>This property has been replaced by the <see cref="P:DoubleAgent.Control.Settings.SREnabled" /> property, but is still supported for backward compatibility.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.SpeechInput.Engine">
<summary>obsolete</summary>
</member>

<member name="P:DoubleAgent.Control.SpeechInput.HotKey">
<summary> deprecated</summary>
<remarks>
<para>This property has been replaced by the <see cref="P:DoubleAgent.Control.Settings.SRHotKey" /> property, but is still supported for backward compatibility.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.SpeechInput.Installed">
<summary>obsolete</summary>
</member>

<member name="P:DoubleAgent.Control.SpeechInput.Language">
<summary>obsolete</summary>
</member>

<member name="P:DoubleAgent.Control.SpeechInput.ListeningTip">
<summary> deprecated</summary>
<remarks>
<para>This property has been replaced by the <see cref="P:DoubleAgent.Control.Settings.SRListeningTip" /> property, but is still supported for backward compatibility.
</para>
</remarks>
</member>

<member name="T:DoubleAgent.Control.SpeechInput">
<summary>
<para>deprecated
</para>
</summary>
<remarks>
<para>This object has been replaced by the <see cref="T:DoubleAgent.Control.Settings" /> Object, but is still supported for backward compatibility.
</para>
</remarks>
</member>

<member name="M:DoubleAgent.Control.FormattedText.Append(DoubleAgent.Control.FormattedText)">
<summary> Appends one <see cref="T:DoubleAgent.Control.FormattedText" />  Object to another <see cref="T:DoubleAgent.Control.FormattedText" />  Object.</summary>
<param name="FormattedText">The <see class="typename" cref="T:DoubleAgent.Control.FormattedText" />  Object to append.</param>
<remarks>
<para>The appended text starts a new paragraph; a <glossary>new-line</glossary> character separates the existing and appended text.
</para>
<note>This method will fail if the <see cref="T:DoubleAgent.Control.FormattedText" />  Object is currently being used by a queued speech or thought action.</note>
</remarks>
<seealso cref="M:DoubleAgent.Control.Character.SpeakFormatted(DoubleAgent.Control.FormattedText)" />
<seealso cref="M:DoubleAgent.Control.Character.ThinkFormatted(DoubleAgent.Control.FormattedText)" />
</member>

<member name="M:DoubleAgent.Control.FormattedText.Parse(System.String)">
<summary> Parses text containing speech tags.</summary>
<param name="RawText">A <typename>string</typename> value containing text with optional speech output tags.</param>
<remarks>
<para>The kind of speech tags accepted depends on the Text-to-Speech engine selected for the <see cref="T:DoubleAgent.Control.Character" /> when the <see cref="T:DoubleAgent.Control.FormattedText" />  Object was created. If the <see cref="T:DoubleAgent.Control.Character" /> is using a SAPI4 speech engine, then SAPI4 speech tags are accepted. If the <see cref="T:DoubleAgent.Control.Character" /> is using a SAPI5 speech engine, then SAPI5 speech tags and <em>supported</em> SAPI4 speech tags are accepted. Any supported SAPI4 tags are converted to SAPI5 tags.
</para>
<para>For more information about speech tags, see <a href="MsAgent.chm::/hh/msagent/guidlin_2my6.htm">Speech Output Tags</a>.
</para>
<note>This method will fail if the <see cref="T:DoubleAgent.Control.FormattedText" />  Object is currently being used by a queued speech or thought action.</note>
</remarks>
<seealso cref="M:DoubleAgent.Control.Character.SpeakFormatted(DoubleAgent.Control.FormattedText)" />
<seealso cref="M:DoubleAgent.Control.Character.ThinkFormatted(DoubleAgent.Control.FormattedText)" />
<seealso cref="M:DoubleAgent.Control.Character.NewFormattedText" />
</member>

<member name="P:DoubleAgent.Control.FormattedText.DisplayText">
<summary> Returns the text displayed in the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>.</summary>
<value name="DisplayText">A <typename>string</typename> value that contains the <see cref="P:DoubleAgent.Control.FormattedText.ParsedText" /> up to and including the current <see cref="P:DoubleAgent.Control.FormattedText.WordIndex" />.</value>
<remarks>
<para>The value of this property does <em>not</em> depend on the <see cref="T:DoubleAgent.Control.Balloon" /> <see cref="P:DoubleAgent.Control.Balloon.Style" />, or even if a <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> is shown. It reflects what <em>would</em> be displayed in a <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> with the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.SizeToText" /> and <see cref="F:DoubleAgent.Control.BalloonStyleFlags.AutoPace" /> styles.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.FormattedText.ParsedText" />
<seealso cref="P:DoubleAgent.Control.FormattedText.WordIndex" />
</member>

<member name="P:DoubleAgent.Control.FormattedText.DisplayWord(System.Int32)">
<summary> Returns the <see cref="P:DoubleAgent.Control.FormattedText.ParsedText" /> for a specific <see cref="P:DoubleAgent.Control.FormattedText.WordIndex" />.</summary>
<param name="WordIndex">A <typename>numeric</typename> value specifying the zero-based index of the word to return. Must be less than <see cref="P:DoubleAgent.Control.FormattedText.WordCount" />.</param>
<value name="DisplayWord">A <typename>string</typename> value that contains the <see cref="P:DoubleAgent.Control.FormattedText.ParsedText" /> at the specified <paramref name="WordIndex" />.</value>
<remarks>
<para>The returned string includes trailing <glossary>white-space</glossary>, but <em>not</em> leading <glossary>white-space</glossary>.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.FormattedText.ParsedText" />
<seealso cref="P:DoubleAgent.Control.FormattedText.WordIndex" />
<seealso cref="P:DoubleAgent.Control.FormattedText.WordCount" />
</member>

<member name="P:DoubleAgent.Control.FormattedText.ParsedText">
<summary> Returns the text formatted for display.</summary>
<value name="ParsedText">A <typename>string</typename> value containing the text formatted for displaying in a <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>.</value>
<seealso cref="P:DoubleAgent.Control.FormattedText.RawText" />
<seealso cref="P:DoubleAgent.Control.FormattedText.SpeechText" />
<seealso cref="M:DoubleAgent.Control.FormattedText.Parse(System.String)" />
</member>

<member name="P:DoubleAgent.Control.FormattedText.RawText">
<summary> Returns the unformatted text.</summary>
<value name="RawText">A <typename>string</typename> value containing the unformatted text.</value>
<remarks>
<para>After you use the <see cref="M:DoubleAgent.Control.FormattedText.Parse(System.String)" /> Method, this property will return the text passed in the <token>RawText</token> parameter.
</para>
<para>If you use this property to set the <self>RawText</self> value, it does not get parsed. The <self>RawText</self> value will be used for both the <see cref="P:DoubleAgent.Control.FormattedText.ParsedText" /> and the <see cref="P:DoubleAgent.Control.FormattedText.SpeechText" />.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.FormattedText.ParsedText" />
<seealso cref="P:DoubleAgent.Control.FormattedText.SpeechText" />
<seealso cref="M:DoubleAgent.Control.FormattedText.Parse(System.String)" />
</member>

<member name="P:DoubleAgent.Control.FormattedText.SpeechText">
<summary> Returns the text formatted for the Text-to-Speech engine.</summary>
<value name="SpeechText">A <typename>string</typename> value containing the text formatted for sending to the Text-to-Speech engine.</value>
<remarks>
<para>This property contains speech tags formatted for the Text-to-Speech engine selected for the <see cref="T:DoubleAgent.Control.Character" /> when the <see cref="T:DoubleAgent.Control.FormattedText" />  Object was created.
</para>
<para>For more information about speech tags, see <a href="MsAgent.chm::/hh/msagent/guidlin_2my6.htm">Speech Output Tags</a>.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.FormattedText.RawText" />
<seealso cref="P:DoubleAgent.Control.FormattedText.ParsedText" />
<seealso cref="M:DoubleAgent.Control.FormattedText.Parse(System.String)" />
</member>

<member name="P:DoubleAgent.Control.FormattedText.WordCount">
<summary> Returns the number of words in the <see cref="P:DoubleAgent.Control.FormattedText.ParsedText" /> and <see cref="P:DoubleAgent.Control.FormattedText.SpeechText" /> properties.</summary>
<value name="WordCount">A <typename>numeric</typename> value that indicates how many words are in the parsed text.</value>
<remarks>
<para>The <self>WordCount</self> reflects how text is displayed in the <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a> and how the <see cref="P:DoubleAgent.Control.FormattedText.DisplayText" /> is synchronized with the speech output.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.FormattedText.WordIndex" />
<seealso cref="P:DoubleAgent.Control.FormattedText.DisplayText" />
</member>

<member name="P:DoubleAgent.Control.FormattedText.WordIndex">
<summary> Returns the index of the word currently being spoken and/or displayed.</summary>
<value name="WordCount">A <typename>numeric</typename> value that indicates the zero-based index of the current word.</value>
<remarks>
<note>If speech or thought output has not yet begun, this property's value will be <keyword>-1</keyword>.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.FormattedText.WordCount" />
<seealso cref="P:DoubleAgent.Control.FormattedText.DisplayText" />
<seealso cref="P:DoubleAgent.Control.FormattedText.DisplayWord" />
</member>

<member name="T:DoubleAgent.Control.FormattedText">
<summary>
<para>The <self>FormattedText</self> object is used to pre-format text that is to be spoken, or shown in a <glossary>thought</glossary> <a class="see" href="../html/UI_Intro.htm#Balloon">word balloon</a>.
</para>
</summary>
<remarks>
<para>If your application uses the same text for multiple calls to the <see cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" /> or <see cref="M:DoubleAgent.Control.Character.Think(System.String)" /> method, it can be more efficient to pre-format the text in a <self>FormattedText</self> object and use the <see cref="M:DoubleAgent.Control.Character.SpeakFormatted(DoubleAgent.Control.FormattedText)" /> or <see cref="M:DoubleAgent.Control.Character.ThinkFormatted(DoubleAgent.Control.FormattedText)" /> method instead.
</para>
<para>Also, if you want to receive the <see cref="E:DoubleAgent.Control.Control.SpeechStart" />, <see cref="E:DoubleAgent.Control.Control.SpeechEnd" />, and <see cref="E:DoubleAgent.Control.Control.SpeechWord" /> events, you must use the <see cref="M:DoubleAgent.Control.Character.SpeakFormatted(DoubleAgent.Control.FormattedText)" /> method.
</para>
</remarks>
<seealso cref="M:DoubleAgent.Control.Character.SpeakFormatted(DoubleAgent.Control.FormattedText)" />
<seealso cref="M:DoubleAgent.Control.Character.ThinkFormatted(DoubleAgent.Control.FormattedText)" />
<seealso cref="M:DoubleAgent.Control.Character.NewFormattedText" />
</member>

<member name="P:DoubleAgent.Control.CharacterFiles.DefaultFileName">
<summary> Returns the name of the <em>default</em> character's definition file.</summary>
<value name="DefaultFileName">A <typename>string</typename> value that contains the name of the <em>default</em> character's definition file.</value>
<remarks>
<para>The <em>default</em> character is specified by the user in the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.CharacterFiles.DefaultFilePath">
<summary> Returns the full path of the <em>default</em> character's definition file.</summary>
<value name="DefaultFilePath">A <typename>string</typename> value that contains the <glossary>UNC</glossary> path of the <em>default</em> character's definition file.</value>
<remarks>
<para>The <em>default</em> character is specified by the user in the <a class="see" href="../html/UI_PropSheet.htm">Advanced Character Options</a> window.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.CharacterFiles.DefaultSearchPath">
<summary> Identifies the <em>default</em> search path used to fill the <see cref="P:DoubleAgent.Control.CharacterFiles.FilePaths" /> property.</summary>
<value name="DefaultSearchPath">A <typename>string</typename> value that identifies one or more <glossary>UNC</glossary> paths, separated by semicolons.</value>
<remarks>
<para>This property returns the <em>default</em> search path, based on the selection criteria specified by the <see cref="P:DoubleAgent.Control.CharacterFiles.DoubleAgentFiles" />, <see cref="P:DoubleAgent.Control.CharacterFiles.MsAgentFiles" /> and <see cref="P:DoubleAgent.Control.CharacterFiles.MsOfficeFiles" /> properties. The <em>actual</em> search path can be set with the <see cref="P:DoubleAgent.Control.CharacterFiles.SearchPath" /> property.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.CharacterFiles.SearchPath" />
<seealso cref="P:DoubleAgent.Control.CharacterFiles.FilePaths" />
</member>

<member name="P:DoubleAgent.Control.CharacterFiles.DoubleAgentFiles">
<summary> Indicates if the Double Agent install location should be included in the <see cref="P:DoubleAgent.Control.CharacterFiles.DefaultSearchPath" />.</summary>
<value name="DoubleAgentFiles">A <typename>boolean</typename> value that indicates if the Double Agent install location should be included in the search for character files.</value>
<remarks>
<para>The path for Double Agent characters is the <filename>Chars</filename> subdirectory of the Double Agent install location. Typically, this would be <filename xml:space="preserve">C:\Program Files\Double Agent\Chars</filename>.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.CharacterFiles.FilePaths" />
<seealso cref="P:DoubleAgent.Control.CharacterFiles.SearchPath" />
<seealso cref="P:DoubleAgent.Control.CharacterFiles.DefaultSearchPath" />
</member>

<member name="P:DoubleAgent.Control.CharacterFiles.FilePaths">
<summary> Returns a list of character file paths that satisfy the filtering criteria defined by other properties in the <see cref="T:DoubleAgent.Control.CharacterFiles" /> Object.</summary>
<value name="FilePaths">An array of <typename>string</typename> values that identify locally available character definition files.</value>
<remarks>
<para>This property is the raison d'être of the <see cref="T:DoubleAgent.Control.CharacterFiles" /> Object. As you change the other properties in this object, the contents of this array will change accordingly.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.CharacterFiles.DoubleAgentFiles" />
<seealso cref="P:DoubleAgent.Control.CharacterFiles.MsAgentFiles" />
<seealso cref="P:DoubleAgent.Control.CharacterFiles.MsOfficeFiles" />
<seealso cref="P:DoubleAgent.Control.CharacterFiles.SpeakingCharacters" />
<seealso cref="P:DoubleAgent.Control.CharacterFiles.NonSpeakingCharacters" />
<seealso cref="P:DoubleAgent.Control.CharacterFiles.VerifyVersion" />
<seealso cref="P:DoubleAgent.Control.CharacterFiles.SearchPath" />
<seealso cref="P:DoubleAgent.Control.CharacterFiles.DefaultSearchPath" />
</member>

<member name="P:DoubleAgent.Control.CharacterFiles.MsAgentFiles">
<summary> Indicates if the Microsoft Agent install location should be included in the <see cref="P:DoubleAgent.Control.CharacterFiles.DefaultSearchPath" />.</summary>
<value name="MsAgentFiles">A <typename>boolean</typename> value that indicates if the Microsoft Agent install location should be included in the search for character files.</value>
<remarks>
<para>The path for Microsoft Agent characters is the <filename>Chars</filename> subdirectory of the Microsoft Agent install location. Typically, this would be <filename xml:space="preserve">C:\Windows\MsAgent\Chars</filename>.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.CharacterFiles.FilePaths" />
<seealso cref="P:DoubleAgent.Control.CharacterFiles.SearchPath" />
<seealso cref="P:DoubleAgent.Control.CharacterFiles.DefaultSearchPath" />
</member>

<member name="P:DoubleAgent.Control.CharacterFiles.MsOfficeFiles">
<summary> Indicates if the Microsoft Office install location should be included in the <see cref="P:DoubleAgent.Control.CharacterFiles.DefaultSearchPath" />.</summary>
<value name="MsOfficeFiles">A <typename>boolean</typename> value that indicates if the Microsoft Office install location should be included in the search for character files.</value>
<remarks>
<para>Typically, Microsoft Office characters would be in <filename xml:space="preserve">C:\Program Files\Microsoft Office\Office10</filename>.
</para>
<note>Only older versions of Microsoft Office include Agent character files.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.CharacterFiles.FilePaths" />
<seealso cref="P:DoubleAgent.Control.CharacterFiles.SearchPath" />
<seealso cref="P:DoubleAgent.Control.CharacterFiles.DefaultSearchPath" />
</member>

<member name="P:DoubleAgent.Control.CharacterFiles.NonSpeakingCharacters">
<summary> Indicates if the <see cref="P:DoubleAgent.Control.CharacterFiles.FilePaths" /> property should include characters that are <em>not</em> designed to speak.</summary>
<value name="NonSpeakingCharacters">A <typename>boolean</typename> value that indicates if non-speaking characters should be included.</value>
<remarks>
<para>Unlike Microsoft Agent, Double Agents supports the <see cref="M:DoubleAgent.Control.Character.Speak(System.Object,System.Object)" /> method for characters that are not designed to speak. However, there won't be any mouth animations because they aren't included in the character design.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.CharacterFiles.FilePaths" />
</member>

<member name="P:DoubleAgent.Control.CharacterFiles.SearchPath">
<summary> Identifies the <em>actual</em> search path used to fill the <see cref="P:DoubleAgent.Control.CharacterFiles.FilePaths" /> property. Unless you have special requirements, this is usually the same as the <see cref="P:DoubleAgent.Control.CharacterFiles.DefaultSearchPath" /> property.</summary>
<value name="SearchPath">A <typename>string</typename> value that identifies one or more <glossary>UNC</glossary> paths, separated by semicolons.</value>
<remarks>
<para>When this property is set to an <keyword>empty string</keyword>, it returns the <see cref="P:DoubleAgent.Control.CharacterFiles.DefaultSearchPath" />.
</para>
<para>Normally, you would leave this property alone and allow the <see cref="P:DoubleAgent.Control.CharacterFiles.DefaultSearchPath" /> to be used. You would only set this property if you wanted to search for character files in non-default locations.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.CharacterFiles.DefaultSearchPath" />
<seealso cref="P:DoubleAgent.Control.CharacterFiles.FilePaths" />
</member>

<member name="P:DoubleAgent.Control.CharacterFiles.SpeakingCharacters">
<summary> Indicates if the <see cref="P:DoubleAgent.Control.CharacterFiles.FilePaths" /> property should include characters that are designed to speak.</summary>
<value name="SpeakingCharacters">A <typename>boolean</typename> value that indicates if speaking characters should be included.</value>
<seealso cref="P:DoubleAgent.Control.CharacterFiles.FilePaths" />
</member>

<member name="P:DoubleAgent.Control.CharacterFiles.VerifyVersion">
<summary> Indicates if the the <see cref="P:DoubleAgent.Control.CharacterFiles.FilePaths" /> property should be limited to version 2.x characters.</summary>
<value name="VerifyVersion">A <typename>boolean</typename> value that indicates if the character files' version should be verified.</value>
<remarks>
<para>Double Agent can only use version 2.x characters.
</para>
<note>Setting the <see cref="P:DoubleAgent.Control.CharacterFiles.SpeakingCharacters" /> or <see cref="P:DoubleAgent.Control.CharacterFiles.NonSpeakingCharacters" /> filters will automatically set this property to <keyword>True</keyword>.</note>
</remarks>
<seealso cref="P:DoubleAgent.Control.CharacterFiles.FilePaths" />
</member>

<member name="T:DoubleAgent.Control.CharacterFiles">
<summary>
<para>The <self>CharacterFiles Object</self> provides information that allows you to locate locally installed character definition files. It includes a number of filtering properties that specify where to look for character files, and what kind of files to find. The results are returned in its <see cref="P:DoubleAgent.Control.CharacterFiles.FilePaths" /> property.
</para>
</summary>
<remarks>
<para>This object can be accessed using the <see class="" cref="T:DoubleAgent.Control.Control" /> Object's <see class="" cref="P:DoubleAgent.Control.Control.CharacterFiles" /> property.
</para>
</remarks>
</member>

<member name="M:DoubleAgent.Control.SREngine.GetVersion(System.Int16&amp;,System.Int16&amp;)">
<summary> Returns the speech recognition engine's version.</summary>
<param name="MajorVersion">A <typename>numeric</typename> values that identifies the engine's major version (always 5 at this time).</param>
<param name="MinorVersion">A <typename>numeric</typename> values that identifies the engine's minor version (always 0 at this time).</param>
</member>

<member name="P:DoubleAgent.Control.SREngine.DisplayName">
<summary> Returns the speech recognition engine's human-readable name.</summary>
<value name="DisplayName">A <typename>string</typename> value gives the engine's name in a form suitable for the user.</value>
</member>

<member name="P:DoubleAgent.Control.SREngine.LanguageID">
<summary> Returns the speech recognition engine's primary language identifier.</summary>
<value name="LanguageID">A <typename>numeric</typename> value that identifies the primary language supported by the engine.</value>
</member>

<member name="P:DoubleAgent.Control.SREngine.LanguageIDs">
<summary> Returns the speech recognition engine's supported language identifiers.</summary>
<value name="LanguageIDs">An array of <typename>numeric</typename> values that identify <em>all</em> languages supported by the engine.</value>
</member>

<member name="P:DoubleAgent.Control.SREngine.LanguageName(System.Boolean)">
<summary> Returns the speech recognition engine's human-readable primary language name.</summary>
<value name="LanguageName">A <typename>string</typename> value that identifies the engine's primary language in a form suitable for the user.</value>
<param name="EnglishName">An optional <typename>boolean</typename> value that specifies if the language name should be in English, or in the user's language. The default value is <keyword>True</keyword>.</param>
</member>

<member name="P:DoubleAgent.Control.SREngine.LanguageNames(System.Boolean)">
<summary> Returns the speech recognition engine's human-readable supported language names.</summary>
<value name="LanguageNames">An array of <typename>string</typename> values that identify <em>all</em> of the engine's supported languages in a form suitable for the user.</value>
<param name="EnglishNames">An optional <typename>boolean</typename> value that specifies if the language names should be in English, or in the user's language. The default value is <keyword>True</keyword>.</param>
</member>

<member name="P:DoubleAgent.Control.SREngine.Manufacturer">
<summary> Returns the speech recognition engine's manufacturer's name.</summary>
<value name="Manufacturer">A <typename>string</typename> value that supplies the name of the engine's manufacturer.</value>
<remarks>
<para>Some speech recognition engines may not supply this property.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.SREngine.SRModeID">
<summary> Returns the unique identifier used to select this speech recognition engine.</summary>
<value name="SRModeID">A <typename>string</typename> value that uniquely identifies the speech recognition engine.</value>
<remarks>
<para>This property corresponds to the <see cref="T:DoubleAgent.Control.Character" />.<see cref="P:DoubleAgent.Control.Character.SRModeID" /> property. To use <em>this</em> <see cref="T:DoubleAgent.Control.SREngine" /> Object, set the character's <see cref="P:DoubleAgent.Control.Character.SRModeID" /> property to <em>this</em> value.
</para>
</remarks>
</member>

<member name="T:DoubleAgent.Control.SREngine">
<summary>
<para>The <self>SREngine Object</self> provides information about an installed speech recognition engine. You can use it to help choose a character's speech recognition engine.
</para>
</summary>
<seealso cref="M:DoubleAgent.Control.Control.GetCharacterSREngine(System.Object)" />
<seealso cref="P:DoubleAgent.Control.Character.SREngine" />
<seealso cref="T:DoubleAgent.Control.SREngines" />
</member>

<member name="P:DoubleAgent.Control.SREngines.Count">
<summary> Returns the count of <see cref="T:DoubleAgent.Control.SREngine" /> Objects in the <see cref="T:DoubleAgent.Control.SREngines" /> Collection.</summary>
<value name="Count">A <typename>numeric</typename> value that indicates the number of <see cref="T:DoubleAgent.Control.SREngine" /> Objects in the collection.</value>
</member>

<member name="P:DoubleAgent.Control.SREngines.Item(System.Object)">
<summary> Returns a <see cref="T:DoubleAgent.Control.SREngine" /> Object in the collection.</summary>
<param name="Index">A <typename>numeric</typename> value that specifies the zero-based index of the item to retrieve, <para />or a <typename>string</typename> value that specifies the <see cref="P:DoubleAgent.Control.SREngine.SRModeID" /> of the item to retrieve.</param>
<returns name="SREngine">The <see cref="T:DoubleAgent.Control.SREngine" /> Object identified by <paramref name="Index" />.</returns>
<remarks>
<para name="Ordering">When the <see cref="T:DoubleAgent.Control.SREngines" /> Collection is retrieved using <strong>matching criteria</strong> (for example using the <see cref="M:DoubleAgent.Control.Character.FindSREngines(System.Object)" /> method), it is an <em>ordered</em> collection. It's items are in order from best to worst match.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.SREngines.Count" />
</member>

<member name="T:DoubleAgent.Control.SREngines" kind="Collection">
<summary>
<para>The <self>SREngines Collection</self> contains a selected set of <see cref="T:DoubleAgent.Control.SREngine" /> Objects. You can use it to help choose a character's speech recognition engine.
</para>
</summary>
<remarks>
<para>The contents of the collection depends on how it was retrieved.
</para>
<para name="Ordering">When the <see cref="T:DoubleAgent.Control.SREngines" /> Collection is retrieved using <strong>matching criteria</strong> (for example using the <see cref="M:DoubleAgent.Control.Character.FindSREngines(System.Object)" /> method), it is an <em>ordered</em> collection. It's items are in order from best to worst match.
</para>
</remarks>
<seealso cref="M:DoubleAgent.Control.Control.FindCharacterSREngines(System.Object,System.Object)" />
<seealso cref="M:DoubleAgent.Control.Control.FindSREngines(System.Object)" />
<seealso cref="P:DoubleAgent.Control.Control.SREngines" />
<seealso cref="M:DoubleAgent.Control.Character.FindSREngines(System.Object)" />
</member>

<member name="M:DoubleAgent.Control.TTSEngine.GetVersion(System.Int16&amp;,System.Int16&amp;)">
<summary> Returns the text-to-speech engine's version.</summary>
<param name="MajorVersion">A <typename>numeric</typename> values that identifies the engine's major version (always 4 or 5 at this time).</param>
<param name="MinorVersion">A <typename>numeric</typename> values that identifies the engine's minor version (always 0 at this time).</param>
<remarks>
<para>You can use this property to determine if the text-to-speech engine is a SAPI4 or SAPI5 engine.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.TTSEngine.DisplayName">
<summary> Returns the text-to-speech engine's human-readable name.</summary>
<value name="DisplayName">A <typename>string</typename> value gives the engine's name in a form suitable for the user.</value>
</member>

<member name="P:DoubleAgent.Control.TTSEngine.Gender">
<summary> Returns the text-to-speech engine's gender.</summary>
<value name="Gender">A <typename>numeric</typename> value that identifies the speech engine's gender: 
<list type="table">
<item name="Female"><term xml:space="preserve">
1 = <keyword>Female</keyword>
</term>
<description>A female voice.</description>
</item>
<item name="Male"><term xml:space="preserve">
2 = <keyword>Male</keyword>
</term>
<description>A male voice.</description>
</item>
</list>
</value>
<seealso cref="T:DoubleAgent.Control.SpeechGenderType" />
</member>

<member name="P:DoubleAgent.Control.TTSEngine.LanguageID">
<summary> Returns the text-to-speech engine's language identifier.</summary>
<value name="LanguageID">A <typename>numeric</typename> value that identifies the language supported by the engine.</value>
</member>

<member name="P:DoubleAgent.Control.TTSEngine.LanguageName(System.Boolean)">
<summary> Returns the text-to-speech engine's human-readable language name.</summary>
<value name="LanguageName">A <typename>string</typename> value that identifies the engine's language in a form suitable for the user.</value>
<param name="EnglishName">An optional <typename>boolean</typename> value that specifies if the language name should be in English, or in the user's language. The default value is <keyword>True</keyword>.</param>
</member>

<member name="P:DoubleAgent.Control.TTSEngine.Manufacturer">
<summary> Returns the text-to-speech engine's manufacturer's name.</summary>
<value name="Manufacturer">A <typename>string</typename> value that supplies the name of the engine's manufacturer.</value>
<remarks>
<para>Some text-to-speech engine engines may not supply this property.
</para>
</remarks>
</member>

<member name="P:DoubleAgent.Control.TTSEngine.TTSModeID">
<summary> Returns the unique identifier used to select this text-to-speech engine.</summary>
<value name="TTSModeID">A <typename>string</typename> value that uniquely identifies a specific speech mode of a specific text-to-speech engine.</value>
<remarks>
<para>This property corresponds to the <see cref="T:DoubleAgent.Control.Character" />.<see cref="P:DoubleAgent.Control.Character.TTSModeID" /> property. To use <em>this</em> <see cref="T:DoubleAgent.Control.TTSEngine" /> Object, set the character's <see cref="P:DoubleAgent.Control.Character.TTSModeID" /> property to <em>this</em> value.
</para>
</remarks>
</member>

<member name="T:DoubleAgent.Control.TTSEngine">
<summary>
<para>The <self>TTSEngine Object</self> provides information about an installed text-to-speech engine. You can use it to help choose a character's text-to-speech engine.
</para>
</summary>
<remarks>
<para>Some text-to-speech engines support several <em>modes</em>, generally one for each supported language or language variant. In that case, this object represents only one <em>mode</em>, and there will one <self>TTSEngine Object</self> for each <em>mode</em> supported by the speech engine, each with a unique <see cref="P:DoubleAgent.Control.TTSEngine.TTSModeID" /> property.
</para>
</remarks>
<seealso cref="M:DoubleAgent.Control.Control.GetCharacterTTSEngine(System.Object)" />
<seealso cref="P:DoubleAgent.Control.Character.TTSEngine" />
<seealso cref="T:DoubleAgent.Control.TTSEngines" />
</member>

<member name="P:DoubleAgent.Control.TTSEngines.Count">
<summary> Returns the count of <see cref="T:DoubleAgent.Control.TTSEngine" /> Objects in the <see cref="T:DoubleAgent.Control.TTSEngines" /> Collection.</summary>
<value name="Count">A <typename>numeric</typename> value that indicates the number of <see cref="T:DoubleAgent.Control.TTSEngine" /> Objects in the collection.</value>
</member>

<member name="P:DoubleAgent.Control.TTSEngines.Item(System.Object)">
<summary> Returns a <see cref="T:DoubleAgent.Control.TTSEngine" /> Object in the collection.</summary>
<param name="Index">A <typename>numeric</typename> value that specifies the zero-based index of the item to retrieve, <para />or a <typename>string</typename> value that specifies the <see cref="P:DoubleAgent.Control.TTSEngine.TTSModeID" /> of the item to retrieve.</param>
<returns name="TTSEngine">The <see cref="T:DoubleAgent.Control.TTSEngine" /> Object identified by <paramref name="Index" />.</returns>
<remarks>
<para name="Ordering">When the <see cref="T:DoubleAgent.Control.TTSEngines" /> Collection is retrieved using <strong>matching criteria</strong> (for example using the <see cref="M:DoubleAgent.Control.Character.FindTTSEngines(System.Object)" /> method), it is an <em>ordered</em> collection. It's items are in order from best to worst match.
</para>
</remarks>
<seealso cref="P:DoubleAgent.Control.TTSEngines.Count" />
</member>

<member name="T:DoubleAgent.Control.TTSEngines" kind="Collection">
<summary>
<para>The <self>TTSEngines Collection</self> contains a selected set of <see cref="T:DoubleAgent.Control.TTSEngine" /> Objects. You can use it to help choose a character's text-to-speech engine.
</para>
</summary>
<remarks>
<para>The contents of the collection depends on how it was retrieved.
</para>
<para name="Ordering">When the <see cref="T:DoubleAgent.Control.TTSEngines" /> Collection is retrieved using <strong>matching criteria</strong> (for example using the <see cref="M:DoubleAgent.Control.Character.FindTTSEngines(System.Object)" /> method), it is an <em>ordered</em> collection. It's items are in order from best to worst match.
</para>
</remarks>
<seealso cref="M:DoubleAgent.Control.Control.FindCharacterTTSEngines(System.Object,System.Object)" />
<seealso cref="M:DoubleAgent.Control.Control.FindTTSEngines(System.Object,System.Object)" />
<seealso cref="P:DoubleAgent.Control.Control.TTSEngines" />
<seealso cref="M:DoubleAgent.Control.Character.FindTTSEngines(System.Object)" />
</member>

</members>
</doc>
