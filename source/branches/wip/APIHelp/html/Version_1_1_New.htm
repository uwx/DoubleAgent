<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
	<title>What's New for Version 1.1</title>
	<link rel="STYLESHEET" href="../css/dahelp.css">
</head>
<body>
	<table class="pagetable" cellspacing="0" cellpadding="0">
		<tr>
			<td class="runninghead">Double Agent API</td>
		</tr>
		<tr>
			<td class="pagehead">
				<h1>What's New for Version 1.1</h1>
			</td>
		</tr>
		<tr>
			<td class="page">
				<p>This is a summary of what has changed between version 1.0 and version 1.1 of Double Agent.</p>
				<dl>
					<dt>
						<h4><a name="UI"></a>The User Interface</h4>
					</dt>
					<dd>
						<p>A few changes have been made to the Double Agent user interface. Mostly, these changes are aimed at improving
							the quality of the visual presentation.</p>
						<ul>
							<li>Animations can be smoothed with a bicubic interpolation algorithm.</li>
							<li>The application has more control over the notification icon:
								<ul>
									<li>It can control if and when the notification icon is shown.</li>
									<li>It can set it&#39;s own notification icon tip text.</li>
									<li>Characters without pre-defined icons can have icons generated for them.</li>
									<li>Characters with pre-defined icons can also have icons generated for them. The pre-defined icons have
										a color depth of 4 bits (16 colors). The generated icons are higher quality.</li>
								</ul>
							</li>
							<li>The word balloon is now drawn with full antialiasing. It now looks smoother and more modern.</li>
							<li>The <em class="literal">Default Character Properties</em> window has been removed, and it&#39;s <em
								class="literal">Gallery</em> page added to the <em class="literal">Advanced Character Options</em> window.</li>
						</ul>
					</dd>
					<dt>
						<h4><a name="API"></a>The Programming Interfaces</h4>
					</dt>
					<dd>
						<p>A lot of changes have been made to the programming interfaces. These are aimed at supporting more programming
							languages and providing more flexibility. Developers can now choose whether to write to the <s>Server</s>
							or <s>Control</s> interfaces based on their application&#39;s requirements, not just which language
							they&#39;re using.</p>
						<ul>
							<li>Many of the differences between the <s>Server</s> and <s>Control</s> programming interfaces have been
								removed:
								<ul>
									<li>Some functionality was present in Server interfaces but not the Control interfaces. Both interfaces
										now include all functionality.</li>
									<li>A lot of functionality was implemented as properies in the Control interfaces and Get/Set methods in
										the Server interfaces. The Server interfaces have been changed to use properties.</li>
									<li>There were some naming differences (such as the Prepare method for the Server and the Get method for
										the Control). These differences have been resolved.</li>
								</ul>
							</li>
							<li>The <s>Control</s> interfaces still target programming languages that are limited to the OLE Automation
								data types (basically any data type that can be contained in a VARIANT).
								<ul>
									<li>Specifically, anywhere a bit-field is used (such as the Balloon.Style property), an alternative property
										is provided for each bit.</li>
									<li>Any non-OLE data types are passed as strings (for example, GUID data).</li>
									<li>Optional method parameters are always passed as VARIANT, in strict compliance with the OLE Automation
										standard.</li>
								</ul>
							</li>
							<li>The <s>Server</s> interfaces still target C/C++/C#, but are now useable with other languages as well
								(they always <i>did</i> support OLE Automation, mostly, and undocumented, but with a few deviations
								from the standard).
								<ul>
									<li>They now conform better to the OLE Automation standard. The IUnknown interface is no longer used.</li>
									<li>They still use a couple of Windows native data types (such as the GUID type).</li>
									<li>They <i>do not</i> provide alternatives to bit-fields, and they use the VARIANT type only where multiple
										data types are supported.</li>
								</ul>
							</li>
							<li>Numeric constants for codes and flags are now declared as enumerations.</li>
							<li>The <em class="keyword">AudioOutputProperties</em> and <em class="keyword">SpeechInputProperties</em>
								objects have been combined into a single <em class="keyword">Settings</em> object. It now includes <em>all</em>
								of the settings in the <em class="literal">Advanced Character Options</em> window.</li>
							<li>There are new classes that allow an application to discover what resources are available:
								<ul type="disc">
									<li>There&#39;s a new object for finding locally installed character files.</li>
									<li>There are new objects for determining which speech engines are available and matching them against a
										character&#39;s requirements.</li>
									<li>These objects include enough information to allow an application to effectively choose a speech engine,
										or present a choice to the user.</li>
								</ul>
							</li>
							<li>A lot of work has been done to support .NET languages. The <em class="glossary">Interop Assemblies</em>
								have been revamped:
								<ul type="disc">
									<li>They now use proper namespaces.</li>
									<li>They now use straightforward interface, class, and member names (without all the added prefixes).</li>
									<li>They now include a full <em class="glossary">RCW (Runtime Callable Wrapper)</em> for each class. This
										makes the classes indistinguishable from any other managed class and means that Double Agent is accessed
										through <em>classes</em> rather than <em>interfaces</em>, like any other managed assembly.</li>
									<li>Collection classes now implement <em class="keyword">System.Collections.Generic.IEnumerable&lt;T&gt;</em>
										instead of just <em class="keyword">System.Collections.IEnumerable</em>. The enumerations are now type-safe,
										and the enumerated objects are known to the debugger.</li>
									<li>They are now <em class="glossary"><em>Primary</em> Interop Assemblies</em>. This means they are strong-named
										and signed, suitable for installation in the <em class="glossary">Global Assembly Cache</em>.</li>
								</ul>
							</li>
						</ul>
						<p>Of course, the programming interfaces are fully backward-compatible with Double Agent 1.0, and still
							binary-compatible with Microsoft<sup>®</sup> Agent.</p>
					</dd>
					<dt>
						<h4><a name="Refactoring"></a>Refactoring</h4>
					</dt>
					<dd>
						<p>One of the biggest changes in Double Agent 1.1 is a refactoring of the <s>Server</s> and <s>Control</s>
							components. Changes to the programming interfaces give developers a better choice of which component
							to use. Changes to the <s>Control</s> make it a first-class component rather than just a portal to the
							<s>Server</s>.</p>
						<ul>
							<li>The Double Agent <s>Control</s> can now operate in three different <a href="..\Programming\Ctl_Programming_Modes.htm">
							modes</a>:
								<ul>
									<li>It can act as a portal to the <s>Server</s>, as in previous versions. </li>
									<li>It can now run <s>stand-alone</s>, providing full functionality without any connection to the Server.</li>
									<li>It can now work as a <b>visible</b> ActiveX<sup>®</sup> control, with it&#39;s character contained within
										the control window.</li>
								</ul>
							</li>
							<li>The <a href="..\Programming\Ctl_Programming_Modes.htm">mode</a> a developer chooses depends on the application&#39;s
								requirements:
								<ul>
									<li>In <em class="glossary">connected</em> mode, a character belongs to the <s>Server</s> and is shared
										among all applications using it. A particular character will only have a single instance, with multiple
										client applications.</li>
									<li>In <em class="glossary">stand-alone</em> mode, a character belongs to the <s>Control</s> (and thus the
										application that created the Control). Each application that uses the Control in <em class="glossary">stand-alone</em>
										mode has its own <i>private</i> instance of a charcter. If another application is using the same character
										at the same time, there will be two copies of the character on the screen and two notification icons,
										one for each application.</li>
									<li>In <em class="glossary">contained</em> mode (which is also stand-alone), a character belongs to the
										<s>Control</s>. However, since it&#39;s limited to the Control&#39;s child window, it is visibly clear
										that it belongs to that application. Also, in <em class="glossary">contained</em> mode a character doesn&#39;t
										have a notification icon.</li>
								</ul>
							</li>
						</ul>
						<p><em class="glossary">Stand-alone</em> mode is tempting for developers because they no longer have to
							worry about a character being a shared resource. Also, it doesn&#39;t require a connection to the server,
							so there is no dependency on an external process. In fact, in <em class="glossary">stand-alone</em>
							mode the server doesn&#39;t even have to be installed.</p>
						<p>However, Microsoft<sup>®</sup> Agent was implemented as a server for a very good reason. Having more
							than one copy of the same character on the screen at the same time can confuse the user. The character
							is a <em class="glossary">floating</em> window, on top of all other windows, and does not obviously
							belong to <i>any</i> application. Thus the decision to make it shared by <i>all</i> applications.</p>
						<p>When the character is <em class="glossary">contained</em> rather than <em class="glossary">floating</em>,
							it becomes obvious to which application it belongs.</p>
					</dd>
				</dl>
			</td>
		</tr>
	</table>
</body>
</html>
