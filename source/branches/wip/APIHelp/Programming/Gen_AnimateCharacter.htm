<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
	<title>Animating a Character</title>
	<link rel="STYLESHEET" href="../css/dahelp.css">
</head>
<body>
	<table class="pagetable" cellspacing="0" cellpadding="0">
		<tr>
			<td class="runninghead">Double&nbsp;Agent&nbsp;API</td>
		</tr>
		<tr>
			<td class="pagehead">
				<h3>Animating a Character</h3>
			</td>
		</tr>
		<tr>
			<td class="page">
				<p>Once a character is loaded, you can use several of Double Agent's methods for animating the character.
					The first one you use is typically the <a href="../Generated/Control_Character_Show.htm">Show</a> method.
					<a href="../Generated/Control_Character_Show.htm">Show</a> makes the character's image visible and plays
					the animation assigned to the character's <em>Showing</em> state.</p>
				<p>Once the character is visible, you can use the <a href="../Generated/Control_Character_Play.htm">
				Play</a> method, specifying the name of an animation, to play that animation. Animation names are specific
					to a character definition. As an animation plays, it's frames are layered over the desktop window. This
					results in a movable graphic image, or <em>sprite</em>, displayed on top of the desktop and all application
					windows.</p>
				<p>If the character's file is stored locally, you can simply call the <a href="../Generated/Control_Character_Play.htm">
				Play</a> method. In other cases, such as when you've loaded an .ACF character from an <em class="glossary">
					HTTP</em> server, you should use the Prepare method to first retrieve the animation data. This will
					cause Double Agent to request the animation file from the server cache it on the local machine.</p>
				<p>The <a href="../Generated/Control_Character_Speak.htm">Speak</a> method lets you program the character
					to speak, automatically lip-syncing the output. Further details are covered in the <a href="Gen_Output.htm">
					Output</a> section of this document.</p>
				<p>You can use the <a href="../Generated/Control_Character_MoveTo.htm">MoveTo</a> method to position the
					character at a new location. When you call the <a href="../Generated/Control_Character_MoveTo.htm">MoveTo</a>
					method, Double Agent automatically plays the appropriate animation based on the character's current
					location, then moves the character's image. Similarly, when you call <a href="../Generated/Control_Character_GestureAt.htm">
					GestureAt</a>, Double Agent plays the appropriate gesturing animation based on the character's location
					and the location specified in the call.</p>
				<p>To hide the character, call the <a href="../Generated/Control_Character_Hide.htm">Hide</a> method. This
					automatically plays the animation associated with the character's <em>Hiding</em> state, then hides
					the character's image. However, you can also show or hide a character by setting the character's <a href="../Generated/Control_Character_Visible.htm">
					Visible</a> property.</p>
				<p>When a character is hidden, the server does not play animations; however, it still queues and processes
					the animation request and passes a request status back to the client. In the hidden state, the character
					cannot become <a href="Gen_Input.htm#Active">input-active</a>. However, if the user speaks the name
					of the character (when speech input is enabled), the server automatically shows the character.</p>
				<h4>Requests and Synchronization</h4>
				<p>Double Agent processes all animation calls, or <em>requests</em>, asynchronously. This enables your application's
					code to continue handling other events while the request is being processed. For example, calls to the
					<a href="../Generated/Control_Character_Play.htm">Play</a> method place the animation in a queue for
					the character so that the animations can be played sequentially. However, this means you cannot assume
					that a call to other functions will necessarily execute after an animation it follows in your code.
					For example, typically, a statement following a call to <a href="../Generated/Control_Character_Play.htm">
					Play</a> or <a href="../Generated/Control_Character_MoveTo.htm">MoveTo</a> will execute before the animation
					finishes.</p>
				<p>You can synchronize your code with animations in a character's queue by creating an object reference
					to the animation request, and, when the animation starts or completes, monitoring the <a href="../Generated/Control_Event_RequestStart.htm">
					Request</a> events that the control and server use to notify the character's clients. For example, if
					you want a message box to appear when the character finishes an animation, you can put the message box
					call in your <a href="../Generated/Control_Event_RequestComplete.htm">RequestComplete</a> event handling
					routine, checking for the particular request ID.</p>
				<p>When your client application loads multiple characters at the same time, Double Agent's animation services
					allow you to animate the characters independently, or use the <a href="../Generated/Control_Character_Wait.htm">
					Wait</a>, <a href="../Generated/Control_Character_Interrupt.htm">Interrupt</a>, and <a href="../Generated/Control_Character_Stop.htm">
					Stop</a> methods to synchronize their animations.</p>
				<h4>States</h4>
				<p>Double Agent also plays other animations automatically. For example, if the character's state hasn't
					changed for several seconds, Double Agent begins playing the character's <em>Idling</em> animations.
					Similarly, when speech input is enabled, Double Agent plays the character's <em>Listening</em> animations
					and then its <em>Hearing</em> animations. There server-managed animations are called <i>states</i>,
					and are defined when a character is created.</p>
			</td>
		</tr>
	</table>
</body>
</html>
