<?xml version="1.0"?>
<!DOCTYPE doc [
	<!ENTITY dans "&amp;dans;">
	<!ENTITY darootobj "&amp;darootobj;">
	<!ENTITY hexprefix "&amp;hexprefix;">
	<!ENTITY dapsref "&amp;dapsref;">
	<!ENTITY dapsname "&amp;dapsname;">
	<!ENTITY dawbref "&amp;dawbref;">
	<!ENTITY dawbname "&amp;dawbname;">
	<!ENTITY daniref "&amp;daniref;">
	<!ENTITY daniname "&amp;daniname;">
]>
<doc>
	<params>
		<param name="Button">
			A <typename>numeric</typename> value that identifies which mouse button was pressed and released to cause the event.
			The <paramref name="Button"/> parameter is a bit field with bits corresponding to the
			<filename>left</filename> button (bit 0) (&hexprefix;0001),
			<filename>right</filename> button (bit 1) (&hexprefix;0002), and
			<filename>middle</filename> button (bit 2) (&hexprefix;0004).
			Only one of the bits is set, indicating the mouse button that caused the event. If the character has a
			<a class="see" href="&daniref;">&daniname;</a>, and bit 13 (&hexprefix;1000) is also set, the click occurred on the
			<a class="see" href="&daniref;">&daniname;</a>.
		</param>
		<param name="Shift">
			A <typename>numeric</typename> value that corresponds to the state of the <filename>Shift</filename>, <filename>Ctrl</filename>, and <filename>Alt</filename> keys
			when the mouse button was pressed or released.
			The <paramref name="Shift"/> parameter is a bit field with bits corresponding to
			the <filename>Shift</filename> key (bit 0) (&hexprefix;0001),
			the <filename>Ctrl</filename> key (bit 1) (&hexprefix;0002), and
			the <filename>Alt</filename> key (bit 2) (&hexprefix;0004).
			A bit is set if the key is down. Some, all, or none of the bits can be set, indicating that some, all, or none of the keys are down.
			For example, if both <filename>Ctrl</filename> and <filename>Alt</filename> were down, the  value of <paramref name="Shift"/> would be 6.
		</param>
		<param name="Keys">
			A <typename>numeric</typename> value that identifies which mouse button caused the event, and which modifier keys were down at the time.
			The <paramref name="Keys"/> parameter is a bit field with bits as follows:
			<list type="table">
				<item>
					<term>bit 0 (&hexprefix;0001)</term>
					<description>
						The <filename>left</filename> button
					</description>
				</item>
				<item>
					<term>bit 1 (&hexprefix;0002)</term>
					<description>
						The <filename>right</filename> button
					</description>
				</item>
				<item>
					<term>bit 2 (&hexprefix;0004)</term>
					<description>
						the <filename>Shift</filename> key is down
					</description>
				</item>
				<item>
					<term>bit 3 (&hexprefix;0004)</term>
					<description>
						the <filename>Ctrl</filename> key is down
					</description>
				</item>
				<item>
					<term>bit 4 (&hexprefix;0010)</term>
					<description>
						The <filename>middle</filename> button
					</description>
				</item>
				<item>
					<term>bit 5 (&hexprefix;0020)</term>
					<description>
						the <filename>Alt</filename> key is down
					</description>
				</item>
				<item>
					<term>bit 13 (&hexprefix;1000)</term>
					<description>
						the click occurred on the  <a class="see" href="&daniref;">&daniname;</a>
					</description>
				</item>
			</list>
			Only one of the button bits is set, indicating the mouse button that caused the event.
			Some, all, or none of the modifier bits can be set, indicating that some, all, or none of the modifier keys are down.
		</param>
		<param name="X">
			The current horizontal location of the mouse pointer, in pixels, relative to the left side of the screen.
		</param>
		<param name="Y">
			The current vertical location of the mouse pointer, in pixels, relative to the top of the screen.
		</param>
		<param name="RequestID">
			An optional unique <typename>numeric</typename> value your application can use to track the method's status.
		</param>
		<param name="CharacterID">
			The unique <typename>numeric</typename> identifier assigned when the character was loaded.
		</param>
		<param name="Sender">
			The source of the event.
		</param>
	</params>
	<remarks>
		<para name="Provider">
			For more information on specifying character file names, see the <see cref="M:&dans;.Characters.Load"/> method.
		</para>
		<note name="Provider">
			This method does not support the HTTP protocol for character files.
		</note>
		<note name="FormattedText">
			The <paramref name="FormattedText"/> parameter may not contain the same <glossary>reference pointer</glossary> as the <paramref name="FormattedText"/> parameter passed to the <see cref="M:&dans;.Character.SpeakFormatted"/> method, but the underlying data is the same.
		</note>
	</remarks>
	<properties>
		<note name="ThisClientOnly">This property applies only to your client application's use of the character; the setting does not affect other clients of the character or other characters of your client application.</note>
		<note name="AllClients">This property applies to all clients of the character.</note>
		<note name="UsesSapi">Double Agent's speech engine requirements are based on the Microsoft Speech API. Engines supporting Microsoft Agent's SAPI requirements can be installed and used with Double Agent.</note>
		<note name="NoSoundSupport">This property also returns the empty string if you have no compatible sound support installed on your system.</note>
		<note name="SlowSoundLoad">Querying this property does not typically return an error. However, if the speech engine takes an abnormally long time to load, you may get an error indicating that the query timed out.</note>
		<note name="ReadOnlySetting">The property setting affects all characters and is read-only; only the user can set this property value.</note>
		<note name="StandAloneOnly">
			This property only applies to <a class="see" href="..\Programming\Ctl_Programming_Modes.htm">stand-alone</a> mode.
		</note>
		<note name="ContainedOnly">
			This property is relevant only when the control is visible (i.e. when it's used in <a class="see" href="..\Programming\Ctl_Programming_Modes.htm">contained</a> mode).
		</note>
		<para name="Color">
			The valid range for a normal RGB color is 0 to 16,777,215 (&hexprefix;FFFFFF). The high byte of a number in this range equals 0; the lower 3 bytes, from least to most significant byte, determine the amount of red, green, and blue, respectively. The red, green, and blue components are each represented by a number between 0 and 255 (&hexprefix;FF).
		</para>
		<para name="OleColor">
			If the high byte of an OLECOLOR is &hexprefix;80, the lower 3 bytes contain a <glossary>system color index</glossary>.
		</para>
		<para name="DefaultBalloonFont">
			The default values for the font of a character's <a class="see" href="&dawbref;">&dawbname;</a> are set in the Microsoft Agent Character Editor. In addition, the user can override font settings for all characters in the <a class="see" href="&dapsref;#Output">&dapsname;</a> window.
		</para>
		<details name="VoiceCaption">
			<h4 class="details">Format</h4>
			<para>
				The string expression you supply can include square bracket characters ([ ]) to indicate optional words
				and vertical bar characters, (|) to indicate alternative strings. Alternates must be enclosed in parentheses.
				For example, "(hello [there] | hi)" tells the speech engine to accept "hello," "hello there," or "hi"
				for the command. Remember to include appropriate spaces between the text that's in brackets or parentheses
				and the text that's not in brackets or parentheses. You can use the star (*) operator to specify zero
				or more instances of the words included in the group or the plus (+) operator to specify one or more
				instances.
			</para>
			<para>
				For example, the following results in a grammar that supports "try this", "please try this",
				"please please try this", with unlimited iterations of "please":
			</para>
			<example>
				<code xml:space="preserve">"please* try this"</code>
			</example>
			<para>
				The following grammar format excludes "try this" because the + operator defines at least one instance
				of "please":
			</para>
			<example>
				<code xml:space="preserve">"please+ try this"</code>
			</example>
			<para>
				The repetition operators follow normal rules of precedence and apply to the immediately preceding text
				item. For example, the following grammar results in "New York" and "New York York", but not "New York
				New York":
			</para>
			<example>
				<code xml:space="preserve">"New York+"</code>
			</example>
			<para>
				Therefore, you typically want to use these operators with the grouping characters. For example, the following
				grammar includes both "New York" and "New York New York":
			</para>
			<example>
				<code xml:space="preserve">"(New York)+"</code>
			</example>
			<para>
				Repetition operators are useful when you want to compose a grammar that includes a repeated sequence
				such as a phone number or specification of a list of items:
			</para>
			<example>
				<code xml:space="preserve">"call (one|two|three|four|five|six|seven|eight|nine|zero|oh)*"
"I'd like (cheese|pepperoni|pineapple|canadian bacon|mushrooms|and)+"</code>
			</example>
			<para>
				Although the operators can also be used with the optional square-brackets grouping character, doing so
				may reduce the efficiency of Agent's processing of the grammar.
			</para>
			<para>
				You can also use an ellipsis (…) to support <em>word spotting</em>, that is, telling the speech recognition
				engine to ignore words spoken in this position in the phrase (sometimes called <em>garbage</em> words).
				When you use ellipses, the speech engine recognizes only specific words in the string regardless of
				when spoken with adjacent words or phrases. For example, if you set this property to "[…] check mail
				[…]", the speech recognition engine will match phrases like "please check mail" or "check mail please"
				to this command. Ellipses can be used anywhere within a string. However, be careful using this technique
				as voice settings with ellipses may increase the potential of unwanted matches.
			</para>
			<h4 class="details">Usage</h4>
			<para>
				When defining the word grammar for your command, include at least one word that is required; that is,
				avoid supplying only optional words. In addition, make sure that the word includes only pronounceable
				words and letters. For numbers, it is better to spell out the word than use an ambiguous representation.
				For example, "345" is not a good grammar form. Similarly, instead of "IEEE", use "I triple E". Also,
				omit any punctuation or symbols. For example, instead of "the #1 $10 pizza!", use "the number one ten
				dollar pizza". Including non-pronounceable characters or symbols for one command may cause the speech
				engine to fail to compile the grammar for all your commands. Finally, make your voice parameter as distinct
				as reasonably possible from other voice commands you define. The greater the similarity between the
				voice grammar for commands, the more likely the speech engine will make a recognition error. You can
				also use the confidence scores to better distinguish between two commands that may have similar or similar-sounding
				voice grammar.
			</para>
			<para>
				You can include in your grammar words in the form of "<em>text\pronunciation</em>", where <em>text</em> is
				the text displayed and <em>pronunciation</em> is text that clarifies the pronunciation. For example, the
				grammar, "1st\first", would be recognized when the user says "first", but the <see cref="E:&darootobj;.Command"/> event will
				return the text, "1st\first". You can also use IPA (International Phonetic Alphabet) to specify a pronunciation
				by beginning the pronunciation with a pound sign character ("#"), then the text representing the IPA
				pronunciation.
			</para>
			<para>
				For Japanese speech recognition engines, you can define grammar in the form "<em>kana\kanji</em>", reducing
				the alternative pronunciations and increasing the accuracy (the ordering is reversed for backward compatibility).
				This is particularly important for the pronunciation of proper names in Kanji. However, you can just
				pass in Kanji without the Kana, in which case the engine should listen for all acceptable pronunciations
				for the Kanji. You can also pass in just Kana.
			</para>
			<para>
				Also note that for languages such as Japanese, Chinese, and Thai, that do not use space characters to
				designate word breaks, insert a Unicode zero-width space character (0x200B) to indicate logical word
				breaks.
			</para>
			<note>
				Except for errors using the grouping or repetition formatting characters, Double Agent will not report errors in your grammar, unless the engine itself reports the error. If you pass text in your grammar that the engine fails to compile, but the engine does not handle and return as an error, Double Agent cannot report the error. Therefore, the client application must be carefully define grammar for the <keyword>VoiceGrammar</keyword> property.
			</note>
			<note>
				The grammar features available may depend on the speech recognition engine. You may want to check with the engine's vendor to determine what grammar options are supported. Use the <see cref="P:&dans;.Character.SRModeID"/> property to use a specific engine.
			</note>
			<note>The use of this property depends on the state of Double Agent's speech recognition properties. For example, if speech recognition is disabled or not installed, this property has no effect.</note>
		</details>
	</properties>
</doc>
