<?xml version="1.0"?>
<doc>
	<assembly>
		<name>Double Agent Control</name>
	</assembly>
	<members>

		<member name="T:DoubleAgent.Control.Control">
			<summary>
				<para>The Double Agent control has its own methods, properties and events, and provides access to most other objects supported by Double Agent.</para>
			</summary>
			<syntax>
				<list type="bullet">
					<item>
						<term>
							The <c>Control</c> object has the following <c>methods</c>:
						</term>
						<description>
							<see cref="M:DoubleAgent.Control.Control.FindCharacterSREngines"/>,
							<see cref="M:DoubleAgent.Control.Control.FindCharacterTTSEngines"/>,
							<see cref="M:DoubleAgent.Control.Control.FindSREngines"/>,
							<see cref="M:DoubleAgent.Control.Control.FindTTSEngines"/>,
							<see cref="M:DoubleAgent.Control.Control.GetCharacterSREngine"/>,
							<see cref="M:DoubleAgent.Control.Control.GetCharacterTTSEngine"/>,
							<see cref="M:DoubleAgent.Control.Control.ShowDefaultCharacterProperties"/>
						</description>
					</item>
					<item>
						<term>
							The <c>Control</c> object has the following <c>properties</c>:
						</term>
						<description>
							<see cref="P:DoubleAgent.Control.Control.AutoConnect"/>,
							<see cref="P:DoubleAgent.Control.Control.AutoSize"/>,
							<see cref="P:DoubleAgent.Control.Control.CharacterStyle"/>,
							<see cref="P:DoubleAgent.Control.Control.Connected"/>,
							<see cref="P:DoubleAgent.Control.Control.ControlCharacter"/>,
							<see cref="P:DoubleAgent.Control.Control.RaiseRequestErrors"/>
						</description>
						<description>
							It also includes properties to retrieve other Double Agent objects:
						</description>
						<description>
							<see cref="P:DoubleAgent.Control.Control.CharacterFiles"/>,
							<see cref="P:DoubleAgent.Control.Control.Characters"/>,
							<see cref="P:DoubleAgent.Control.Control.CommandsWindow"/>,
							<see cref="P:DoubleAgent.Control.Control.PropertySheet"/>,
							<see cref="P:DoubleAgent.Control.Control.Settings"/>,
							<see cref="P:DoubleAgent.Control.Control.SREngines"/>,
							<see cref="P:DoubleAgent.Control.Control.TTSEngines"/>,
						</description>
					</item>
					<item>
						<term>
							The <c>Control</c> object signals several <c>events</c> that enable your client application to track its state:
						</term>
						<description>
							<see cref="E:DoubleAgent.Control.Control.ActivateInput"/>,
							<see cref="E:DoubleAgent.Control.Control.ActiveClientChange"/>,
							<see cref="E:DoubleAgent.Control.Control.AgentPropertyChange"/>,
							<see cref="E:DoubleAgent.Control.Control.BalloonHide"/>,
							<see cref="E:DoubleAgent.Control.Control.BalloonShow"/>,
							<see cref="E:DoubleAgent.Control.Control.Bookmark"/>,
							<see cref="E:DoubleAgent.Control.Control.Click"/>,
							<see cref="E:DoubleAgent.Control.Control.Command"/>,
							<see cref="E:DoubleAgent.Control.Control.DblClick"/>,
							<see cref="E:DoubleAgent.Control.Control.DeactivateInput"/>,
							<see cref="E:DoubleAgent.Control.Control.DefaultCharacterChange"/>,
							<see cref="E:DoubleAgent.Control.Control.DragComplete"/>,
							<see cref="E:DoubleAgent.Control.Control.DragStart"/>,
							<see cref="E:DoubleAgent.Control.Control.Hide"/>,
							<see cref="E:DoubleAgent.Control.Control.IdleComplete"/>,
							<see cref="E:DoubleAgent.Control.Control.IdleStart"/>,
							<see cref="E:DoubleAgent.Control.Control.ListenComplete"/>,
							<see cref="E:DoubleAgent.Control.Control.ListenStart"/>,
							<see cref="E:DoubleAgent.Control.Control.Move"/>,
							<see cref="E:DoubleAgent.Control.Control.RequestComplete"/>,
							<see cref="E:DoubleAgent.Control.Control.RequestStart"/>,
							<see cref="E:DoubleAgent.Control.Control.Show"/>,
							<see cref="E:DoubleAgent.Control.Control.Size"/>
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					Some programming environments may assign additional design-time or run-time properties. For example, Visual Basic adds a <a href="../Programming/Ctl_Control_Name.htm">Name</a> property that identifies the control, and also <c>Left</c> and <c>Top</c> properties that define the location of the control on a form, even if the control doesn't appear on the form's page at run time.
				</para>
				<note>
					Double Agent does not support the <c>Restart</c>, <c>Shutdown</c> and <c>HelpComplete</c> events.
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Control.FindCharacterSREngines">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Control.FindCharacterTTSEngines">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Control.FindSREngines">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Control.FindTTSEngines">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Control.GetCharacterSREngine">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Control.GetCharacterTTSEngine">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Control.ShowDefaultCharacterProperties">
			<summary>
				<para>
					Shows the <em>Gallery</em> page of the Double Agent <see cref="T:DoubleAgent.Control.PropertySheet" text="Property Sheet"/>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<em>control</em><c>.ShowDefaultCharacterProperties</c> (<em>X</em>,<em>Y</em>)
</cpp>
<csharp>
<em>control</em><c>.ShowDefaultCharacterProperties</c> (<em>X</em>,<em>Y</em>)
</csharp>
<vbnet>
<em>control</em><c>.ShowDefaultCharacterProperties</c> (<em>X</em>,<em>Y</em>)
</vbnet>
<vb>
<em>control</em><c>.ShowDefaultCharacterProperties</c>[ <em>X</em>,<em>Y</em>]
</vb>
</syntax>
			<param name="X">
				The horizontal position, in pixels, of the <see cref="P:DoubleAgent.Control.PropertySheet.Left" text="Property Sheet"/> window.  This parameter is optional.  For programming languages that don't support optional parameters, a negative value will be ignored.
			</param>
			<param name="Y">
				The vertical position, in pixels, of the <see cref="P:DoubleAgent.Control.PropertySheet.Top" text="Property Sheet"/> window.  This parameter is optional.  For programming languages that don't support optional parameters, a negative value will be ignored.
			</param>
			<remarks>
				<para>
					This method obsolete, but is still supported for backward compatibility.  Calling it shows the Double Agent <see cref="T:DoubleAgent.Control.PropertySheet" text="Property Sheet"/>.  New applications should use the <see cref="T:DoubleAgent.Control.PropertySheet"></see> object instead.
				</para>
				<para>If you don't specify the X and Y coordinates (or use a negative value for programming languages that don't support optional parameters), the window appears at the last location it was displayed.</para>
			</remarks>
			<seealso cref="T:DoubleAgent.Control.PropertySheet" suffix="Object"/>
			<seealso cref="P:DoubleAgent.Control.PropertySheet.Page" suffix="Property"/>
			<seealso cref="E:DoubleAgent.Control.Control.DefaultCharacterChange" suffix="Event"/>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.AudioOutput">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This object has been replaced by the <see cref="T:DoubleAgent.Control.Settings"/> object, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.AutoConnect">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.AutoSize">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.BackColor">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.BorderColor">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.BorderStyle">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.BorderVisible">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.BorderWidth">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.CharacterFiles">
			<summary>
				<para>
					Retrieves the control's <see cref="T:DoubleAgent.Control.CharacterFiles" text="CharacterFiles Object"/>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>control</em>-&gt;<c>get_CharacterFiles</c> (&amp;<em>CharacterFiles</em>)</para>
</cpp>
<csharp>
<para>[<em>CharacterFiles</em> = ]<em>control</em><c>.CharacterFiles</c></para>
</csharp>
<vbnet>
<para>[<em>CharacterFiles</em> = ]<em>control</em><c>.CharacterFiles</c></para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>CharacterFiles</em> = ]<em>control</em><c>.CharacterFiles</c></para>
</vb>
</syntax>
			<returns name="CharacterFiles">
				The control's <see cref="T:DoubleAgent.Control.CharacterFiles" text="CharacterFiles Object"/>.
			</returns>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.Characters">
			<summary>
				<para>
					Retrieves the control's <see cref="T:DoubleAgent.Control.Characters" text="Characters Collection"/>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>control</em>-&gt;<c>get_Characters</c> (&amp;<em>Characters</em>)</para>
</cpp>
<csharp>
<para>[<em>Characters</em> = ]<em>control</em><c>.Characters</c></para>
</csharp>
<vbnet>
<para>[<em>Characters</em> = ]<em>control</em><c>.Characters</c></para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Characters</em> = ]<em>control</em><c>.Characters</c></para>
</vb>
</syntax>
			<returns name="Characters">
				The control's <see cref="T:DoubleAgent.Control.Characters" text="Characters Collection"/>.
			</returns>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.CharacterStyle">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.CommandsWindow">
			<summary>
				<para>
					Retrieves the control's <see cref="T:DoubleAgent.Control.CommandsWindow" text="CommandsWindow Object"/>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>control</em>-&gt;<c>get_CommandsWindow</c> (&amp;<em>CommandsWindow</em>)</para>
</cpp>
<csharp>
<para>[<em>CommandsWindow</em> = ]<em>control</em><c>.CommandsWindow</c></para>
</csharp>
<vbnet>
<para>[<em>CommandsWindow</em> = ]<em>control</em><c>.CommandsWindow</c></para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>CommandsWindow</em> = ]<em>control</em><c>.CommandsWindow</c></para>
</vb>
</syntax>
			<returns name="CommandsWindow">
				The control's <see cref="T:DoubleAgent.Control.CommandsWindow" text="CommandsWindow Object"/>.
			</returns>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.Connected">
			<summary>
				<para>Returns or sets whether the control is currently connected to the Double Agent server.</para>
				<para>The Double Agent control will work whether or not it's connected to the server, but there are are special considerations in each case.  See...</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>control</em>-&gt;<c>get_Connected</c> (&amp;<em>Connected</em>)</para>
<para><em>control</em>-&gt;<c>put_Connected</c> (<em>Connected</em>)</para>
</cpp>
<csharp>
<para>[<em>Connected</em> = ]<em>control</em><c>.Connected</c></para>
<para><em>control</em><c>.Connected</c> = <em>Connected</em></para>
</csharp>
<vb>
<para>[<em>Connected</em> = ]<em>control</em><c>.Connected</c></para>
<para><em>control</em><c>.Connected</c> = <em>Connected</em></para>
</vb>
</syntax>
			<param name="Connected">
				A <c>boolean</c> value specifying whether the control is connected.
			</param>
			<details>
				<para>
					In many situations, using the control automatically creates a connection with the Double Agent
					server (depending on the <see cref="P:DoubleAgent.Control.Control.AutoConnect"/> property setting).
					For example, using the Double Agent control's CLSID in the &lt;OBJECT&gt; tag in a Web
					page automatically opens a server connection and exiting the page closes the connection. Similarly,
					for Visual Basic or other languages that enable you to drop a control on a form, running the program
					automatically opens a connection and exiting the program closes the connection. If the server isn't
					currently running, it automatically starts.
				</para>
				<para>
					When you release <c>all</c> references to Agent objects,
					such as <see cref="T:DoubleAgent.Control.Character"/> and <see cref="T:DoubleAgent.Control.Command"/>, the connection with the Double Agent server will automatically be closed.
					You must also release your reference to the <see cref="T:DoubleAgent.Control.Control"/> object itself. In Visual Basic, you can release a reference to an object by setting its
					variable to <c>Nothing</c>. If you have loaded characters, your should unload them before releasing the character
					object.
				</para>
				<example>
					<code xml:space="preserve">Dim WithEvents MyAgent as DoubleAgentCtl
Dim Genie as DaCtlCharacter

Sub Form_Load
    ' Create an instance of the control using New
    Set MyAgent = New DoubleAgentCtl

    ' Open a connection to the server
    MyAgent.Connected = True

    ' Load the character into the Characters collection
    MyAgent.Characters.Load "Genie", "Genie.acs"

    ' Create a reference to the character
    Set Genie = MyAgent.Characters ("Genie")
End Sub

Sub CloseConnection
    ' Unload the character
    MyAgent.Charcters.Unload "Genie"

    ' Release the reference to the character object
    Set Genie = Nothing

    ' Release the reference to the Agent control
    Set MyAgent = Nothing
End Sub</code>
				</example>
			</details>
			<remarks>
				<para>
					You can manually open or close the connection to the server by changing the <c>Connected</c> property.
					When the connection status changes, any characters you've loaded are automatically unloaded.
					If you still have references to any objects except the control itself, any attempt to access the objects' properties
					or methods will fail.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Control.AutoConnect" suffix="Property"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.ControlCharacter">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.MousePointer">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.PropertySheet">
			<summary>
				<para>
					Retrieves the control's <see cref="T:DoubleAgent.Control.PropertySheet" text="PropertySheet Object"/>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>control</em>-&gt;<c>get_PropertySheet</c> (&amp;<em>PropertySheet</em>)</para>
</cpp>
<csharp>
<para>[<em>PropertySheet</em> = ]<em>control</em><c>.PropertySheet</c></para>
</csharp>
<vbnet>
<para>[<em>PropertySheet</em> = ]<em>control</em><c>.PropertySheet</c></para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>PropertySheet</em> = ]<em>control</em><c>.PropertySheet</c></para>
</vb>
</syntax>
			<returns name="PropertySheet">
				The control's <see cref="T:DoubleAgent.Control.PropertySheet" text="PropertySheet Object"/>.
			</returns>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.RaiseRequestErrors">
			<summary>
				<para>Returns or sets whether an error condition is raised (an exception thrown) for failed requests.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>control</em>-&gt;<c>get_RaiseRequestErrors</c> (&amp;<em>RaiseErrors</em>)</para>
<para><em>control</em>-&gt;<c>put_RaiseRequestErrors</c> (<em>RaiseErrors</em>)</para>
</cpp>
<csharp>
<para>[<em>RaiseErrors</em> = ]<em>control</em><c>.RaiseRequestErrors</c></para>
<para><em>control</em><c>.RaiseRequestErrors</c> = <em>RaiseErrors</em></para>
</csharp>
<vb>
<para>[<em>RaiseErrors</em> = ]<em>control</em><c>.RaiseRequestErrors</c></para>
<para><em>control</em><c>.RaiseRequestErrors</c> = <em>RaiseErrors</em></para>
</vb>
</syntax>
			<param name="RaiseErrors">
				A <c>boolean</c> value that determines whether errors are raised for failed requests.  The default value is <c>true</c>.
			</param>
			<remarks>
				<para>
					When a method that returns a <see cref="T:DoubleAgent.Control.Request"/> object fails, there are two ways to detect the error. If <c>RaiseRequestErrors</c> is set, the Double Agent control will raise an error condition. If it's not set, you can check the <see cref="T:DoubleAgent.Control.Request"/> object's <see cref="P:DoubleAgent.Control.Request.Status"/> property. An example of a request error is when you specify an animation name that doesn't exist for the <see cref="M:DoubleAgent.Control.Character.Play" /> method.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.Settings">
			<summary>
				<para>
					Retrieves the control's <see cref="T:DoubleAgent.Control.Settings" text="Settings Object"/>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>control</em>-&gt;<c>get_Settings</c> (&amp;<em>Settings</em>)</para>
</cpp>
<csharp>
<para>[<em>Settings</em> = ]<em>control</em><c>.Settings</c></para>
</csharp>
<vbnet>
<para>[<em>Settings</em> = ]<em>control</em><c>.Settings</c></para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Settings</em> = ]<em>control</em><c>.Settings</c></para>
</vb>
</syntax>
			<returns name="Settings">
				The control's <see cref="T:DoubleAgent.Control.Settings" text="Settings Object"/>.
			</returns>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.SpeechInput">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.SREngines">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.TTSEngines">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.ActivateInput">
			<summary>
				<para>Signalled when a client becomes input-active.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>ActivateInput (LPCTSTR</c> <em>CharacterID</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>ActivateInput<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>ActivateInput</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>ActivateInput</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>ActivateInput</c> (<c>ByVal</c> <em>CharacterID</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">
				The unique identifier of the character that has become input-active.
			</param>
			<remarks>
				<para>
					The input-active client receives mouse and speech input events for the character. Double Agent sends this event only to the client that becomes input-active.
				</para>
				<para>
					This event can occur when the user uses your <see cref="T:DoubleAgent.Control.Commands"/> object, for example, by choosing a <see cref="T:DoubleAgent.Control.Commands"/> object entry in the <see cref="T:DoubleAgent.Control.CommandsWindow"/> or in the pop-up menu for a character. It can also occur when the user selects a character (by clicking or speaking its name), when a character becomes visible, or when the character of another client application becomes hidden.
				</para>
				<para>
					You can also call the <see cref="M:DoubleAgent.Control.Character.Activate"/> method (with <c>State</c> set to 2) to explicitly make the character topmost, which results in your client application becoming input-active and triggers this event. However, this event does not occur if you use the <see cref="M:DoubleAgent.Control.Character.Activate"/> method only to specify whether or not your client is the active client of the character.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.DeactivateInput" suffix="Event"/>
			<seealso cref="M:DoubleAgent.Control.Character.Activate" suffix="Method"/>
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.ActiveClientChange">
			<summary>
				<para>Signalled when the active client of the character changes.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>ActiveClientChange</c> (<c>LPCTSTR</c> <em>CharacterID</em>, <c>VARIANT_BOOL</c> <em>Active</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>ActiveClientChange<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>, <c>bool</c>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>ActiveClientChange</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String<c>,</c> <c>ByVal</c></c> <em>Active</em> <c>As Boolean</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>ActiveClientChange</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String<c>,</c> <c>ByVal</c></c> <em>Active</em> <c>As Boolean</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>ActiveClientChange</c> (<c>ByVal</c> <em>CharacterID</em>, <c>ByVal</c> <em>Active</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">
				The unique identifier of the character that has become active or inactive.
			</param>
			<param name="Active">
				<c>True</c> if the character has become the active client or <c>false</c> if it's no longer the active client.
			</param>
			<remarks>
				<para>
					When multiple clients (<see cref="T:DoubleAgent.Control.Control"/> instances) share the same character, the active client of the character receives mouse input (for example, click or drag events). Similarly, when multiple characters are displayed, the active client of the topmost character (also known as the input-active client) receives <see cref="E:DoubleAgent.Control.Control.Command"/> events.
				</para>
				<para>
					A client application may receive this event when the user selects one of the client's entries in the character's pop-up menu or by voice command, when the client application changes its active status, or when another client terminates.
				</para>
				<para>
					Double Agent sends this event only to the clients that are directly affected; that either become the active client or stop being the active client.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.ActivateInput" suffix="Event"/>
			<seealso cref="E:DoubleAgent.Control.Control.DeactivateInput" suffix="Event"/>
			<seealso cref="M:DoubleAgent.Control.Character.Activate" suffix="Method"/>
			<seealso cref="P:DoubleAgent.Control.Character.Active" suffix="Property"/>
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.AgentPropertyChange">
			<summary>
				<para>Signalled when the user changes a property in the Property Sheet window.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>AgentPropertyChange</c> ()</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>AgentPropertyChange<em>EventHandler</em></c> ()</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>AgentPropertyChange</c> ()</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>AgentPropertyChange</c> ()</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>AgentPropertyChange</c> ()</para>
</vbscript>
</syntax>
			<remarks>
				<para>
					This event indicates that the user has changed and applied any property in the <see cref="T:DoubleAgent.Control.PropertySheet"/> window. You can use the <see cref="T:DoubleAgent.Control.Settings"/> object to query the specific property settings.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.DefaultCharacterChange" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.BalloonHide">
			<summary>
				<para>Signalled when a character's word balloon is hidden.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>BalloonHide</c> (<c>LPCTSTR</c> <em>CharacterID</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>BalloonHide<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>BalloonHide</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>BalloonHide</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>BalloonHide</c> (<c>ByVal</c> <em>CharacterID</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">
				The unique identifier of the character who's balloon was hidden.
			</param>
			<remarks>
				<para>
					Double Agent sends this event only to the clients of the character (applications that have loaded the character) that use the word balloon.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.BalloonShow" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.BalloonShow">
			<summary>
				<para>Signalled when a character's word balloon is shown.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>BalloonShow</c> (<c>LPCTSTR</c> <em>CharacterID</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>BalloonShow<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>BalloonShow</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>BalloonShow</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>BalloonShow</c> (<c>ByVal</c> <em>CharacterID</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">
				The unique identifier of the character who's balloon was shown.
			</param>
			<remarks>
				<para>
					Double Agent sends this event only to the clients of the character (applications that have loaded the character) that use the word balloon.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.BalloonHide" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.Bookmark">
			<summary>
				<para>Signalled when a bookmark defined by your application in a speech text string is reached.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>Bookmark</c> (<c>long</c> <em>BookmarkID</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>Bookmark<em>EventHandler</em></c> (<c>int</c> <em>BookmarkID</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>Bookmark</c> (<c>ByVal</c> <em>BookmarkID</em> <c>As Integer</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>Bookmark</c> (<c>ByVal</c> <em>BookmarkID</em> <c>As Long</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>Bookmark</c> (<c>ByVal</c> <em>BookmarkID</em>)</para>
</vbscript>
</syntax>
			<param name="BookmarkID">
				The bookmark's unique identifier.
			</param>
			<remarks>
				<para>
					To specify a bookmark event, use the <see cref="M:DoubleAgent.Control.Character.Speak"/> method with a <c>Mrk</c> tag in your supplied text.
					For more information about tags, see <a href="MsAgent.chm::/hh/msagent/guidlin_2my6.htm">Speech Output Tags</a>.
				</para>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Character.Speak" suffix="Method"/>
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.Click">
			<summary>
				<para>Signalled when the user clicks a character, or the character's icon.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>Click</c> (<c>LPCTSTR</c> <em>CharacterID</em>, <c>short</c> <em>Button</em>, <c>short</c> <em>Shift</em>, <c>short</c> <em>X</em>, <c>short</c> <em>Y</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>Click<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>, <c>short</c> <em>Button</em>, <c>short</c> <em>Shift</em>, <c>short</c> <em>X</em>, <c>short</c> <em>Y</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>Click</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Button</em> <c>As Short</c>, <c>ByVal</c> <em>Shift</em> <c>As Short</c>, <c>ByVal</c> <em>X</em> <c>As Short</c>, <c>ByVal</c> <em>Y</em> <c>As Short</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>Click</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Button</em> <c>As Integer</c>, <c>ByVal</c> <em>Shift</em> <c>As Integer</c>, <c>ByVal</c> <em>X</em> <c>As Integer</c>, <c>ByVal</c> <em>Y</em> <c>As Integer</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>Click</c> (<c>ByVal</c> <em>CharacterID</em>, <c>ByVal</c> <em>Button</em>, <c>ByVal</c> <em>Shift</em>, <c>ByVal</c> <em>X</em>, <c>ByVal</c> <em>Y</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">
				The unique identifier of the character that was clicked.
			</param>
			<param name="Button">
				<include file='DoubleAgent.Include.xml' path="/doc/params/param[@name='Button']"/>
			</param>
			<param name="Shift">
				<include file='DoubleAgent.Include.xml' path="/doc/params/param[@name='Shift']"/>
			</param>
			<param name="X">
				<include file='DoubleAgent.Include.xml' path="/doc/params/param[@name='X']"/>
			</param>
			<param name="Y">
				<include file='DoubleAgent.Include.xml' path="/doc/params/param[@name='Y']"/>
			</param>
			<remarks>
				<para>
					This event is sent only to the input-active client of a character. When the user clicks a character or
					its taskbar icon with no input-active client, Double Agent sends the event to its active client. If the
					character is visible (<see cref="P:DoubleAgent.Control.Character.Visible"/> is <c>true</c>), the user's action also sets the character's current
					input-active client as the last input-active client, sending the <see cref="E:DoubleAgent.Control.Control.ActivateInput"/> event to that
					client, and then sending the <c>Click</c> event. If the character is hidden (<see cref="P:DoubleAgent.Control.Character.Visible"/> is <c>false</c>),
					and the user clicks the character's taskbar icon using button 1, the character is also automatically
					shown.
				</para>
				<note>
					Clicking a character does not disable all other character output. However, pressing the <em>Listening</em> key <em>does</em> flush the input-active character's output
					and triggers the <see cref="E:DoubleAgent.Control.Control.RequestComplete"/> event, passing a <see cref="P:DoubleAgent.Control.Request.Status"/> that indicates that the
					client's queue was interrupted.
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.Command">
			<summary>
				<para>Signalled when the user chooses a (client's) command.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>Command (<see cref="T:DoubleAgent.Control.UserInput" text="IDaCtlUserInput"/> *</c> <em>UserInput</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>Command<em>EventHandler</em></c> (<c><see cref="T:DoubleAgent.Control.UserInput" text="DoubleAgent.Control.UserInput" /></c> <em>UserInput</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>Command</c> (<c>ByVal</c> <em>UserInput</em> <c>As <see cref="T:DoubleAgent.Control.UserInput" text="DoubleAgent.Control.UserInput" /></c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>Command</c> (<c>ByVal</c> <em>UserInput</em> <c>As <see cref="T:DoubleAgent.Control.UserInput" text="DaCtlUserInput"/></c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>Command</c> (<c>ByVal</c> <em>UserInput</em>)</para>
</vbscript>
</syntax>
			<param name="UserInput">
				A <see cref="T:DoubleAgent.Control.UserInput"/> object that identifies the chosen command.
			</param>
			<remarks>
				<para>
					Double Agent sends this event when your application is input-active and the user chooses a command from the character's pop-up menu, or by spoken input.
				</para>
			</remarks>
			<seealso cref="T:DoubleAgent.Control.UserInput"/>
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.DblClick">
			<summary>
				<para>Signalled when the user double-clicks a character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>DblClick</c> (<c>LPCTSTR</c> <em>CharacterID</em>, <c>short</c> <em>Button</em>, <c>short</c> <em>Shift</em>, <c>short</c> <em>X</em>, <c>short</c> <em>Y</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>DblClick<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>, <c>short</c> <em>Button</em>, <c>short</c> <em>Shift</em>, <c>short</c> <em>X</em>, <c>short</c> <em>Y</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>DblClick</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Button</em> <c>As Short</c>, <c>ByVal</c> <em>Shift</em> <c>As Short</c>, <c>ByVal</c> <em>X</em> <c>As Short</c>, <c>ByVal</c> <em>Y</em> <c>As Short</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>DblClick</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Button</em> <c>As Integer</c>, <c>ByVal</c> <em>Shift</em> <c>As Integer</c>, <c>ByVal</c> <em>X</em> <c>As Integer</c>, <c>ByVal</c> <em>Y</em> <c>As Integer</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>DblClick</c> (<c>ByVal</c> <em>CharacterID</em>, <c>ByVal</c> <em>Button</em>, <c>ByVal</c> <em>Shift</em>, <c>ByVal</c> <em>X</em>, <c>ByVal</c> <em>Y</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">
				The unique identifier of the character that was double-clicked.
			</param>
			<param name="Button">
				<include file='DoubleAgent.Include.xml' path="/doc/params/param[@name='Button']"/>
			</param>
			<param name="Shift">
				<include file='DoubleAgent.Include.xml' path="/doc/params/param[@name='Shift']"/>
			</param>
			<param name="X">
				<include file='DoubleAgent.Include.xml' path="/doc/params/param[@name='X']"/>
			</param>
			<param name="Y">
				<include file='DoubleAgent.Include.xml' path="/doc/params/param[@name='Y']"/>
			</param>
			<remarks>
				<para>
					This event is sent only to the input-active client of a character. When the user double-clicks a character or
					its taskbar icon with no input-active client, Double Agent sends the event to its active client. If the
					character is visible (<see cref="P:DoubleAgent.Control.Character.Visible"/> is <c>true</c>), the user's action also sets the character's current
					input-active client as the last input-active client, sending the <see cref="E:DoubleAgent.Control.Control.ActivateInput"/> event to that
					client, and then sending the <c>DblClick</c> event. If the character is hidden (<see cref="P:DoubleAgent.Control.Character.Visible"/> is <c>false</c>),
					and the user double-clicks the character's taskbar icon using button 1, the character is also automatically
					shown.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.DeactivateInput">
			<summary>
				<para>Signalled when a client becomes non-input-active.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>DeactivateInput</c> (<c>LPCTSTR</c> <em>CharacterID</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>DeactivateInput<em>EventHandler</em></c><c> (string</c> <em>CharacterID</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>DeactivateInput</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>DeactivateInput</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>DeactivateInput</c> (<c>ByVal</c> <em>CharacterID</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">
				The unique identifier of the character that has become non-input-active.
			</param>
			<remarks>
				<para>
					A non-input-active client no longer receives mouse or speech events from Double Agent (unless it becomes
					input-active again). Double Agent sends this event only to the client that becomes non-input-active.
				</para>
				<para>
					This event is signalled when your client application is input-active and the user chooses a another client's <see cref="T:DoubleAgent.Control.Command"/>
					in a character's pop-up menu or the <see cref="T:DoubleAgent.Control.CommandsWindow"/>, or you call the <see cref="M:DoubleAgent.Control.Character.Activate"/> method
					and set the <c>State</c> parameter to 0. It may also occur when the user selects the name of another
					character by clicking or speaking. You also get this event when your character is hidden or another
					character becomes visible.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.ActivateInput" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.DefaultCharacterChange">
			<summary>
				<para>Signalled when the user changes the default character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>DefaultCharacterChange</c> (<c>LPCTSTR</c> <em>CharGUID</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>DefaultCharacterChange<em>EventHandler</em></c><c> (string</c> <em>CharGUID</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>DefaultCharacterChange</c> (<c>ByVal</c> <em>CharGUID</em> <c>As String)</c></para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>DefaultCharacterChange</c> (<c>ByVal</c> <em>CharGUID</em> <c>As String)</c></para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>DefaultCharacterChange</c> (<c>ByVal</c> <em>CharGUID</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">
				The unique identifier of the new default character.
			</param>
			<remarks>
				<para>
					This event indicates that the user has changed the character assigned as the user's default character. Double Agent sends this only to clients that have loaded the default character.
				</para>
				<para>
					When the new character appears, it assumes the same size as any already loaded instance of the character, or the previous default character (in that order).
				</para>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Control.ShowDefaultCharacterProperties" suffix="Method"/>
			<seealso cref="M:DoubleAgent.Control.Characters.Load" suffix="Method"/>
			<seealso cref="P:DoubleAgent.Control.CharacterFiles.DefaultFilePath" suffix="Property"/>

		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.DragComplete">
			<summary>
				<para>Signalled when the user stops dragging a character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>DragComplete</c> (<c>LPCTSTR</c> <em>CharacterID</em>, <c>short</c> <em>Button</em>, <c>short</c> <em>Shift</em>, <c>short</c> <em>X</em>, <c>short</c> <em>Y</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>DragComplete<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>, <c>short</c> <em>Button</em>, <c>short</c> <em>Shift</em>, <c>short</c> <em>X</em>, <c>short</c> <em>Y</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>DragComplete</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Button</em> <c>As Short</c>, <c>ByVal</c> <em>Shift</em> <c>As Short</c>, <c>ByVal</c> <em>X</em> <c>As Short</c>, <c>ByVal</c> <em>Y</em> <c>As Short</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>DragComplete</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Button</em> <c>As Integer</c>, <c>ByVal</c> <em>Shift</em> <c>As Integer</c>, <c>ByVal</c> <em>X</em> <c>As Integer</c>, <c>ByVal</c> <em>Y</em> <c>As Integer</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>DragComplete</c> (<c>ByVal</c> <em>CharacterID</em>, <c>ByVal</c> <em>Button</em>, <c>ByVal</c> <em>Shift</em>, <c>ByVal</c> <em>X</em>, <c>ByVal</c> <em>Y</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">
				The unique identifier of the character that was dragged.
			</param>
			<param name="Button">
				<include file='DoubleAgent.Include.xml' path="/doc/params/param[@name='Button']"/>
			</param>
			<param name="Shift">
				<include file='DoubleAgent.Include.xml' path="/doc/params/param[@name='Shift']"/>
			</param>
			<param name="X">
				<include file='DoubleAgent.Include.xml' path="/doc/params/param[@name='X']"/>
			</param>
			<param name="Y">
				<include file='DoubleAgent.Include.xml' path="/doc/params/param[@name='Y']"/>
			</param>
			<remarks>
				<para>
					This event is sent only to the input-active client of a character. When the user drags a character with no input-active client, Double Agent sets its current input-active client as the last input-active client, sending the <see cref="E:DoubleAgent.Control.Control.ActivateInput"/> event to that client, and then sending the <see cref="E:DoubleAgent.Control.Control.DragStart"/> and <c>DragComplete</c> events.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.DragStart" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.DragStart">
			<summary>
				<para>Signalled when the user starts dragging a character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>DragStart</c> (<c>LPCTSTR</c> <em>CharacterID</em>, <c>short</c> <em>Button</em>, <c>short</c> <em>Shift</em>, <c>short</c> <em>X</em>, <c>short</c> <em>Y</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>DragStart<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>, <c>short</c> <em>Button</em>, <c>short</c> <em>Shift</em>, <c>short</c> <em>X</em>, <c>short</c> <em>Y</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>DragStart</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Button</em> <c>As Short</c>, <c>ByVal</c> <em>Shift</em> <c>As Short</c>, <c>ByVal</c> <em>X</em> <c>As Short</c>, <c>ByVal</c> <em>Y</em> <c>As Short</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>DragStart</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Button</em> <c>As Integer</c>, <c>ByVal</c> <em>Shift</em> <c>As Integer</c>, <c>ByVal</c> <em>X</em> <c>As Integer</c>, <c>ByVal</c> <em>Y</em> <c>As Integer</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>DragStart</c> (<c>ByVal</c> <em>CharacterID</em>, <c>ByVal</c> <em>Button</em>, <c>ByVal</c> <em>Shift</em>, <c>ByVal</c> <em>X</em>, <c>ByVal</c> <em>Y</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">
				The unique identifier of the character that's being dragged.
			</param>
			<param name="Button">
				<include file='DoubleAgent.Include.xml' path="/doc/params/param[@name='Button']"/>
			</param>
			<param name="Shift">
				<include file='DoubleAgent.Include.xml' path="/doc/params/param[@name='Shift']"/>
			</param>
			<param name="X">
				<include file='DoubleAgent.Include.xml' path="/doc/params/param[@name='X']"/>
			</param>
			<param name="Y">
				<include file='DoubleAgent.Include.xml' path="/doc/params/param[@name='Y']"/>
			</param>
			<remarks>
				<para>
					This event is sent only to the input-active client of a character. When the user drags a character with
					no input-active client, Double Agent sets its current input-active client as the last input-active client,
					sending the <see cref="E:DoubleAgent.Control.Control.ActivateInput"/> event to that client, and then sending the <c>DragStart</c> event.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.DragComplete" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.Hide">
			<summary>
				<para>Signalled when a character is hidden.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>Hide</c> (<c>LPCTSTR</c> <em>CharacterID</em>, <c>VisibilityCauseType</c> <em>Cause</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>Hide<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>, <c>DoubleAgent.Control.VisibilityCauseType</c> <em>Cause</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>Hide</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Cause</em> <c>As DoubleAgent.Control.VisibilityCauseType</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>Hide</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Cause</em> <c>As VisibilityCauseType</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>Hide</c> (<c>ByVal</c> <em>CharacterID</em>, <c>ByVal</c> <em>Cause</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">
				The unique identifier of the character that was hidden.
			</param>
			<param name="Cause">
				Indicates what caused the character to be hidden.
				<list type="table">
					<item>
						<term>1</term>
						<description>User hid the character by selecting the command on the character's taskbar icon pop-up menu or using speech input.</description>
					</item>
					<item>
						<term>3</term>
						<description>Your client application hid the character.</description>
					</item>
					<item>
						<term>5</term>
						<description>Another client application hid the character.</description>
					</item>
					<item>
						<term>7</term>
						<description>User hid the character by selecting the command on the character's pop-up menu.</description>
					</item>
				</list>
			</param>
			<remarks>
				<para>
					Double Agent sends this event to all clients of the character. To query the current state of the character,
					use the <see cref="P:DoubleAgent.Control.Character.Visible"/> property.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Show" suffix="Event"/>
			<seealso cref="M:DoubleAgent.Control.Character.Hide" suffix="Method"/>
			<seealso cref="P:DoubleAgent.Control.Character.VisibilityCause" suffix="Property"/>
			<seealso cref="P:DoubleAgent.Control.Character.Visible" suffix="Property"/>
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.IdleComplete">
			<summary>
				<para>
					Signalled when Double Agent ends the <em>Idling</em> state of a character.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>IdleComplete</c> (<c>LPCTSTR</c> <em>CharacterID</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>IdleComplete<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>IdleComplete</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>IdleComplete</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>IdleComplete</c> (<c>ByVal</c> <em>CharacterID</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">
				The unique identifier of the <em>Idling</em> character.
			</param>
			<remarks>
				<para>Double Agent sends this event to all clients of the character.</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.IdleStart" suffix="Event"/>
			<seealso cref="P:DoubleAgent.Control.Character.IdleEnabled" suffix="Property"/>

		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.IdleStart">
			<summary>
				<para>
					Signalled when Double Agent sets a character to the <em>Idling</em> state.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>IdleStart</c> (<c>LPCTSTR</c> <em>CharacterID</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>IdleStart<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>IdleStart</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>IdleStart</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>IdleStart</c> (<c>ByVal</c> <em>CharacterID</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">
				The unique identifier of the <em>Idling</em> character.
			</param>
			<remarks>
				<para>Double Agent sends this event to all clients of the character.</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.IdleComplete" suffix="Event"/>
			<seealso cref="P:DoubleAgent.Control.Character.IdleEnabled" suffix="Property"/>
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.ListenComplete">
			<summary>
				<para>
					Signalled when <em>Listening</em> mode (speech recognition) has ended.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>ListenComplete</c> (<c>LPCTSTR</c> <em>CharacterID</em>, <c>ListenCompleteType</c> <em>Cause</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>ListenComplete<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>, <c>DoubleAgent.Control.ListenCompleteType</c> <em>Cause</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>ListenComplete</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Cause</em> <c>As DoubleAgent.Control.ListenCompleteType</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>ListenComplete</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Cause</em> <c>As ListenCompleteType</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>ListenComplete</c> (<c>ByVal</c> <em>CharacterID</em>, <c>ByVal</c> <em>Cause</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">
				The unique identifier of the listening character.
			</param>
			<param name="Cause">
				The cause of the <c>ListenComplete</c> event.
				<list type="table">
					<item>
						<term>1</term>
						<description>Listening mode was turned off by program code.</description>
					</item>
					<item>
						<term>2</term>
						<description>Listening mode (turned on by program code) timed out.</description>
					</item>
					<item>
						<term>3</term>
						<description>
							Listening mode (turned on by the <em>Listening</em> key) timed out.
						</description>
					</item>
					<item>
						<term>4</term>
						<description>
							Listening mode was turned off because the user released the <em>Listening</em> key.
						</description>
					</item>
					<item>
						<term>5</term>
						<description>Listening mode ended because the user finished speaking.</description>
					</item>
					<item>
						<term>6</term>
						<description>Listening mode ended because the input-active client was deactivated.</description>
					</item>
					<item>
						<term>7</term>
						<description>Listening mode ended because the default character was changed.</description>
					</item>
					<item>
						<term>8</term>
						<description>Listening mode ended because the user disabled speech input.</description>
					</item>
				</list>
			</param>
			<remarks>
				<para>
					This event is sent to all clients when the <em>Listening</em> mode time-out ends, after the user releases the
					<em>Listening</em> key, when the input-active client calls the <see cref="M:DoubleAgent.Control.Character.Listen"/> method with <c>False</c>, or the
					user has finished speaking. You can use this event to determine when to resume spoken output.
				</para>
				<para>
					If you turn on <em>Listening</em> mode using the <see cref="M:DoubleAgent.Control.Character.Listen"/> method and then the user presses the <em>Listening</em>
					key, the <em>Listening</em> mode resets and continues until the <em>Listening</em> key time-out completes, the <em>Listening</em>
					key is released, or the user finishes speaking, whichever is later. In this situation, you will not
					receive a <c>ListenComplete</c> event until the <em>Listening</em> key's mode completes.
				</para>
				<para>
					The event returns the <em>CharacterID</em> to the clients that currently have this character loaded. All other clients
					receive a null <em>CharacterID</em> (empty string).
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.ListenStart" suffix="Event"/>
			<seealso cref="M:DoubleAgent.Control.Character.Listen" suffix="Method"/>
			<seealso cref="P:DoubleAgent.Control.Settings.SRHotKeyTime" suffix="Property"/>
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.ListenStart">
			<summary>
				<para>
					Signalled when <em>Listening</em> mode (speech recognition) begins.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>ListenStart</c> (<c>LPCTSTR</c> <em>CharacterID</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>ListenStart<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>ListenStart</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>ListenStart</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>ListenStart</c> (<c>ByVal</c> <em>CharacterID</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">
				The unique identifier of the listening character.
			</param>
			<remarks>
				<para>
					This event is sent to all clients when <em>Listening</em> mode begins because the user pressed the <em>Listening</em> key
					or the input-active client called the <see cref="M:DoubleAgent.Control.Character.Listen"/> method with <c>True</c>. You can use this event
					to avoid having your character speak while <em>Listening</em> mode is active.
				</para>
				<para>
					If you turn on <em>Listening</em> mode with the <see cref="M:DoubleAgent.Control.Character.Listen"/> method and then the user presses the <em>Listening</em> key,
					the <em>Listening</em> mode resets and continues until the <em>Listening</em> key time-out completes, the <em>Listening</em> key
					is released, or the user finishes speaking, whichever is later. In this situation, when <em>Listening</em> mode
					is already on, you will not get an additional <c>ListenStart</c> event when the user presses the <em>Listening</em>
					key.
				</para>
				<para>
					The event returns the <em>CharacterID</em> to the clients that currently have this character loaded. All other clients
					receive a null <em>CharacterID</em> (empty string).
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.ListenComplete" suffix="Event"/>
			<seealso cref="M:DoubleAgent.Control.Character.Listen" suffix="Method"/>
			<seealso cref="P:DoubleAgent.Control.Settings.SRHotKey" suffix="Property"/>
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.Move">
			<summary>
				<para>Signalled when a character is moved.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>Move</c> (<c>LPCTSTR</c> <em>CharacterID</em>, <c>short</c> <em>X</em>, <c>short</c> <em>Y</em>, <c>MoveCauseType</c> <em>Cause</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>Move<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>, <c>short</c> <em>X</em>, <c>short</c> <em>Y</em>, <c>DoubleAgent.Control.MoveCauseType</c> <em>Cause</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>Move</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>X</em> <c>As Short</c>, <c>ByVal</c> <em>Y</em> <c>As Short</c>, <c>ByVal</c> <em>Cause</em> <c>As DoubleAgent.Control.MoveCauseType</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>Move</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>X</em> <c>As Integer</c>, <c>ByVal</c> <em>Y</em> <c>As Integer</c>, <c>ByVal</c> <em>Cause</em> <c>As MoveCauseType</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>Move</c> (<c>ByVal</c> <em>CharacterID</em>, <c>ByVal</c> <em>X</em>, <c>ByVal</c> <em>Y</em>, <c>ByVal</c> <em>Cause</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">
				The unique identifier of the character that was moved.
			</param>
			<param name="X">
				The character's new horizontal location, in pixels, relative to the left side of the screen.
			</param>
			<param name="Y">
				The character's new vertical location, in pixels, relative to the top of the screen.
			</param>
			<param name="Cause">
				Indicates what caused the character to be moved.
				<para>1 The user dragged the character.</para>
				<para>2 Your client application moved the character.</para>
				<para>3 Another client application moved the character.</para>
				<para>4 Double Agent moved the character to keep it on-screen after a screen resolution change.</para>
			</param>
			<remarks>
				<para>
					This event is signalled when the user or an application changes the character's position. Coordinates are relevant
					to the upper left corner of the screen. This event is sent only to the clients of the character (applications
					that have loaded the character).
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Size" suffix="Event"/>
			<seealso cref="M:DoubleAgent.Control.Character.MoveTo" suffix="Method"/>
			<seealso cref="P:DoubleAgent.Control.Character.MoveCause" suffix="Property"/>
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.RequestComplete">
			<summary>
				<para>Signalled when Double Agent completes a queued request.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>RequestComplete</c> (<c><see cref="T:DoubleAgent.Control.Request" text="IDaCtlRequest"/> *</c> <em>Request</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>RequestComplete<em>EventHandler</em></c> (<c><see cref="T:DoubleAgent.Control.Request" text="DoubleAgent.Control.Request" /></c> <em>Request</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>RequestComplete</c> (<c>ByVal</c> <em>Request</em> <c>As <see cref="T:DoubleAgent.Control.Request"  text="DoubleAgent.Control.Request"/></c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>RequestComplete</c> (<c>ByVal</c> <em>Request</em> <c>As <see cref="T:DoubleAgent.Control.Request" text="DaCtlRequest"/></c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>RequestComplete</c> (<c>ByVal</c> <em>Request</em>)</para>
</vbscript>
</syntax>
			<param name="Request">
				The <see cref="T:DoubleAgent.Control.Request"/> object that identifies the completed request.
			</param>
			<remarks>
				<para id="1">
					This event provides a <see cref="T:DoubleAgent.Control.Request"/> object. Because requests are processed asynchronously, you can use this event to determine when Double Agent finishes processing a request (such as a <see cref="M:DoubleAgent.Control.Character.Get"/>, <see cref="M:DoubleAgent.Control.Character.Play"/>, or <see cref="M:DoubleAgent.Control.Character.Speak"/> method) to synchronize this event with other actions generated by your application. Double Agent sends the event only to the client that created the reference to the <see cref="T:DoubleAgent.Control.Request"/> object, and only if you defined a global variable for the request reference.
				</para>
				<example id="1">
					<code xml:space="preserve">Dim MyRequest 
Dim Genie

Sub window_Onload
    AgentControl.Characters.Load "Genie","Genie.acs"

    Set Genie = Agent.Characters("Genie")

    ' This syntax will generate RequestStart and RequestComplete events.
    Set MyRequest = Genie.Show(False)
    ' This syntax will not generate RequestStart and RequestComplete events.
    Genie.Hide False
End Sub

Sub AgentControl_RequestComplete(ByVal Request)
    If Request Is MyRequest Then
        Status = "Genie was shown"
End Sub</code>
				</example>
				<para id="2">
					Because animation <see cref="T:DoubleAgent.Control.Request"/> objects don't get assigned until Double Agent has queued the request, make sure that the <see cref="T:DoubleAgent.Control.Request"/> object exists before you attempt to evaluate it. For example, in Visual Basic, if you use a conditional to test whether a specific request was completed, you can use the <c>Nothing</c> keyword.
				</para>
				<example id="2">
					<code xml:space="preserve">Sub AgentControl_RequestComplete (ByVal Request)
    If Not (MyRequest Is Nothing) Then
        If Request Is MyRequest Then
            '-- Do whatever
        End If
    End If
End Sub</code>
				</example>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.RequestStart" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.RequestStart">
			<summary>
				<para>Signalled when Double Agent begins a queued request.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>RequestStart</c> (<c><see cref="T:DoubleAgent.Control.Request" text="IDaCtlRequest"/> *</c> <em>Request</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>RequestStart<em>EventHandler</em></c><c> (<see cref="T:DoubleAgent.Control.Request" text="DoubleAgent.Control.Request" /></c> <em>Request</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>RequestStart</c> (<c>ByVal</c> <em>Request</em> <c>As <see cref="T:DoubleAgent.Control.Request" text="DoubleAgent.Control.Request" /></c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>RequestStart</c> (<c>ByVal</c> <em>Request</em> <c>As <see cref="T:DoubleAgent.Control.Request" text="DaCtlRequest"/></c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>RequestStart</c> (<c>ByVal</c> <em>Request</em>)</para>
</vbscript>
</syntax>
			<param name="Request">
				The <see cref="T:DoubleAgent.Control.Request"/> object that identifies the queued request.
			</param>
			<remarks>
				<para>
					The event provides a <see cref="T:DoubleAgent.Control.Request"/> object. Because requests are processed asynchronously, you can use this event to determine when Double Agent begins processing a request (such as a <see cref="M:DoubleAgent.Control.Character.Get"/>, <see cref="M:DoubleAgent.Control.Character.Play"/>, or <see cref="M:DoubleAgent.Control.Character.Speak"/> method) and thereby synchronize this with other actions generated by your application. The event is sent only to the client that created the reference to the <see cref="T:DoubleAgent.Control.Request"/> object, and only if you defined a global variable for the request reference.
				</para>
				<example>
					<code xml:space="preserve">Dim MyRequest 
Dim Genie 

Sub window_Onload
    AgentControl.Characters.Load "Genie", "Genie.acs"

    Set Genie = AgentControl.Characters("Genie")

    ' This syntax will generate RequestStart and RequestComplete events.
    Set MyRequest = Genie.Show(False)

    ' This syntax will not generate RequestStart and RequestComplete events.
    Genie.Hide False
End Sub

Sub AgentControl_RequestStart(ByVal Request)
    If Request Is MyRequest Then
        Status = "Genie is showing"
End Sub</code>
				</example>
				<para>
					The <see cref="P:DoubleAgent.Control.Request.Status" text="Request.Status"/> property is 4 (request in progress) for the <see cref="T:DoubleAgent.Control.Request"/> object.
				</para>
				<para>
					Because animation <see cref="T:DoubleAgent.Control.Request"/> objects don't get assigned until Double Agent has queued the request, make sure that the <see cref="T:DoubleAgent.Control.Request"/> object exists before you attempt to evaluate it. For example, in Visual Basic, if you use a conditional to test whether a specific request was completed, you can use the <c>Nothing</c> keyword.
				</para>
				<example>
					<code xml:space="preserve">Sub AgentControl_RequestStart (ByVal Request)
    If Not (MyRequest Is Nothing) Then
        If Request Is MyRequest Then
            '-- Do whatever
        End If
    End If
End Sub</code>
				</example>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.RequestComplete" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.Show">
			<summary>Signalled when a character is displayed.</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>Show</c> (<c>LPCTSTR</c> <em>CharacterID</em>, <c>VisibilityCauseType</c> <em>Cause</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>Show<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>, <c>DoubleAgent.Control.VisibilityCauseType</c> <em>Cause</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>Show</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Cause</em> <c>As DoubleAgent.Control.VisibilityCauseType</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>Show</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Cause</em> <c>As VisibilityCauseType</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>Show</c> (<c>ByVal</c> <em>CharacterID</em>, <c>ByVal</c> <em>Cause</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">
				The unique identifier of the character that was shown.
			</param>
			<param name="Cause">
				Indicates what caused the character to be hidden.
				<list type="table">
					<item>
						<term>2</term>
						<description>The user showed the character (using the menu or voice command).</description>
					</item>
					<item>
						<term>4</term>
						<description>Your client application showed the character.</description>
					</item>
					<item>
						<term>6</term>
						<description>Another client application showed the character.</description>
					</item>
				</list>
			</param>
			<remarks>
				<para>
					Double Agent sends this event to all clients of the character. To query the current state of the character,
					use the <see cref="P:DoubleAgent.Control.Character.Visible"/> property.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Hide" suffix="Event"/>
			<seealso cref="M:DoubleAgent.Control.Character.Show" suffix="Method"/>
			<seealso cref="P:DoubleAgent.Control.Character.VisibilityCause" suffix="Property"/>
			<seealso cref="P:DoubleAgent.Control.Character.Visible" suffix="Property"/>
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.Size">
			<summary>
				<para>Signalled when a character's size changes.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>Size</c> (<c>LPCTSTR</c> <em>CharacterID</em>, <c>short</c> <em>Width</em>, <c>short</c> <em>Height</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>Size<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>, <c>short</c> <em>Width</em>, <c>short</c> <em>Height</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>Size</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Width</em> <c>As Short</c>, <c>ByVal</c> <em>Height</em> <c>As Short</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>Size</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Width</em> <c>As Integer</c>, <c>ByVal</c> <em>Height</em> <c>As Integer</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>Size</c> (<c>ByVal</c> <em>CharacterID</em>, <c>ByVal</c> <em>Width</em>, <c>ByVal</c> <em>Height</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">
				The unique identifier of the character that was resized.
			</param>
			<param name="Width">
				The character's new width, in pixels.
			</param>
			<param name="Height">
				The character's new height, in pixels.
			</param>
			<remarks>
				<para>
					This event is signalled when an application changes the size of a character. This event is sent only to the
					clients of the character (applications that have loaded the character).
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Move" suffix="Event"/>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.Characters" kind="Collection">
			<summary>
				<para>
					The <c>Characters</c> collection includes methods and properties for loading, unloading, and accessing <see cref="T:DoubleAgent.Control.Character"/>s.
				</para>
			</summary>
			<syntax>
				<list type="bullet">
					<item>
						<term>
							The <c>Characters</c> collection has the following <c>methods</c>:
						</term>
						<description>
							<see cref="M:DoubleAgent.Control.Characters.Character"/>,
							<see cref="M:DoubleAgent.Control.Characters.Load"/>,
							<see cref="M:DoubleAgent.Control.Characters.Unload"/>
						</description>
					</item>
					<item>
						<term>
							The <c>Characters</c> collection has the following <c>properties</c>:
						</term>
						<description>
							<see cref="P:DoubleAgent.Control.Characters.Count"/>,
							<see cref="P:DoubleAgent.Control.Characters.Index"/>,
							<see cref="P:DoubleAgent.Control.Characters.Item"/>
						</description>
					</item>
				</list>
			</syntax>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Characters.Unload">
			<summary>
				<para>Unloads the character data for a loaded character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>characters</em>-&gt;<c>Unload</c> ("<em>CharacterID</em>")</para>
</cpp>
<csharp>
<para><em>control</em>.Characters.<c>Unload</c> ("<em>CharacterID</em>")</para>
</csharp>
<vbnet>
<para><em>control</em>.Characters.<c>Unload</c> ("<em>CharacterID</em>")</para>
</vbnet>
<vb>
<para><em>control</em>.Characters.<c>Unload</c> "<em>CharacterID</em>"</para>
</vb>
</syntax>
			<param name="CharacterID">
				The character's unique identifier specified when the character was loaded.
			</param>
			<remarks>
				<para>
					Use this method when you no longer need a character, to free up memory used to store information about
					the character. If you access the character again, use the <see cref="M:DoubleAgent.Control.Characters.Load"/> method.
				</para>
				<para>
					This method does <c>not</c> return a <see cref="T:DoubleAgent.Control.Request"/> object.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Characters.Load">
			<summary>
				<para>
					Loads a character into the <c>Characters</c> collection.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>characters</em>-&gt;<c>Load</c> ("<em>CharacterID</em>", <em>Provider</em>, &amp;<em>Request</em>)</para>
</cpp>
<csharp>
<para>[<em>Request</em> = ]<em>control</em>.Characters.<c>Load</c> ("<em>CharacterID</em>, <em>Provider</em>")</para>
</csharp>
<vbnet>
<para>[<em>Request</em> = ]<em>control</em>.Characters.<c>Load</c> ("<em>CharacterID</em>, <em>Provider</em>")</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Request</em> = ]<em>control</em>.Characters.<c>Load</c> "<em>CharacterID</em>", <em>Provider</em></para>
</vb>
</syntax>
			<param name="CharacterID">
				A string value that you will use to refer to the character when it's loaded.  See the <see cref="P:DoubleAgent.Control.Characters.Item"/> property.
			</param>
			<param name="Provider">
				One of the following:
				<list>
					<item>
						<term>
							<em>Filespec</em>
						</term>
						<description>The location of a local character definition file (.ACS format)</description>
					</item>
					<item>
						<term>
							<em>URL</em>
						</term>
						<description>The HTTP address of the character's definition file (.ACF format)</description>
					</item>
				</list>
			</param>
			<returns name="Request">
				A request object your application can use to track the status of the <c>Load</c> request.  The <c>Load</c> method is asynchronous only when loading a character using the HTTP protocol.
			</returns>
			<remarks>
				<para>
					You can load characters from the default location(s) by specifying only a file name. For example, specifying the following would search for
					Genie.acs using the <see cref="P:DoubleAgent.Control.CharacterFiles.DefaultSearchPath"/>.
				</para>
				<example>
					<code xml:space="preserve">Control.Character.Load "Genie", "Genie.acs"</code>
					<para>You can also specify an absolute location,</para>
					<code xml:space="preserve">Control.Character.Load "Genie", "C:\MyCharacters\Genie.acs"</code>
					<para>or specify your own subdirectory by using a relative path.</para>
					<code xml:space="preserve">Control.Character.Load "Genie", "MyCharacters\Genie.acs"</code>
				</example>
				<para>
					You can load the default character by omitting the second parameter of the <c>Load</c> method, or passing an empty string.  This will load the default character from the <see cref="P:DoubleAgent.Control.CharacterFiles.DefaultFilePath"/>.
				</para>
				<example>
					<code xml:space="preserve">   Agent.Character.Load "DefChar"</code>
				</example>
				<para>
					You <c>cannot</c> load the same character (a character having the same <see cref="P:DoubleAgent.Control.Character.UniqueID"/>) more than once from a single instance
					of the control. Similarly, you cannot load the default character and other characters at the same time
					from a single instance of the control because the default character could be the same as the other character.
					If you attempt to do this, Double Agent raises an error. However, you can create another instance of the
					Agent control and load the same character.
				</para>
				<para>
					Loading a character does not automatically display the character. Use the <see cref="M:DoubleAgent.Control.Character.Show"/> method first to
					make the character visible.
				</para>
			</remarks>
			<details>
				<br/>
				<h4>Data Providers</h4>
				<para>
					Character data can be loaded from a single structured
					file (.ACS) with character data and animation data together, or from separate character data (.ACF) and
					animation (.ACA) files. Use a single structured .ACS file to load a character that's stored on a
					local disk or network and accessed using a conventional file protocol (such as UNC pathnames). Use
					separate .ACF and .ACA files when you want to load the animation files individually from a remote site
					where they're accessed using the HTTP protocol.
					The <c>Load</c> method does not support downloading .ACS files from an HTTP site.
				</para>
				<para>
					For .ACS files, using the <c>Load</c> method provides access to a character's animations. For .ACF files,
					you should also use the <see cref="M:DoubleAgent.Control.Character.Prepare"/> method to load animation data. Using <see cref="M:DoubleAgent.Control.Character.Prepare"/> is optional, but it will prevent unexpected delays when playing animations.
				</para>
				<br/>
				<h4>Error Handling</h4>
				<para>
					If you use the <c>Load</c> method to load a character file stored on the local machine and the call fails;
					for example, because the file is not found, Double Agent raises an error. If <see cref="P:DoubleAgent.Control.Control.RaiseRequestErrors"/> is set to <c>True</c>,
					you should provide an error handling routine to catch and process the error.
				</para>
				<example>
					<code xml:space="preserve">Sub Form_Load
    On Error GoTo ErrorHandler
    AgentControl.Characters.Load "MyChar", "Genie.acs"
    ' Successful load
    . . .
    Exit Sub
    ErrorHandler:
    ' Unsuccessful load
    . . .
    Resume Next
End Sub</code>
				</example>
				<para>
					You can also handle the error by setting <see cref="P:DoubleAgent.Control.Control.RaiseRequestErrors"/> to <c>False</c>, declaring an object,
					and assigning the <c>Load</c> request to it. Then follow the <c>Load</c> call with a statement that
					checks the status of the <see cref="T:DoubleAgent.Control.Request"/> object.
				</para>
				<example>
					<code xml:space="preserve">Dim LoadRequest as Object

Sub Form_Load
    AgentControl.RaiseRequestErrors = False
    Set LoadRequest = AgentControl.Characters.Load ("MyChar", "c:\some directory\some character.acs")
    If LoadRequest.Status Not 0 Then
    ' Unsuccessful load
    . . .
    Exit Sub
    Else 
    ' Successful load
    . . .
End Sub</code>
				</example>
				<para>
					If you load a character using the HTTP protocol, you can also check for a
					<c>Load</c> failure by assigning a <see cref="T:DoubleAgent.Control.Request"/> object to the <c>Load</c> method. However, because
					this method of loading a character is handled asynchronously, check its status in the <see cref="E:DoubleAgent.Control.Control.RequestComplete"/>
					event. This technique will not work when loading a character using the UNC protocol because the <c>Load</c>
					method is processed synchronously.
				</para>
			</details>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Characters.Character">
			<summary>
				<para>
					Returns a <see cref="T:DoubleAgent.Control.Character"/> object in the <see cref="T:DoubleAgent.Control.Characters"/> collection.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>characters</em>-&gt;<c>Character</c> ("<em>CharacterID</em>", &amp;<em>Character</em>)</para>
</cpp>
<csharp>
<para>[<em>Character</em> = ]<em>control</em>.Characters.<c>Character</c> ("<em>CharacterID</em>")</para>
</csharp>
<vbnet>
<para>[<em>Character</em> = ]<em>control</em>.Characters.<c>Character</c> ("<em>CharacterID</em>")</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Character</em> = ]<em>control</em>.Characters.<c>Character</c> "<em>CharacterID</em>"</para>
</vb>
</syntax>
			<param name="CharacterID">The character's unique identifier specified when the character was loaded.</param>
			<returns name="Character">
				A loaded <see cref="T:DoubleAgent.Control.Character"/> object.
			</returns>
			<remarks>
				<para>
					You can use this method to access a <see cref="T:DoubleAgent.Control.Character"/> object's methods and properties.
				</para>
				<note>
					This method may be required for some programming languages that don't support collections. For languages that <em>do</em> support collections, you can use the language's collection indexing syntax.
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Characters.Item" suffix="Property"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Characters.Count">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Characters.Index">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Characters.Item">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.Character">
			<summary>
				<para>
					The <c>Character</c> object provides the methods and properties your application will use to access the bulk of Double Agent's features.
				</para>
			</summary>
			<syntax>
				<list type="bullet">
					<item>
						<term>
							The <c>Character</c> object has the following <c>methods</c>:
						</term>
						<description>
							<see cref="M:DoubleAgent.Control.Character.Activate"/>,
							<see cref="M:DoubleAgent.Control.Character.FindSREngines"/>,
							<see cref="M:DoubleAgent.Control.Character.FindTTSEngines"/>,
							<see cref="M:DoubleAgent.Control.Character.GenerateIcon"/>,
							<see cref="M:DoubleAgent.Control.Character.GestureAt"/>,
							<see cref="M:DoubleAgent.Control.Character.Prepare"/>,
							<see cref="M:DoubleAgent.Control.Character.Hide"/>,
							<see cref="M:DoubleAgent.Control.Character.Interrupt"/>,
							<see cref="M:DoubleAgent.Control.Character.Listen"/>,
							<see cref="M:DoubleAgent.Control.Character.MoveTo"/>,
							<see cref="M:DoubleAgent.Control.Character.Play"/>,
							<see cref="M:DoubleAgent.Control.Character.Show"/>,
							<see cref="M:DoubleAgent.Control.Character.ShowPopupMenu"/>,
							<see cref="M:DoubleAgent.Control.Character.Speak"/>,
							<see cref="M:DoubleAgent.Control.Character.Stop"/>,
							<see cref="M:DoubleAgent.Control.Character.StopAll"/>,
							<see cref="M:DoubleAgent.Control.Character.Think"/>,
							<see cref="M:DoubleAgent.Control.Character.Wait"/>
						</description>
					</item>
					<item>
						<term>
							The <c>Character</c> object has the following <c>properties</c>:
						</term>
						<description>
							<see cref="P:DoubleAgent.Control.Character.Active"/>,
							<see cref="P:DoubleAgent.Control.Character.AutoPopupMenu"/>,
							<see cref="P:DoubleAgent.Control.Character.Description"/>,
							<see cref="P:DoubleAgent.Control.Character.ExtraData"/>,
							<see cref="P:DoubleAgent.Control.Character.GUID"/>,
							<see cref="P:DoubleAgent.Control.Character.HasOtherClients"/>,
							<see cref="P:DoubleAgent.Control.Character.Height"/>,
							<see cref="P:DoubleAgent.Control.Character.HelpContextID"/>,
							<see cref="P:DoubleAgent.Control.Character.HelpFile"/>,
							<see cref="P:DoubleAgent.Control.Character.HelpModeOn"/>,
							<see cref="P:DoubleAgent.Control.Character.IdleOn"/>,
							<see cref="P:DoubleAgent.Control.Character.LanguageID"/>,
							<see cref="P:DoubleAgent.Control.Character.Left"/>,
							<see cref="P:DoubleAgent.Control.Character.MoveCause"/>,
							<see cref="P:DoubleAgent.Control.Character.Name"/>,
							<see cref="P:DoubleAgent.Control.Character.OriginalHeight"/>,
							<see cref="P:DoubleAgent.Control.Character.OriginalWidth"/>,
							<see cref="P:DoubleAgent.Control.Character.Pitch"/>,
							<see cref="P:DoubleAgent.Control.Character.SoundEffectsOn"/>,
							<see cref="P:DoubleAgent.Control.Character.Speed"/>,
							<see cref="P:DoubleAgent.Control.Character.SRModeID"/>,
							<see cref="P:DoubleAgent.Control.Character.SRStatus"/>,
							<see cref="P:DoubleAgent.Control.Character.Top"/>,
							<see cref="P:DoubleAgent.Control.Character.TTSModeID"/>,
							<see cref="P:DoubleAgent.Control.Character.Version"/>,
							<see cref="P:DoubleAgent.Control.Character.VisibilityCause"/>,
							<see cref="P:DoubleAgent.Control.Character.Visible"/>,
							<see cref="P:DoubleAgent.Control.Character.Width"/>
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					Because the server loads an HTTP character asynchronously, ensure that the character has been loaded before
					querying its properties, for example, using the <see cref="E:DoubleAgent.Control.Control.RequestComplete"/> event. Otherwise, the properties
					may return incorrect values.
				</para>
				<note>
					The <see cref="P:DoubleAgent.Control.Character.Height"/>, <see cref="P:DoubleAgent.Control.Character.Left"/>, <see cref="P:DoubleAgent.Control.Character.Top"/>, and <see cref="P:DoubleAgent.Control.Character.Width"/> properties refer
					to the position and size of the <c>Character</c>, not the location of the Double Agent control.
				</note>
			</remarks>
			<details>
				<br/>
				<h4>Referencing the Character Object</h4>
				<example>
					<para>
						To use a method or property, reference the character in the <see cref="T:DoubleAgent.Control.Characters"/> collection. In VBScript and Visual Basic, you do this
						by specifying the unique identifier you assigned when you loaded the character:
					</para>
					<code xml:space="preserve">Sub FormLoad
    'Load the genie character into the Characters collection
    AgentControl.Characters.Load "Genie", "Genie.acs"

    'Display the character
    AgentControl.Characters("Genie").Show
    AgentControl.Characters("Genie").Play "Greet"
    AgentControl.Characters("Genie").Speak "Hello."
End Sub</code>
				</example>
				<example>
					<para>
						To simplify the syntax of your code, you can define an object variable and set it to reference a character
						object in the <see cref="T:DoubleAgent.Control.Characters"/> collection.  Then you can use your variable to reference methods or properties
						of the character. The following example demonstrates how you can do this using the Visual Basic <c>Set</c>
						statement:
					</para>
					<code xml:space="preserve">'Define a global object variable
Dim Genie as Object

Sub FormLoad
    'Load the genie character into the Characters collection
    AgentControl.Characters.Load "Genie", "Genie.acs"

    'Create a reference to the character
    Set Genie = AgentControl.Characters("Genie")

    'Display the character
    Genie.Show

    'Make the character say Hello
    Genie.Speak "Hello."
End Sub</code>
				</example>
				<example>
					<para>
						In Visual Basic, you can also create your reference by declaring your variable as a <see cref="T:DoubleAgent.Control.Character"/> object:
					</para>
					<code xml:space="preserve">Dim Genie as DaCtlCharacter

Sub FormLoad
    'Load the genie character into the Characters collection
    AgentControl.Characters.Load "Genie", "Genie.acs"

    'Create a reference to the character
    Set Genie = AgentControl.Characters("Genie")

    'Display the character
    Genie.Show
End Sub</code>
					<para>
						Declaring an object of type <c>DaCtlCharacter</c> enables early binding on the object, which allows immediate syntax checking and
						results in better performance.
					</para>
				</example>
				<example>
					<para>
						In VBScript, you cannot declare a reference as a particular type. However, you can simply declare the
						variable reference:
					</para>
					<code xml:space="preserve">&lt;SCRIPT LANGUAGE = "VBScript"&gt;
&lt;!--
Dim Genie

Sub window_OnLoad
    'Load the character
    AgentCtl.Characters.Load "Genie", "http://agent.microsoft.com/characters/v2/genie/genie.acf"

    'Create an object reference to the character in the collection
    set Genie= AgentCtl.Characters ("Genie")

    'Prepare the Showing state animation
    Genie.Prepare "state", "Showing"

    'Display the character
    Genie.Show
End Sub
--&gt;
&lt;/SCRIPT&gt;</code>
				</example>
				<example>
					<para>
						Some programming languages do not support collections. However, you can access a <see cref="T:DoubleAgent.Control.Character"/> object's
						methods with the <see cref="M:DoubleAgent.Control.Characters.Character"/> method:
					</para>
					<code xml:space="preserve">
<em>control</em>.Characters.Character("<em>CharacterID</em>").<em>method</em></code>
				</example>
				<example>
					<para>
						In addition, you can create a reference to the <c>Character</c> object to make your script code
						easier to follow:
					</para>
					<code xml:space="preserve">&lt;SCRIPT LANGUAGE="JScript" FOR="window" EVENT="onLoad()"&gt;
&lt;!--
//Load the character's data
AgentControl.Characters.Load ("Genie", "http://agent.microsoft.com/characters/v2/genie/genie.acf");

//Create a reference to this object
Genie = AgentControl.Characters.Character("Genie");

//Prepare the Showing state animation
Genie.Prepare("state", "Showing");

//Display the character
Genie.Show();
--&gt;
&lt;/SCRIPT&gt;</code>
				</example>
			</details>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.Activate">
			<summary>
				<para>Sets the active client or character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>Activate</c> (<em>State</em>, &amp;<em>Success</em>)</para>
</cpp>
<csharp>
<para>[<em>Success</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Activate</c> (<em>State</em>)</para>
</csharp>
<vbnet>
<para>[<em>Success</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Activate</c> (<em>State</em>)</para>
</vbnet>
<vb>
<para>[<em>Success</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Activate</c>[ <em>State</em>]</para>
</vb>
</syntax>
			<param name="State">
				You can specify one of the following values for this parameter:
				<list type="table">
					<item>
						<term>0</term>
						<description>Not the active client</description>
					</item>
					<item>
						<term>1</term>
						<description>The active client</description>
					</item>
					<item>
						<term>2</term>
						<description>The input-active character (default)</description>
					</item>
				</list>
			</param>
			<returns name="Success">
				True if the method succeeded.
			</returns>
			<details>
				<br/>
				<h4>Details</h4>
				<para>
					When multiple characters are visible, only one of the characters receives speech input at a time. Similarly,
					when multiple client applications share the same character, only one of the clients receives mouse input
					(for example, <see cref="E:DoubleAgent.Control.Control.Click"/> or <see cref="E:DoubleAgent.Control.Control.DragStart" text="Drag"/> events). The character set to receive mouse and
					speech input is the input-active character and the client that receives the input is the active client of
					that character. (The input-active character's window also appears at the top of the character window's z-order.)
					Typically, the user determines the input-active character by explicitly selecting the character. However,
					input activation also changes when a character is shown or hidden (the character becomes or is no
					longer input-active, respectively.)
				</para>
				<para>
					You can also use this method to explicitly manage when your client receives input directed to the character
					such as when your application itself becomes active. For example, setting <c>State</c> to 2 makes the
					character input-active and your client receives all mouse and speech input events generated from user interaction
					with the character. Therefore, it also makes your client the input-active client of the character.
				</para>
				<para>
					However, you can also set yourself to be the active client for a character without making the character
					input-active, by setting <c>State</c> to 1. This enables your client to receive input directed to that character
					when the character does become input-active. Similarly, you can set your client to <em>not</em> be the active client (not
					to receive input) when the character becomes input-active, by setting <c>State</c> to 0.
				</para>
				<para>
					If you call this method as a function, it returns a boolean value that indicates whether the method succeeded.
					Attempting to call this method with the <c>State</c> parameter set to 2 when the specified character
					is hidden will fail. Similarly, if you set <c>State</c> to 0 and your application is the only client,
					this call fails because a character must always have a input-active client.
				</para>
				<example>
					<br/>
					<h4>Example</h4>
					<code xml:space="preserve">Dim Genie as Object

Sub FormLoad()
    AgentControl.Characters.Load "Genie", "Genie.acs"

    Set Genie = AgentControl.Characters ("Genie")

    If (Genie.Activate = True) Then
      ' I'm active
    Else
      ' I must be hidden or something
    End If 
End Sub</code>
				</example>
			</details>
			<remarks>
				<para>
					Avoid calling this method directly after a <see cref="M:DoubleAgent.Control.Character.Show"/> method.
					<see cref="M:DoubleAgent.Control.Character.Show"/> automatically sets the input-active
					client. When the character is shown, the <c>Activate</c> call may fail if it gets processed before
					the <see cref="M:DoubleAgent.Control.Character.Show"/> method completes.
				</para>
				<note>
					Calling this method with <c>State</c> set to 1 does not typically
					generate an <see cref="E:DoubleAgent.Control.Control.ActivateInput"/> event unless there are no other characters loaded or your application
					is already input-active.
				</note>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.ActivateInput" suffix="Event"/>
			<seealso cref="E:DoubleAgent.Control.Control.DeactivateInput" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.FindSREngines">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.FindTTSEngines">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.GenerateIcon">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.GestureAt">
			<summary>
				<para>Plays a character's gesturing animation towards the specified location.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>GestureAt</c> (<em>X</em>, <em>Y</em>, &amp;<em>Request</em>)</para>
</cpp>
<csharp>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>GestureAt</c> (<em>X</em>, <em>Y</em>)</para>
</csharp>
<vbnet>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>GestureAt</c> (<em>X</em>, <em>Y</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>GestureAt</c> <em>X</em>, <em>Y</em></para>
</vb>
</syntax>
			<param name="X">
				A numeric value that indicates the horizontal screen coordinate, in pixels, to which the character will gesture.
			</param>
			<param name="Y">
				A numeric value that indicates the vertical screen coordinate, in pixels, to which the character will gesture.
			</param>
			<returns name="Request">
				A <see cref="T:DoubleAgent.Control.Request"/> object your application can used to track the method's status.
			</returns>
			<remarks>
				<para>
					Double Agent automatically plays the appropriate animation to gesture toward the specified location. The
					coordinates are always relative to the upper left corner of the screen.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.Get">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This method has been replaced by the <see cref="M:DoubleAgent.Control.Character.Prepare"/> method, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.Hide">
			<summary>
				<para>Hides a character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>Hide</c> (<em>Fast</em>, &amp;<em>Request</em>)</para>
</cpp>
<csharp>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Hide</c> (<em>Fast</em>)</para>
</csharp>
<vbnet>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Hide</c> (<em>Fast</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Hide</c>[ <em>Fast</em>]</para>
</vb>
</syntax>
			<param name="Fast">
				A boolean value that indicates whether to skip the character's <c>Hiding</c> state animation.
			</param>
			<returns name="Request">
				A <see cref="T:DoubleAgent.Control.Request"/> object your application can used to track the method's status.
			</returns>
			<remarks>
				<para>
					Double Agent queues the actions of the <c>Hide</c> method in the character's queue, so you can use it to
					hide the character after a sequence of other animations. You can play the action immediately by using
					the <see cref="M:DoubleAgent.Control.Character.Stop"/> or <see cref="M:DoubleAgent.Control.Character.StopAll"/> method before calling this method.
				</para>
				<note>
					Hiding a character can trigger the <see cref="E:DoubleAgent.Control.Control.ActivateInput"/> event of another client.
				</note>
				<note>
					Hidden characters cannot access the screen or the audio channel. Double Agent will
					pass a failure status in the <see cref="E:DoubleAgent.Control.Control.RequestComplete"/> event if you attempt to animate
					a hidden character.
				</note>

			</remarks>
			<seealso cref="M:DoubleAgent.Control.Character.Show" suffix="Method"/>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.Interrupt">
			<summary>
				<para>Interrupts an animation for another character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>Interrupt</c> (<em>InterruptRequest</em>, &amp;<em>Request</em>)</para>
</cpp>
<csharp>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Interrupt</c> (<em>InterruptRequest</em>)</para>
</csharp>
<vbnet>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Interrupt</c> (<em>InterruptRequest</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Interrupt</c> <em>InterruptRequest</em></para>
</vb>
</syntax>
			<param name="InterruptRequest">
				The <see cref="T:DoubleAgent.Control.Request"/> object for the animation call you want to interrupt.
			</param>
			<returns name="Request">
				A <see cref="T:DoubleAgent.Control.Request"/> object your application can used to track the method's status.
			</returns>
			<remarks>
				<para>
					You can use this to synchronize animation between characters. For example, if another character is in a looping
					animation, this method will stop the loop and move to the next animation in the character's queue.
				</para>
			</remarks>
			<details>
				<example>
					To specify the request parameter, create a variable for the animation request you want
					to interrupt:
					<code xml:space="preserve">Dim GenieRequest as Object
Dim RobbyRequest as Object
Dim Genie as Object
Dim Robby as Object

Sub FormLoad()
    MyAgentControl.Characters.Load "Genie", "Genie.acs"
    MyAgentControl.Characters.Load "Robby", "Robby.acs"

    Set Genie = MyAgentControl.Characters ("Genie")
    Set Robby = MyAgentControl.Characters ("Robby")

    Genie.Show
    Genie.Speak "Just a moment"
    Set GenieRequest = Genie.Play ("Processing")

    Robby.Show
    Robby.Play "confused"
    Robby.Speak "Hey, Genie. What are you doing?"
    Robby.Interrupt GenieRequest

    Genie.Speak "I was just checking on something."
End Sub</code>
				</example>
				<para>
					You can only use the <c>Interrupt</c> method to interrupt <em>another</em> character. To stop an animation for a single character, use the <see cref="M:DoubleAgent.Control.Character.Stop"/> method.
				</para>
				<note>
					The <c>Interrupt</c> method does not flush the character's queue; it halts the
					specified animation and moves on to the next animation in the character's queue. To halt and flush a
					character's queue, use that character's <see cref="M:DoubleAgent.Control.Character.StopAll"/> method.
				</note>
				<note>
					You cannot interrupt a character animation that you didn't start (that was started by another client).
				</note>
			</details>
			<seealso cref="M:DoubleAgent.Control.Character.Stop" suffix="Method"/>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.Listen">
			<summary>
				<para>
					Turns on <em>Listening</em> mode (speech recognition) for a timed period.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>Listen</c> (<em>Listen</em>, &amp;<em>StartedListening</em>)</para>
</cpp>
<csharp>
<para>[<em>StartedListening</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Listen</c> (<em>Listen</em>)</para>
</csharp>
<vbnet>
<para>[<em>StartedListening</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Listen</c> (<em>Listen</em>)</para>
</vbnet>
<vb>
<para>[<em>StartedListening</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Listen</c> <em>Listen</em></para>
</vb>
</syntax>
			<param name="Listen">
				A Boolean value that determines whether to turn <em>Listening</em> mode on or off.
			</param>
			<returns name="StartedListening">
				True if <em>Listening</em> mode was started.
			</returns>
			<remarks>
				<para>
					Setting the <c>Listen</c> parameter to <c>True</c> enables <em>Listening</em> mode (turns on speech recognition) for a fixed period
					of time (10 seconds). While you cannot set the value of the time-out, you can turn off <em>Listening</em> mode
					before the time-out expires.
				</para>
				<para>
					If you (or another client) successfully set <em>Listening</em> mode on and you attempt
					to set this property to <c>True</c> before the time-out expires, the method succeeds and resets the
					time-out. However, if the <em>Listening</em> mode is on because the user is pressing the <em>Listening</em> key, the method
					succeeds, but the time-out is ignored and <em>Listening</em> mode ends based on the user's interaction with
					the <em>Listening</em> key.
				</para>
				<para>
					This method succeeds only when called by the input-active client and only if speech services are available. To detect
					the success of this method, call it as a function and it will return a boolean value indicating whether
					the method succeeded.
				</para>
				<example>
					<code xml:space="preserve">If Genie.Listen(True) Then
    ' The method succeeded
Else
    ' The method failed
End If</code>
				</example>
			</remarks>
			<details>
				<para>
					The method also fails if the user is pressing the <em>Listening</em> key and you attempt to set <c>Listen</c>
					to <c>False</c>. However, if the user has released the <em>Listening</em> key and <em>Listening</em> mode has not timed
					out, it will succeed.
				</para>
				<para>
					<c>Listen</c> also fails if there is no compatible speech engine available that matches the character's
					<see cref="P:DoubleAgent.Control.Character.LanguageID"/> setting, the user has disabled speech input using the Double Agent property sheet,
					or the audio device is busy.
				</para>
				<para>
					When you successfully set this method to <c>True</c>, the Double Agent triggers the <see cref="E:DoubleAgent.Control.Control.ListenStart"/> event.
					Double Agent sends <see cref="E:DoubleAgent.Control.Control.ListenComplete"/> when the <em>Listening</em> mode time-out completes or when you set <c>Listen</c>
					to <c>False</c>.
				</para>
				<para>
					This method <em>does not</em> automatically call the <see cref="M:DoubleAgent.Control.Character.Stop"/> method and play a <em>Listening</em> state animation as Double Agent
					does when the <em>Listening</em> key is pressed. This enables you to determine whether to interrupt the current
					animation for the <see cref="E:DoubleAgent.Control.Control.ListenStart"/> event by calling <see cref="M:DoubleAgent.Control.Character.Stop"/> and playing your own appropriate
					animation. However, the Double Agent <em>does</em> call <see cref="M:DoubleAgent.Control.Character.Stop"/> and plays a Hearing state animation when a user
					utterance is detected.
				</para>
			</details>
			<seealso cref="P:DoubleAgent.Control.Character.ListeningStatus" suffix="Property"/>
			<seealso cref="E:DoubleAgent.Control.Control.ListenStart" suffix="Event"/>
			<seealso cref="E:DoubleAgent.Control.Control.ListenComplete" suffix="Event"/>
			<seealso cref="P:DoubleAgent.Control.Character.LanguageID" suffix="Property"/>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.MoveTo">
			<summary>
				<para>Moves a character to the specified location.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>MoveTo</c> (<em>X</em>, <em>Y</em>, <em>Speed</em>, &amp;<em>Request</em>)</para>
</cpp>
<csharp>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>MoveTo</c> (<em>X</em>, <em>Y</em>, <em>Speed</em>)</para>
</csharp>
<vbnet>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>MoveTo</c> (<em>X</em>, <em>Y</em>, <em>Speed</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>MoveTo</c> <em>X</em>, <em>Y</em>[, <em>Speed</em>]</para>
</vb>
</syntax>
			<param name="X">
				The horizontal location, in pixels, relative to the left side of the screen.
			</param>
			<param name="Y">
				The vertical location, in pixels, relative to the top of the screen.
			</param>
			<param name="Speed">
				An optional numeric value specifying how quickly the character's image moves, in milliseconds. The default value is 1000. Specifying zero moves the image without playing an animation.
			</param>
			<returns name="Request">
				A <see cref="T:DoubleAgent.Control.Request"/> object your application can used to track the method's status.
			</returns>
			<remarks>
				<para>
					The location of a character is based on the upper left corner of its image.
					Double Agent automatically plays the appropriate animation assigned to the <c>Moving</c> states.
				</para>
				<note>
					If you call <c>MoveTo</c> with a non-zero <c>Speed</c> before the character
					is shown, it will return a failure status if you assigned a <see cref="T:DoubleAgent.Control.Request"/> object, because the non-zero
					value indicates that you're attempting to play an animation when the character isn't visible.
				</note>
				<note>
					The <c>Speed</c> parameter's actual effect may vary based on the
					computer's processor speed and the priority of other tasks running on the system.
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.Play">
			<summary>
				<para>Plays the specified animation for a character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>GestureAt</c> ("<em>Animation</em>", &amp;<em>Request</em>)</para>
</cpp>
<csharp>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>GestureAt</c> ("<em>Animation</em>")</para>
</csharp>
<vbnet>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>GestureAt</c> ("<em>Animation</em>")</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>GestureAt</c> "<em>Animation</em>"</para>
</vb>
</syntax>
			<param name="Animation">
				A string that specifies the name of an animation sequence.
			</param>
			<returns name="Request">
				A <see cref="T:DoubleAgent.Control.Request"/> object your application can used to track the method's status.
			</returns>
			<remarks>
				<para>
					An animation's name is defined when the character is authored.
					Before playing the specified animation, Double Agent attempts to play the <c>Return</c> animation for
					the previous animation, if one has been assigned.
				</para>
				<para>
					The <c>Play</c> method does not make the character visible. If the character is not visible, Double Agent
					plays the animation invisibly, and sets the <see cref="P:DoubleAgent.Control.Request.Status"/> property of the <see cref="T:DoubleAgent.Control.Request"/> object.
				</para>
				<para>
					When accessing a character's animations using a conventional file protocol, you can simply use the <c>Play</c> method specifying the name of the animation. However, if you're using the HTTP protocol to
					access character animation data, use the <see cref="M:DoubleAgent.Control.Character.Prepare"/> method to load the animation before calling the
					<c>Play</c> method.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.AnimationNames" suffix="Property"/>
			<seealso cref="T:DoubleAgent.Control.AnimationNames" suffix="Object"/>

		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.Prepare">
			<summary>
				<para>Retrieves specified animation data for the a remote character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>Prepare</c> (<em>ResourceType</em>, "<em>Name</em>", <em>Queue</em>, &amp;<em>Request</em>)</para>
</cpp>
<csharp>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Prepare</c> (<em>ResourceType</em>, "<em>Name</em>", <em>Queue</em>)</para>
</csharp>
<vbnet>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Prepare</c> (<em>ResourceType</em>, "<em>Name</em>", <em>Queue</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Prepare</c> <em>ResourceType</em>, "<em>Name</em>"[, <em>Queue</em>]</para>
</vb>
</syntax>
			<param name="ResourceType">
				A string value that indicates the animation data type to load.
				<list>
					<item>
						<term>"Animation"</term>
						<description>A character's animation data</description>
					</item>
					<item>
						<term>"State"</term>
						<description>A character's state data</description>
					</item>
					<item>
						<term>"WaveFile"</term>
						<description> A character's audio (for spoken output) file</description>
					</item>
				</list>
			</param>
			<param name="Name">
				A string that indicates the name of the animation resource.
				<list type="bullet">
					<item>
						For animations, the name is one of those defined for the character when it was authored.
					</item>
					<item>
						For states, the following values can be used:
						<list>
							<item>
								<term>"Gesturing"</term>
								<description>
									To retrieve all <c>Gesturing</c> state animations.
								</description>
							</item>
							<item>
								<term>"GesturingDown"</term>
								<description>
									To retrieve the <c>GesturingDown</c> animation.
								</description>
							</item>
							<item>
								<term>"GesturingLeft"</term>
								<description>
									To retrieve the <c>GesturingLeft</c> animation.
								</description>
							</item>
							<item>
								<term>"GesturingRight"</term>
								<description>
									To retrieve the <c>GesturingRight</c> animation.
								</description>
							</item>
							<item>
								<term>"GesturingUp"</term>
								<description>
									To retrieve the <c>GesturingUp</c> animation.
								</description>
							</item>
							<item>
								<term>"Hiding"</term>
								<description>
									To retrieve the <c>Hiding</c> state animation.
								</description>
							</item>
							<item>
								<term>"Hearing"</term>
								<description>
									To retrieve the <c>Hearing</c> state animation.
								</description>
							</item>
							<item>
								<term>"Idling"</term>
								<description>
									To retrieve all <em>Idling</em> state animations.
								</description>
							</item>
							<item>
								<term>"IdlingLevel1"</term>
								<description>
									To retrieve all <c>IdlingLevel1</c> animations.
								</description>
							</item>
							<item>
								<term>"IdlingLevel2"</term>
								<description>
									To retrieve all <c>IdlingLevel2</c> animations.
								</description>
							</item>
							<item>
								<term>"IdlingLevel3"</term>
								<description>
									To retrieve all <c>IdlingLevel3</c> animations.
								</description>
							</item>
							<item>
								<term>"Listening"</term>
								<description>
									To retrieve the <c>Listening</c> state animation.
								</description>
							</item>
							<item>
								<term>"Moving"</term>
								<description>
									To retrieve all <c>Moving</c> state animations.
								</description>
							</item>
							<item>
								<term>"MovingDown"</term>
								<description>
									To retrieve the <c>MovingDown</c> animation.
								</description>
							</item>
							<item>
								<term>"MovingLeft"</term>
								<description>
									To retrieve the <c>MovingLeft</c> animation.
								</description>
							</item>
							<item>
								<term>"MovingRight"</term>
								<description>
									To retrieve the <c>MovingRight</c> animation.
								</description>
							</item>
							<item>
								<term>"MovingUp"</term>
								<description>
									To retrieve the <c>MovingUp</c> animation.
								</description>
							</item>
							<item>
								<term>"Showing"</term>
								<description>
									To retrieve the <c>Showing</c> state animation.
								</description>
							</item>
							<item>
								<term>"Speaking"</term>
								<description>
									To retrieve the <c>Speaking</c> state animation.
								</description>
							</item>
						</list>
					</item>
					<item>
						For audio files, specify the location of the .WAV file. If an incomplete path is specified, it's interpreted as being relative to the location used in the <see cref="M:DoubleAgent.Control.Characters.Load"/> method.
					</item>
					<item>
						You can specify multiple animations and states by separating them with commas. However, you cannot mix
						types in the same <c>Prepare</c> call.
					</item>
				</list>
			</param>
			<param name="Queue">
				A boolean expression specifying whether the Double Agent queues the <c>Prepare</c>, or starts it immediately.
			</param>
			<returns name="Request">
				A <see cref="T:DoubleAgent.Control.Request"/> object your application can used to track the method's status.
			</returns>
			<remarks>
				<para>
					If you load a character using the HTTP protocol (an .ACF file), you should use the <c>Prepare</c> method to
					retrieve animation data before you play the animation. You do not use this method if you loaded
					the character using the UNC protocol (an .ACS file).
				</para>
				<para>
					Using the <c>Prepare</c> method is <c>not</c> mandatory.  If Double Agent requires an animation from an .ACS file, it will load the file automatically (from the same location the .ACF file was loaded). However, this may cause unexpected delays when using the HTTP protocol.
				</para>
				<para>
					You can declare an object reference and set it to the method's <see cref="T:DoubleAgent.Control.Request"/> object return value. If
					the associated animation fails to load, Double Agent sets the <see cref="T:DoubleAgent.Control.Request"/> object's <see cref="P:DoubleAgent.Control.Request.Status"/> property
					to "failed" with an appropriate error number. You can use the <see cref="E:DoubleAgent.Control.Control.RequestComplete"/> event to check
					the status and determine what action to take.
				</para>
				<para>
					Animation or sound data retrieved with the <c>Prepare</c> method is cached locally. Subsequent
					calls will check the cache, and if the animation data is already there, the control loads the data directly
					from the cache. Once loaded, the animation or sound data can be played with the <see cref="M:DoubleAgent.Control.Character.Play"/> or <see cref="M:DoubleAgent.Control.Character.Speak"/>
					methods.
				</para>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Characters.Load" suffix="Method"/>
			<seealso cref="P:DoubleAgent.Control.Character.AnimationNames" suffix="Property"/>
			<seealso cref="T:DoubleAgent.Control.AnimationNames" suffix="Object"/>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.Show">
			<summary>
				<para>
					Makes the specified character visible and optionally plays its associated <c>Showing</c> animation.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>Show</c> (<em>Fast</em>, &amp;<em>Request</em>)</para>
</cpp>
<csharp>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Show</c> (<em>Fast</em>)</para>
</csharp>
<vbnet>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Show</c> (<em>Fast</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Show</c>[ <em>Fast</em>]</para>
</vb>
</syntax>
			<param name="Fast">
				A boolean expression specifying whether or not the <c>Showing</c> state animation is played.
			</param>
			<returns name="Request">
				A <see cref="T:DoubleAgent.Control.Request"/> object your application can used to track the method's status.
			</returns>
			<remarks>
				<para>
					Avoid setting the <c>Fast</c> parameter to <c>True</c> without first playing an animation;
					otherwise, the character may be shown with no image. In particular, note that if you call <see cref="M:DoubleAgent.Control.Character.MoveTo"/>
					when the character is not visible, it <em>does not</em> play any animation. Therefore, if you call the <c>Show</c>
					method with <c>Fast</c> set to <c>True</c>, no image will display. Similarly, if you call <see cref="M:DoubleAgent.Control.Character.Hide"/>,
					then <c>Show</c> with <c>Fast</c> set to <c>True</c>, there will be no visible image.
				</para>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Character.Hide" suffix="Method"/>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.ShowPopupMenu">
			<summary>
				<para>Displays a character's pop-up menu at the specified location.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>ShowPopupMenu</c> (<em>X</em>, <em>Y</em>, &amp;<em>Showed</em>)</para>
</cpp>
<csharp>
<para>[<em>Showed</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>ShowPopupMenu</c> (<em>X</em>, <em>Y</em>)</para>
</csharp>
<vbnet>
<para>[<em>Showed</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>ShowPopupMenu</c> (<em>X</em>, <em>Y</em>)</para>
</vbnet>
<vb>
<para>[<em>Showed</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>ShowPopupMenu</c> <em>X</em>, <em>Y</em></para>
</vb>
</syntax>
			<param name="X">
				The horizontal screen coordinate to display the menu, in pixels.
			</param>
			<param name="Y">
				The vertical  screen coordinate to display the menu, in pixels.
			</param>
			<returns name="Showed">
				True if the method succeeded.
			</returns>
			<remarks>
				<para>
					If the <see cref="P:DoubleAgent.Control.Character.AutoPopupMenu"/> property is set to <c>True</c>, Double Agent automatically displays the character's pop-up menu when the user right-clicks the character. If
					you set <see cref="P:DoubleAgent.Control.Character.AutoPopupMenu"/> to <c>False</c>, you can use <c>ShowPopupMenu</c> to display the menu.
				</para>
				<para>
					The menu remains displayed until the user selects a command or displays another menu. Only one pop-up
					menu can be displayed at a time; therefore, calls to this method will cancel (remove) the former menu.
				</para>
				<para>
					This method should be called only when your client application is the active client of the character;
					otherwise it fails. To determine the success of this method you can call it as a function and it will
					return a boolean value indicating whether the method succeeded.
				</para>
				<example>
					<code xml:space="preserve">If Genie.ShowPopupMenu (10,10) = True Then
    ' The menu was displayed
Else
    ' The menu was not displayed
End If</code>
				</example>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.AutoPopupMenu" suffix="Property"/>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.Speak">
			<summary>
				<para>Speaks the specified text or sound file for a character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>Speak</c> (<em>Text</em>, <em>Url</em>, &amp;<em>Request</em>)</para>
</cpp>
<csharp>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Speak</c> (<em>Text</em>, <em>Url</em>)</para>
</csharp>
<vbnet>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Speak</c> (<em>Text</em>, <em>Url</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Speak</c> [<em>Text</em>], [<em>Url</em>]</para>
</vb>
</syntax>
			<param name="Text">
				A string that specifies what the character says.
			</param>
			<param name="Url">
				A string expression specifying the location of an audio file (.WAV format).
				The location can be specified as a file (including a UNC path specification) or URL (when character
				animation data is also being retrieved via HTTP protocol).
			</param>
			<returns name="Request">
				A <see cref="T:DoubleAgent.Control.Request"/> object your application can used to track the method's status.
			</returns>
			<remarks>
				<para>
					At least one of the <em>Text</em> and <em>Url</em> parameters must be supplied. To use
					this method with a character configured to speak only in its word balloon or using a text-to-speech
					(TTS) engine, simply provide the <em>Text</em> parameter. Include a space between words to define appropriate
					word breaks in the word balloon, even for languages that do not traditionally include spaces.
				</para>
				<para>
					You can also include vertical bar characters (|) in the <em>Text</em> parameter to designate alternative
					strings, so that Double Agent randomly chooses a different string each time it processes the method.
				</para>
			</remarks>
			<details>
				<br/>
				<h4>Text-To-Speech</h4>
				<para>
					Support for TTS output is defined when the character is authored. To generate TTS output, a compatible TTS engine must already be installed before calling this
					method. For further information, see <a href="Ctl_Programming_Speech.htm">Accessing Speech Services</a>.
				</para>
				<para>
					You can vary parameters of the speech output with special tags that you include in the <em>Text</em>
					parameter. For more information, see <a href="spoutput_2v1w.htm">Microsoft Agent Speech Output Tags</a>.
				</para>
				<example>
					You can also include bookmark speech tags in your <c>Speak</c> text to synchronize your code:
					<code xml:space="preserve">Dim SpeakRequest as Object
...
Set SpeakRequest = Genie.Speak ("And here \mrk=100\it is.")
...
Sub AgentControl_Bookmark (ByVal BookmarkID As Long)
   If BookmarkID = 100 Then
       ' Display the message box 
       Msgbox "Tada!"
    End If
End Sub</code>
					For more information on the bookmark speech tag, see <a href="spoutput_862c.htm">Speech Output Tags</a>.
				</example>
				<para>
					Agent's automatic word breaking in the word balloon breaks words using white-space characters (for example,
					Space or Tab). However, if it cannot, it may break a word to fit the balloon. In languages like Japanese,
					Chinese, and Thai, where spaces are not used to break words, insert a Unicode zero-width space character
					(0x200B) between characters to define logical word breaks.
				</para>
				<br/>
				<h4>Sound Files</h4>
				<para>
					If you use recorded sound file (.WAV format only) output for the character, specify the file's
					location in the <em>Url</em> parameter. This file specification can include a local (absolute or relative)
					or universal naming convention (UNC) path. The filename cannot include any characters not included in
					the US code page 1252. However, if you are using the HTTP protocol to access the character
					data, use the <see cref="M:DoubleAgent.Control.Character.Prepare"/> method to load the sound file before calling the <c>Speak</c> method.
				</para>
				<para>
					When using recorded sound file output, you can still use the <em>Text</em> parameter to specify the words
					that appear in the character's word balloon.
				</para>
				<para>
					If you call <c>Speak</c> and the audio channel is busy, the character's audio output will not be heard,
					but the text will display in the word balloon.
				</para>
				<br/>
				<h4>Animation</h4>
				<para>
					The <c>Speak</c> method uses the last action played to determine which speaking animation to play. For
					example, if you preceded the <c>Speak</c> command with <c>Play</c> "<c>GestureRight</c>", Double Agent
					will play <c>GestureRight</c> and then the <c>GestureRight</c> speaking animation. If the last animation
					played has no speaking animation, Double Agent plays the animation assigned to the character's <c>Speaking</c>
					state.
				</para>
				<br/>
				<note>
					To track the method's status, you can declare an object reference and set it to the method's <see cref="T:DoubleAgent.Control.Request"/> object return value.
				</note>
				<note>
					The word balloon's <see cref="P:DoubleAgent.Control.Balloon.Enabled"/> property must also be <c>True</c> for text to display.
				</note>
				<note>
					Set the character's <see cref="P:DoubleAgent.Control.Character.LanguageID"/> before using the <c>Speak</c> method to ensure appropriate text display within the word balloon.
				</note>
			</details>
			<seealso cref="P:DoubleAgent.Control.Character.LanguageID" suffix="Property"/>
			<seealso cref="E:DoubleAgent.Control.Control.Bookmark" suffix="Event"/>
			<seealso cref="E:DoubleAgent.Control.Control.RequestStart" suffix="Event"/>
			<seealso cref="E:DoubleAgent.Control.Control.RequestComplete" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.Stop">
			<summary>
				<para>Stops an animation for a character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>Stop</c> (<em>Request</em>)</para>
</cpp>
<csharp>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Stop</c> (<em>Request</em>)</para>
</csharp>
<vbnet>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Stop</c> (<em>Request</em>)</para>
</vbnet>
<vb>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Stop</c> <em>Request</em></para>
</vb>
</syntax>
			<returns name="Request">
				A <see cref="T:DoubleAgent.Control.Request"/> object specifying a particular animation call, or a null reference to stop all animations.
			</returns>
			<remarks>
				<para>
					To specify the request parameter, you must create a variable and assign the animation request you want
					to stop. If you don't set the <c>Request</c> parameter, Double Agent stops all animations for the character,
					including queued <see cref="M:DoubleAgent.Control.Character.Prepare"/> calls, and clears its animation queue (unless the character is currently
					playing its <c>Hiding</c> or <c>Showing</c> animation). This method <em>does not</em> stop non-queued <see cref="M:DoubleAgent.Control.Character.Prepare"/>
					calls.
				</para>
				<example>
					To stop a specific animation or <see cref="M:DoubleAgent.Control.Character.Prepare"/> call, declare an object variable and assign your animation
					request to that variable:
					<code xml:space="preserve">Dim MyRequest
Dim Genie

AgentControl.Characters.Load "Genie", "Genie.acs"

Set Genie = AgentControl.Characters ("Genie")
Genie.Show

'This animation will never play
Set MyRequest = Genie.Play ("Greet")

Genie.Stop MyRequest</code>
				</example>
				<para>
					This method is performed immediately and does not generate a <see cref="T:DoubleAgent.Control.Request"/> object.
				</para>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Character.StopAll" suffix="Method"/>

		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.StopAll">
			<summary>
				<para>Stops all animation requests or specified types of requests for a character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>StopAll</c> (<em>Types</em>)</para>
</cpp>
<csharp>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>StopAll</c> (<em>Types</em>)</para>
</csharp>
<vbnet>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>StopAll</c> (<em>Types</em>)</para>
</vbnet>
<vb>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>StopAll</c> [<em>Types</em>]</para>
</vb>
</syntax>
			<param name="Types">
				You can omit this parameter you or use any of the following values.
				<list>
					<item>
						<term>"Get"</term>
						<description>
							To stop all queued <c>Get</c> requests.
						</description>
					</item>
					<item>
						<term>"NonQueuedGet"</term>
						<description>
							To stop all non-queued <c>Get</c> requests (<c>Get</c> method with <c>Queue</c> parameter set to <c>False)</c>.
						</description>
					</item>
					<item>
						<term>"Move"</term>
						<description>
							To stop all queued <c>MoveTo</c> requests.
						</description>
					</item>
					<item>
						<term>"Play"</term>
						<description>
							To stop all queued <c>Play</c> requests.
						</description>
					</item>
					<item>
						<term>"Speak"</term>
						<description>
							To stop all queued <c>Speak</c> requests.
						</description>
					</item>
				</list>
				You can also specify multiple types by separating them with commas.
			</param>
			<remarks>
				<para>
					If you don't set the <c>Type</c> parameter, Double Agent stops all animations for the character, including
					queued and non-queued <see cref="M:DoubleAgent.Control.Character.Prepare"/> requests, and clears its animation queue. It also stops playing a character's
					<c>Hiding</c> or <c>Showing</c> animation.
				</para>
				<para>
					This method is performed immediately and does not generate a <see cref="T:DoubleAgent.Control.Request"/> object.
				</para>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Character.Stop" suffix="Method"/>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.Think">
			<summary>
				<para>Displays the specified text in a character's "thought" balloon.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>Think</c> (<em>Text</em>, &amp;<em>Request</em>)</para>
</cpp>
<csharp>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Think</c> (<em>Text</em>)</para>
</csharp>
<vbnet>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Think</c> (<em>Text</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Think</c> <em>Text</em></para>
</vb>
</syntax>
			<param name="Text">
				A string that specifies the character's thought output.
			</param>
			<returns name="Request">
				A <see cref="T:DoubleAgent.Control.Request"/> object your application can used to track the method's status.
			</returns>
			<remarks>
				<para>
					Like the <see cref="M:DoubleAgent.Control.Character.Speak"/> method, the <c>Think</c> method is a queued request that displays text in a word
					balloon, except that the <c>Think</c> word balloon differs visually. In addition, the balloon supports
					only the Bookmark speech control tag (<c>\Mrk</c>) and ignores any other speech control tags. Unlike
					<see cref="M:DoubleAgent.Control.Character.Speak"/>, the <c>Think</c> method does not change the character's animation state.
				</para>
				<para>
					The <see cref="T:DoubleAgent.Control.Balloon"/> object's properties affect the output of both the <see cref="M:DoubleAgent.Control.Character.Speak"/> and <c>Think</c> methods.
					For example, the <see cref="T:DoubleAgent.Control.Balloon"/> object's <see cref="P:DoubleAgent.Control.Balloon.Enabled"/> property must be <c>True</c> for text to display.
				</para>
				<para>
					Agent's automatic word breaking in the word balloon breaks words using white-space characters (for example,
					SPACE or TAB). However, if it cannot, it may break a word to fit the balloon. In languages like Japanese,
					Chinese, and Thai where spaces are not used to break words, insert a Unicode zero-width space character
					(0x200B) between characters to define logical word breaks.
				</para>
				<note>
					To track the method's status, you can declare an object reference and set it to the method's <see cref="T:DoubleAgent.Control.Request"/> object return value.
				</note>
				<note>
					Set the character's <see cref="P:DoubleAgent.Control.Character.LanguageID"/> before using the <c>Think</c> method to ensure appropriate text display within the word balloon.
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.LanguageID" suffix="Property"/>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.Wait">
			<summary>
				<para>Causes the animation queue for the specified character to wait until the specified animation request completes.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>Wait</c> (<em>WaitRequest</em>, &amp;<em>Request</em>)</para>
</cpp>
<csharp>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Wait</c> (<em>WaitRequest</em>)</para>
</csharp>
<vbnet>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Wait</c> (<em>WaitRequest</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Wait</c> <em>WaitRequest</em></para>
</vb>
</syntax>
			<param name="WaitRequest">
				A <c>Request</c> object specifying the animation to wait for.
			</param>
			<returns name="Request">
				A <see cref="T:DoubleAgent.Control.Request"/> object your application can used to track the method's status.
			</returns>
			<remarks>
				<para>
					Use this method only when you are using multiple (simultaneous) characters and are trying to sequence the
					interaction of characters. (For a single character, each animation request is played sequentially--after
					the previous request completes.)
				</para>
				<para>
					If you have two characters and you want one character's animation request
					to wait until the other character's animation completes, use the <c>Wait</c> method with the other character's
					animation <see cref="T:DoubleAgent.Control.Request"/> object.
				</para>
				<example>
					To specify the request parameter, create a variable for animation request you want to wait for:
					<code xml:space="preserve">Dim GenieRequest
Dim RobbyRequest
Dim Genie
Dim Robby

Sub window_Onload
    AgentControl.Characters.Load "Genie", "Genie.acs"
    AgentControl.Characters.Load "Robby", "Robby.acs"

    Set Genie = AgentControl.Characters("Genie")
    Set Robby = AgentControl.Characters("Robby")

    Genie.MoveTo 100,100
    Genie.Show

    Robby.MoveTo 250,100
    Robby.Show

    Genie.Play "Announce"
    Set GenieRequest = Genie.Speak ("Why did the chicken cross the road?")

    Robby.Wait GenieRequest
    Robby.Play "Confused"
    Set RobbyRequest = Robby.Speak ("I don't know. Why did the chicken cross the road?")

    Genie.Wait RobbyRequest
    Genie.Play "Pleased"
    Set GenieRequest = Genie.Speak ("To get to the other side.")

    Robby.Wait GenieRequest
    Robby.Play "Sad"
    Robby.Speak "I never should have asked."
End Sub</code>
				</example>
				<example>
					You can also streamline your code by just calling <c>Wait</c> directly, using a specific animation request.
					<code xml:space="preserve">
Robby.Wait Genie.Play "GestureRight"
</code>
					<para>
						This avoids having to explicitly declare a <see cref="T:DoubleAgent.Control.Request"/> object.
					</para>
				</example>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Active">
			<summary>Returns whether your application is the active client of the character and whether the character is input-active.</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_Active</c> (&amp;<em>State</em>)</para>
</cpp>
<csharp>
<para>[<em>State</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Active</c></para>
</csharp>
<vb>
<para>[<em>State</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Active</c></para>
</vb>
</syntax>
			<param name="State">
				An integer expression specifying the state of your client application.
				<para>0 Not the active client.</para>
				<para>1 The active client. </para>
				<para>2 The input-active client. (The topmost character.)</para>
			</param>
			<remarks>
				<para>
					When multiple client applications share the same character, the active client of the character receives
					mouse input (for example, Microsoft Agent control <c>Click</c> or <c>Drag</c> events). Similarly, when
					multiple characters are displayed, the active client of the topmost character (also known as the input-active
					client) receives Command events.
				</para>
				<para>
					You can use the <c>Activate</c> method to set whether your application is the active client of the character
					or to make your application the input-active client (which also makes the character topmost).
				</para>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Character.Activate" suffix="Method"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.ActiveState">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.AnimationNames">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.AutoPopupMenu">
			<summary>Returns or sets whether right-clicking the character or its taskbar icon automatically displays the character's pop-up menu.</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_AutoPopupMenu</c> (&amp;<em>Enabled</em>)</para>
<para><em>character</em>.<c>put_AutoPopupMenu</c> (<em>Enabled</em>)</para>
</cpp>
<csharp>
<para>[<em>Enabled</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>AutoPopupMenu</c></para>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>AutoPopupMenu</c> = <em>Enabled</em></para>
</csharp>
<vb>
<para>[<em>Enabled</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>AutoPopupMenu</c></para>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>AutoPopupMenu</c> = <em>Enabled</em></para>
</vb>
</syntax>
			<param name="Enabled">
				A Boolean expression specifying whether Double Agent automatically displays the character's
				pop-up menu on right-click.
				<para>
					<c>True</c> (Default) Displays the menu on right-click.
				</para>
				<para>
					<c>False</c> Does not display the menu on right-click.
				</para>
			</param>
			<remarks>
				<para>
					By setting this property to <c>False</c>, you can create your own menu-handling behavior. To display
					the menu after setting this property to <c>False</c>, use the <c>ShowPopupMenu</c> method.
				</para>
				<para>
					This property applies only to your client application's use of the character; the setting does not affect
					other clients of the character or other characters of your client application.
				</para>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Character.ShowPopupMenu" suffix="Method"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Balloon">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.CharacterID">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Commands">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Connected">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Description">
			<summary>Returns or sets a string that specifies the description for the specified character.</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_Description</c> (&amp;<em>Description</em>)</para>
<para><em>character</em>.<c>put_Description</c> (<em>Description</em>)</para>
</cpp>
<csharp>
<para>[<em>Description</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Description</c></para>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Description</c> = "<em>Description</em>"</para>
</csharp>
<vb>
<para>[<em>Description</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Description</c></para>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Description</c> = "<em>Description</em>"</para>
</vb>
</syntax>
			<param name="Description">A string value corresponding to the character's description (in the current language setting).</param>
			<remarks>
				<para>
					A character's <c>Description</c> may depend on the character's <c>LanguageID</c> setting. A character's
					name in one language may be different or use different characters than in another. The character's default
					<c>Description</c> for a specific language is defined when the character is compiled with the Microsoft
					Agent Character Editor.
				</para>
				<note>
					The <c>Description</c> property setting is optional and may not be
					supplied for all characters.
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.ExtraData">
			<summary>Returns a string that specifies additional data stored as part of the character.</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_ExtraData</c> (&amp;<em>ExtraData</em>)</para>
</cpp>
<csharp>
<para>[<em>ExtraData</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>ExtraData</c></para>
</csharp>
<vb>
<para>[<em>ExtraData</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>ExtraData</c></para>
</vb>
</syntax>
			<param name="ExtraData">A string that specifies additional data stored as part of the character</param>
			<remarks>
				<para>
					The default value for the <c>ExtraData</c> property for a character is defined when the character is
					compiled with the Microsoft Agent Character Editor. It cannot be changed or specified at run time.
				</para>
				<note>
					The <c>ExtraData</c> property setting is optional and may not be supplied for all characters.
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.FileName">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.FilePath">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.GUID">
			<summary>Returns the unique identifier for the character.</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_GUID</c> (&amp;<em>CharGUID</em>)</para>
</cpp>
<csharp>
<para>[<em>CharGUID</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>GUID</c></para>
</csharp>
<vb>
<para>[<em>CharGUID</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>GUID</c></para>
</vb>
</syntax>
			<param name="CharGUID">The unique identifier for the character</param>
			<remarks>
				<para>
					This property returns a string representing the internal identifier that Double Agent uses to refer to
					uniquely identify the character. A character identifier is set when it is compiled with the Microsoft
					Agent Character Editor. The property is read-only.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.HasIcon">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.HasOtherClients">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Height">
			<summary>Returns or sets the height of the specified character's frame.</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_Height</c> (&amp;<em>Height</em>)</para>
<para><em>character</em>.<c>put_Height</c> (<em>Height</em>)</para>
</cpp>
<csharp>
<para>[<em>Height</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Height</c></para>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Height</c> = <em>Height</em></para>
</csharp>
<vb>
<para>[<em>Height</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Height</c></para>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Height</c> = <em>Height</em></para>
</vb>
</syntax>
			<param name="Height">A Long integer that specifies the character's frame height.</param>
			<remarks>
				<para>
					The <c>Height</c> property is always expressed in pixels, relative to screen coordinates (upper left).
					This property's setting applies to all clients of the character.
				</para>
				<para>
					Even though the character appears in an irregularly shaped region window, the height of the character
					is based on the external dimensions of the rectangular animation frame used when the character was compiled
					with the Microsoft Agent Character Editor.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.HelpContextID">
			<summary>not implemented</summary>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.HelpFile">
			<summary>not implemented</summary>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.HelpModeOn">
			<summary>not implemented</summary>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.IconIdentity">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.IconShown">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.IconTip">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.IconVisible">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.IdleEnabled">
			<summary></summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_IdleEnabled</c> (&amp;<em>IdleEnabled</em>)</para>
<para><em>character</em>.<c>put_IdleEnabled</c> (<em>IdleEnabled</em>)</para>
</cpp>
<csharp>
<para>[<em>IdleEnabled</em> =] <em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>IdleEnabled</c></para>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>IdleEnabled</c> = <em>IdleEnabled</em></para>
</csharp>
<vb>
<para>[<em>IdleEnabled</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>IdleEnabled</c></para>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>IdleEnabled</c> = <em>IdleEnabled</em></para>
</vb>
</syntax>
			<param name="IdleEnabled">
				A Boolean expression specifying whether the server manages idle mode.
				<para>
					<c>True</c> (Default) Server handling of the idle state is enabled.
				</para>
				<para>
					<c>False</c> Server handling of the idle state is disabled.
				</para>
			</param>
			<remarks>
				<para>
					Double Agent automatically sets a time-out after the last animation played for a character. When this timer's
					interval is complete, Double Agent begins the <em>Idling</em> state for a character, playing its associated
					<em>Idling</em> animations at regular intervals. If you want to disable Double Agent from automatically
					playing the <em>Idling</em> state animations, set the property to <c>False</c> and play an animation or
					call the <c>Stop</c> method. Setting this value does not affect the current animation state of the character.
				</para>
				<para>
					This property applies only to your client application's use of the character; the setting does not affect
					other clients of the character or other characters of your client application.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.IdleOn">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Character.IdleEnabled"/> property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.IdleState">
			<summary></summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_IdleState</c> (&amp;<em>IdleState</em>)</para>
</cpp>
<csharp>
<para>[<em>IdleState</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>IdleState</c></para>
</csharp>
<vb>
<para>[<em>IdleState</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>IdleState</c></para>
</vb>
</syntax>
			<param name="IdleState"></param>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.LanguageID">
			<summary>Returns or sets the language ID for the character.</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_LanguageID</c> (&amp;<em>LanguageID</em>)</para>
<para><em>character</em>.<c>put_LanguageID</c> (<em>LanguageID</em>)</para>
</cpp>
<csharp>
<para>[<em>LanguageID</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>LanguageID</c></para>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>LanguageID</c> = <em>LanguageID</em></para>
</csharp>
<vb>
<para>[<em>LanguageID</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>LanguageID</c></para>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>LanguageID</c> = <em>LanguageID</em></para>
</vb>
</syntax>
			<param name="LanguageID">
				A Long integer specifying the language ID for the character. The language ID
				(LANGID) for a character is a 16-bit value defined by Windows, consisting of a primary language ID and
				a secondary language ID. The following examples are values for languages supported by Microsoft Agent.
				To determine the value for other languages, see the <em>Platform SDK documentation</em>.
			</param>
			<remarks>
				<para>
					If you do not set the <c>LanguageID</c> for the character, its language ID will be the current system
					language ID if the corresponding Agent language DLL is installed, otherwise, the character's language
					will be English (US).
				</para>
				<para>
					This property also determines the language for word balloon text, the commands in the character's pop-up
					menu, and the speech recognition engine. It also determines the default language for TTS output.
				</para>
				<para>
					If you try to set the language ID for a character and the Agent language DLL for that language is not
					installed or a display font for the language ID is not available, Agent raises an error and <c>LanguageID</c>
					remains at its last setting.
				</para>
				<para>
					Setting this property does not raise an error if there are no matching speech engines for the language.
					To determine if there is a compatible speech engine available for the <c>LanguageID</c>, check <c>SRModeID</c>
					or <c>TTSModeID</c>. If you do not set <c>LanguageID</c>, it will be set to the user default language
					ID setting.
				</para>
				<para>
					This property applies only to your client application's use of the character; the setting does not affect
					other clients of the character or other characters of your client application.
				</para>
				<note>
					If you set <c>LanguageID</c> to a language that supports bidirectional
					text (such as Arabic or Hebrew), but the system running your application does not have bidirectional
					support installed, text in the word balloon will appear in logical rather than display order.
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.TTSModeID" suffix="Property"/>
			<seealso cref="P:DoubleAgent.Control.Character.SRModeID" suffix="Property"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Left">
			<summary>Returns or sets the left edge of the specified character's frame.</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_Left</c> (&amp;<em>Left</em>)</para>
<para><em>character</em>.<c>put_Left</c> (<em>Left</em>)</para>
</cpp>
<csharp>
<para>[<em>Left</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Left</c></para>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Left</c> = <em>Left</em></para>
</csharp>
<vb>
<para>[<em>Left</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Left</c></para>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Left</c> = <em>Left</em></para>
</vb>
</syntax>
			<param name="Left">A Long integer that specifies the left edge of the character's frame.</param>
			<remarks>
				<para>
					The <c>Left</c> property is always expressed in pixels, relative to screen origin (upper left). This
					property's setting applies to all clients of the character.
				</para>
				<para>
					Even though the character appears in an irregularly shaped region window, the location of the character
					is based on the external dimensions of the rectangular animation frame used when the character was compiled
					with the Microsoft Agent Character Editor.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.Top" suffix="Property"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.ListeningStatus">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.MoveCause">
			<summary>Returns an integer value that specifies what caused the character's last move.</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_MoveCause</c> (&amp;<em>MoveCause</em>)</para>
</cpp>
<csharp>
<para>[<em>MoveCause</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>MoveCause</c></para>
</csharp>
<vb>
<para>[<em>MoveCause</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>MoveCause</c></para>
</vb>
</syntax>
			<param name="MoveCause">
				<list type="table">
					<item>
						<term>0</term>
						<description>The character has not been moved</description>
					</item>
					<item>
						<term>1</term>
						<description>The user moved the character</description>
					</item>
					<item>
						<term>2</term>
						<description>Your application moved the character</description>
					</item>
					<item>
						<term>3</term>
						<description>Another client application moved the character</description>
					</item>
					<item>
						<term>4</term>
						<description>The Agent server moved the character to keep it onscreen after a screen resolution change</description>
					</item>
				</list>
			</param>
			<remarks>
				<para>
					You can use this property to determine what caused the character to move, when more than one application
					is sharing (has loaded) the same character. These values are the same as those returned by the <c>Move</c>
					event.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Move" suffix="Event"/>
			<seealso cref="M:DoubleAgent.Control.Character.MoveTo" suffix="Method"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Name">
			<summary>Returns or sets a string that specifies the default name of the specified character.</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_Name</c> (&amp;<em>Name</em>)</para>
<para><em>character</em>.<c>put_Name</c> (<em>Name</em>)</para>
</cpp>
<csharp>
<para>[<em>Name</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Name</c></para>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Name</c> = "<em>Name</em>"</para>
</csharp>
<vb>
<para>[<em>Name</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Name</c></para>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Name</c> = "<em>Name</em>"</para>
</vb>
</syntax>
			<param name="Name">A string value corresponding to the character's name (in the current language setting).</param>
			<remarks>
				<para>
					A character's <c>Name</c> may depend on the character's <c>LanguageID</c> setting. A character's name
					in one language may be different or use different characters than in another. The character's default
					<c>Name</c> for a specific language is defined when the character is compiled with the Microsoft Agent
					Character Editor.
				</para>
				<para>
					Avoid renaming a character, especially when using it in a scenario where other client applications may
					use the same character. Also, Agent uses the character's <c>Name</c> to automatically create commands
					for hiding and showing the character.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.OriginalHeight">
			<summary>Returns an integer value that specifies the character's original height.</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_OriginalHeight</c> (&amp;<em>OriginalHeight</em>)</para>
</cpp>
<csharp>
<para>[<em>OriginalHeight</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>OriginalHeight</c></para>
</csharp>
<vb>
<para>[<em>OriginalHeight</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>OriginalHeight</c></para>
</vb>
</syntax>
			<param name="OriginalHeight">This property returns the character's frame height as built with the Microsoft Agent Character Editor.</param>
			<remarks>
				<para>This property returns the character's frame height as built with the Microsoft Agent Character Editor.</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.Height" suffix="Property"/>
			<seealso cref="P:DoubleAgent.Control.Character.OriginalWidth" suffix="Property"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.OriginalWidth">
			<summary>Returns an integer value that specifies the character's original width.</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_OriginalWidth</c> (&amp;<em>OriginalWidth</em>)</para>
</cpp>
<csharp>
<para>[<em>OriginalWidth</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>OriginalWidth</c></para>
</csharp>
<vb>
<para>[<em>OriginalWidth</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>OriginalWidth</c></para>
</vb>
</syntax>
			<param name="OriginalWidth">This property returns the character's frame width as built with the Microsoft Agent Character Editor.</param>
			<remarks>
				<para>This property returns the character's frame width as built with the Microsoft Agent Character Editor.</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.Width" suffix="Property"/>
			<seealso cref="P:DoubleAgent.Control.Character.OriginalHeight" suffix="Property"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Pitch">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Smoothed">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.SmoothEdges">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.SoundEffectsEnabled">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.SoundEffectsOn">
			<summary>Returns or sets whether sound effects are enabled for your character.</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_SoundEffectsOn</c> (&amp;<em>SoundEffectsOn</em>)</para>
<para><em>character</em>.<c>put_SoundEffectsOn</c> (<em>SoundEffectsOn</em>)</para>
</cpp>
<csharp>
<para>[<em>SoundEffectsOn</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>SoundEffectsOn</c></para>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>SoundEffectsOn</c> = <em>SoundEffectsOn</em></para>
</csharp>
<vb>
<para>[<em>SoundEffectsOn</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>SoundEffectsOn</c></para>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>SoundEffectsOn</c> = <em>SoundEffectsOn</em></para>
</vb>
</syntax>
			<param name="SoundEffectsOn">
				A Boolean expression specifying whether sound effects are enabled.
				<para>
					<c>True</c> Sound effects are enabled.
				</para>
				<para>
					<c>False</c> Sound effects are disabled.
				</para>
			</param>
			<remarks>
				<para>
					This property determines whether sound effects included as a part of a character's animations will play
					when an animation plays. This property's setting applies to all clients of the character.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Settings.SoundEffectsEnabled" suffix="Property"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Speed">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.SREngine">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.SRModeID">
			<summary>Returns or sets the speech recognition engine the character uses.</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_SRModeID</c> (&amp;<em>SRModeID</em>)</para>
<para><em>character</em>.<c>put_SRModeID</c> (<em>SRModeID</em>)</para>
</cpp>
<csharp>
<para>[<em>SRModeID</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>SRModeID</c></para>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>SRModeID</c> = "<em>SRModeID</em>"</para>
</csharp>
<vb>
<para>[<em>SRModeID</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>SRModeID</c></para>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>SRModeID</c> = "<em>SRModeID</em>"</para>
</vb>
</syntax>
			<param name="SRModeID">A string expression that corresponds to the mode ID of a speech engine.</param>
			<remarks>
				<para>
					The property determines the speech recognition engine used by the character for speech input. The mode
					ID for a speech recognition engine is a formatted string defined by the speech vendor that uniquely
					identifies the engine. For more information, see <a href="spengin_7p2m.htm">
						Accessing a Speech Engine In
						Your Code
					</a>.
				</para>
				<para>
					If you specify a mode ID for a speech engine that isn't installed, if the user has disabled speech recognition
					(in the Microsoft Agent property sheet), or if the language of the specified speech engine doesn't match
					the character's <c>LanguageID</c> setting, Double Agent raises an error.
				</para>
				<para>
					If you query this property and haven't already (successfully) set the speech recognition engine, the
					server returns the mode ID of the engine that SAPI returns based on the character's <c>LanguageID</c>
					setting. If you haven't set the character's <c>LanguageID</c>, then Agent returns the mode ID of the
					engine that SAPI returns based on the user's default language ID setting. If there is no matching engine,
					Double Agent returns an empty string (""). Querying this property does not require that <c>SpeechInput.Enabled</c>
					be set to <c>True</c>. However, if you query the property when speech input is disabled, Double Agent
					returns an empty string.
				</para>
				<para>
					When speech input is enabled (in the Advanced Character Options window), querying or setting this property
					will load the associated engine (if it is not already loaded), and start speech services. That is, the
					<em>Listening</em> key is available, and the <em>Listening Tip</em> is displayable. (The <em>Listening</em> key and <em>Listening Tip</em>
					are enabled only if they are also enabled in Advanced Character Options.) However, if you query the
					property when speech is disabled, Double Agent does not start speech services.
				</para>
				<para>
					This property applies only to your client application's use of the character; the setting does not affect
					other clients of the character or other characters of your client application.
				</para>
				<para>
					Microsoft Agent's speech engine requirements are based on the Microsoft Speech API. Engines supporting
					Microsoft Agent's SAPI requirements can be installed and used with Agent.
				</para>
				<note>
					This property also returns the empty string if you have no compatible
					sound support installed on your system.
				</note>
				<note>
					Querying this property does not typically return an error. However,
					if the speech engine takes an abnormally long time to load, you may get an error indicating that the
					query timed out.
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.LanguageID" suffix="Property"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.SRStatus">
			<summary>Returns whether speech input can be started for the character.</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_SRStatus</c> (&amp;<em>SRStatus</em>)</para>
</cpp>
<csharp>
<para>[<em>SRStatus</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>SRStatus</c></para>
</csharp>
<vb>
<para>[<em>SRStatus</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>SRStatus</c></para>
</vb>
</syntax>
			<param name="SRStatus">
				<list type="table">
					<item>
						<term>0</term>
						<td width="78%">Conditions support speech input.</td>
					</item>
					<item>
						<term>1</term>
						<description>There is no audio input device available on this system. (Note that this does not detect whether or not a microphone is installed; it can only detect whether the user has a properly installed input-enabled sound card with a working driver.)</description>
					</item>
					<item>
						<term>2</term>
						<description>Another client is the active client of this character, or the current character is not topmost</description>
					</item>
					<item>
						<term>3</term>
						<description>The audio input or output channel is currently busy, an application is using audio</description>
					</item>
					<item>
						<term>4</term>
						<description>An unspecified error occurred in the process of initializing the speech recognition subsystem. This includes the possibility that there is no speech engine available matching the character's language setting</description>
					</item>
					<item>
						<term>5</term>
						<description>The user has disabled speech input in the Advanced Character Options</description>
					</item>
					<item>
						<term>6</term>
						<description>An error occurred in checking the audio status, but the cause of the error was not returned by the system</description>
					</item>
				</list>
			</param>
			<remarks>
				<para>
					This property returns the conditions necessary to support speech input, including the status of the audio
					device. You can check this property before you call the <c>Listen</c> method to better ensure its success.
				</para>
				<para>
					When speech input is enabled in the Agent property sheet (Advanced Character Options), querying this
					property will load the associated engine, if it is not already loaded, and start speech services. That
					is, the <em>Listening</em> key is available, and the <em>Listening Tip</em> is automatically displayable. (The <em>Listening</em>
					key and <em>Listening Tip</em> are only enabled if they are also enabled in Advanced Character Options.) However,
					if you query the property when speech is disabled, Double Agent does not start speech services.
				</para>
				<para>
					This property only applies to your client application's use of the character; the setting does not affect
					other clients of the character or other characters of your client application.
				</para>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Character.Listen" suffix="Method"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Style">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Top">
			<summary>Returns or sets the top edge of the specified character's frame.</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_Top</c> (&amp;<em>Top</em>)</para>
<para><em>character</em>.<c>put_Top</c> (<em>Top</em>)</para>
</cpp>
<csharp>
<para>[<em>Top</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Top</c></para>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Top</c> = <em>Top</em></para>
</csharp>
<vb>
<para>[<em>Top</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Top</c></para>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Top</c> = <em>Top</em></para>
</vb>
</syntax>
			<param name="Top">A Long integer that specifies the character's top edge.</param>
			<remarks>
				<para>
					The <c>Top</c> property is always expressed in pixels, relative to screen origin (upper left). This property's
					setting applies to all clients of the character.
				</para>
				<para>
					Even though the character appears in an irregularly shaped region window, the location of the character
					is based on the external dimensions of the rectangular animation frame used when the character was compiled
					with the Microsoft Agent Character Editor.
				</para>
				<para>
					Use the <c>MoveTo</c> method to change the character's location.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.Left" suffix="Property"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.TTSEngine">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.TTSModeID">
			<summary>Returns or sets the TTS engine mode used for the character.</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_TTSModeID</c> (&amp;<em>TTSModeID</em>)</para>
<para><em>character</em>.<c>put_TTSModeID</c> (<em>TTSModeID</em>)</para>
</cpp>
<csharp>
<para>[<em>TTSModeID</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>TTSModeID</c></para>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>TTSModeID</c> = "<em>TTSModeID</em>"</para>
</csharp>
<vb>
<para>[<em>TTSModeID</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>TTSModeID</c></para>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>TTSModeID</c> = "<em>TTSModeID</em>"</para>
</vb>
</syntax>
			<param name="TTSModeID">A string expression that corresponds to the mode ID of a speech engine.</param>
			<remarks>
				<para>
					This property determines the TTS (text-to-speech) engine mode ID for a character's spoken output. The
					mode ID for a TTS engine is a formatted string defined by the speech vendor that uniquely identifies
					the engine's mode. For more information, see <a href="spengin_7p2m.htm">
						Accessing a Speech Engine in Your
						Code
					</a>.
				</para>
				<para>
					Setting this property overrides Double Agent's attempt to load an engine based on the character's compiled
					TTS setting and the character's current <c>LanguageID</c> setting. However, if you specify a mode ID
					for an engine that isn't installed or if the user has disabled speech output in the Microsoft Agent
					property sheet (<c>AudioOutput.Enabled = False</c>), Double Agent raises an error.
				</para>
				<para>
					If you do not (or have not successfully) set a TTS mode ID for the character, Double Agent checks to see
					if the character's compiled TTS mode setting matches the character's <c>LanguageID</c> setting, and
					that the associated TTS engine is installed. If so, the TTS mode used by the character for spoken output
					and this property returns that mode ID. If not, Double Agent requests a compatible SAPI speech engine
					that matches the <c>LanguageID</c> of the character, as well as the gender and age set for the character's
					compiled mode ID. If you have not set the character's <c>LanguageID</c>, its <c>LanguageID</c> is the
					current user language. If no matching engine can be found, querying for this property returns an empty
					string for the engine's mode ID. Similarly, if you query this property when the user has disabled speech
					output in the Microsoft Agent property sheet (<c>AudioOutput.Enabled</c> = <c>False</c>), the value
					will be an empty string.
				</para>
				<para>
					Querying or setting this property will load the associated engine (if it is not already loaded). However,
					if the engine specified in the character's compiled TTS setting is installed and matches the character's
					language ID setting, the engine will be loaded when the character loads.
				</para>
				<para>
					This property applies only to your client application's use of the character; the setting does not affect
					other clients of the character or other characters of your client application.
				</para>
				<para>
					Microsoft Agent's speech engine requirements are based on the Microsoft Speech API. Engines supporting
					Microsoft Agent's SAPI requirements can be installed and used with Agent.
				</para>
				<note>
					This property also returns the empty string if you have no compatible
					sound support installed on your system.
				</note>
				<note>
					Setting the <c>TTSModeID</c> can fail if Speech.dll is not installed
					and the engine you specify does not match the character's compiled TTS mode setting.
				</note>
				<note>
					Querying this property does not typically return an error. However,
					if the speech engine takes an abnormally long time to load, you may get an error indicating that the
					query timed out.
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.LanguageID" suffix="Property"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.UniqueID">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Version">
			<summary>Returns version of the character.</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_Version</c> (&amp;<em>Version</em>)</para>
</cpp>
<csharp>
<para>[<em>Version</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Version</c></para>
</csharp>
<vb>
<para>[<em>Version</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Version</c></para>
</vb>
</syntax>
			<param name="Version">
				The <c>Version</c> property returns a string that corresponds to the version of the standard animation
				set definition for which the character was compiled. The character's version number is automatically
				set when you build it with the Microsoft Agent Character Editor.
			</param>
			<remarks>
				<para>
					The <c>Version</c> property returns a string that corresponds to the version of the standard animation
					set definition for which the character was compiled. The character's version number is automatically
					set when you build it with the Microsoft Agent Character Editor.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.VisibilityCause">
			<summary>Returns an integer value that specifies what caused the character's visible state.</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_VisibilityCause</c> (&amp;<em>VisibilityCause</em>)</para>
</cpp>
<csharp>
<para>[<em>VisibilityCause</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>VisibilityCause</c></para>
</csharp>
<vb>
<para>[<em>VisibilityCause</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>VisibilityCause</c></para>
</vb>
</syntax>
			<param name="VisibilityCause">
				<list type="table">
					<item>
						<term>0</term>
						<td width="78%">The character has not been shown.</td>
					</item>
					<item>
						<term>1</term>
						<description>
							User hid the character using the command on the character's taskbar icon pop-up menu or
							using speech input..
						</description>
					</item>
					<item>
						<term>2</term>
						<description>The user showed the character</description>
					</item>
					<item>
						<term>3</term>
						<description>Your application hid the character</description>
					</item>
					<item>
						<term>4</term>
						<description>Your application showed the character</description>
					</item>
					<item>
						<term>5</term>
						<description>Another client application hid the character</description>
					</item>
					<item>
						<term>6</term>
						<description>Another client application showed the character</description>
					</item>
					<item>
						<term>7</term>
						<description>The user hid the character using the command on the character's pop-up menu</description>
					</item>
				</list>
			</param>
			<remarks>
				<para>
					You can use this property to determine what caused the character to move when more than one application
					is sharing (has loaded) the same character. These values are the same as those returned by the <c>
						Show
					</c>and<c> Hide</c> events.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Show" suffix="Event"/>
			<seealso cref="E:DoubleAgent.Control.Control.Hide" suffix="Event"/>
			<seealso cref="M:DoubleAgent.Control.Character.Show" suffix="Method"/>
			<seealso cref="M:DoubleAgent.Control.Character.Hide" suffix="Method"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Visible">
			<summary>Returns a Boolean indicating whether the character is visible.</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_Visible</c> (&amp;<em>Visible</em>)</para>
</cpp>
<csharp>
<para>[<em>Visible</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Visible</c></para>
</csharp>
<vb>
<para>[<em>Visible</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Visible</c></para>
</vb>
</syntax>
			<param name="Visible">True if the character is displayed, false if it's hidden</param>
			<remarks>
				<para>
					This property indicates whether the character's frame is being displayed. It does not necessarily mean
					that there is an image on the screen. For example, this property returns <c>True</c> even when the character
					is positioned off the visible display area or when the current character frame contains no images. This
					property's setting applies to all clients of the character.
				</para>
				<para>
					This property is read-only. To make a character visible or hidden, use the <c>Show</c> or <c>Hide</c>
					methods.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Width">
			<summary>Returns or sets the width of the frame for the specified character.</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_Width</c> (&amp;<em>Width</em>)</para>
<para><em>character</em>.<c>put_Width</c> (<em>Width</em>)</para>
</cpp>
<csharp>
<para>[<em>Width</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Width</c></para>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Width</c> = <em>Width</em></para>
</csharp>
<vb>
<para>[<em>Width</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Width</c></para>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Width</c> = <em>Width</em></para>
</vb>
</syntax>
			<param name="Width">A Long integer that specifies the character's frame width.</param>
			<remarks>
				<para>
					The <c>Width</c> property is always expressed in pixels. This property's setting applies to all clients
					of the character.
				</para>
				<para>
					Even though the character appears in an irregularly shaped region window, the location of the character
					is based on the external dimensions of the rectangular animation frame used when the character was compiled
					with the Microsoft Agent Character Editor.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.Commands" kind="Collection">
			<summary>
				The <c>Commands</c> collection defines the commands that the user can apply to a <see cref="T:DoubleAgent.Control.Character"/>.
			</summary>
			<syntax>
				<list type="bullet">
					<item>
						<term>
							The <c>Commands</c> collection has the following <c>methods</c>:
						</term>
						<description>
							<see cref="M:DoubleAgent.Control.Commands.Add"/>,
							<see cref="M:DoubleAgent.Control.Commands.Command"/>,
							<see cref="M:DoubleAgent.Control.Commands.Insert"/>,
							<see cref="M:DoubleAgent.Control.Commands.Remove"/>,
							<see cref="M:DoubleAgent.Control.Commands.RemoveAll"/>
						</description>
					</item>
					<item>
						<term>
							The <c>Commands</c> collection has the following <c>properties</c>:
						</term>
						<description>
							<see cref="P:DoubleAgent.Control.Commands.Caption"/>,
							<see cref="P:DoubleAgent.Control.Commands.Count"/>,
							<see cref="P:DoubleAgent.Control.Commands.DefaultCommand"/>,
							<see cref="P:DoubleAgent.Control.Commands.FontName"/>,
							<see cref="P:DoubleAgent.Control.Commands.FontSize"/>,
							<see cref="P:DoubleAgent.Control.Commands.HelpContextID"/>,
							<see cref="P:DoubleAgent.Control.Commands.Visible"/>,
							<see cref="P:DoubleAgent.Control.Commands.VoiceGrammar"/>,
							<see cref="P:DoubleAgent.Control.Commands.VoiceCaption"/>
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					The <c>Commands</c> collection can appear in both the pop-up menu and the <see cref="T:DoubleAgent.Control.CommandsWindow" text="Voice Commands Window"/> for a character. To include commands in the pop-up menu, set its <see cref="P:DoubleAgent.Control.Commands.Caption"/> property. To include commands in the <see cref="T:DoubleAgent.Control.CommandsWindow" text="Voice Commands Window"/>, set its <see cref="P:DoubleAgent.Control.Commands.VoiceCaption"/> property (for backward compatibility, if there is no <see cref="P:DoubleAgent.Control.Commands.VoiceCaption"/>, the <see cref="P:DoubleAgent.Control.Commands.Caption"/> setting is used).
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Commands.Add">
			<summary>
				Adds a <c>Command</c> object to the <c>Commands</c> collection.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<em>commands</em><c>.Add</c> (<em>BSTR</em>, <em>VARIANT</em>, <em>VARIANT</em>, <em>VARIANT</em>, <em>VARIANT</em>, &amp;<em>IDaCtlCommand2</em>)
</cpp>
<csharp>
[<em>command</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c><c>.Add</c> ("<em>Name</em>", <em>Caption</em>, <em>VoiceGrammar</em>, <em>Enabled</em>, <em>Visible</em>)
</csharp>
<vbnet>
[<em>command</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c><c>.Add</c> ("<em>Name</em>", <em>Caption</em>, <em>VoiceGrammar</em>, <em>Enabled</em>, <em>Visible</em>)
</vbnet>
<vb>
[<em>command</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c><c>.Add</c> "<em>Name</em>", <em>Caption</em>, <em>VoiceGrammar</em>, <em>Enabled</em>, <em>Visible</em>
</vb>
</syntax>
			<remarks>
				<para>
					The value of a <c>Command</c> object's <c>Name</c> property must be unique within its <c>Commands</c>
					collection. You must remove a <c>Command</c> before you can create a new <c>Command</c> with the same
					<c>Name</c> property setting. Attempting to create a <c>Command</c> with a <c>Name</c> property that
					already exists raises an error.
				</para>
				<para>
					This method also returns a <c>Command</c> object. This enables you to declare an object and assign a
					<c>Command</c> to it when you call the <c>Add</c> method.
				</para>
				<code xml:space="preserve">   Dim Cmd1 as IAgentCtlCommandEx
   Set Cmd1 = Genie.Commands.Add ("my first command", "Test", "Test", True, True)
   Cmd1.VoiceCaption = "this is a test"</code>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Commands.Insert" suffix="Method"/>
			<seealso cref="M:DoubleAgent.Control.Commands.Remove" suffix="Method"/>
			<seealso cref="M:DoubleAgent.Control.Commands.RemoveAll" suffix="Method"/>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Commands.Command">
			<summary>
				Returns a <c>Command</c> object in a <c>Commands</c> collection.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<em>commands</em><c>.Command</c> (<em>BSTR</em>, &amp;<em>IDaCtlCommand2</em>)
</cpp>
<csharp>
[<em>command</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c><c>.Command</c> ("<em>Name</em>")
</csharp>
<vbnet>
[<em>command</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c><c>.Command</c> ("<em>Name</em>")
</vbnet>
<vb>
[<em>command</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c><c>.Command</c> "<em>Name</em>"
</vb>
</syntax>
			<remarks>
				<para>
					You can use this method to access a <c>Command</c> object's properties.
				</para>
				<note>
					This method may be required for some programming languages. It is
					not required for VBScript or Visual Basic. For further information on specifying <c>Command</c> methods,
					see Command Object Properties.
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Commands.Insert">
			<summary>
				Inserts a <c>Command</c> object in the <c>Commands</c> collection.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<em>commands</em><c>.Insert</c> (<em>BSTR</em>, <em>BSTR</em>, <em>VARIANT</em>, <em>VARIANT</em>, <em>VARIANT</em>, <em>VARIANT</em>, <em>VARIANT</em>, &amp;<em>IDaCtlCommand2</em>)
</cpp>
<csharp>
[<em>command</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c><c>.Insert</c> ("<em>Name</em>", "<em>RefName</em>", <em>Before</em>, <em>Caption</em>, <em>VoiceGrammar</em>, <em>Enabled</em>, <em>Visible</em>)
</csharp>
<vbnet>
[<em>command</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c><c>.Insert</c> ("<em>Name</em>", "<em>RefName</em>", <em>Before</em>, <em>Caption</em>, <em>VoiceGrammar</em>, <em>Enabled</em>, <em>Visible</em>)
</vbnet>
<vb>
[<em>command</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c><c>.Insert</c> "<em>Name</em>", "<em>RefName</em>", <em>Before</em>, <em>Caption</em>, <em>VoiceGrammar</em>, <em>Enabled</em>, <em>Visible</em>
</vb>
</syntax>
			<remarks>
				<para>
					The value of a <c>Command</c> object's <c>Name</c> property must be unique within its <c>Commands</c>
					collection. You must remove a <c>Command</c> before you can create a new <c>Command</c> with the same
					<c>Name</c> property setting. Attempting to create a <c>Command</c> with a <c>Name</c> property that
					already exists raises an error.
				</para>
				<para>
					This method also returns a <c>Command</c> object. This enables you to declare an object and assign a
					<c>Command</c> to it when you call the <c>Insert</c> method.
				</para>
				<code xml:space="preserve">   Dim Cmd2 as IAgentCtlCommandEx
   Set Cmd2 = Genie.Commands.Insert ("my second command", "my first command",_ True, "Test", "Test", True, True)
   Cmd2.VoiceCaption = "this is a test"</code>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Commands.Add" suffix="Method"/>
			<seealso cref="M:DoubleAgent.Control.Commands.Remove" suffix="Method"/>
			<seealso cref="M:DoubleAgent.Control.Commands.RemoveAll" suffix="Method"/>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Commands.Remove">
			<summary>
				Removes a <c>Command</c> object from the <c>Commands</c> collection.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<em>commands</em><c>.Remove</c> (<em>BSTR</em>)
</cpp>
<csharp>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c><c>.Remove</c> ("<em>Name</em>")
</csharp>
<vbnet>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c><c>.Remove</c> ("<em>Name</em>")
</vbnet>
<vb>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c><c>.Remove</c> "<em>Name</em>"
</vb>
</syntax>
			<remarks>
				<para>
					When a <c>Command</c> object is removed from the collection, it no longer appears when the character's
					pop-up menu is displayed or in the Commands Window when your client application is input-active.
				</para>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Commands.RemoveAll" suffix="Method"/>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Commands.RemoveAll">
			<summary>
				Removes all <c>Command</c> objects from the <c>Commands</c> collection.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<em>commands</em><c>.RemoveAll</c> ()
</cpp>
<csharp>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c><c>.RemoveAll</c> ()
</csharp>
<vbnet>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c><c>.RemoveAll</c> ()
</vbnet>
<vb>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c><c>.RemoveAll</c>
</vb>
</syntax>
			<remarks>
				<para>
					When a <c>Command</c> object is removed from the collection, it no longer appears when the character's
					pop-up menu is displayed or in the Commands Window when your client application is input-active.
				</para>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Commands.Remove" suffix="Method"/>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Commands.Caption">
			<summary>
				Determines the text displayed for the <c>Commands</c> object in the character's pop-up menu.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>commands</em>.<c>get_Caption</c> (&amp;<em>BSTR</em>)
</para>
<para>
<em>commands</em>.<c>put_Caption</c> (<em>BSTR</em>)
</para>
</cpp>
<csharp>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.<c>Caption</c>[ = <em>string</em>]
</csharp>
<vb>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.<c>Caption</c>[ = <em>String</em>]
</vb>
</syntax>
			<remarks>
				<para>
					Setting the <c>Caption</c> property for your <c>Commands</c> collection defines how it will appear on
					the character's pop-up menu when its <c>Visible</c> property is set to <c>True</c> and your application
					is not the input-active client. To specify an access key (unlined mnemonic) for your <c>Caption</c>,
					include an ampersand (&amp;) character before that character.
				</para>
				<para>
					If you define commands for a <c>Commands</c> collection that has a <c>Caption</c>, you typically also
					define a <c>Caption</c> for its associated <c>Commands</c> collection.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Commands.Count">
			<summary>
				Returns a Long integer (read-only property) that specifies the count of <c>Command</c> objects in the <c>Commands</c> collection.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<em>command</em>.<c>get_Count</c> (&amp;<em>long</em>)
</cpp>
<csharp>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.<c>Count</c>
</csharp>
<vb>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.<c>Count</c>
</vb>
</syntax>
			<remarks>
				<para>
					<c>Count</c> includes only the number of <c>Command</c> objects you define in your <c>Commands</c> collection.
					Server or other client entries are not included.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Commands.DefaultCommand">
			<summary>
				Returns or sets the default command of the <c>Commands</c> object.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>commands</em>.<c>get_DefaultCommand</c> (&amp;<em>BSTR</em>)
</para>
<para>
<em>commands</em>.<c>put_DefaultCommand</c> (<em>BSTR</em>)
</para>
</cpp>
<csharp>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.<c>DefaultCommand</c>[ = <em>string</em>]
</csharp>
<vb>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.<c>DefaultCommand</c>[ = <em>String</em>]
</vb>
</syntax>
			<remarks>
				<para>
					This property enables you to set a <c>Command</c> in your <c>Commands</c> collection as the default command,
					rendering it bold. This does not actually change command handling or double-click events.
				</para>
				<para>
					This property applies only to your client application's use of the character; the setting does not affect
					other clients of the character or other characters of your client application.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Commands.FontName">
			<summary>Returns or sets the font used in the character's pop-up menu.</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>commands</em>-&gt;<c>get_FontName</c> (<em>&amp;BSTR</em>);
</para>
<para>
<em>commands</em>-&gt;<c>put_FontName</c> (<em>BSTR</em>);
</para>
</cpp>
<csharp>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Commands.FontName</c>[ = <em>string</em>];
</csharp>
<vb>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Commands.FontName</c>[ = <em>String</em>]
</vb>
</syntax>
			<remarks>
				<para>
					The <c>FontName</c> property defines the font used to display text in the character's pop-up menu. The
					default value for the font setting is based on the menu font setting for the character's <c>LanguageID</c>
					setting, or -- if that's not set -- the user default language ID setting.
				</para>
				<para>
					This property applies only to your client application's use of the character; the setting does not affect
					other clients of the character or other characters of your client application.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Commands.FontSize">
			<summary>Returns or sets the font size used in the character's pop-up menu.</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>commands</em>-&gt;<c>get_FontSize</c> (<em>&amp;long</em>);
</para>
<para>
<em>commands</em>-&gt;<c>put_FontSize</c> (<em>long</em>);
</para>
</cpp>
<csharp>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Commands.FontSize</c>[ = <em>int</em>];
</csharp>
<vb>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Commands.FontSize</c>[ = <em>Integer</em>]
</vb>
</syntax>
			<remarks>
				<para>
					The <c>FontSize</c> property defines the point size of the font used to display text in the character's
					pop-up menu. The default value for the font setting is based on the menu font setting for the character's
					<c>LanguageID</c> setting, or -- if that's not set -- the user default language setting.
				</para>
				<para>
					This property applies only to your client application's use of the character; the setting does not affect
					other clients of the character or other characters of your client application.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Commands.GlobalVoiceCommandsEnabled">
			<summary>Returns or sets whether voice is enabled for Agent's global commands.</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>commands</em>.<c>get_GlobalVoiceCommandsEnabled</c> (&amp;<em>VARIANT_BOOL</em>)
</para>
<para>
<em>commands</em>.<c>put_GlobalVoiceCommandsEnabled</c> (<em>VARIANT_BOOL</em>)
</para>
</cpp>
<csharp>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.<c>GlobalVoiceCommandsEnabled</c>[ = <em>bool</em>]
</csharp>
<vb>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.<c>GlobalVoiceCommandsEnabled</c>[ = <em>Boolean</em>]
</vb>
</syntax>
			<remarks>
				<para>
					Microsoft Agent automatically adds voice parameters (grammar) for opening and closing the Voice Commands
					Window and for showing and hiding the character. If you set <c>GlobalVoiceCommandsEnabled</c> to <c>False</c>,
					Agent disables any voice parameters for these commands as well as the voice parameters for the <c>Caption</c>
					of other client's <c>Commands</c> objects. This enables you to eliminate these from your client's current
					active grammar. However, because this potentially blocks voice access to other clients, reset this property
					to <c>True</c> after processing the user's voice input.
				</para>
				<para>
					Disabling the property does not affect the character's pop-up menu. The global commands added by the
					server will still appear. You cannot remove them from the pop-up menu.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Commands.HelpContextID">
			<summary>Not supported</summary>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Commands.Index">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Commands.Item">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Commands.Visible">
			<summary>
				Returns or sets a value that determines whether your <c>Commands</c> collection's caption appears in
				the character's pop-up menu.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>commands</em>.<c>get_Visible</c> (&amp;<em>VARIANT_BOOL</em>)
</para>
<para>
<em>commands</em>.<c>put_Visible</c> (<em>VARIANT_BOOL</em>)
</para>
</cpp>
<csharp>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.<c>Visible</c>[ = <em>bool</em>]
</csharp>
<vb>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.<c>Visible</c>[ = <em>Boolean</em>]
</vb>
</syntax>
			<remarks>
				<para>
					For the caption to appear in the character's pop-up menu when your application is not the input-active
					client, this property must be set to <c>True</c> and the <c>Caption</c> property set for your Commands
					collection. In addition, this property must be set to <c>True</c> for commands in your collection to
					appear in the pop-up menu when your application is input-active.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Commands.Voice">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Commands.VoiceGrammar"/> property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Commands.VoiceCaption">
			<summary>
				Returns or sets the text displayed for the <c>Commands</c> object in the Voice Commands Window.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>commands</em>.<c>get_VoiceCaption</c> (&amp;<em>BSTR</em>)
</para>
<para>
<em>commands</em>.<c>put_VoiceCaption</c> (<em>BSTR</em>)
</para>
</cpp>
<csharp>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.<c>VoiceCaption</c>[ = <em>string</em>]
</csharp>
<vb>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.<c>VoiceCaption</c>[ = <em>String</em>]
</vb>
</syntax>
			<remarks>
				<para>
					If you set the <c>Voice</c> property of your <c>Commands</c> collection, you will typically also set
					its <c>VoiceCaption</c> property. The <c>VoiceCaption</c> text setting appears in the Voice Commands
					Window when your client application is input-active and the character is visible. If this property is
					not set, the setting for the <c>Commands</c> collection's <c>Caption</c> property determines the text
					displayed. When neither the <c>VoiceCaption</c> or <c>Caption</c> property is set, then commands in
					the collection appear in the Voice Commands Window under "(undefined command)" when your client application
					becomes input-active.
				</para>
				<para>
					The <c>VoiceCaption</c> setting also determines the text displayed in the <em>Listening Tip</em> to indicate the
					commands for which the character listens.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Commands.Caption" suffix="Property"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Commands.VoiceGrammar">
			<summary>Returns or sets the text that is passed to the speech engine (for recognition).</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>commands</em>.<c>get_VoiceGrammar</c> (&amp;<em>BSTR</em>)
</para>
<para>
<em>commands</em>.<c>put_VoiceGrammar</c> (<em>BSTR</em>)
</para>
</cpp>
<csharp>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.<c>VoiceGrammar</c>[ = <em>string</em>]
</csharp>
<vb>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.<c>VoiceGrammar</c>[ = <em>String</em>]
</vb>
</syntax>
			<remarks>
				<para>
					If you do not supply this parameter, the <c>VoiceCaption</c> for your <c>Commands</c> object will not
					appear in the Voice Commands Window.
				</para>
				<para>
					The string expression you supply can include square bracket characters ([ ]) to indicate optional words
					and vertical bar characters, (|) to indicate alternative strings. Alternates must be enclosed in parentheses.
					For example, "(hello [there] | hi)" tells the speech engine to accept "hello," "hello there," or "hi"
					for the command. Remember to include appropriate spaces between the text that's in brackets or parentheses
					and the text that's not in brackets or parentheses. You can use the star (*) operator to specify zero
					or more instances of the words included in the group or the plus (+) operator to specify one or more
					instances. For example, the following results in a grammar that supports "try this", "please try this",
					"please please try this", with unlimited iterations of "please":
				</para>
				<code xml:space="preserve">   "please* try this"</code>
				<para>
					The following grammar format excludes "try this" because the + operator defines at least one instance
					of "please":
				</para>
				<code xml:space="preserve">   "please+ try this"</code>
				<para>
					The repetition operators follow normal rules of precedence and apply to the immediately preceding text
					item. For example, the following grammar results in "New York" and "New York York", but not "New York
					New York":
				</para>
				<code xml:space="preserve">   "New York+"</code>
				<para>
					Therefore, you typically want to use these operators with the grouping characters. For example, the following
					grammar includes both "New York" and "New York New York":
				</para>
				<code xml:space="preserve">   "(New York)+"</code>
				<para>
					Repetition operators are useful when you want to compose a grammar that includes a repeated sequence
					such as a phone number or specification of a list of items:
				</para>
				<code xml:space="preserve">   "call (one|two|three|four|five|six|seven|eight|nine|zero|oh)*"
   "I'd like (cheese|pepperoni|pineapple|canadian bacon|mushrooms|and)+"</code>
				<para>
					Although the operators can also be used with the optional square-brackets grouping character, doing so
					may reduce the efficiency of Agent's processing of the grammar.
				</para>
				<para>
					You can also use an ellipsis (…) to support <em>word spotting</em>, that is, telling the speech recognition
					engine to ignore words spoken in this position in the phrase (sometimes called <em>garbage</em> words).
					When you use ellipses, the speech engine recognizes only specific words in the string regardless of
					when spoken with adjacent words or phrases. For example, if you set this property to "[…] check mail
					[…]", the speech recognition engine will match phrases like "please check mail" or "check mail please"
					to this command. Ellipses can be used anywhere within a string. However, be careful using this technique
					as voice settings with ellipses may increase the potential of unwanted matches.
				</para>
				<para>
					When defining the word grammar for your command, include at least one word that is required; that is,
					avoid supplying only optional words. In addition, make sure that the word includes only pronounceable
					words and letters. For numbers, it is better to spell out the word than use an ambiguous representation.
					For example, "345" is not a good grammar form. Similarly, instead of "IEEE", use "I triple E". Also,
					omit any punctuation or symbols. For example, instead of "the #1 $10 pizza!", use "the number one ten
					dollar pizza". Including non-pronounceable characters or symbols for one command may cause the speech
					engine to fail to compile the grammar for all your commands. Finally, make your voice parameter as distinct
					as reasonably possible from other voice commands you define. The greater the similarity between the
					voice grammar for commands, the more likely the speech engine will make a recognition error. You can
					also use the confidence scores to better distinguish between two commands that may have similar or similar-sounding
					voice grammar.
				</para>
				<para>
					You can include in your grammar words in the form of "<em>text\pronunciation</em>", where <em>text</em> is
					the text displayed and <em>pronunciation</em> is text that clarifies the pronunciation. For example, the
					grammar, "1st\first", would be recognized when the user says "first", but the <c>Command</c> event will
					return the text, "1st\first". You can also use IPA (International Phonetic Alphabet) to specify a pronunciation
					by beginning the pronunciation with a pound sign character ("#"), then the text representing the IPA
					pronunciation.
				</para>
				<note>
					Except for errors using the grouping or repetition formatting characters,
					Agent will not report errors in your grammar, unless the engine itself reports the error. If you pass
					text in your grammar that the engine fails to compile, but the engine does not handle and return as
					an error, Agent cannot report the error. Therefore, the client application must be carefully define
					grammar for the <c>VoiceGrammar</c> property.
				</note>
				<note>
					The grammar features available may depend on the speech recognition
					engine. You may want to check with the engine's vendor to determine what grammar options are supported.
					Use the <c>SRModeID</c> to use a specific engine.
				</note>

			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.Command">
			<summary>
				<para>
					The following <c>Command</c> properties are supported:
				</para>
				<para>
				</para>
			</summary>
			<syntax>
				<list type="bullet">
					<item>
						<term>
							The <c>Command</c> object has the following <c>methods</c>:
						</term>
						<description>
						</description>
					</item>
					<item>
						<term>
							The <c>Command</c> object has the following <c>properties</c>:
						</term>
						<description>
							<see cref="P:DoubleAgent.Control.Command.Caption"/>,
							<see cref="P:DoubleAgent.Control.Command.Confidence"/>,
							<see cref="P:DoubleAgent.Control.Command.ConfidenceText"/>,
							<see cref="P:DoubleAgent.Control.Command.Enabled"/>,
							<see cref="P:DoubleAgent.Control.Command.HelpContextID"/>,
							<see cref="P:DoubleAgent.Control.Command.Visible"/>,
							<see cref="P:DoubleAgent.Control.Command.VoiceCaption"/>,
							<see cref="P:DoubleAgent.Control.Command.VoiceGrammar"/>
						</description>
					</item>
				</list>
			</syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Command.Caption">
			<summary>
				Determines the text displayed for a <c>Command</c> in the specified character's pop-up menu.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>command</em>.<c>get_Caption</c> (&amp;<em>BSTR</em>)
</para>
<para>
<em>command</em>.<c>put_Caption</c> (<em>BSTR</em>)
</para>
</cpp>
<csharp>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>Caption</c>[ = <em>string</em>]
</csharp>
<vb>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>Caption</c>[ = <em>String</em>]
</vb>
</syntax>
			<remarks>
				<para>
					To specify an access key (unlined mnemonic) for your <c>Caption</c>, include an ampersand (&amp;) character
					before that character.
				</para>
				<para>
					If you don't define a <c>VoiceCaption</c> for your command, your <c>Caption</c> setting will be used.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Command.Confidence">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Command.ConfidenceThreshold"/> property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Command.ConfidenceText">
			<summary>
				Returns or sets the client's <c>ConfidenceText</c> that appears in the <em>Listening Tip</em>.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>command</em>.<c>get_ConfidenceText</c> (&amp;<em>BSTR</em>)
</para>
<para>
<em>command</em>.<c>put_ConfidenceText</c> (<em>BSTR</em>)
</para>
</cpp>
<csharp>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>ConfidenceText</c>[ = <em>string</em>]
</csharp>
<vb>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>ConfidenceText</c>[ = <em>String</em>]
</vb>
</syntax>
			<remarks>
				<para>
					When the returned confidence value of the best match (<c>UserInput.Confidence</c>) does not exceed the
					<c>Confidence</c> setting, Double Agent displays the text supplied in <c>ConfidenceText</c> in the <em>Listening Tip</em>.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Command.ConfidenceThreshold" suffix="Property"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Command.ConfidenceThreshold">
			<summary>
				Returns or sets whether the client's <c>ConfidenceText</c> appears in the <em>Listening Tip</em>.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>command</em>.<c>get_Confidence</c> (&amp;<em>long</em>)
</para>
<para>
<em>command</em>.<c>put_Confidence</c> (<em>long</em>)
</para>
</cpp>
<csharp>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>Confidence</c>[ = <em>int</em>]
</csharp>
<vbnet>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>Confidence</c>[ = <em>Integer</em>]
</vbnet>
<vb>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>Confidence</c>[ = <em>Long</em>]
</vb>
</syntax>
			<remarks>
				<para>
					If the returned confidence value of the best match (<c>UserInput.Confidence</c>) does not exceed value
					you set for the <c>Confidence</c> property, the text supplied in <c>ConfidenceText</c> is displayed
					in the <em>Listening Tip</em>.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Command.ConfidenceText" suffix="Property"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Command.Enabled">
			<summary>
				Returns or sets whether the <c>Command</c> is enabled in the specified character's pop-up menu.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>command</em>.<c>get_Enabled</c> (&amp;<em>VARIANT_BOOL</em>)
</para>
<para>
<em>command</em>.<c>put_Enabled</c> (<em>VARIANT_BOOL</em>)
</para>
</cpp>
<csharp>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>Enabled</c>[ = <em>bool</em>]
</csharp>
<vb>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>Enabled</c>[ = <em>Boolean</em>]
</vb>
</syntax>
			<remarks>
				<para>
					If the <c>Enabled</c> property is set to <c>True</c>, the <c>Command</c> object's caption appears as
					normal text in the character's pop-up menu when the client application is input-active. If the <c>
						Enabled
					</c>property is <c>False</c>, the caption appears as unavailable (disabled) text. A disabled <c>Command</c>
					is also not accessible for voice input.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Command.HelpContextID">
			<summary>Not supported</summary>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Command.Name">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Command.Visible">
			<summary>
				Returns or sets whether the <c>Command</c> is visible in the character's pop-up menu.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>command</em>.<c>get_Visible</c> (&amp;<em>VARIANT_BOOL</em>)
</para>
<para>
<em>command</em>.<c>put_Visible</c> (<em>VARIANT_BOOL</em>)
</para>
</cpp>
<csharp>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>Visible</c>[ = <em>bool</em>]
</csharp>
<vb>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>Visible</c>[ = <em>Boolean</em>]
</vb>
</syntax>
			<remarks>
				<para>
					Set this property to <c>False</c> when you want to include voice input for your own interfaces without
					having them appear in the pop-up menu for the character. If you set a <c>Command</c> object's <c>Caption</c>
					property to the empty string (""), the caption text will not appear in the pop-up menu (for example,
					as a blank line), regardless of its <c>Visible</c> property setting.
				</para>
				<para>
					The <c>Visible</c> property setting of a <c>Command</c> object's parent <c>Commands</c> collection does
					not affect the <c>Visible</c> property setting of the <c>Command</c>.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Command.Voice">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Command.VoiceGrammar"/> property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Command.VoiceCaption">
			<summary>
				Sets or returns the text displayed for the <c>Command</c> object in the Voice Commands Window.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>command</em>.<c>get_VoiceCaption</c> (&amp;<em>BSTR</em>)
</para>
<para>
<em>command</em>.<c>put_VoiceCaption</c> (<em>BSTR</em>)
</para>
</cpp>
<csharp>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>VoiceCaption</c>[ = <em>string</em>]
</csharp>
<vb>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>VoiceCaption</c>[ = <em>String</em>]
</vb>
</syntax>
			<remarks>
				<para>
					If you define a <c>Command</c> object in a <c>Commands</c> collection and set its <c>Voice</c> property,
					you will typically also set its <c>VoiceCaption</c> property. This text will appear in the Voice Commands
					Window when your client application is input-active and the character is visible. If this property is
					not set, the setting for the <c>Caption</c> property determines the text displayed. When neither the
					<c>VoiceCaption</c> nor <c>Caption</c> property is set, the command does not appear in the Voice Commands
					Window.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Command.Caption" suffix="Property"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Command.VoiceGrammar">
			<summary>
				Returns or sets the text that is passed to the speech engine grammar (for recognition) for matching
				this <c>Command</c> for the character.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>command</em>.<c>get_VoiceGrammar</c> (&amp;<em>BSTR</em>)
</para>
<para>
<em>command</em>.<c>put_VoiceGrammar</c> (<em>BSTR</em>)
</para>
</cpp>
<csharp>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>VoiceGrammar</c>[ = <em>string</em>]
</csharp>
<vb>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>VoiceGrammar</c>[ = <em>String</em>]
</vb>
</syntax>
			<remarks>
				<para>
					If you do not supply this parameter, the <c>VoiceCaption</c> for your <c>Commands</c> object will not
					appear in the Voice Commands Window. If you specify a <c>Voice</c> parameter but not a <c>VoiceCaption</c>
					(or <c>Caption</c>), the command will not appear in the Voice Commands Window, but it will be voice-accessible
					when the client application becomes input-active.
				</para>
				<para>
					Your string expression can include square bracket characters ([ ]) to indicate optional words and vertical
					bar characters (|) to indicate alternative strings. Alternates must be enclosed in parentheses. For
					example, "(hello [there] | hi)" tells the speech engine to accept "hello," "hello there," or "hi" for
					the command. Remember to include appropriate spaces between the text that's in brackets or parentheses
					and the text that's not in brackets or parentheses.
				</para>
				<para>
					You can use the star (*) operator to specify zero or more instances of the words included in the group
					or the plus (+) operator to specify one or more instances. For example, the following results in a grammar
					that supports "try this", "please try this", "please please try this", with unlimited iterations of
					"please":
				</para>
				<code xml:space="preserve">   "please* try this"</code>
				<para>
					The following grammar format excludes "try this" because the + operator defines at least one instance
					of "please":
				</para>
				<code xml:space="preserve">   "please+ try this"</code>
				<para>
					The repetition operators follow normal rules of precedence and apply to the immediately preceding text
					item. For example, the following grammar results in "New York" and "New York York", but not "New York
					New York":
				</para>
				<code xml:space="preserve">   "New York+"</code>
				<para>
					Therefore, you typically want to use these operators with the grouping characters. For example, the following
					grammar includes both "New York" and "New York New York":
				</para>
				<code xml:space="preserve">   "(New York)+"</code>
				<para>
					Repetition operators are useful when you want to compose a grammar that includes a repeated sequence
					such as a phone number or specification of a list of items.
				</para>
				<code xml:space="preserve">   "call (one|two|three|four|five|six|seven|eight|nine|zero|oh)*"
   "I'd like (cheese|pepperoni|pineapple|canadian bacon|mushrooms|and)+"</code>
				<para>
					Although the operators can also be used with the optional square-brackets grouping character, doing so
					may reduce the efficiency of Agent's processing of the grammar.
				</para>
				<para>
					You can also use an ellipsis (…) to support <em>word spotting</em>, that is, telling the speech recognition
					engine to ignore words spoken in this position in the phrase (sometimes called <em>garbage</em> words).
					Therefore, the speech engine recognizes only specific words in the string regardless of when spoken
					with adjacent words or phrases. For example, if you set this property to "[…] check mail […]", the speech
					recognition engine will match phrases like "please check mail" or "check mail please" to this command.
					Ellipses can be used anywhere within a string. However, be careful using this technique as it may increase
					the potential of unwanted matches.
				</para>
				<para>
					When defining the word grammar for your command, include at least one word that is required; that is,
					avoid supplying only optional words. In addition, make sure that the word includes only pronounceable
					words and letters. For numbers, it is better to spell out the word rather than using an ambiguous representation.
					For example, "345" is not a good grammar form. Similarly, instead of "IEEE", use "I triple E". Also,
					omit any punctuation or symbols. For example, instead of "the #1 $10 pizza!", use "the number one ten
					dollar pizza". Including non-pronounceable characters or symbols for one command may cause the speech
					engine to fail to compile the grammar for all your commands. Finally, make your voice parameter as distinct
					as reasonably possible from other voice commands you define. The greater the similarity between the
					voice grammar for commands, the more likely the speech engine will make a recognition error. You can
					also use the confidence scores to better distinguish between two commands that may have similar or similar-sounding
					voice grammar.
				</para>
				<para>
					You can include in your grammar words in the form of "<em>text\pronunciation</em>", where <em>text</em> is
					the text displayed and <em>pronunciation</em> is text that clarifies the pronunciation. For example, the
					grammar, "1st\first", would be recognized when the user says "first", but the <c>Command</c> event will
					return the text, "1st\first". You can also use IPA (International Phonetic Alphabet) to specify a pronunciation
					by beginning the pronunciation with a pound sign character ("#"), then include the text representing
					the IPA pronunciation.
				</para>
				<para>
					For Japanese speech recognition engines, you can define grammar in the form "<em>kana\kanji</em>", reducing
					the alternative pronunciations and increasing the accuracy. (The ordering is reversed for backward compatibility.)
					This is particularly important for the pronunciation of proper names in Kanji. However, you can just
					pass in Kanji without the Kana, in which case the engine should listen for all acceptable pronunciations
					for the Kanji. You can also pass in just Kana.
				</para>
				<para>
					Also note that for languages such as Japanese, Chinese, and Thai, that do not use space characters to
					designate word breaks, insert a Unicode zero-width space character (0x200B) to indicate logical word
					breaks.
				</para>
				<para>
					Except for errors using the grouping or repetition formatting characters, Agent will not report errors
					in your grammar, unless the engine itself reports the error. If you pass text in your grammar that the
					engine fails to compile, but the engine does not handle and return as an error, Agent cannot report
					the error. Therefore, the client application must be carefully define grammar for the <c>Voice</c> property.
				</para>
				<note>
					The grammar features available may depend on the speech recognition
					engine. You may want to check with the engine's vendor to determine what grammar options are supported.
					Use the <c>SRModeID</c> to use a specific engine.
				</note>
				<note>
					The operation of this property depends on the state of Double Agent's speech recognition property.
					For example, if speech recognition is disabled or not installed, this property has no effect.
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.Balloon">
			<summary>
				<para>
					Double Agent supports textual captioning of the <see cref="M:DoubleAgent.Control.Character.Speak"/> method using a cartoon word balloon. The
					<see cref="M:DoubleAgent.Control.Character.Think"/> method lets you display text without audio output in a "thought" word balloon.
				</para>
				<para>
					A character's initial word balloon window defaults are defined and compiled in the Microsoft Agent Character
					Editor. Once running, the balloon's <c>Enabled</c> and <c>Font</c> properties may be overridden by the
					user. If a user changes the word balloon's properties, they affect all characters. Both the <see cref="M:DoubleAgent.Control.Character.Speak"/>
					and <see cref="M:DoubleAgent.Control.Character.Think"/> word balloons use the same property settings for size. You can access the properties
					for a character's word balloon through the <c>Balloon</c> object, which is a child of the <see cref="T:DoubleAgent.Control.Character"/>
					object.
				</para>
				<para>
					The <c>Balloon</c> object has the following properties:
				</para>
				<para>
				</para>
			</summary>
			<syntax>
				<list type="bullet">
					<item>
						<term>
							The <c>Balloon</c> object has the following <c>methods</c>:
						</term>
						<description>
						</description>
					</item>
					<item>
						<term>
							The <c>Balloon</c> object has the following <c>properties</c>:
						</term>
						<description>
							<see cref="P:DoubleAgent.Control.Balloon.AutoHide"/>,
							<see cref="P:DoubleAgent.Control.Balloon.AutoPace"/>,
							<see cref="P:DoubleAgent.Control.Balloon.BackColor"/>,
							<see cref="P:DoubleAgent.Control.Balloon.BorderColor"/>,
							<see cref="P:DoubleAgent.Control.Balloon.CharsPerLine"/>,
							<see cref="P:DoubleAgent.Control.Balloon.Enabled"/>,
							<see cref="P:DoubleAgent.Control.Balloon.FontBold"/>,
							<see cref="P:DoubleAgent.Control.Balloon.FontCharSet"/>,
							<see cref="P:DoubleAgent.Control.Balloon.FontItalic"/>,
							<see cref="P:DoubleAgent.Control.Balloon.FontName"/>,
							<see cref="P:DoubleAgent.Control.Balloon.FontSize"/>,
							<see cref="P:DoubleAgent.Control.Balloon.FontStrikethru"/>,
							<see cref="P:DoubleAgent.Control.Balloon.FontUnderline"/>,
							<see cref="P:DoubleAgent.Control.Balloon.TextColor"/>,
							<see cref="P:DoubleAgent.Control.Balloon.NumberOfLines"/>,
							<see cref="P:DoubleAgent.Control.Balloon.ShowPartialLines"/>,
							<see cref="P:DoubleAgent.Control.Balloon.SizeToText"/>,
							<see cref="P:DoubleAgent.Control.Balloon.Style"/>,
							<see cref="P:DoubleAgent.Control.Balloon.Visible"/>
						</description>
					</item>
				</list>
			</syntax>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.BackColor">
			<summary>Returns or sets the background color of a character's word balloon.</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>balloon</em>-&gt;<c>get_BackColor</c> (<em>&amp;long</em>);
</para>
<para>
<em>balloon</em>-&gt;<c>put_BackColor</c> (<em>long</em>);
</para>
</cpp>
<csharp>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.BackColor</c>[ = <em>int</em>];
</csharp>
<vb>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.BackColor</c>[ = <em>Integer</em>]
</vb>
</syntax>
			<remarks>
				The valid range for a normal RGB color is 0 to 16,777,215 (&amp;HFFFFFF). The high byte of a number in
				this range equals 0; the lower 3 bytes, from least to most significant byte, determine the amount of
				red, green, and blue, respectively. The red, green, and blue components are each represented by a number
				between 0 and 255 (&amp;HFF).
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.BorderColor">
			<summary>
				Returns or sets the border color of a character's word balloon.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>balloon</em>-&gt;<c>get_BorderColor</c> (<em>&amp;long</em>);
</para>
<para>
<em>balloon</em>-&gt;<c>put_BorderColor</c> (<em>long</em>);
</para>
</cpp>
<csharp>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.BorderColor</c>[ = <em>int</em>];
</csharp>
<vb>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.BorderColor</c>[ = <em>Integer</em>]
</vb>
</syntax>
			<remarks>
				The valid range for a normal RGB color is 0 to 16,777,215 (&amp;HFFFFFF). The high byte of a number in
				this range equals 0; the lower 3 bytes, from least to most significant byte, determine the amount of
				red, green, and blue, respectively. The red, green, and blue components are each represented by a number
				between 0 and 255 (&amp;HFF).
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.CharsPerLine">
			<summary>
				Returns or sets the characters per line used for a character's word balloon.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>balloon</em>-&gt;<c>get_CharsPerLine</c> (<em>&amp;long</em>);
</para>
<para>
<em>balloon</em>-&gt;<c>put_CharsPerLine</c> (<em>long</em>);
</para>
</cpp>
<csharp>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.CharsPerLine</c>[ = <em>int</em>];
</csharp>
<vb>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.CharsPerLine</c>[ = <em>Integer</em>]
</vb>
</syntax>
			<remarks>
				The <c>CharsPerLine</c> property is the average number of characters (letters) displayed in
				the word balloon. For compatibility with Microsoft Agent, you can also set the value using the <see cref="P:DoubleAgent.Control.Balloon.Style"/> property.
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Balloon.Style" suffix="Property"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.Enabled">
			<summary>
				Returns whether the word balloon is enabled for a character.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<em>balloon</em>-&gt;<c>get_Enabled</c> (<em>&amp;VARIANT_BOOL</em>);
</cpp>
<csharp>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.Enabled</c>;
</csharp>
<vb>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.Enabled</c>
</vb>
</syntax>
			<remarks>
				<para>
					The <c>Enabled</c> property returns a boolean value specifying whether the balloon is enabled. The word
					balloon default state is set as part of a character's definition when the character is compiled in the
					Microsoft Agent Character Editor. If a character is defined to not support the word balloon, this property
					will always be <c>false</c> for the character.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.FontCharSet">
			<summary>
				Returns or sets the character set for the font used in a character's word balloon.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>balloon</em>-&gt;<c>get_FontCharSet</c> (<em>&amp;long</em>);
</para>
<para>
<em>balloon</em>-&gt;<c>put_FontCharSet</c> (<em>long</em>);
</para>
</cpp>
<csharp>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.FontCharSet</c>[ = <em>int</em>];
</csharp>
<vb>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.FontCharSet</c>[ = <em>Integer</em>]
</vb>
</syntax>
			<remarks>
				<para>
					The default value for the character set of a character's word balloon is set in the Microsoft Agent Character
					Editor. In addition, the user can override the character-set settings for all characters in the Double
					Agent property sheet.
				</para>
				<para>
					This property applies only to your client application's use of the character; the setting does not affect
					other clients of the character or other characters of your client application.
				</para>
				<note>
					If you're using a character that you didn't compile, check the
					<c>FontName</c> and <c>FontCharSet</c> properties for the character to determine whether they are appropriate
					for your locale. You may need to set these values before using the <see cref="M:DoubleAgent.Control.Character.Speak"/> method to ensure appropriate
					text display within the word balloon.
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Balloon.FontName" suffix="Property"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.FontName">
			<summary>
				Returns or sets the font used in the word balloon for the specified character.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>balloon</em>-&gt;<c>get_FontName</c> (<em>&amp;BSTR</em>);
</para>
<para>
<em>balloon</em>-&gt;<c>put_FontName</c> (<em>BSTR</em>);
</para>
</cpp>
<csharp>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.FontName</c>[ = <em>string</em>];
</csharp>
<vb>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.FontName</c>[ = <em>String</em>]
</vb>
</syntax>
			<remarks>
				<para>
					The <c>FontName</c> property defines the font used to display text in the word balloon window as a string.
					The default value for the font settings of a character's word balloon are set in the Microsoft Agent
					Character Editor. In addition, the user can override font settings for all characters in the Double
					Agent property sheet.
				</para>
				<para>
					This property applies only to your client application's use of the character; the setting does not affect
					other clients of the character or other characters of your client application.
				</para>
				<note>
					If you're using a character that you didn't compile, check the
					<c>FontName</c> and <c>FontCharSet</c> properties for the character to determine whether they are appropriate
					for your locale. You may need to set these values before using the <see cref="M:DoubleAgent.Control.Character.Speak"/> method to ensure appropriate
					text display within the word balloon.
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Balloon.FontCharSet" suffix="Property"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.FontBold">
			<summary>
				Returns or sets the font style of a character's the word balloon.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>balloon</em>-&gt;<c>get_FontBold</c> (<em>&amp;VARIANT_BOOL</em>);
</para>
<para>
<em>balloon</em>-&gt;<c>put_FontBold</c> (<em>VARIANT_BOOL</em>);
</para>
</cpp>
<csharp>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.FontBold</c>[ = <em>bool</em>];
</csharp>
<vb>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.FontBold</c>[ = <em>Boolean</em>]
</vb>
</syntax>
			<remarks>
				The default values for the font settings of a character's word balloon are set in the Microsoft Agent
				Character Editor. In addition, the user can override font settings for all characters in the Double
				Agent property sheet.
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.FontItalic">
			<summary>
				Returns or sets the font style of a character's the word balloon.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>balloon</em>-&gt;<c>get_FontItalic</c> (<em>&amp;VARIANT_BOOL</em>);
</para>
<para>
<em>balloon</em>-&gt;<c>put_FontItalic</c> (<em>VARIANT_BOOL</em>);
</para>
</cpp>
<csharp>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.FontItalic</c>[ = <em>bool</em>];
</csharp>
<vb>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.FontItalic</c>[ = <em>Boolean</em>]
</vb>
</syntax>
			<remarks>
				The default values for the font settings of a character's word balloon are set in the Microsoft Agent
				Character Editor. In addition, the user can override font settings for all characters in the Double
				Agent property sheet.
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.FontSize">
			<summary>
				Returns or sets the font size supported for the word balloon for the specified character.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>balloon</em>-&gt;<c>get_FontSize</c> (<em>&amp;long</em>);
</para>
<para>
<em>balloon</em>-&gt;<c>put_FontSize</c> (<em>long</em>);
</para>
</cpp>
<csharp>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.FontSize</c>[ = <em>int</em>];
</csharp>
<vb>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.FontSize</c>[ = <em>Integer</em>]
</vb>
</syntax>
			<remarks>
				<para>
					The <c>FontSize</c> property returns a Long integer value specifying the current font size in points.
					The maximum value for <c>FontSize</c> is 2160 points.
				</para>
				<para>
					The default value for the font settings of a character's word balloon are set in the Microsoft Agent
					Character Editor. In addition, the user can override font settings for all characters in the Double
					Agent property sheet.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.FontStrikethru">
			<summary>
				Returns or sets the font style of a character's the word balloon.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>balloon</em>-&gt;<c>get_FontStrikethru</c> (<em>&amp;VARIANT_BOOL</em>);
</para>
<para>
<em>balloon</em>-&gt;<c>put_FontStrikethru</c> (<em>VARIANT_BOOL</em>);
</para>
</cpp>
<csharp>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.FontStrikethru</c>[ = <em>bool</em>];
</csharp>
<vb>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.FontStrikethru</c>[ = <em>Boolean</em>]
</vb>
</syntax>
			<remarks>
				The default values for the font settings of a character's word balloon are set in the Microsoft Agent
				Character Editor. In addition, the user can override font settings for all characters in the Double
				Agent property sheet.
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.FontUnderline">
			<summary>
				Returns or sets the font style of a character's the word balloon.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>balloon</em>-&gt;<c>get_FontUnderline</c> (<em>&amp;VARIANT_BOOL</em>);
</para>
<para>
<em>balloon</em>-&gt;<c>put_FontUnderline</c> (<em>VARIANT_BOOL</em>);
</para>
</cpp>
<csharp>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.FontUnderline</c>[ = <em>bool</em>];
</csharp>
<vb>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.FontUnderline</c>[ = <em>Boolean</em>]
</vb>
</syntax>
			<remarks>
				The default values for the font settings of a character's word balloon are set in the Microsoft Agent
				Character Editor. In addition, the user can override font settings for all characters in the Double
				Agent property sheet.
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.ForeColor">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Balloon.TextColor"/> property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.TextColor">
			<summary>
				Returns the foreground color currently displayed in the word balloon window for the specified character.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>balloon</em>-&gt;<c>get_TextColor</c> (<em>&amp;long</em>);
</para>
<para>
<em>balloon</em>-&gt;<c>put_TextColor</c> (<em>long</em>);
</para>
</cpp>
<csharp>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.TextColor</c>[ = <em>int</em>];
</csharp>
<vb>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.TextColor</c>[ = <em>Integer</em>]
</vb>
</syntax>
			<remarks>
				<para>
					The <c>ForeColor</c> property returns a value that specifies the color of text in the word balloon. The
					valid range for a normal RGB color is 0 to 16,777,215 (&amp;HFFFFFF). The high byte of a number in this
					range equals 0; the lower 3 bytes, from least to most significant byte, determine the amount of red,
					green, and blue, respectively. The red, green, and blue components are each represented by a number
					between 0 and 255 (&amp;HFF).
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.NumberOfLines">
			<summary>
				Returns or sets the number of lines used for a character's word balloon.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>balloon</em>-&gt;<c>get_NumberOfLines</c> (<em>&amp;long</em>);
</para>
<para>
<em>balloon</em>-&gt;<c>put_NumberOfLines</c> (<em>long</em>);
</para>
</cpp>
<csharp>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.NumberOfLines</c>[ = <em>int</em>];
</csharp>
<vb>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.NumberOfLines</c>[ = <em>Integer</em>]
</vb>
</syntax>
			<remarks>
				The <c>NumberOfLines</c> property is only used if the word balloon doesn't have the <c>AutoSize</c> style.
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Balloon.Style" suffix="Property"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.Style">
			<summary>
				Returns or sets the character's word balloon output style.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>balloon</em>-&gt;<c>get_Style</c> (<em>&amp;long</em>);
</para>
<para>
<em>balloon</em>-&gt;<c>put_Style</c> (<em>long</em>);
</para>
</cpp>
<csharp>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.Style</c>[ = <em>int</em>];
</csharp>
<vb>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.Style</c>[ = <em>Integer</em>]
</vb>
</syntax>
			<remarks>
				<para>
					When the balloon-on style bit is set to 1, the word balloon appears when a <see cref="M:DoubleAgent.Control.Character.Speak"/> or <see cref="M:DoubleAgent.Control.Character.Think"/>
					method is used, unless the user overrides this setting in the Double Agent property sheet. When set
					to 0, a balloon does not appear.
				</para>
				<para>
					When the size-to-text style bit is set to 1, the word balloon automatically sizes the height of the balloon
					to the current size of the text for the <see cref="M:DoubleAgent.Control.Character.Speak"/> or <see cref="M:DoubleAgent.Control.Character.Think"/> statement. When set to 0, the balloon's
					height is based on the <see cref="P:DoubleAgent.Control.Balloon.NumberOfLines"/> property setting. If this style bit is set to 1 and you
					attempt to set the <see cref="P:DoubleAgent.Control.Balloon.NumberOfLines"/> property, Agent raises an error.
				</para>
				<para>
					When the auto-hide style bit is set to 1, the word balloon automatically hides when spoken output completes.
					When set to 0, the balloon remains displayed until the next <see cref="M:DoubleAgent.Control.Character.Speak"/> or <see cref="M:DoubleAgent.Control.Character.Think"/> call, the character
					is hidden, or the user clicks or drags the character.
				</para>
				<para>
					When the auto-pace style bit is set to 1, the word balloon paces the output based on the current output
					rate, for example, one word at a time. When output exceeds the size of the balloon, the former text
					is automatically scrolled. When set to 0, all text included in a <see cref="M:DoubleAgent.Control.Character.Speak"/> or <see cref="M:DoubleAgent.Control.Character.Think"/> statement
					is displayed at once.
				</para>
				<para>
					To retrieve just the value of the bottom four bits, <c>And</c> the value returned by <c>Style</c> with
					255. To set a bit value, <c>Or</c> the value returned with the value of the bits you want set. To turn
					a bit off, <c>And</c> the value returned with one's complement of the bit:
				</para>
				<code xml:space="preserve">   Const BalloonOn = 1

   ' Turn the word balloon off
   Genie.Balloon.Style = Genie.Balloon.Style And (Not BalloonOn)
   Genie.Speak "No balloon"

   ' Turn the word balloon on
   Genie.Balloon.Style = Genie.Balloon.Style Or BalloonOn
   Genie.Speak "Balloon"</code>
				<para>
					The <c>Style</c> property also returns the number of characters per line in the lower byte of the upper
					word and the number of lines in the high byte of the upper word. While this can be more easily read
					using the <c>CharsPerLine</c> and <c>NumberOfLines</c> properties, the <c>Style</c> property also enables
					you to set those values.
				</para>
				<para>
					For example, to change the number of lines, clear bits 24 to 31 with a logical <c>AND</c> operation before
					setting the new value as the product of the new value times 2^24, added to the existing value of the
					<c>Style</c> property.
				</para>
				<code xml:space="preserve">   ' Set the number of lines to 4
   Genie.Balloon.Style = (Genie.Balloon.Style <c>AND</c> &amp;H00FFFFFF) + (4*(2^24))</code>
				<para>
					To set the number of characters per line, clear bits 16 to 23 with a logical <c>AND</c> operation before
					setting the new value as the product of the new value times 2^16, added to the existing value of the
					Style property.
				</para>
				<code xml:space="preserve">   ' Set the number of characters per line to 16
   Genie.Balloon.Style = (Genie.Balloon.Style AND &amp;HFF00FFFF) + (16*(2^16))</code>
				<para>
					The <c>Style</c> property can be set even if the user has disabled balloon display using the Double
					Agent property sheet. However, the values for the number of lines must be between 1 and 128 and the
					number characters per line must be between 8 and 255. If you provide an invalid value for the <c>Style</c>
					property, Agent will raise an error.
				</para>
				<para>
					This property applies only to your client application's use of the character; the setting does not affect
					other clients of the character or other characters of your client application.
				</para>
				<para>
					The defaults for these style bits are based on their settings when the character is compiled with the
					Microsoft Agent Character Editor.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.Visible">
			<summary>
				Returns or sets the visiblity of a character's word balloon.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>
<em>balloon</em>-&gt;<c>get_Visible</c> (<em>&amp;VARIANT_BOOL</em>);
</para>
<para>
<em>balloon</em>-&gt;<c>put_Visible</c> (<em>VARIANT_BOOL</em>);
</para>
</cpp>
<csharp>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.Visible</c>[ = <em>bool</em>];
</csharp>
<vb>
<em>control</em><c>.Characters ("</c><em>CharacterID</em><c>").Balloon.Visible</c>[ = <em>Boolean</em>]
</vb>
</syntax>
			<remarks>
				<para>
					If you follow a <see cref="M:DoubleAgent.Control.Character.Speak"/> or <see cref="M:DoubleAgent.Control.Character.Think"/> call with a statement to attempt to change the balloon's
					property, it may not affect the balloon's Visible state because the <see cref="M:DoubleAgent.Control.Character.Speak"/> or <see cref="M:DoubleAgent.Control.Character.Think"/> call
					gets queued, but the call setting the balloon's visible state does not. Therefore, only set this value
					when no <see cref="M:DoubleAgent.Control.Character.Speak"/> or <see cref="M:DoubleAgent.Control.Character.Think"/> calls are in the character's queue.
				</para>
				<para>
					If you attempt to set this property while the character is speaking, moving, or being dragged, the property
					setting does not take effect until the preceding operation is completed.
				</para>
				<para>
					Calling the <see cref="M:DoubleAgent.Control.Character.Speak"/> and <see cref="M:DoubleAgent.Control.Character.Think"/> methods automatically makes the balloon visible, setting the
					<c>Visible</c> property to <c>True</c>. If the character's balloon AutoHide property is enabled, the
					balloon is automatically hidden after the output text is spoken. Clicking or dragging a character that
					is not currently speaking also automatically hides the balloon even if its AutoHide setting is disabled.
					You can change the character's AutoHide setting using the balloon's <see cref="P:DoubleAgent.Control.Balloon.Style"/> property.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Balloon.Style" suffix="Property"/>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.Request">
			<summary>
				<para>
					Double Agent processes some methods, such as <see cref="M:DoubleAgent.Control.Characters.Load"/>, <see cref="M:DoubleAgent.Control.Character.Play"/>, and <see cref="M:DoubleAgent.Control.Character.Speak"/>, asynchronously. This allows your application code to continue while the method is completing. When a client application calls one of these methods, the control queues the request and returns a <c>Request</c> object.
				</para>
				<para>
					The <c>Request</c> object provides several <c>
						<see cref="P:DoubleAgent.Control.Request" text="Properties"/>
					</c> you can use to check the status of your request by keeping a reference to the object.
				</para>
				<para>
					If you create a <c>Request</c> object reference, Double Agent automatically notifies you when an animation request has started or completed through the <see cref="E:DoubleAgent.Control.Control.RequestStart"/> and <see cref="E:DoubleAgent.Control.Control.RequestComplete"/> events. Because methods that return <c>Request</c> objects are asynchronous and may not complete during the scope of the calling function, declare your reference to the <c>Request</c> object globally.
				</para>
			</summary>
			<details>
				<br/>
				<h4>Examples</h4>
				<example>
					<para>In Visual Basic, first declare an object variable:</para>
					<code xml:space="preserve">Dim MyRequest as Object</code>
					<para>In VBScript, you don't include the variable type in your declaration:</para>
					<code xml:space="preserve">Dim MyRequest</code>
					<para>
						And use Visual Basic's <c>Set</c> statement to assign the variable to the return value of the method call:
					</para>
					<code xml:space="preserve">Set MyRequest = <em>control</em>.Characters("<em>CharacterID</em>").<em>method</em> (<em>parameter</em>[s])</code>
					<para>
						This adds a reference to the <c>Request</c> object. The <c>Request</c> object will be destroyed when there are no more references to it. Where you declare the <c>Request</c> object and how you use it determines its lifetime. If the object is declared local to a subroutine or function, it will be destroyed when it goes out of scope; that is, when the subroutine or function ends. If the object is declared globally, it will not be destroyed until either the program terminates or a new value (or a value set to "empty") is assigned to the object.
					</para>
				</example>
			</details>
			<remarks>
				<para>
					The following methods can return a <c>Request</c> object:
					<see cref="M:DoubleAgent.Control.Character.GestureAt"/>,
					<see cref="M:DoubleAgent.Control.Character.Hide"/>,
					<see cref="M:DoubleAgent.Control.Character.Interrupt"/>,
					<see cref="M:DoubleAgent.Control.Characters.Load"/>,
					<see cref="M:DoubleAgent.Control.Character.MoveTo"/>,
					<see cref="M:DoubleAgent.Control.Character.Play"/>,
					<see cref="M:DoubleAgent.Control.Character.Prepare"/>,
					<see cref="M:DoubleAgent.Control.Character.Show"/>,
					<see cref="M:DoubleAgent.Control.Character.Speak"/>,
					<see cref="M:DoubleAgent.Control.Character.Think"/>,
					and <see cref="M:DoubleAgent.Control.Character.Wait"/>.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.RequestStart"/>
			<seealso cref="E:DoubleAgent.Control.Control.RequestComplete"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Request">
			<summary>
				The <see cref="T:DoubleAgent.Control.Request"/> object provides several properties you can use check the status of a request.
			</summary>
			<details>
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.Request.Status']/details"/>
			</details>
			<syntax xml:space="preserve">
<cpp>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.Request.Status']/syntax/cpp"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.Request.Number']/syntax/cpp"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.Request.Description']/syntax/cpp"/>
</cpp>
<csharp>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.Request.Status']/syntax/csharp"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.Request.Number']/syntax/csharp"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.Request.Description']/syntax/csharp"/>
</csharp>
<vb>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.Request.Status']/syntax/vb"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.Request.Number']/syntax/vb"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.Request.Description']/syntax/vb"/>
</vb>
</syntax>
			<param name="Status">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.Request.Status']/param[@name='Status']"/>
			</param>
			<param name="Number">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.Request.Number']/param[@name='Number']"/>
			</param>
			<param name="Description">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.Request.Description']/param[@name='Description']"/>
			</param>
			<remarks>
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.Request.Number']/remarks"/>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Request.Description">
			<summary>
				Returns a description of a request error <see cref="P:DoubleAgent.Control.Request.Number"/>.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>request</em>-&gt;<c>get_Description</c> (<em>&amp;Description</em>)</para>
</cpp>
<csharp>
<para>[<em>Description</em> = ]<em>request</em><c>.Description</c></para>
</csharp>
<vb>
<para>[<em>Description</em> = ]<em>request</em><c>.Description</c></para>
</vb>
</syntax>
			<param name="Description">
				A string value that corresponds to the error <c>Number</c>. If no description is found for an error, <c>Description</c> contains "Application-defined or object-defined error".
			</param>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Request.Number">
			<summary>
				Returns the error or cause of the <see cref="P:DoubleAgent.Control.Request.Status"/> code.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>request</em>-&gt;<c>get_Number</c> (<em>&amp;Number</em>)</para>
</cpp>
<csharp>
<para>[<em>Number</em> = ]<em>request</em><c>.Number</c></para>
</csharp>
<vb>
<para>[<em>Number</em> = ]<em>request</em><c>.Number</c></para>
</vb>
</syntax>
			<param name="Number">
				The error or cause of the <c>Status</c> code. If there is no error, this value is zero.
			</param>
			<remarks>
				<para>
					For the values and meaning returned by the <c>Number</c> property, see <c>Error Codes</c>.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Request.Status">
			<summary>
				You can use the <c>Status</c> property to check the status of your request.
			</summary>
			<details>
				<br/>
				<h4>Example</h4>
				<example>
					<code xml:space="preserve">Dim MyRequest

Set MyRequest = AgentControl.Characters("Genie").Play ("GetAttention")

If (MyRequest.Status = 2) then
    'do something
Else If (MyRequest.Status = 0) then
    'do something right away
End If</code>
				</example>
			</details>
			<syntax xml:space="preserve">
<cpp>
<para><em>request</em>-&gt;<c>get_Status</c> (<em>&amp;Status</em>)</para>
</cpp>
<csharp>
<para>[<em>Status</em> = ]<em>request</em><c>.Status</c></para>
</csharp>
<vb>
<para>[<em>Status</em> = ]<em>request</em><c>.Status</c></para>
</vb>
</syntax>
			<param name="Status">
				The current status of the request.
				<list type="table">
					<item>
						<term>0</term>
						<description>Request successfully completed</description>
					</item>
					<item>
						<term>1</term>
						<description>Request failed</description>
					</item>
					<item>
						<term>2</term>
						<description>Request pending (in the queue, but not complete)</description>
					</item>
					<item>
						<term>3</term>
						<description>Request interrupted</description>
					</item>
					<item>
						<term>4</term>
						<description>Request in progress</description>
					</item>
				</list>
			</param>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.AnimationNames" kind="Collection">
			<summary>
				<para>
					The <c>AnimationNames</c> collection is a special collection that contains the list of animations defined for a character.
				</para>
			</summary>
			<details>
				You can use the collection to enumerate the names of a character's animations. For example, in Visual Basic or VBScript you can access these names using the <c>For Each</c>…<c>Next</c> statements:
				<example>
					<code xml:space="preserve">For Each Animation in Genie.AnimationNames
    Genie.Play Animation
Next</code>
				</example>
			</details>
			<remarks>
				For .ACF characters, the collection returns all the animations that have been defined for the character,
				not just the ones that have been retrieved with the <see cref="M:DoubleAgent.Control.Character.Prepare"/> method.
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.AnimationNames">
			<summary>
				The <see cref="T:DoubleAgent.Control.AnimationNames"/> collection includes properties for accessing its items.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.AnimationNames.Count']/syntax/cpp"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.AnimationNames.Item']/syntax/cpp"/>
</cpp>
<csharp>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.AnimationNames.Count']/syntax/csharp"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.AnimationNames.Item']/syntax/csharp"/>
</csharp>
<vb>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.AnimationNames.Count']/syntax/vb"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.AnimationNames.Item']/syntax/vb"/>
</vb>
</syntax>
			<param name="Count">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.AnimationNames.Count']/param[@name='Count']"/>
			</param>
			<param name="Item">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.AnimationNames.Item']/param[@name='Item']"/>
			</param>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.AnimationNames.Count">
			<summary>
				Returns the count of items in the <see cref="T:DoubleAgent.Control.AnimationNames"/> collection.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>animationnames</em>-&gt;<c>get_Count</c> (<em>&amp;Count</em>)</para>
</cpp>
<csharp>
<para>[<em>Count</em> = ]<em>control</em><c>.Characters</c> ("<em>CharacterID</em>").<c>AnimationNames</c>.<c>Count</c></para>
</csharp>
<vb>
<para>[<em>Count</em> = ]<em>control</em><c>.Characters</c> ("<em>CharacterID</em>").<c>AnimationNames</c>.<c>Count</c></para>
</vb>
</syntax>
			<param name="Count">The number of items in the collection</param>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.AnimationNames.Item">
			<summary>
				Returns an item in the <see cref="T:DoubleAgent.Control.AnimationNames"/> collection.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>animationnames</em>-&gt;<c>get_Item</c> (<em>Index</em>, <em>&amp;Item</em>)</para>
</cpp>
<csharp>
<para>[<em>Item</em> = ]<em>control</em><c>.Characters</c> ("<em>CharacterID</em>").<c>AnimationNames</c>.<c>this</c> [<em>Index</em>]</para>
</csharp>
<vb>
<para>[<em>Item</em> = ]<em>control</em><c>.Characters</c> ("<em>CharacterID</em>").<c>AnimationNames</c>.<c>Item</c> (<em>Index</em>) or</para>
<para>[<em>Item</em> = ]<em>control</em><c>.Characters</c> ("<em>CharacterID</em>").<c>AnimationNames</c> (<em>Index</em>)</para>
</vb>
</syntax>
			<param name="Index">The zero-based index of the item to retrieve</param>
			<param name="Item">An animation name string</param>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.UserInput">
			<summary>
				<para>
					Double Agent sends the <see cref="E:DoubleAgent.Control.Control.Command"/> event when your application is input-active and the user chooses a
					command from the character's pop-up menu or by spoken input. The event passes a <c>UserInput</c> object whose <c>
						<see cref="P:DoubleAgent.Control.UserInput" text="Properties"/>
					</c> identify the number of possible matching commands as well as the name, confidence scoring, and voice text for those matches.
				</para>
			</summary>
			<details>
				<br/>
				<h4>Details</h4>
				<para>
					If voice input triggers this event, Double Agent returns a string that identifies the best match in the
					<see cref="P:DoubleAgent.Control.UserInput.Name"/> parameter, and the second- and third-best matches in <see cref="P:DoubleAgent.Control.UserInput.Alt1Name"/> and <see cref="P:DoubleAgent.Control.UserInput.Alt2Name"/>.
					An empty string indicates that the input did not match any command your application defined. If, for example, the command was matched to the pre-defined <c>Hide</c> command, an empty string would be returned in the <see cref="P:DoubleAgent.Control.UserInput.Name"/> parameter, but you would still
					receive the text heard in the <see cref="P:DoubleAgent.Control.UserInput.Voice"/> parameter.
				</para>
				<para>
					You may get the same command name returned in more than one entry. <see cref="P:DoubleAgent.Control.UserInput.Confidence"/>, <see cref="P:DoubleAgent.Control.UserInput.Alt1Confidence"/>,
					and <see cref="P:DoubleAgent.Control.UserInput.Alt2Confidence"/> parameters return the relative scores, in the range of -100 to 100, that are
					returned by the speech recognition engine for each respective match. <see cref="P:DoubleAgent.Control.UserInput.Voice"/>, <see cref="P:DoubleAgent.Control.UserInput.Alt1Voice"/>,
					and <see cref="P:DoubleAgent.Control.UserInput.Alt2Voice"/> parameters return the voice text that the speech recognition engine matched for
					each alternative. If <see cref="P:DoubleAgent.Control.UserInput.Count"/> returns zero, Double Agent detected spoken input, but determined
					that there was no matching command.
				</para>
				<para>
					If voice input was <c>not</c> the source for the command, for example, if the user selected the command from
					the character's pop-up menu, Double Agent returns the name of the selected command in the <see cref="P:DoubleAgent.Control.UserInput.Name"/> property. It also returns the value of the <see cref="P:DoubleAgent.Control.UserInput.Confidence"/> parameter as 100, and the value of
					the <see cref="P:DoubleAgent.Control.UserInput.Voice"/> parameters as an empty string (""). <see cref="P:DoubleAgent.Control.UserInput.Alt1Name"/> and <see cref="P:DoubleAgent.Control.UserInput.Alt2Name"/> also return
					empty strings. <see cref="P:DoubleAgent.Control.UserInput.Alt1Confidence"/> and <see cref="P:DoubleAgent.Control.UserInput.Alt2Confidence"/> return zero, and <see cref="P:DoubleAgent.Control.UserInput.Alt1Voice"/>
					and <see cref="P:DoubleAgent.Control.UserInput.Alt2Voice"/> return empty strings. <see cref="P:DoubleAgent.Control.UserInput.Count"/> returns 1.
				</para>
			</details>
			<remarks>
				<para>
					Not all speech recognition engines may return all the values for all the properties of this object. Check with your engine vendor to determine whether the engine supports the Microsoft Speech API interface for returning alternatives and confidence scores.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Command" suffix="Event"/>
			<seealso cref="T:DoubleAgent.Control.Command" suffix="Object"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.UserInput">
			<summary>
				The UserInput object provides properties that identify a <see cref="T:DoubleAgent.Control.Command"/> chosen from a character's pop-up menu or by spoken input.
			</summary>
			<details>
			</details>
			<syntax xml:space="preserve">
<cpp>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.CharacterID']/syntax/cpp"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Count']/syntax/cpp"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Name']/syntax/cpp"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Confidence']/syntax/cpp"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Voice']/syntax/cpp"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt1Name']/syntax/cpp"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt1Confidence']/syntax/cpp"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt1Voice']/syntax/cpp"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt2Name']/syntax/cpp"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt2Confidence']/syntax/cpp"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt2Voice']/syntax/cpp"/>
</cpp>
<csharp>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.CharacterID']/syntax/csharp"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Count']/syntax/csharp"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Name']/syntax/csharp"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Confidence']/syntax/csharp"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Voice']/syntax/csharp"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt1Name']/syntax/csharp"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt1Confidence']/syntax/csharp"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt1Voice']/syntax/csharp"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt2Name']/syntax/csharp"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt2Confidence']/syntax/csharp"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt2Voice']/syntax/csharp"/>
</csharp>
<vb>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.CharacterID']/syntax/vb"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Count']/syntax/vb"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Name']/syntax/vb"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Confidence']/syntax/vb"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Voice']/syntax/vb"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt1Name']/syntax/vb"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt1Confidence']/syntax/vb"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt1Voice']/syntax/vb"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt2Name']/syntax/vb"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt2Confidence']/syntax/vb"/>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt2Voice']/syntax/vb"/>
</vb>
</syntax>
			<param name="CharacterID">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.CharacterID']/param[@name='CharacterID']"/>
			</param>
			<param name="Count">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Count']/param[@name='Count']"/>
			</param>
			<param name="Name">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Name']/param[@name='Name']"/>
			</param>
			<param name="Confidence">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Confidence']/param[@name='Confidence']"/>
			</param>
			<param name="Voice">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Voice']/param[@name='Voice']"/>
			</param>
			<param name="Alt1Name">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt1Name']/param[@name='Alt1Name']"/>
			</param>
			<param name="Alt1Confidence">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt1Confidence']/param[@name='Alt1Confidence']"/>
			</param>
			<param name="Alt1Voice">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt1Voice']/param[@name='Alt1Voice']"/>
			</param>
			<param name="Alt2Name">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt2Name']/param[@name='Alt2Name']"/>
			</param>
			<param name="Alt2Confidence">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt2Confidence']/param[@name='Alt2Confidence']"/>
			</param>
			<param name="Alt2Voice">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt2Voice']/param[@name='Alt2Voice']"/>
			</param>
			<remarks>
				<include path="/doc/members/member[@name='T:DoubleAgent.Control.UserInput']/remarks"/>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Command" suffix="Event"/>
			<seealso cref="T:DoubleAgent.Control.Command" suffix="Object"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.UserInput.Alt1Confidence">
			<summary>
				Returns the speech recognition confidence scoring for the second-best matching <see cref="T:DoubleAgent.Control.Command"/>.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>userinput</em>-&gt;<c>get_Alt1Confidence</c> (<em>&amp;Alt1Confidence</em>)</para>
</cpp>
<csharp>
<para>[<em>Alt1Confidence</em> = ]<em>userinput</em><c>.Alt1Confidence</c></para>
</csharp>
<vb>
<para>[<em>Alt1Confidence</em> = ]<em>userinput</em><c>.Alt1Confidence</c></para>
</vb>
</syntax>
			<param name="Alt1Confidence">
				The relative confidence scoring of second-best match, from -100 to 100 (0 if the <see cref="T:DoubleAgent.Control.Command"/> was chosen from the pop-up menu)
			</param>
			<remarks></remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Command" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.UserInput.Alt1Name">
			<summary>
				Returns the name of the second-best matching <see cref="T:DoubleAgent.Control.Command"/>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>userinput</em>-&gt;<c>get_Alt1Name</c> (<em>&amp;Alt1Name</em>)</para>
</cpp>
<csharp>
<para>[<em>Alt1Name</em> = ]<em>userinput</em><c>.Alt1Name</c></para>
</csharp>
<vb>
<para>[<em>Alt1Name</em> = ]<em>userinput</em><c>.Alt1Name</c></para>
</vb>
</syntax>
			<param name="Alt1Name">
				The name of the second-best matching <see cref="T:DoubleAgent.Control.Command"/>.
			</param>
			<remarks></remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Command" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.UserInput.Alt1Voice">
			<summary>
				Returns the voice text the speech recognition engine matched for the second-best matching <see cref="T:DoubleAgent.Control.Command"/>.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>userinput</em>-&gt;<c>get_Alt1Voice</c> (<em>&amp;Alt1Voice</em>)</para>
</cpp>
<csharp>
<para>[<em>Alt1Voice</em> = ]<em>userinput</em><c>.Alt1Voice</c></para>
</csharp>
<vb>
<para>[<em>Alt1Voice</em> = ]<em>userinput</em><c>.Alt1Voice</c></para>
</vb>
</syntax>
			<param name="Alt1Voice">The second-best matching voice text</param>
			<remarks></remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Command" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.UserInput.Alt2Confidence">
			<summary>
				Returns the speech recognition confidence scoring for the third-best matching <see cref="T:DoubleAgent.Control.Command"/>.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>userinput</em>-&gt;<c>get_Alt2Confidence</c> (<em>&amp;Alt2Confidence</em>)</para>
</cpp>
<csharp>
<para>[<em>Alt2Confidence</em> = ]<em>userinput</em><c>.Alt2Confidence</c></para>
</csharp>
<vb>
<para>[<em>Alt2Confidence</em> = ]<em>userinput</em><c>.Alt2Confidence</c></para>
</vb>
</syntax>
			<param name="Alt2Confidence">
				The relative confidence scoring of third-best match, from -100 to 100 (0 if the <see cref="T:DoubleAgent.Control.Command"/> was chosen from the pop-up menu)
			</param>
			<remarks></remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Command" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.UserInput.Alt2Name">
			<summary>
				Returns the name of the third-best matching <see cref="T:DoubleAgent.Control.Command"/>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>userinput</em>-&gt;<c>get_Alt2Name</c> (<em>&amp;Alt2Name</em>)</para>
</cpp>
<csharp>
<para>[<em>Alt2Name</em> = ]<em>userinput</em><c>.Alt2Name</c></para>
</csharp>
<vb>
<para>[<em>Alt2Name</em> = ]<em>userinput</em><c>.Alt2Name</c></para>
</vb>
</syntax>
			<param name="Alt2Name">
				The name of the third-best matching <see cref="T:DoubleAgent.Control.Command"/>.
			</param>
			<remarks></remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Command" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.UserInput.Alt2Voice">
			<summary>
				Returns the voice text the speech recognition engine matched for the third-best matching <see cref="T:DoubleAgent.Control.Command"/>.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>userinput</em>-&gt;<c>get_Alt2Voice</c> (<em>&amp;Alt2Voice</em>)</para>
</cpp>
<csharp>
<para>[<em>Alt2Voice</em> = ]<em>userinput</em><c>.Alt2Voice</c></para>
</csharp>
<vb>
<para>[<em>Alt2Voice</em> = ]<em>userinput</em><c>.Alt2Voice</c></para>
</vb>
</syntax>
			<param name="Alt2Voice">The third-best matching voice text</param>
			<remarks></remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Command" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.UserInput.CharacterID">
			<summary>
				Returns the unique identifier of the <see cref="T:DoubleAgent.Control.Character"/> that is the object of the <see cref="E:DoubleAgent.Control.Control.Command"/> event.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>userinput</em>-&gt;<c>get_CharacterID</c> (<em>&amp;CharacterID</em>)</para>
</cpp>
<csharp>
<para>[<em>CharacterID</em> = ]<em>userinput</em><c>.CharacterID</c></para>
</csharp>
<vb>
<para>[<em>CharacterID</em> = ]<em>userinput</em><c>.CharacterID</c></para>
</vb>
</syntax>
			<param name="CharacterID">
				Identifies the <see cref="T:DoubleAgent.Control.Character"/> whose <see cref="T:DoubleAgent.Control.Command"/> was chosen.
			</param>
			<remarks></remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Command" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.UserInput.Confidence">
			<summary>
				Returns the speech recognition confidence scoring for the best matching <see cref="T:DoubleAgent.Control.Command"/>.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>userinput</em>-&gt;<c>get_Confidence</c> (<em>&amp;Confidence</em>)</para>
</cpp>
<csharp>
<para>[<em>Confidence</em> = ]<em>userinput</em><c>.Confidence</c></para>
</csharp>
<vb>
<para>[<em>Confidence</em> = ]<em>userinput</em><c>.Confidence</c></para>
</vb>
</syntax>
			<param name="Confidence">
				The relative confidence scoring of best match, from -100 to 100 (100 if the <see cref="T:DoubleAgent.Control.Command"/> was chosen from the pop-up menu)
			</param>
			<remarks></remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Command" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.UserInput.Count">
			<summary>
				Returns the number of possible matching
				commands.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>userinput</em>-&gt;<c>get_Count</c> (<em>&amp;Count</em>)</para>
</cpp>
<csharp>
<para>[<em>Count</em> = ]<em>userinput</em><c>.Count</c></para>
</csharp>
<vb>
<para>[<em>Count</em> = ]<em>userinput</em><c>.Count</c></para>
</vb>
</syntax>
			<param name="Count">The number of possible matching commands, from 0 to 3.</param>
			<remarks>
				Even if the <c>Count</c> is zero (no commands were matched), the <see cref="P:DoubleAgent.Control.UserInput.Voice"/> property will still return the spoken text.
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Command" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.UserInput.Name">
			<summary>
				Identifies the chosen <see cref="T:DoubleAgent.Control.Command"/>, if chosen from the popup-menu, or the best matching <see cref="T:DoubleAgent.Control.Command"/>, if voice input triggers the <see cref="E:DoubleAgent.Control.Control.Command"/> event.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>userinput</em>-&gt;<c>get_Name</c> (<em>&amp;Name</em>)</para>
</cpp>
<csharp>
<para>[<em>Name</em> = ]<em>userinput</em><c>.Name</c></para>
</csharp>
<vb>
<para>[<em>Name</em> = ]<em>userinput</em><c>.Name</c></para>
</vb>
</syntax>
			<param name="Name">
				The name of the chosen <see cref="T:DoubleAgent.Control.Command"/>, or an empty string if the chose command was pre-defined (for example, the <c>Hide</c> command).
			</param>
			<seealso cref="E:DoubleAgent.Control.Control.Command" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.UserInput.Voice">
			<summary>
				Returns the voice text the speech recognition engine matched for the best matching <see cref="T:DoubleAgent.Control.Command"/>.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>userinput</em>-&gt;<c>get_Voice</c> (<em>&amp;Voice</em>)</para>
</cpp>
<csharp>
<para>[<em>Name</em> = ]<em>userinput</em><c>.Voice</c></para>
</csharp>
<vb>
<para>[<em>Name</em> = ]<em>userinput</em><c>.Voice</c></para>
</vb>
</syntax>
			<param name="Voice">
				The best matching voice text (or an empty string if the <see cref="T:DoubleAgent.Control.Command"/> was chosen from the popup-menu)
			</param>
			<remarks>Even if no command was matched, the text that the speech engine heard is returned.</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Command" suffix="Event"/>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.CommandsWindow">
			<summary>
				The <c>CommandsWindow</c> object provides access to Double Agent's Voice Commands Window.
			</summary>
			<syntax>
				<list type="bullet">
					<item>
						<term>
							The <c>CommandsWindow</c> object has the following <c>properties</c>:
						</term>
						<description>
							<see cref="P:DoubleAgent.Control.CommandsWindow.Height"/>,
							<see cref="P:DoubleAgent.Control.CommandsWindow.Left"/>,
							<see cref="P:DoubleAgent.Control.CommandsWindow.Top"/>,
							<see cref="P:DoubleAgent.Control.CommandsWindow.Visible"/>,
							<see cref="P:DoubleAgent.Control.CommandsWindow.Width"/>
						</description>
					</item>
				</list>
			</syntax>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CommandsWindow.Height">
			<summary></summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>commandswindow</em>-&gt;<c>get_Height</c> (<em>&amp;short</em>)</para>
</cpp>
<csharp>
<para>[<em>Height</em> = ]<em>control</em><c>.CommandsWindow.Height</c></para>
</csharp>
<vb>
<para>[<em>Height</em> = ]<em>control</em><c>.CommandsWindow.Height</c></para>
</vb>
</syntax>
			<param name="Height"></param>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CommandsWindow.Left">
			<summary></summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>commandswindow</em>-&gt;<c>get_Left</c> (<em>&amp;short</em>)</para>
<para><em>commandswindow</em>-&gt;<c>put_Left</c> (<em>short</em>)</para>
</cpp>
<csharp>
<para>[<em>Left</em> = ]<em>control</em><c>.CommandsWindow.Left</c></para>
<para><em>control</em><c>.CommandsWindow.Left</c> = <em>Left</em></para>
</csharp>
<vb>
<para>[<em>Left</em> = ]<em>control</em><c>.CommandsWindow.Left</c></para>
<para><em>control</em><c>.CommandsWindow.Left</c> = <em>Left</em></para>
</vb>
</syntax>
			<param name="Left"></param>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CommandsWindow.Top">
			<summary></summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>commandswindow</em>-&gt;<c>get_Top</c> (<em>&amp;short</em>)</para>
<para><em>commandswindow</em>-&gt;<c>put_Top</c> (<em>short</em>)</para>
</cpp>
<csharp>
<para>[<em>Top</em> = ]<em>control</em><c>.CommandsWindow.Top</c></para>
<para><em>control</em><c>.CommandsWindow.Top</c> = <em>Top</em></para>
</csharp>
<vb>
<para>[<em>Top</em> = ]<em>control</em><c>.CommandsWindow.Top</c></para>
<para><em>control</em><c>.CommandsWindow.Top</c> = <em>Top</em></para>
</vb>
</syntax>
			<param name="Top"></param>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CommandsWindow.Visible">
			<summary></summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>commandswindow</em>-&gt;<c>get_Visible</c> (<em>&amp;short</em>)</para>
<para><em>commandswindow</em>-&gt;<c>put_Visible</c> (<em>short</em>)</para>
</cpp>
<csharp>
<para>[<em>Visible</em> = ]<em>control</em><c>.CommandsWindow.Visible</c></para>
<para><em>control</em><c>.CommandsWindow.Visible</c> = <em>Visible</em></para>
</csharp>
<vb>
<para>[<em>Visible</em> = ]<em>control</em><c>.CommandsWindow.Visible</c></para>
<para><em>control</em><c>.CommandsWindow.Visible</c> = <em>Visible</em></para>
</vb>
</syntax>
			<param name="Visible"></param>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CommandsWindow.Width">
			<summary></summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>commandswindow</em>-&gt;<c>get_Width</c> (<em>&amp;short</em>)</para>
</cpp>
<csharp>
<para>[<em>Width</em> = ]<em>control</em><c>.CommandsWindow.Width</c></para>
</csharp>
<vb>
<para>[<em>Width</em> = ]<em>control</em><c>.CommandsWindow.Width</c></para>
</vb>
</syntax>
			<param name="Width"></param>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.PropertySheet">
			<summary>
				<para>
					The <c>PropertySheet</c> object provides several properties you can use if you want to manipulate the
					character relative to the Microsoft Agent property sheet (also known as the Advanced Character Options
					window).
				</para>
			</summary>
			<syntax>
				<list type="bullet">
					<item>
						<term>
							The <c>PropertySheet</c> object has the following <c>properties</c>:
						</term>
						<description>
							<see cref="P:DoubleAgent.Control.PropertySheet.Height"/>,
							<see cref="P:DoubleAgent.Control.PropertySheet.Left"/>,
							<see cref="P:DoubleAgent.Control.PropertySheet.Page"/>,
							<see cref="P:DoubleAgent.Control.PropertySheet.Top"/>,
							<see cref="P:DoubleAgent.Control.PropertySheet.Visible"/>,
							<see cref="P:DoubleAgent.Control.PropertySheet.Width"/>
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					If you query <see cref="P:DoubleAgent.Control.PropertySheet.Left"/>, <see cref="P:DoubleAgent.Control.PropertySheet.Top"/>, <see cref="P:DoubleAgent.Control.PropertySheet.Width"/>, and <see cref="P:DoubleAgent.Control.PropertySheet.Height"/> properties before the property
					sheet has ever been shown, their values return as zero. Once shown, these properties return the
					last position and size of the window (relative to your current screen resolution).
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.PropertySheet.Height">
			<summary>
				Returns a numeric value specifying the current height, in pixels, of the Double Agent property sheet window.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>propertysheet</em>-&gt;<c>get_Height</c> (<em>&amp;Height</em>)</para>
</cpp>
<csharp>
<para>[<em>Height</em> = ]<em>control</em><c>.PropertySheet.Height</c></para>
</csharp>
<vb>
<para>[<em>Height</em> = ]<em>control</em><c>.PropertySheet.Height</c></para>
</vb>
</syntax>
			<param name="Height"></param>
			<remarks>
				<para>Double Agent displays the window based on the location set by the user.</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.PropertySheet.Left">
			<summary>
				Returns an integer value specifying the current left edge, in pixels, of the Double Agent property
				sheet window.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>propertysheet</em>-&gt;<c>get_Left</c> (<em>&amp;Left</em>)</para>
<para><em>propertysheet</em>-&gt;<c>put_Left</c> (<em>Left</em>)</para>
</cpp>
<csharp>
<para>[<em>Left</em> = ]<em>control</em><c>.PropertySheet.Left</c></para>
<para><em>control</em><c>.PropertySheet.Left</c> = <em>Left</em></para>
</csharp>
<vb>
<para>[<em>Left</em> = ]<em>control</em><c>.PropertySheet.Left</c></para>
<para><em>control</em><c>.PropertySheet.Left</c> = <em>Left</em></para>
</vb>
</syntax>
			<param name="Left"></param>
			<remarks>
				<para>Double Agent displays the window based on the location set by the user.</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.PropertySheet.Page">
			<summary>Returns or sets the page displayed in the Double Agent property sheet window.</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>propertysheet</em>-&gt;<c>get_Page</c> (<em>&amp;Page</em>)</para>
<para><em>propertysheet</em>-&gt;<c>put_Page</c> (<em>Page</em>)</para>
</cpp>
<csharp>
<para>[<em>Page</em> = ]<em>control</em><c>.PropertySheet.Page</c></para>
<para><em>control</em><c>.PropertySheet.Page</c> = <em>Page</em></para>
</csharp>
<vb>
<para>[<em>Page</em> = ]<em>control</em><c>.PropertySheet.Page</c></para>
<para><em>control</em><c>.PropertySheet.Page</c> = <em>Page</em></para>
</vb>
</syntax>
			<param name="Page"></param>
			<remarks>
				<para>
					If no speech engine is installed, setting <c>Page</c> to <c>"Speech"</c> has no effect. Also, the window's
					<c>Visible</c> property must be set to <c>True</c> for the user to see the page.
				</para>
				<note>The user can override this property.</note>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.PropertySheet.Top">
			<summary>Returns an integer value specifying the current top edge, in pixels, of the Double Agent property sheet window.</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>propertysheet</em>-&gt;<c>get_Top</c> (<em>&amp;Top</em>)</para>
<para><em>propertysheet</em>-&gt;<c>put_Top</c> (<em>Top</em>)</para>
</cpp>
<csharp>
<para>[<em>Top</em> = ]<em>control</em><c>.PropertySheet.Top</c></para>
<para><em>control</em><c>.PropertySheet.Top</c> = <em>Top</em></para>
</csharp>
<vb>
<para>[<em>Top</em> = ]<em>control</em><c>.PropertySheet.Top</c></para>
<para><em>control</em><c>.PropertySheet.Top</c> = <em>Top</em></para>
</vb>
</syntax>
			<param name="Top"></param>
			<remarks>
				<para>Double Agent displays the window based on the location set by the user.</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.PropertySheet.Visible">
			<summary>Returns or sets whether the Double Agent property sheet window is visible (open).</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>propertysheet</em>-&gt;<c>get_Visible</c> (<em>&amp;Visible</em>)</para>
<para><em>propertysheet</em>-&gt;<c>put_Visible</c> (<em>Visible</em>)</para>
</cpp>
<csharp>
<para>[<em>Visible</em> = ]<em>control</em><c>.PropertySheet.Visible</c></para>
<para><em>control</em><c>.PropertySheet.Visible</c> = <em>Visible</em></para>
</csharp>
<vb>
<para>[<em>Visible</em> = ]<em>control</em><c>.PropertySheet.Visible</c></para>
<para><em>control</em><c>.PropertySheet.Visible</c> = <em>Visible</em></para>
</vb>
</syntax>
			<param name="Visible"></param>
			<remarks>
				<para>Double Agent displays the window based on the location and size set by the user.</para>
				<note>The user can override this property.</note>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.PropertySheet.Width">
			<summary>
				Returns a numeric value specifying the current width, in pixels, of the Double Agent property sheet
				window.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>propertysheet</em>-&gt;<c>get_Width</c> (<em>&amp;Width</em>)</para>
</cpp>
<csharp>
<para>[<em>Width</em> = ]<em>control</em><c>.PropertySheet.Width</c></para>
</csharp>
<vb>
<para>[<em>Width</em> = ]<em>control</em><c>.PropertySheet.Width</c></para>
</vb>
</syntax>
			<param name="Width"></param>
			<remarks>
				<para>Double Agent displays the window based on the location set by the user.</para>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.Settings">
			<summary>
				<para>
					The <c>AudioOutput</c> object provides access to audio output properties maintained by Double Agent. The
					properties are read-only, but the user can change them in the Microsoft Agent property sheet.
				</para>
				<para>
					If a speech recognition engine is installed and enabled, accessing these properties will start the speech
					engine:
				</para>
				<para>
					The <c>SpeechInput</c> object provides access to the speech input properties maintained by the Agent
					server. The properties are read-only for client applications, but the user can change them in the Microsoft
					Agent property sheet. Double Agent returns values only if a compatible speech engine has been installed
					and is enabled.
				</para>
				<para>
					The <c>Engine</c>, <c>Installed</c>, and <c>Language</c> properties are no longer supported, but (for
					backward compatibility) return null values if queried. To query or set a speech recognition's mode,
					use the <c>SRModeID</c> property.
				</para>
			</summary>
			<syntax>
				<list type="bullet">
					<item>
						<term>
							The <c>Settings</c> object has the following <c>properties</c>:
						</term>
						<description>
							<see cref="P:DoubleAgent.Control.Settings.AudioStatus"/>,
							<see cref="P:DoubleAgent.Control.Settings.BalloonEnabled"/>,
							<see cref="P:DoubleAgent.Control.Settings.BalloonFont"/>,
							<see cref="P:DoubleAgent.Control.Settings.SoundEffectsEnabled"/>,
							<see cref="P:DoubleAgent.Control.Settings.SREnabled"/>,
							<see cref="P:DoubleAgent.Control.Settings.SRHotKey"/>,
							<see cref="P:DoubleAgent.Control.Settings.SRHotKeyTime"/>,
							<see cref="P:DoubleAgent.Control.Settings.SRListeningPrompt"/>
							<see cref="P:DoubleAgent.Control.Settings.SRListeningTip"/>
							<see cref="P:DoubleAgent.Control.Settings.TTSEnabled"/>
							<see cref="P:DoubleAgent.Control.Settings.TTSSpeed"/>
						</description>
					</item>
				</list>
			</syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Settings.AudioStatus">
			<summary>Returns the status of the audio output channel.</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>settings</em>-&gt;<c>get_AudioStatus</c> (<em>&amp;AudioStatus</em>)</para>
</cpp>
<csharp>
<para>[<em>AudioStatus</em> = ]<em>control</em><c>.Settings.AudioStatus</c></para>
</csharp>
<vb>
<para>[<em>AudioStatus</em> = ]<em>control</em><c>.Settings.AudioStatus</c></para>
</vb>
</syntax>
			<param name="AudioStatus"></param>
			<remarks>
				<para>
					This setting enables your client application to query the audio output channel, returning an Integer
					value that indicates the status of the audio output channel. You can use this to determine whether it
					is appropriate to have your character speak or whether it is appropriate to try to turn on <em>Listening</em>
					mode (using the <c>Listen</c> method).
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.ListenComplete" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Settings.BalloonEnabled">
			<summary></summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>settings</em>-&gt;<c>get_BalloonEnabled</c> (<em>&amp;BalloonEnabled</em>)</para>
</cpp>
<csharp>
<para>[<em>BalloonEnabled</em> = ]<em>control</em><c>.Settings.BalloonEnabled</c></para>
</csharp>
<vb>
<para>[<em>BalloonEnabled</em> = ]<em>control</em><c>.Settings.BalloonEnabled</c></para>
</vb>
</syntax>
			<param name="BalloonEnabled"></param>
			<remarks></remarks>
			<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Settings.BalloonFont">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
			<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Settings.SoundEffectsEnabled">
			<summary>
				Returns a boolean value indicating whether sound effects (.WAV) files configured as part of a character's
				actions will play.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>settings</em>-&gt;<c>get_SoundEffectsEnabled</c> (<em>&amp;SoundEffectsEnabled</em>)</para>
</cpp>
<csharp>
<para>[<em>SoundEffectsEnabled</em> = ]<em>control</em><c>.Settings.SoundEffectsEnabled</c></para>
</csharp>
<vb>
<para>[<em>SoundEffectsEnabled</em> = ]<em>control</em><c>.Settings.SoundEffectsEnabled</c></para>
</vb>
</syntax>
			<param name="SoundEffectsEnabled"></param>
			<remarks>
				<para>
					This property reflects the Play Character Sound Effects option on the Output page of the Agent property
					sheet (Advanced Character Options). When the <c>SoundEffects</c> property returns <c>True</c>, sound
					effects included in a character's definition will be played. When <c>False</c>, the sound effects will
					not be played. The property setting affects all characters and is read-only; only the user can set this
					property value.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Settings.SREnabled">
			<summary>Returns a Boolean value indicating whether speech input is enabled.</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>settings</em>-&gt;<c>get_SREnabled</c> (<em>&amp;SREnabled</em>)</para>
</cpp>
<csharp>
<para>[<em>SREnabled</em> = ]<em>control</em><c>.Settings.SREnabled</c></para>
</csharp>
<vb>
<para>[<em>SREnabled</em> = ]<em>control</em><c>.Settings.SREnabled</c></para>
</vb>
</syntax>
			<param name="SREnabled"></param>
			<remarks>
				<para>
					The <c>Enabled</c> property reflects the Characters Listen For Input option on the Speech Input page
					of the Agent property sheet (Advanced Character Options). The property setting affects all Agent characters
					and is read-only; only the user can change this property.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Settings.SRHotKey">
			<summary>
				Returns a string that specifies the user's current setting for the <em>Listening</em> key.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>settings</em>-&gt;<c>get_SRHotKey</c> (<em>&amp;SRHotKey</em>)</para>
</cpp>
<csharp>
<para>[<em>SRHotKey</em> = ]<em>control</em><c>.Settings.SRHotKey</c></para>
</csharp>
<vb>
<para>[<em>SRHotKey</em> = ]<em>control</em><c>.Settings.SRHotKey</c></para>
</vb>
</syntax>
			<param name="SRHotKey"></param>
			<remarks>
				<para>
					The <c>Hotkey</c> property reflects the current setting of the <em>Listening</em> key on the Speech Input page
					of the Agent property sheet (Advanced Character Options). The property is read-only; only the user can
					change the setting.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Settings.SRHotKeyTime">
			<summary></summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>settings</em>-&gt;<c>get_SRHotKeyTime</c> (<em>&amp;SRHotKeyTime</em>)</para>
</cpp>
<csharp>
<para>[<em>SRHotKeyTime</em> = ]<em>control</em><c>.Settings.SRHotKeyTime</c></para>
</csharp>
<vb>
<para>[<em>SRHotKeyTime</em> = ]<em>control</em><c>.Settings.SRHotKeyTime</c></para>
</vb>
</syntax>
			<param name="SRHotKeyTime"></param>
			<remarks></remarks>
			<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Settings.SRListeningPrompt">
			<summary></summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>settings</em>-&gt;<c>get_SRListeningPrompt</c> (<em>&amp;SRListeningPrompt</em>)</para>
</cpp>
<csharp>
<para>[<em>SRListeningPrompt</em> = ]<em>control</em><c>.Settings.SRListeningPrompt</c></para>
</csharp>
<vb>
<para>[<em>SRListeningPrompt</em> = ]<em>control</em><c>.Settings.SRListeningPrompt</c></para>
</vb>
</syntax>
			<param name="SRListeningPrompt"></param>
			<remarks></remarks>
			<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Settings.SRListeningTip">
			<summary>
				Returns a Boolean indicating the current user setting for the <em>Listening Tip</em>.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>settings</em>-&gt;<c>get_SRListeningTip</c> (<em>&amp;SRListeningTip</em>)</para>
</cpp>
<csharp>
<para>[<em>SRListeningTip</em> = ]<em>control</em><c>.Settings.SRListeningTip</c></para>
</csharp>
<vb>
<para>[<em>SRListeningTip</em> = ]<em>control</em><c>.Settings.SRListeningTip</c></para>
</vb>
</syntax>
			<param name="SRListeningTip"></param>
			<remarks>
				<para>
					The <c>ListeningTip</c> property indicates whether the Display <em>Listening Tip</em> option in the Microsoft
					Agent property sheet (Advanced Character Options) is enabled. When <c>ListeningTip</c> returns <c>True</c>
					and speech input is enabled, Double Agent displays the tip window when the user presses the <em>Listening</em>
					key.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Settings.TTSEnabled">
			<summary>Returns a boolean value indicating whether audio (spoken) output is enabled.</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>settings</em>-&gt;<c>get_TTSEnabled</c> (<em>&amp;TTSEnabled</em>)</para>
</cpp>
<csharp>
<para>[<em>TTSEnabled</em> = ]<em>control</em><c>.Settings.TTSEnabled</c></para>
</csharp>
<vb>
<para>[<em>TTSEnabled</em> = ]<em>control</em><c>.Settings.TTSEnabled</c></para>
</vb>
</syntax>
			<param name="TTSEnabled"></param>
			<remarks>
				<para>
					This property reflects the Play Audio Output option on the Output page of the Agent property sheet (Advanced
					Character Options). When the <c>Enabled</c> property returns <c>True</c>, the <c>Speak</c> method produces
					audio output if a compatible TTS engine is installed or you use sound files for spoken output. When
					it returns <c>False</c>, it means that speech output is not installed or has been disabled by the user.
					The property setting applies to all Agent characters and is read-only; only the user can set this property
					value.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" suffix="Event"/>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Settings.TTSSpeed">
			<summary></summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>settings</em>-&gt;<c>get_TTSSpeed</c> (<em>&amp;TTSSpeed</em>)</para>
</cpp>
<csharp>
<para>[<em>TTSSpeed</em> = ]<em>control</em><c>.Settings.TTSSpeed</c></para>
</csharp>
<vb>
<para>[<em>TTSSpeed</em> = ]<em>control</em><c>.Settings.TTSSpeed</c></para>
</vb>
</syntax>
			<param name="TTSSpeed"></param>
			<remarks></remarks>
			<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" suffix="Event"/>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.AudioOutput">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This object has been replaced by the <see cref="T:DoubleAgent.Control.Settings"/> object, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<member name="P:DoubleAgent.Control.AudioOutput.Enabled">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Settings.TTSEnabled" text="Settings.TTSEnabled"/> property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<member name="P:DoubleAgent.Control.AudioOutput.SoundEffects">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Settings.SoundEffectsEnabled" text="Settings.SoundEffectsEnabled"/> property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<member name="P:DoubleAgent.Control.AudioOutput.Status">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Settings.AudioStatus" text="Settings.AudioStatus"/> property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.SpeechInput">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This object has been replaced by the <see cref="T:DoubleAgent.Control.Settings"/> object, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<member name="P:DoubleAgent.Control.SpeechInput.Enabled">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Settings.SREnabled" text="Settings.SREnabled"/> property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<member name="P:DoubleAgent.Control.SpeechInput.Engine">
			<summary>obsolete</summary>
		</member>

		<member name="P:DoubleAgent.Control.SpeechInput.HotKey">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Settings.SRHotKey" text="Settings.SRHotKey"/> property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<member name="P:DoubleAgent.Control.SpeechInput.Installed">
			<summary>obsolete</summary>
		</member>

		<member name="P:DoubleAgent.Control.SpeechInput.Language">
			<summary>obsolete</summary>
		</member>

		<member name="P:DoubleAgent.Control.SpeechInput.ListeningTip">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Settings.SRListeningTip" text="Settings.SRListeningTip"/> property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<member name="P:DoubleAgent.Control.CharacterFiles.DefaultSearchPath">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<member name="P:DoubleAgent.Control.CharacterFiles.DefaultFilePath">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.CharacterFiles">
			<summary></summary>
			<syntax></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CharacterFiles.DefaultFileName">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CharacterFiles.DefaultFilePath">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CharacterFiles.DefaultSearchPath">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CharacterFiles.DoubleAgentFiles">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CharacterFiles.FilePaths">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CharacterFiles.MsAgentFiles">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CharacterFiles.MsOfficeFiles">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CharacterFiles.NonSpeakingCharacters">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CharacterFiles.SearchPath">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CharacterFiles.SpeakingCharacters">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CharacterFiles.VerifyVersion">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.SREngine">
			<summary></summary>
			<syntax></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.SREngine.GetVersion">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.SREngine.DisplayName">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.SREngine.LanguageID">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.SREngine.LanguageIDs">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.SREngine.LanguageName">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.SREngine.LanguageNames">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.SREngine.Manufacturer">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.SREngine.SRModeID">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.SREngines">
			<summary></summary>
			<syntax></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.SREngines.Count">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.SREngines.Item">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.TTSEngine">
			<summary></summary>
			<syntax></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.TTSEngine.GetVersion">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.TTSEngine.DisplayName">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.TTSEngine.Gender">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.TTSEngine.LanguageID">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.TTSEngine.LanguageName">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.TTSEngine.Manufacturer">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.TTSEngine.TTSModeID">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.TTSEngines">
			<summary></summary>
			<syntax></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.TTSEngines.Count">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.TTSEngines.Item">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

	</members>
</doc>
