<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE doc[
	<!ENTITY dainclude "DoubleAgent.Include.xml">
	<!ENTITY dans "DoubleAgent.Control">
	<!ENTITY darootobj "DoubleAgent.Control.Control">

	<!ENTITY darootref "&lt;token&gt;control&lt;/token&gt;">
	<!ENTITY dacharref_vb "&darootref;.&lt;keyword&gt;Characters&lt;/keyword&gt; (&quot;&lt;token&gt;CharacterID&lt;/token&gt;&quot;)">
	<!ENTITY dacharref_csharp "&darootref;.&lt;keyword&gt;Characters&lt;/keyword&gt;.this [&quot;&lt;token&gt;CharacterID&lt;/token&gt;&quot;]">
	<!ENTITY dacmdref_vb "&dacharref_vb;.&lt;keyword&gt;Commands&lt;/keyword&gt; (&quot;&lt;token&gt;Name&lt;/token&gt;&quot;)">
	<!ENTITY dacmdref_csharp "&dacharref_csharp;.&lt;keyword&gt;Commands&lt;/keyword&gt;.this [&quot;&lt;token&gt;Name&lt;/token&gt;&quot;]">
	<!ENTITY hexprefix "&amp;H">
	<!ENTITY typelisttype "table">
	<!ENTITY typelistwidth "275ex">

	<!ENTITY dapsref "../Reference/UI_PropSheet.htm">
	<!ENTITY dapsname "Advanced Character Options">
	<!ENTITY davcref "../Reference/UI_Intro.htm#VoiceCommands">
	<!ENTITY davcname "Voice Commands">
	<!ENTITY dacmref "../Reference/UI_Intro.htm#Menu">
	<!ENTITY dacmname "pop-up menu">
	<!ENTITY dawbref "../Reference/UI_Intro.htm#Balloon">
	<!ENTITY dawbname "word balloon">
	<!ENTITY daniref "../Reference/UI_Intro.htm#Icon">
	<!ENTITY daniname "notification icon">
	<!ENTITY daltref "../Reference/UI_Intro.htm#ListeningTip">
	<!ENTITY daltname "Listening tip">
]>

<doc>
	<assembly>
		<name>Double Agent Control</name>
	</assembly>
	<members>
		<!--=============================================================================================-->

		<member name="F:&dans;.ActiveStateType.Inactive">
			<summary>
				Your client application is <em>not</em> the character's active client.
			</summary>
			<value>0</value>
		</member>

		<member name="F:&dans;.ActiveStateType.Active">
			<summary>Your client application is the character's active client.</summary>
			<value>1</value>
		</member>

		<member name="F:&dans;.ActiveStateType.InputActive">
			<summary>
				The character is the <glossary>input-active</glossary> character and will receive user input.
			</summary>
			<value>2</value>
		</member>

		<member name="F:&dans;.ActiveStateType.Suspended">
			<summary>
				Your client application is inactive, and is <em>not</em> the character's active client.
			</summary>
			<value>4</value>
			<remarks>
				<para>
					This state applies only to a control in <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#standalone">stand-alone</a>
					mode.
				</para>
			</remarks>
		</member>

		<member name="F:&dans;.ActiveStateType.Suspended_Active">
			<summary>Your client application is inactive, and is the character's active client.</summary>
			<value>5</value>
			<remarks>
				<para>
					This state applies only to a control in <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#standalone">stand-alone</a>
					mode.
				</para>
			</remarks>
		</member>

		<member name="F:&dans;.ActiveStateType.Suspended_InputActive">
			<summary>
				Your client application is inactive, and the character will be <glossary>input-active</glossary>
				when your application becomes active.
			</summary>
			<value>6</value>
			<remarks>
				<para>
					This state applies only to a control in <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#standalone">stand-alone</a>
					mode.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="T:&dans;.ActiveStateType" kind="Enumeration">
			<summary>
				<para>
					Enumerates a character's possible activation states.
				</para>
			</summary>
			<syntax>
				<h4>Members</h4>
				<list type="table">
					<item name="Inactive">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.ActiveStateType.Inactive']/value" /> = <keyword>Inactive</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.ActiveStateType.Inactive']/summary" />
						</description>
					</item>
					<item name="Active">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.ActiveStateType.Active']/value" /> = <keyword>Active</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.ActiveStateType.Active']/summary" />
						</description>
					</item>
					<item name="InputActive">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.ActiveStateType.InputActive']/value" /> = <keyword>InputActive</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.ActiveStateType.InputActive']/summary" />
						</description>
					</item>
					<item name="Suspended">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.ActiveStateType.Suspended']/value" /> = <keyword>Suspended</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.ActiveStateType.Suspended']/summary" />
						</description>
					</item>
					<item name="Suspended_Active">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.ActiveStateType.Suspended_Active']/value" /> = <keyword>Suspended_Active</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.ActiveStateType.Suspended_Active']/summary" />
						</description>
					</item>
					<item name="Suspended_InputActive">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.ActiveStateType.Suspended_InputActive']/value" /> = <keyword>Suspended_InputActive</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.ActiveStateType.Suspended_InputActive']/summary" />
						</description>
					</item>
				</list>
			</syntax>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="F:&dans;.AudioStatusType.Available">
			<summary>Text-to-speech is available.</summary>
			<value>0</value>
		</member>

		<member name="F:&dans;.AudioStatusType.CharacterListening">
			<summary>
				<glossary>Listening mode</glossary> is active.
			</summary>
			<value>5</value>
		</member>

		<member name="F:&dans;.AudioStatusType.CharacterSpeaking">
			<summary>A character is currently speaking.</summary>
			<value>4</value>
		</member>

		<member name="F:&dans;.AudioStatusType.Disabled">
			<summary>
				Text-to-speech is disabled in the <a class="see" href="&dapsref;#Output">&dapsname;</a> window.
			</summary>
			<value>1</value>
		</member>

		<member name="F:&dans;.AudioStatusType.Error">
			<summary>The audio status could not be determined.</summary>
			<value>6</value>
		</member>

		<member name="F:&dans;.AudioStatusType.UserSpeaking">
			<summary>
				<glossary>Listening mode</glossary> is active and the user is currently speaking.
			</summary>
			<value>3</value>
		</member>

		<!--=============================================================================================-->

		<member name="T:&dans;.AudioStatusType" kind="Enumeration">
			<summary>
				<para>
					Enumerates the possible states of the audio device.
				</para>
			</summary>
			<syntax>
				<h4>Members</h4>
				<list type="table">
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.AudioStatusType.Available']/value" /> = <keyword>Available</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.AudioStatusType.Available']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.AudioStatusType.Disabled']/value" /> = <keyword>Disabled</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.AudioStatusType.Disabled']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.AudioStatusType.UserSpeaking']/value" /> = <keyword>UserSpeaking</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.AudioStatusType.UserSpeaking']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.AudioStatusType.CharacterSpeaking']/value" /> = <keyword>CharacterSpeaking</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.AudioStatusType.CharacterSpeaking']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.AudioStatusType.CharacterListening']/value" /> = <keyword>CharacterListening</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.AudioStatusType.CharacterListening']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.AudioStatusType.Error']/value" /> = <keyword>Error</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.AudioStatusType.Error']/summary" />
						</description>
					</item>
				</list>
			</syntax>
			<seealso cref="P:&dans;.Settings.AudioStatus" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="F:&dans;.BalloonStyleFlags.AutoHide">
			<summary>
				The <a class="see" href="&dawbref;">&dawbname;</a> is hidden automatically after a short delay.
			</summary>
			<value>&hexprefix;00000004</value>
			<remarks>
				<para>
					When the <see cref="F:&dans;.BalloonStyleFlags.AutoHide" /> style is set, the <a class="see" href="&dawbref;">&dawbname;</a>
					automatically hides when spoken output completes. When it's not set, the <a class="see" href="&dawbref;">&dawbname;</a>
					remains displayed until the next <see cref="M:&dans;.Character.Speak" /> or <see cref="M:&dans;.Character.Think" />
					call, the character is hidden, or the user clicks or drags the character.
				</para>
			</remarks>
			<seealso cref="P:&dans;.Balloon.AutoHide" suffix="Property" prefix="The" />
		</member>

		<member name="F:&dans;.BalloonStyleFlags.AutoPace">
			<summary>
				The text in the <a class="see" href="&dawbref;">&dawbname;</a> is shown one word at a time.
			</summary>
			<value>&hexprefix;00000008</value>
			<remarks>
				<para>
					When the <see cref="F:&dans;.BalloonStyleFlags.AutoPace" /> style is set, the <a class="see" href="&dawbref;">&dawbname;</a>
					paces its text output based on the current output rate, for example one word at a time. When output exceeds
					the size of the <a class="see" href="&dawbref;">&dawbname;</a>, the text is automatically scrolled. When
					it's not set, all text included in a <see cref="M:&dans;.Character.Speak" /> or <see cref="M:&dans;.Character.Think" />
					request is displayed at once.
				</para>
			</remarks>
			<seealso cref="P:&dans;.Balloon.AutoPace" suffix="Property" prefix="The" />
		</member>

		<member name="F:&dans;.BalloonStyleFlags.Enabled">
			<summary>
				The <a class="see" href="&dawbref;">&dawbname;</a> is enabled.
			</summary>
			<value>&hexprefix;00000001</value>
			<remarks>
				<para>
					When the <see cref="F:&dans;.BalloonStyleFlags.Enabled" /> style is set, the <a class="see" href="&dawbref;">&dawbname;</a>
					appears when the <see cref="M:&dans;.Character.Speak" /> or <see cref="M:&dans;.Character.Think" /> method
					is used, unless the user overrides this setting in the <a class="see" href="&dapsref;">&dapsname;</a>
					window. When it's not set, the <a class="see" href="&dawbref;">&dawbname;</a> does not appear.
				</para>
			</remarks>
			<seealso cref="P:&dans;.Balloon.Enabled" suffix="Property" prefix="The" />
		</member>

		<member name="F:&dans;.BalloonStyleFlags.ShowPartialLines">
			<summary>
				Partial lines are shown when the <a class="see" href="&dawbref;">&dawbname;</a> text scrolls (for
				a <a class="see" href="&dawbref;">&dawbname;</a> that's <em>not</em> <keyword>SizeToText</keyword>).
			</summary>
			<value>&hexprefix;00000010</value>
			<remarks>
				<para>
					When the <see cref="F:&dans;.BalloonStyleFlags.ShowPartialLines" /> style is set, the <a class="see" href="&dawbref;">&dawbname;</a>
					will show partial lines at the bottom as it scrolls its text. When it's not set, only full lines are
					shown. This style only applies when the <see cref="F:&dans;.BalloonStyleFlags.SizeToText" /> style is <em>not</em>
					set.
				</para>
			</remarks>
			<seealso cref="P:&dans;.Balloon.ShowPartialLines" suffix="Property" prefix="The" />
		</member>

		<member name="F:&dans;.BalloonStyleFlags.SizeToText">
			<summary>
				The <a class="see" href="&dawbref;">&dawbname;</a> is automatically resized to fit the speech or
				thought text.
			</summary>
			<value>&hexprefix;00000002</value>
			<remarks>
				<para>
					When the <see cref="F:&dans;.BalloonStyleFlags.SizeToText" /> style is set, the <a class="see" href="&dawbref;">&dawbname;</a>
					automatically adjusts the height of the <a class="see" href="&dawbref;">&dawbname;</a> to the current size
					of the text for the <see cref="M:&dans;.Character.Speak" /> or <see cref="M:&dans;.Character.Think" />
					request. When it's not set, the <a class="see" href="&dawbref;">&dawbname;'s</a> height is based on the
					<see cref="P:&dans;.Balloon.NumberOfLines" /> property. If this style is set and you attempt to set the
					<see cref="P:&dans;.Balloon.NumberOfLines" /> property, Double Agent raises an error.
				</para>
			</remarks>
			<seealso cref="P:&dans;.Balloon.SizeToText" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="T:&dans;.BalloonStyleFlags" kind="Enumeration">
			<summary>
				<para>
					Specifies settings that affect a <a class="see" href="&dawbref;">&dawbname;'s</a> appearance and behaviour.
				</para>
			</summary>
			<syntax>
				<h4>Members</h4>
				<list type="table">
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.BalloonStyleFlags.Enabled']/value" /> = <keyword>Enabled</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.BalloonStyleFlags.Enabled']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.BalloonStyleFlags.SizeToText']/value" /> = <keyword>SizeToText</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.BalloonStyleFlags.SizeToText']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.BalloonStyleFlags.AutoHide']/value" /> = <keyword>AutoHide</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.BalloonStyleFlags.AutoHide']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.BalloonStyleFlags.AutoPace']/value" /> = <keyword>AutoPace</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.BalloonStyleFlags.AutoPace']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.BalloonStyleFlags.ShowPartialLines']/value" /> = <keyword>ShowPartialLines</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.BalloonStyleFlags.ShowPartialLines']/summary" />
						</description>
					</item>
				</list>
			</syntax>
			<seealso cref="P:&dans;.Balloon.Style" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="F:&dans;.CharacterStyleFlags.AutoPopupMenu">
			<summary>
				A right-click on the character or it's <a class="see" href="&daniref;">&daniname;</a> automatically shows
				a <a class="see" href="&dacmref;">&dacmname;</a>.
			</summary>
			<value>&hexprefix;00000004</value>
			<seealso cref="P:&dans;.Character.AutoPopupMenu" suffix="Property" prefix="The" />
		</member>

		<member name="F:&dans;.CharacterStyleFlags.IconShown">
			<summary>
				The character has a <a class="see" href="&daniref;">&daniname;</a> in the taskbar notification area.
			</summary>
			<value>&hexprefix;00000008</value>
			<seealso cref="P:&dans;.Character.IconShown" suffix="Property" prefix="The" />
		</member>

		<member name="F:&dans;.CharacterStyleFlags.IdleEnabled">
			<summary>The character enters idle mode and shows it's idling animations when it's not doing anything else.</summary>
			<value>&hexprefix;00000002</value>
			<seealso cref="P:&dans;.Character.IdleEnabled" suffix="Property" prefix="The" />
		</member>

		<member name="F:&dans;.CharacterStyleFlags.Smoothed">
			<summary>Image smoothing (antialiasing) is applied to the character's animations.</summary>
			<value>&hexprefix;00000030</value>
			<seealso cref="P:&dans;.Character.Smoothed" suffix="Property" prefix="The" />
		</member>

		<member name="F:&dans;.CharacterStyleFlags.SmoothEdges">
			<summary>Image smoothing (antialiasing) is applied to the edges of the character's animations.</summary>
			<value>&hexprefix;00000020</value>
			<seealso cref="P:&dans;.Character.SmoothEdges" suffix="Property" prefix="The" />
		</member>

		<member name="F:&dans;.CharacterStyleFlags.SoundEffects">
			<summary>The animation sound effects are played.</summary>
			<value>&hexprefix;00000001</value>
			<seealso cref="P:&dans;.Character.SoundEffectsEnabled" suffix="Property" prefix="The" />
		</member>

		<member name="F:&dans;.CharacterStyleFlags.SuspendPause">
			<summary>All requests are paused when the client is not in the foreground.</summary>
			<value>&hexprefix;00000100</value>
			<remarks>
				<para>
					The <self>SuspendPause</self> and <see cref="F:&dans;.CharacterStyleFlags.SuspendStop" /> flags cannot
					both be set.
				</para>
				<note name="StandAloneOnly">
					This flag only applies to <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#standalone">stand-alone</a>
					mode.
				</note>
			</remarks>
			<seealso cref="P:&dans;.Character.SuspendPause" suffix="Property" prefix="The" />
		</member>

		<member name="F:&dans;.CharacterStyleFlags.SuspendStop">
			<summary>All requests are stopped when the client is not in the foreground.</summary>
			<value>&hexprefix;00000200</value>
			<remarks>
				<para>
					The <self>SuspendStop</self> and <see cref="F:&dans;.CharacterStyleFlags.SuspendPause" /> flags cannot
					both be set.
				</para>
				<note name="StandAloneOnly">
					This flag only applies to <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#standalone">stand-alone</a>
					mode.
				</note>
			</remarks>
			<seealso cref="P:&dans;.Character.SuspendStop" suffix="Property" prefix="The" />
		</member>

		<member name="F:&dans;.CharacterStyleFlags.SuspendHide">
			<summary>All floating windows are hidden when the client is not in the foreground.</summary>
			<value>&hexprefix;00000400</value>
			<remarks>
				<para>
					The <see cref="F:&dans;.CharacterStyleFlags.SuspendPause" /> or <see cref="F:&dans;.CharacterStyleFlags.SuspendStop" />
					flag must also be set.
				</para>
				<note name="StandAloneOnly">
					This flag only applies to <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#standalone">stand-alone</a>
					mode.
				</note>
			</remarks>
			<seealso cref="P:&dans;.Character.SuspendHide" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="T:&dans;.CharacterStyleFlags" kind="Enumeration">
			<summary>
				<para>
					Specifies settings that affect a character's appearance and behaviour.
				</para>
			</summary>
			<syntax>
				<h4>Members</h4>
				<list type="table">
					<item name="SoundEffects">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.CharacterStyleFlags.SoundEffects']/value" /> = <keyword>SoundEffects</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.CharacterStyleFlags.SoundEffects']/summary" />
						</description>
					</item>
					<item name="IdleEnabled">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.CharacterStyleFlags.IdleEnabled']/value" /> = <keyword>IdleEnabled</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.CharacterStyleFlags.IdleEnabled']/summary" />
						</description>
					</item>
					<item name="AutoPopupMenu">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.CharacterStyleFlags.AutoPopupMenu']/value" /> = <keyword>AutoPopupMenu</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.CharacterStyleFlags.AutoPopupMenu']/summary" />
						</description>
					</item>
					<item name="IconShown">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.CharacterStyleFlags.IconShown']/value" /> = <keyword>IconShown</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.CharacterStyleFlags.IconShown']/summary" />
						</description>
					</item>
					<item name="SmoothEdges">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.CharacterStyleFlags.SmoothEdges']/value" /> = <keyword>SmoothEdges</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.CharacterStyleFlags.SmoothEdges']/summary" />
						</description>
					</item>
					<item name="Smoothed">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.CharacterStyleFlags.Smoothed']/value" /> = <keyword>Smoothed</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.CharacterStyleFlags.Smoothed']/summary" />
						</description>
					</item>
					<item name="SuspendPause">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.CharacterStyleFlags.SuspendPause']/value" /> = <keyword>SuspendPause</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.CharacterStyleFlags.SuspendPause']/summary" />
						</description>
					</item>
					<item name="SuspendStop">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.CharacterStyleFlags.SuspendStop']/value" /> = <keyword>SuspendStop</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.CharacterStyleFlags.SuspendStop']/summary" />
						</description>
					</item>
					<item name="SuspendHide">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.CharacterStyleFlags.SuspendHide']/value" /> = <keyword>SuspendHide</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.CharacterStyleFlags.SuspendHide']/summary" />
						</description>
					</item>
				</list>
			</syntax>
			<seealso cref="P:&dans;.Character.Style" suffix="Property" prefix="The" />
			<seealso cref="P:&darootobj;.CharacterStyle" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="F:&dans;.ListenCompleteType.CharacterClientDeactivated">
			<summary>The character is no longer active or it's active client has changed.</summary>
			<value>6</value>
		</member>

		<member name="F:&dans;.ListenCompleteType.DefaultCharacterChanged">
			<summary>
				The default character was changed in the <a class="see" href="&dapsref;#Gallery">&dapsname;</a>
				window.
			</summary>
			<value>7</value>
		</member>

		<member name="F:&dans;.ListenCompleteType.ProgramDisabled">
			<summary>
				This program turned off the <glossary>Listening mode</glossary> with the <see cref="M:&dans;.Character.Listen" />
				method.
			</summary>
			<value>1</value>
		</member>

		<member name="F:&dans;.ListenCompleteType.ProgramTimedOut">
			<summary>
				The <glossary>Listening mode</glossary> was started by this program with the <see cref="M:&dans;.Character.Listen" />
				method, and it timed out.
			</summary>
			<value>2</value>
		</member>

		<member name="F:&dans;.ListenCompleteType.UserDisabled">
			<summary>
				Speech recognition was disabled in the <a class="see" href="&dapsref;#SpeechInput">&dapsname;</a>
				window.
			</summary>
			<value>8</value>
		</member>

		<member name="F:&dans;.ListenCompleteType.UserReleasedKey">
			<summary>
				The <glossary>Listening mode</glossary> was started with the <glossary>Listening key</glossary>,
				and the key was released.
			</summary>
			<value>4</value>
		</member>

		<member name="F:&dans;.ListenCompleteType.UserSpeechEnded">
			<summary>Speech recognition has produced a result.</summary>
			<value>5</value>
		</member>

		<member name="F:&dans;.ListenCompleteType.UserTimedOut">
			<summary>
				The <glossary>Listening mode</glossary> was started with the <glossary>Listening key</glossary>,
				and it timed out.
			</summary>
			<value>3</value>
		</member>

		<!--=============================================================================================-->

		<member name="T:&dans;.ListenCompleteType" kind="Enumeration">
			<summary>
				<para>
					Enumerates the possible reasons that <glossary>Listening mode</glossary> could end.
				</para>
			</summary>
			<syntax>
				<h4>Members</h4>
				<list type="table">
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.ListenCompleteType.ProgramDisabled']/value" /> = <keyword>ProgramDisabled</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.ListenCompleteType.ProgramDisabled']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.ListenCompleteType.ProgramTimedOut']/value" /> = <keyword>ProgramTimedOut</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.ListenCompleteType.ProgramTimedOut']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.ListenCompleteType.UserTimedOut']/value" /> = <keyword>UserTimedOut</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.ListenCompleteType.UserTimedOut']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.ListenCompleteType.UserReleasedKey']/value" /> = <keyword>UserReleasedKey</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.ListenCompleteType.UserReleasedKey']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.ListenCompleteType.UserSpeechEnded']/value" /> = <keyword>UserSpeechEnded</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.ListenCompleteType.UserSpeechEnded']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.ListenCompleteType.CharacterClientDeactivated']/value" /> = <keyword>CharacterClientDeactivated</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.ListenCompleteType.CharacterClientDeactivated']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.ListenCompleteType.DefaultCharacterChanged']/value" /> = <keyword>DefaultCharacterChanged</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.ListenCompleteType.DefaultCharacterChanged']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.ListenCompleteType.UserDisabled']/value" /> = <keyword>UserDisabled</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.ListenCompleteType.UserDisabled']/summary" />
						</description>
					</item>
				</list>
			</syntax>
			<seealso cref="E:&darootobj;.ListenComplete" suffix="Event" prefix="The" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="F:&dans;.ListeningStatusType.Available">
			<summary>Conditions support speech input.</summary>
			<value>0</value>
		</member>

		<member name="F:&dans;.ListeningStatusType.CharacterInactive">
			<summary>
				Speech recognition is unavailable because another client is the active client of this character, or
				the current character is not <glossary>input-active</glossary>.
			</summary>
			<value>2</value>
		</member>

		<member name="F:&dans;.ListeningStatusType.Error">
			<summary>The speech recognition status could not be determined.</summary>
			<value>6</value>
		</member>

		<member name="F:&dans;.ListeningStatusType.InitializeFailed">
			<summary>
				Speech recognition is unavailable because it could not be initialized. This includes the possibility
				that there is no speech engine available matching the character's language setting.
			</summary>
			<value>4</value>
		</member>

		<member name="F:&dans;.ListeningStatusType.InputDisabled">
			<summary>
				The user has disabled speech input in the <a class="see" href="&dapsref;#SpeechInput">&dapsname;</a>
				window.
			</summary>
			<value>5</value>
		</member>

		<!--=============================================================================================-->

		<member name="T:&dans;.ListeningStatusType" kind="Enumeration">
			<summary>
				<para>
					Indicates if a character can enter <glossary>Listening mode</glossary>, or why it cannot.
				</para>
			</summary>
			<syntax>
				<h4>Members</h4>
				<list type="table">
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.ListeningStatusType.Available']/value" /> = <keyword>Available</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.ListeningStatusType.Available']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.ListeningStatusType.CharacterInactive']/value" /> = <keyword>CharacterInactive</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.ListeningStatusType.CharacterInactive']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.ListeningStatusType.InitializeFailed']/value" /> = <keyword>InitializeFailed</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.ListeningStatusType.InitializeFailed']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.ListeningStatusType.InputDisabled']/value" /> = <keyword>InputDisabled</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.ListeningStatusType.InputDisabled']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.ListeningStatusType.Error']/value" /> = <keyword>Error</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.ListeningStatusType.Error']/summary" />
						</description>
					</item>
				</list>
			</syntax>
			<seealso cref="P:&dans;.Character.ListeningStatus" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Settings.SREnabled" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="F:&dans;.MoveCauseType.NeverMoved">
			<summary>The character hasn't moved.</summary>
			<value>0</value>
		</member>

		<member name="F:&dans;.MoveCauseType.OtherProgramMoved">
			<summary>Another client application moved the character.</summary>
			<value>3</value>
		</member>

		<member name="F:&dans;.MoveCauseType.ProgramMoved">
			<summary>Your client application moved the character.</summary>
			<value>2</value>
		</member>

		<member name="F:&dans;.MoveCauseType.UserMoved">
			<summary>The user dragged the character.</summary>
			<value>1</value>
		</member>

		<!--=============================================================================================-->

		<member name="T:&dans;.MoveCauseType" kind="Enumeration">
			<summary>
				<para>
					Enumerates the possible reasons that a character moved.
				</para>
			</summary>
			<syntax>
				<h4>Members</h4>
				<list type="table">
					<item name="NeverMoved">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.MoveCauseType.NeverMoved']/value" /> = <keyword>NeverMoved</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.MoveCauseType.NeverMoved']/summary" />
						</description>
					</item>
					<item name="UserMoved">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.MoveCauseType.UserMoved']/value" /> = <keyword>UserMoved</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.MoveCauseType.UserMoved']/summary" />
						</description>
					</item>
					<item name="ProgramMoved">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.MoveCauseType.ProgramMoved']/value" /> = <keyword>ProgramMoved</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.MoveCauseType.ProgramMoved']/summary" />
						</description>
					</item>
					<item name="OtherProgramMoved">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.MoveCauseType.OtherProgramMoved']/value" /> = <keyword>OtherProgramMoved</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.MoveCauseType.OtherProgramMoved']/summary" />
						</description>
					</item>
				</list>
			</syntax>
			<seealso cref="P:&dans;.Character.MoveCause" suffix="Property" prefix="The" />
			<seealso cref="E:&darootobj;.Move" suffix="Event" prefix="The" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="F:&dans;.PrepareResourceType.Animation">
			<summary>Download an animation.</summary>
			<value>0</value>
		</member>

		<member name="F:&dans;.PrepareResourceType.State">
			<summary>Download all animations for a state.</summary>
			<value>1</value>
		</member>

		<member name="F:&dans;.PrepareResourceType.Wave">
			<summary>Download a sound file.</summary>
			<value>2</value>
		</member>

		<!--=============================================================================================-->

		<member name="T:&dans;.PrepareResourceType" kind="Enumeration">
			<summary>
				<para>
					Specifies the type of resource that is being requested with the <see cref="M:&dans;.Character.Prepare" />
					method.
				</para>
			</summary>
			<syntax>
				<h4>Members</h4>
				<list type="table">
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.PrepareResourceType.Animation']/value" /> = <keyword>Animation</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.PrepareResourceType.Animation']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.PrepareResourceType.State']/value" /> = <keyword>State</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.PrepareResourceType.State']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.PrepareResourceType.Wave']/value" /> = <keyword>Wave</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.PrepareResourceType.Wave']/summary" />
						</description>
					</item>
				</list>
			</syntax>
			<seealso cref="M:&dans;.Character.Prepare" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="F:&dans;.RequestStatus.Failed">
			<summary>
				The request failed and an error code is available in the <see cref="T:&dans;.Request" suffix="Object's" />
				<see cref="P:&dans;.Request.Number" /> property.
			</summary>
			<value>1</value>
		</member>

		<member name="F:&dans;.RequestStatus.InProgress">
			<summary>The request is currently in progress.</summary>
			<value>4</value>
		</member>

		<member name="F:&dans;.RequestStatus.Interrupted">
			<summary>
				The request was interrupted and an error code is available in the <see cref="T:&dans;.Request" suffix="Object's" />
				<see cref="P:&dans;.Request.Number" /> property.
			</summary>
			<value>3</value>
		</member>

		<member name="F:&dans;.RequestStatus.Pending">
			<summary>The request is on the queue.</summary>
			<value>2</value>
		</member>

		<member name="F:&dans;.RequestStatus.Success">
			<summary>The request was successfully completed.</summary>
			<value>0</value>
		</member>

		<!--=============================================================================================-->

		<member name="T:&dans;.RequestStatus" kind="Enumeration">
			<summary>
				<para>
					Specifies the <see cref="P:&dans;.Request.Status" /> of a <see cref="T:&dans;.Request" suffix="Object" />.
				</para>
			</summary>
			<syntax>
				<h4>Members</h4>
				<list type="table">
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.RequestStatus.Success']/value" /> = <keyword>Success</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.RequestStatus.Success']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.RequestStatus.Failed']/value" /> = <keyword>Failed</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.RequestStatus.Failed']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.RequestStatus.Pending']/value" /> = <keyword>Pending</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.RequestStatus.Pending']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.RequestStatus.Interrupted']/value" /> = <keyword>Interrupted</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.RequestStatus.Interrupted']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.RequestStatus.InProgress']/value" /> = <keyword>InProgress</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.RequestStatus.InProgress']/summary" />
						</description>
					</item>
				</list>
			</syntax>
			<seealso cref="P:&dans;.Request.Status" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="F:&dans;.SpeechGenderType.Female">
			<summary>A female voice.</summary>
			<value>1</value>
		</member>

		<member name="F:&dans;.SpeechGenderType.Male">
			<summary>A male voice.</summary>
			<value>2</value>
		</member>

		<member name="F:&dans;.SpeechGenderType.Neutral">
			<summary>Either a female or male voice.</summary>
			<value>0</value>
		</member>

		<!--=============================================================================================-->

		<member name="T:&dans;.SpeechGenderType" kind="Enumeration">
			<summary>
				<para>
					Specifies the gender of a text-to-speech voice.
				</para>
			</summary>
			<syntax>
				<h4>Members</h4>
				<list type="table">
					<item name="Female">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.SpeechGenderType.Female']/value" /> = <keyword>Female</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.SpeechGenderType.Female']/summary" />
						</description>
					</item>
					<item name="Male">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.SpeechGenderType.Male']/value" /> = <keyword>Male</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.SpeechGenderType.Male']/summary" />
						</description>
					</item>
					<item name="Neutral">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.SpeechGenderType.Neutral']/value" /> = <keyword>Neutral</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.SpeechGenderType.Neutral']/summary" />
						</description>
					</item>
				</list>
			</syntax>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="F:&dans;.StopAllFlags.Everything">
			<summary>Stop all pending requests.</summary>
			<value>&hexprefix;FFFFFFFF</value>
		</member>

		<member name="F:&dans;.StopAllFlags.ImmediatePrepare">
			<summary>
				Stop any non-queued animation or file downloads (<keyword>Prepare</keyword> method with <token>Queue</token>
				parameter set to <keyword>False</keyword>)
			</summary>
			<value>&hexprefix;00000010</value>
		</member>

		<member name="F:&dans;.StopAllFlags.Move">
			<summary>Stop any pending or running move requests.</summary>
			<value>&hexprefix;00000002</value>
		</member>

		<member name="F:&dans;.StopAllFlags.Play">
			<summary>Stop any pending or running animations.</summary>
			<value>&hexprefix;00000001</value>
		</member>

		<member name="F:&dans;.StopAllFlags.QueuedPrepare">
			<summary>
				Stop any queued animation or file downloads (<keyword>Prepare</keyword> method with <token>Queue</token>
				parameter set to <keyword>True</keyword>).
			</summary>
			<value>&hexprefix;00000008</value>
		</member>

		<member name="F:&dans;.StopAllFlags.Speak">
			<summary>Stop any pending or running speech requests.</summary>
			<value>&hexprefix;00000004</value>
		</member>

		<member name="F:&dans;.StopAllFlags.Visibility">
			<summary>Stop any pending show or hide requests.</summary>
			<value>&hexprefix;00000020</value>
		</member>

		<!--=============================================================================================-->

		<member name="T:&dans;.StopAllFlags" kind="Enumeration">
			<summary>
				<para>
					Defines the scope of the <see cref="M:&dans;.Character.StopAll" /> method.
				</para>
			</summary>
			<syntax>
				<h4>Members</h4>
				<list type="table">
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.StopAllFlags.Play']/value" /> = <keyword>Play</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.StopAllFlags.Play']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.StopAllFlags.Move']/value" /> = <keyword>Move</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.StopAllFlags.Move']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.StopAllFlags.Speak']/value" /> = <keyword>Speak</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.StopAllFlags.Speak']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.StopAllFlags.QueuedPrepare']/value" /> = <keyword>QueuedPrepare</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.StopAllFlags.QueuedPrepare']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.StopAllFlags.ImmediatePrepare']/value" /> = <keyword>ImmediatePrepare</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.StopAllFlags.ImmediatePrepare']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.StopAllFlags.Visibility']/value" /> = <keyword>Visibility</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.StopAllFlags.Visibility']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.StopAllFlags.Everything']/value" /> = <keyword>Everything</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.StopAllFlags.Everything']/summary" />
						</description>
					</item>
				</list>
			</syntax>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="F:&dans;.VisibilityCauseType.NeverShown">
			<summary>The character has not been shown.</summary>
			<value>0</value>
		</member>

		<member name="F:&dans;.VisibilityCauseType.OtherProgramHid">
			<summary>Another client application hid the character.</summary>
			<value>5</value>
		</member>

		<member name="F:&dans;.VisibilityCauseType.OtherProgramShowed">
			<summary>Another client application showed the character.</summary>
			<value>6</value>
		</member>

		<member name="F:&dans;.VisibilityCauseType.ProgramHid">
			<summary>Your application hid the character.</summary>
			<value>3</value>
		</member>

		<member name="F:&dans;.VisibilityCauseType.ProgramShowed">
			<summary>Your application showed the character.</summary>
			<value>4</value>
		</member>

		<member name="F:&dans;.VisibilityCauseType.UserHid">
			<summary>
				The user hid the character using the command on the character's <a class="see" href="&daniref;">&daniname;</a>
				or using speech input.
			</summary>
			<value>1</value>
		</member>

		<member name="F:&dans;.VisibilityCauseType.UserShowed">
			<summary>
				The user showed the character using the command on the character's <a class="see" href="&daniref;">&daniname;</a>
				or using speech input.
			</summary>
			<value>2</value>
		</member>

		<!--=============================================================================================-->

		<member name="T:&dans;.VisibilityCauseType" kind="Enumeration">
			<summary>
				<para>
					Enumerates the possible reasons that a character was shown or hidden.
				</para>
			</summary>
			<syntax>
				<h4>Members</h4>
				<list type="table">
					<item name="NeverShown">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.VisibilityCauseType.NeverShown']/value" /> = <keyword>NeverShown</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.VisibilityCauseType.NeverShown']/summary" />
						</description>
					</item>
					<item name="UserHid">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.VisibilityCauseType.UserHid']/value" /> = <keyword>UserHid</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.VisibilityCauseType.UserHid']/summary" />
						</description>
					</item>
					<item name="UserShowed">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.VisibilityCauseType.UserShowed']/value" /> = <keyword>UserShowed</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.VisibilityCauseType.UserShowed']/summary" />
						</description>
					</item>
					<item name="ProgramHid">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.VisibilityCauseType.ProgramHid']/value" /> = <keyword>ProgramHid</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.VisibilityCauseType.ProgramHid']/summary" />
						</description>
					</item>
					<item name="ProgramShowed">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.VisibilityCauseType.ProgramShowed']/value" /> = <keyword>ProgramShowed</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.VisibilityCauseType.ProgramShowed']/summary" />
						</description>
					</item>
					<item name="OtherProgramHid">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.VisibilityCauseType.OtherProgramHid']/value" /> = <keyword>OtherProgramHid</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.VisibilityCauseType.OtherProgramHid']/summary" />
						</description>
					</item>
					<item name="OtherProgramShowed">
						<term xml:space="preserve">
<copy path="/doc/members/member[@name='F:&dans;.VisibilityCauseType.OtherProgramShowed']/value" /> = <keyword>OtherProgramShowed</keyword>
</term>
						<description>
							<copy path="/doc/members/member[@name='F:&dans;.VisibilityCauseType.OtherProgramShowed']/summary" />
						</description>
					</item>
				</list>
			</syntax>
			<seealso cref="P:&dans;.Character.VisibilityCause" suffix="Property" prefix="The" />
			<seealso cref="E:&darootobj;.Show" prefix="The" suffix="Event" />
			<seealso cref="E:&darootobj;.Hide" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="M:&darootobj;.FindCharacterSREngines">
			<summary>
				<para>
					Retrieves a collection of <see cref="T:&dans;.SREngine" text="Speech Recognition Engine" suffix="Objects" />
					that meet a specific character's requirements.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>&darootref;-&gt;<keyword>FindCharacterSREngines</keyword> (<token>Provider</token>, <token>LanguageID</token>, &amp;<token>SREngines</token>)</para>
</cpp>
<csharp>
<para>[<token>SREngines</token> = ]&darootref;.<keyword>FindCharacterSREngines</keyword> (<token>Provider</token>, <token>LanguageID</token>)</para>
</csharp>
<vbnet>
<para>[<token>SREngines</token> = ]&darootref;.<keyword>FindCharacterSREngines</keyword> (<token>Provider</token>, <token>LanguageID</token>)</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>SREngines</token> = ]&darootref;.<keyword>FindCharacterSREngines</keyword> (<token>Provider</token>[, <token>LanguageID</token>])</para>
</vb>
</syntax>
			<param name="Provider">
				A <typename>string</typename> value that specifies the character file, or an
				empty string for the default character.
			</param>
			<param name="LanguageID">
				An optional <typename>numeric</typename> value that specifies the language to
				match, or <keyword>zero</keyword> to match any language.
			</param>
			<returns name="SREngines">
				A <see class="typename" cref="T:&dans;.SREngines" suffix="Collection" />
				that matches the character's text-to-speech requirements and the specified <paramref name="LanguageID" />
				(if any).
			</returns>
			<remarks>
				<para>
					This method allows you to choose a speech recognition engine without loading the character.
				</para>
				<include file="&dainclude;" path="/doc/remarks/para[@name='Provider']" />
				<include file="&dainclude;" path="/doc/remarks/note[@name='Provider']" />
			</remarks>
			<seealso cref="T:&dans;.SREngines" suffix="Collection" prefix="The" />
			<seealso cref="T:&dans;.SREngine" suffix="Object" prefix="The" />
			<seealso cref="M:&dans;.Characters.Load" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&darootobj;.FindCharacterTTSEngines">
			<summary>
				<para>
					Retrieves a collection of <see cref="T:&dans;.TTSEngine" text="Text-To-Speech Engine" suffix="Objects" />
					that meet a specific character's requirements.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>&darootref;-&gt;<keyword>FindCharacterTTSEngines</keyword> (<token>Provider</token>, <token>LanguageID</token>, &amp;<token>TTSEngines</token>)</para>
</cpp>
<csharp>
<para>[<token>TTSEngines</token> = ]&darootref;.<keyword>FindCharacterTTSEngines</keyword> (<token>Provider</token>, <token>LanguageID</token>)</para>
</csharp>
<vbnet>
<para>[<token>TTSEngines</token> = ]&darootref;.<keyword>FindCharacterTTSEngines</keyword> (<token>Provider</token>, <token>LanguageID</token>)</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>TTSEngines</token> = ]&darootref;.<keyword>FindCharacterTTSEngines</keyword> (<token>Provider</token>[, <token>LanguageID</token>])</para>
</vb>
</syntax>
			<param name="Provider">
				A <typename>string</typename> value that specifies the character file, or an
				empty string for the default character.
			</param>
			<param name="LanguageID">
				An optional <typename>numeric</typename> value that specifies the language to
				match, or <keyword>zero</keyword> to match any language.
			</param>
			<returns name="TTSEngines">
				A <see class="typename" cref="T:&dans;.TTSEngines" suffix="Collection" />
				that matches the character's text-to-speech requirements and the specified <paramref name="LanguageID" />
				(if any).
			</returns>
			<remarks>
				<para>
					This method allows you to choose a text-to-speech engine without loading the character.
				</para>
				<include file="&dainclude;" path="/doc/remarks/para[@name='Provider']" />
				<include file="&dainclude;" path="/doc/remarks/note[@name='Provider']" />
			</remarks>
			<seealso cref="T:&dans;.TTSEngines" suffix="Collection" prefix="The" />
			<seealso cref="T:&dans;.TTSEngine" suffix="Object" prefix="The" />
			<seealso cref="M:&dans;.Characters.Load" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&darootobj;.FindSREngines">
			<summary>
				<para>
					Retrieves a collection of <see cref="T:&dans;.SREngine" text="Speech Recognition Engine" suffix="Objects" />
					for a specific language.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>&darootref;-&gt;<keyword>FindSREngines</keyword> (<token>LanguageID</token>, &amp;<token>SREngines</token>)</para>
</cpp>
<csharp>
<para>[<token>SREngines</token> = ]&darootref;.<keyword>FindSREngines</keyword> (<token>LanguageID</token>)</para>
</csharp>
<vbnet>
<para>[<token>SREngines</token> = ]&darootref;.<keyword>FindSREngines</keyword> (<token>LanguageID</token>)</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>SREngines</token> = ]&darootref;.<keyword>FindSREngines</keyword> (<token>LanguageID</token>)</para>
</vb>
</syntax>
			<param name="LanguageID">
				A <typename>numeric</typename> value that specifies the language to match, or
				<keyword>zero</keyword> for any language.
			</param>
			<returns name="SREngines">
				A <see class="typename" cref="T:&dans;.SREngines" suffix="Collection" />
				that matches the the specified <paramref name="LanguageID" />.
			</returns>
			<remarks>
				<para>
					This method allows you to query available speech recognition engines without loading a character.
				</para>
				<note>
					Using this method with zero for the <paramref name="LanguageID" /> is equivalent to using the
					<see cref="P:&darootobj;.SREngines" /> property.
				</note>
			</remarks>
			<seealso cref="T:&dans;.SREngines" suffix="Collection" prefix="The" />
			<seealso cref="T:&dans;.SREngine" suffix="Object" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&darootobj;.FindTTSEngines">
			<summary>
				<para>
					Retrieves a collection of <see cref="T:&dans;.TTSEngine" text="Text-To-Speech Engine" suffix="Objects" />
					for a specific language and gender.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>&darootref;-&gt;<keyword>FindTTSEngines</keyword> (<token>LanguageID</token>, <token>Gender</token>, &amp;<token>TTSEngines</token>)</para>
</cpp>
<csharp>
<para>[<token>TTSEngines</token> = ]&darootref;.<keyword>FindTTSEngines</keyword> (<token>LanguageID</token>, <token>Gender</token>)</para>
</csharp>
<vbnet>
<para>[<token>TTSEngines</token> = ]&darootref;.<keyword>FindTTSEngines</keyword> (<token>LanguageID</token>, <token>Gender</token>)</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>TTSEngines</token> = ]&darootref;.<keyword>FindTTSEngines</keyword> ([<token>LanguageID</token>][, <token>Gender</token>])</para>
</vb>
</syntax>
			<param name="LanguageID">
				A <typename>numeric</typename> value that specifies the language to match, or
				<keyword>zero</keyword> for any language.
			</param>
			<param name="Gender">
				A <typename>numeric</typename> value, or a member of the <see class="typename" cref="T:&dans;.SpeechGenderType" suffix="Enumeration" />,
				that specifies the gender to match:<include path="/doc/members/member[@name='T:&dans;.SpeechGenderType']/syntax/list" />
			</param>
			<returns name="TTSEngines">
				A <see class="typename" cref="T:&dans;.TTSEngines" suffix="Collection" />
				that matches the the specified <paramref name="LanguageID" /> and <paramref name="Gender" />.
			</returns>
			<remarks>
				<para>
					This method allows you to query available text-to-speech engines without loading a character.
				</para>
			</remarks>
			<seealso cref="T:&dans;.SpeechGenderType" suffix="Enumeration" prefix="The" />
			<seealso cref="T:&dans;.TTSEngines" suffix="Collection" prefix="The" />
			<seealso cref="T:&dans;.TTSEngine" suffix="Object" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&darootobj;.GetCharacterSREngine">
			<summary>
				<para>
					Retrieves a <see cref="T:&dans;.SREngine" text="Speech Recognition Engine" suffix="Object" /> that meets
					a specific character's requirements.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>&darootref;-&gt;<keyword>GetCharacterSREngine</keyword> (<token>Provider</token>, &amp;<token>SREngine</token>)</para>
</cpp>
<csharp>
<para>[<token>SREngine</token> = ]&darootref;.<keyword>GetCharacterSREngine</keyword> (<token>Provider</token>)</para>
</csharp>
<vbnet>
<para>[<token>SREngine</token> = ]&darootref;.<keyword>GetCharacterSREngine</keyword> (<token>Provider</token>)</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>SREngine</token> = ]&darootref;.<keyword>GetCharacterSREngine</keyword> (<token>Provider</token>)</para>
</vb>
</syntax>
			<param name="Provider">
				A <typename>string</typename> value that specifies the character file, or an
				empty string for the default character.
			</param>
			<returns name="SREngine">
				The <see class="typename" cref="T:&dans;.SREngine" suffix="Object" /> that matches
				the character's speech recognition requirements (if any).
			</returns>
			<remarks>
				<para>
					This method allows you to query a character's <em>default</em> speech recognition engine without loading
					the character.
				</para>
				<include file="&dainclude;" path="/doc/remarks/para[@name='Provider']" />
				<include file="&dainclude;" path="/doc/remarks/note[@name='Provider']" />
			</remarks>
			<seealso cref="T:&dans;.SREngine" suffix="Object" prefix="The" />
			<seealso cref="M:&dans;.Characters.Load" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&darootobj;.GetCharacterTTSEngine">
			<summary>
				<para>
					Retrieves a <see cref="T:&dans;.TTSEngine" text="Text-To-Speech Engine" suffix="Object" /> that meets
					a specific character's requirements.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>&darootref;-&gt;<keyword>GetCharacterTTSEngine</keyword> (<token>Provider</token>, &amp;<token>TTSEngine</token>)</para>
</cpp>
<csharp>
<para>[<token>TTSEngine</token> = ]&darootref;.<keyword>GetCharacterTTSEngine</keyword> (<token>Provider</token>)</para>
</csharp>
<vbnet>
<para>[<token>TTSEngine</token> = ]&darootref;.<keyword>GetCharacterTTSEngine</keyword> (<token>Provider</token>)</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>TTSEngine</token> = ]&darootref;.<keyword>GetCharacterTTSEngine</keyword> (<token>Provider</token>)</para>
</vb>
</syntax>
			<param name="Provider">
				A <typename>string</typename> value that specifies the character file, or an
				empty string for the default character.
			</param>
			<returns name="TTSEngine">
				The <see class="typename" cref="T:&dans;.TTSEngine" suffix="Object" /> that
				matches the character's text-to-speech requirements (if any).
			</returns>
			<remarks>
				<para>
					This method allows you to query a character's <em>default</em> text-to-speech engine without loading the
					character.
				</para>
				<include file="&dainclude;" path="/doc/remarks/para[@name='Provider']" />
				<include file="&dainclude;" path="/doc/remarks/note[@name='Provider']" />
			</remarks>
			<seealso cref="T:&dans;.TTSEngine" suffix="Object" prefix="The" />
			<seealso cref="M:&dans;.Characters.Load" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&darootobj;.ShowDefaultCharacterProperties">
			<summary>
				<para>
					Shows the <a class="see" href="&dapsref;#Gallery">Gallery</a> page of the <a class="see" href="&dapsref;">&dapsname;</a>
					window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>&darootref;-&gt;<keyword>ShowDefaultCharacterProperties</keyword> (<token>X</token>, <token>Y</token>)</para>
</cpp>
<csharp>
<para>&darootref;.<keyword>ShowDefaultCharacterProperties</keyword> (<token>X</token>, <token>Y</token>)</para>
</csharp>
<vbnet>
<para>&darootref;.<keyword>ShowDefaultCharacterProperties</keyword> (<token>X</token>, <token>Y</token>)</para>
</vbnet>
<vb>
<para>&darootref;.<keyword>ShowDefaultCharacterProperties</keyword>[ <token>X</token>, <token>Y</token>]</para>
</vb>
</syntax>
			<param name="X">
				The horizontal position, in pixels, of the <see cref="P:&dans;.PropertySheet.Left" text="&dapsname;" />
				window. This parameter is optional. For programming languages that don't support optional parameters, a
				negative value will be ignored.
			</param>
			<param name="Y">
				The vertical position, in pixels, of the <see cref="P:&dans;.PropertySheet.Top" text="&dapsname;" />
				window. This parameter is optional. For programming languages that don't support optional parameters, a
				negative value will be ignored.
			</param>
			<remarks>
				<para>
					This method is obsolete, but is still supported for backward compatibility. Calling it shows the <a class="see" href="&dapsref;">&dapsname;</a>
					window. New applications should use the <see cref="T:&dans;.PropertySheet" suffix="Object"></see> instead.
				</para>
				<para>
					If you don't specify the <paramref name="X" /> and <paramref name="Y" /> coordinates (or use a negative
					value for programming languages that don't support optional parameters), the window appears at
					the last location it was displayed.
				</para>
			</remarks>
			<seealso cref="T:&dans;.PropertySheet" prefix="The" suffix="Object" />
			<seealso cref="P:&dans;.PropertySheet.Page" prefix="The" suffix="Property" />
			<seealso cref="E:&darootobj;.DefaultCharacterChange" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="P:&darootobj;.AudioOutput">
			<summary>
				<para>
					deprecated
				</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:&darootobj;.Settings" /> property, but is still supported
					for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&darootobj;.AutoConnect">
			<summary>
				<para>
					Specifies if the Double Agent control will automatically connect to the Double Agent server.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>&darootref;-&gt;<keyword>get_AutoConnect</keyword> (&amp;<token>AutoConnect</token>)</para>
<para>&darootref;-&gt;<keyword>put_AutoConnect</keyword> (<token>AutoConnect</token>)</para>
</cpp>
<csharp>
<para>[<token>AutoConnect</token> = ]&darootref;.<keyword>AutoConnect</keyword></para>
<para>&darootref;.<keyword>AutoConnect</keyword> = <token>AutoConnect</token></para>
</csharp>
<vbnet>
<para>[<token>AutoConnect</token> = ]&darootref;.<keyword>AutoConnect</keyword></para>
<para>&darootref;.<keyword>AutoConnect</keyword> = <token>AutoConnect</token></para>
</vbnet>
<vb>
<para>[<token>AutoConnect</token> = ]&darootref;.<keyword>AutoConnect</keyword></para>
<para>&darootref;.<keyword>AutoConnect</keyword> = <token>AutoConnect</token></para>
</vb>
</syntax>
			<value name="AutoConnect">
				A <typename>numeric</typename> value specifying whether automatic connection is
				enabled.
				<para>
					On a 32-bit system:
				</para>
				<list type="table">
					<item>
						<term width="150ex">0</term>
						<description>
							The control will <em>not</em> automatically connect to the server.
						</description>
					</item>
					<item>
						<term width="150ex">Any non-zero value</term>
						<description>The control will automatically connect to the server.</description>
					</item>
				</list>
				<para>
					On a 64-bit system:
				</para>
				<list type="table">
					<item>
						<term width="150ex">0</term>
						<description>
							The control will <em>not</em> automatically connect to the server.
						</description>
					</item>
					<item>
						<term width="150ex">32</term>
						<description>
							The control will automatically connect to the 32-bit server. If the 32-bit server is
							not installed, the 64-bit server will be used.
						</description>
					</item>
					<item>
						<term width="150ex">64</term>
						<description>
							The control will automatically connect to the 64-bit server. If the 64-bit server is
							not installed, the 32-bit server will be used.
						</description>
					</item>
					<item>
						<term width="150ex">Any other non-zero value</term>
						<description>
							The control will automatically connect to server with the same architecture as the calling
							process. If the matching server is not installed, then the other server will be used.
						</description>
					</item>
				</list>
			</value>
			<remarks>
				<para>
					If this property is <keyword>non-zero</keyword>, then the control will automatically establish a
					connection with the server the first time it's required. To use the control in <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#standalone">stand-alone</a>
					mode, you must set this property to <keyword>zero</keyword>.
				</para>
				<para>
					For compatibility with Microsoft<sup>®</sup> Agent, the default value for this property is <keyword>True</keyword>.
				</para>
			</remarks>
			<seealso cref="P:&darootobj;.Connected" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&darootobj;.AutoSize">
			<summary>
				<para>
					Specifies if the ActiveX<sup>®</sup> control is automatically sized to fit the <see cref="P:&darootobj;.ControlCharacter" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>&darootref;-&gt;<keyword>get_AutoSize</keyword> (&amp;<token>AutoSize</token>)</para>
<para>&darootref;-&gt;<keyword>put_AutoSize</keyword> (<token>AutoSize</token>)</para>
</cpp>
<csharp>
<para>[<token>AutoSize</token> = ]&darootref;.<keyword>AutoSize</keyword></para>
<para>&darootref;.<keyword>AutoSize</keyword> = <token>AutoSize</token></para>
</csharp>
<vbnet>
<para>[<token>AutoSize</token> = ]&darootref;.<keyword>AutoSize</keyword></para>
<para>&darootref;.<keyword>AutoSize</keyword> = <token>AutoSize</token></para>
</vbnet>
<vb>
<para>[<token>AutoSize</token> = ]&darootref;.<keyword>AutoSize</keyword></para>
<para>&darootref;.<keyword>AutoSize</keyword> = <token>AutoSize</token></para>
</vb>
</syntax>
			<value name="AutoSize">
				A <typename>boolean</typename> value that specifies if the control's size is
				automatically adjusted to exactly fit the <see class="see" cref="P:&darootobj;.ControlCharacter" text="contained character" />.
			</value>
			<remarks>
				<include file="&dainclude;" path="/doc/properties/note[@name='ContainedOnly']" />
			</remarks>
			<seealso cref="P:&darootobj;.ControlCharacter" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&darootobj;.BackColor">
			<summary>
				<para>
					Specifies the ActiveX<sup>®</sup> control's background color.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>&darootref;-&gt;<keyword>get_BackColor</keyword> (&amp;<token>BackColor</token>)</para>
<para>&darootref;-&gt;<keyword>put_BackColor</keyword> (<token>BackColor</token>)</para>
</cpp>
<csharp>
<para>[<token>BackColor</token> = ]&darootref;.<keyword>BackColor</keyword></para>
<para>&darootref;.<keyword>BackColor</keyword> = <token>BackColor</token></para>
</csharp>
<vbnet>
<para>[<token>BackColor</token> = ]&darootref;.<keyword>BackColor</keyword></para>
<para>&darootref;.<keyword>BackColor</keyword> = <token>BackColor</token></para>
</vbnet>
<vb>
<para>[<token>BackColor</token> = ]&darootref;.<keyword>BackColor</keyword></para>
<para>&darootref;.<keyword>BackColor</keyword> = <token>BackColor</token></para>
</vb>
</syntax>
			<value name="BackColor">
				An <typename>OLECOLOR</typename> value for the control's background color.
			</value>
			<remarks>
				<include file="&dainclude;" path="/doc/properties/para[@name='Color']" />
				<include file="&dainclude;" path="/doc/properties/para[@name='OleColor']" />
				<include file="&dainclude;" path="/doc/properties/note[@name='ContainedOnly']" />
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&darootobj;.BorderColor">
			<summary>
				<para>
					Specifies the ActiveX<sup>®</sup> control's border color.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>&darootref;-&gt;<keyword>get_BorderColor</keyword> (&amp;<token>BorderColor</token>)</para>
<para>&darootref;-&gt;<keyword>put_BorderColor</keyword> (<token>BorderColor</token>)</para>
</cpp>
<csharp>
<para>[<token>BorderColor</token> = ]&darootref;.<keyword>BorderColor</keyword></para>
<para>&darootref;.<keyword>BorderColor</keyword> = <token>BorderColor</token></para>
</csharp>
<vbnet>
<para>[<token>BorderColor</token> = ]&darootref;.<keyword>BorderColor</keyword></para>
<para>&darootref;.<keyword>BorderColor</keyword> = <token>BorderColor</token></para>
</vbnet>
<vb>
<para>[<token>BorderColor</token> = ]&darootref;.<keyword>BorderColor</keyword></para>
<para>&darootref;.<keyword>BorderColor</keyword> = <token>BorderColor</token></para>
</vb>
</syntax>
			<value name="BorderColor">
				An <typename>OLECOLOR</typename> value for the control's border color.
			</value>
			<remarks>
				<include file="&dainclude;" path="/doc/properties/para[@name='Color']" />
				<include file="&dainclude;" path="/doc/properties/para[@name='OleColor']" />
				<include file="&dainclude;" path="/doc/properties/note[@name='ContainedOnly']" />
			</remarks>
			<seealso cref="P:&darootobj;.BorderStyle" suffix="Property" prefix="The" />
			<seealso cref="P:&darootobj;.BorderVisible" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&darootobj;.BorderStyle">
			<summary>
				<para>
					Specifies the style of the ActiveX<sup>®</sup> control's border.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>&darootref;-&gt;<keyword>get_BorderStyle</keyword> (&amp;<token>BorderStyle</token>)</para>
<para>&darootref;-&gt;<keyword>put_BorderStyle</keyword> (<token>BorderStyle</token>)</para>
</cpp>
<csharp>
<para>[<token>BorderStyle</token> = ]&darootref;.<keyword>BorderStyle</keyword></para>
<para>&darootref;.<keyword>BorderStyle</keyword> = <token>BorderStyle</token></para>
</csharp>
<vbnet>
<para>[<token>BorderStyle</token> = ]&darootref;.<keyword>BorderStyle</keyword></para>
<para>&darootref;.<keyword>BorderStyle</keyword> = <token>BorderStyle</token></para>
</vbnet>
<vb>
<para>[<token>BorderStyle</token> = ]&darootref;.<keyword>BorderStyle</keyword></para>
<para>&darootref;.<keyword>BorderStyle</keyword> = <token>BorderStyle</token></para>
</vb>
</syntax>
			<value name="BorderStyle">
				A <typename>numeric</typename> value that specifies the border style as follows:

				<list type="table">
					<item>
						<term xml:space="preserve">0 = Default</term>
						<description>The default border style (default for the target environment)</description>
					</item>
					<item>
						<term xml:space="preserve">1 = FixedSingle</term>
						<description>
							A fixed-width single line of width <see cref="P:&darootobj;.BorderWidth" /> and color <see cref="P:&darootobj;.BorderColor" />
						</description>
					</item>
				</list>
			</value>
			<remarks>
				<include file="&dainclude;" path="/doc/properties/note[@name='ContainedOnly']" />
			</remarks>
			<seealso cref="P:&darootobj;.BorderVisible" suffix="Property" prefix="The" />
			<seealso cref="P:&darootobj;.BorderColor" suffix="Property" prefix="The" />
			<seealso cref="P:&darootobj;.BorderWidth" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&darootobj;.BorderVisible">
			<summary>
				<para>
					Specifies if the ActiveX<sup>®</sup> control's has a visible border.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>&darootref;-&gt;<keyword>get_BorderVisible</keyword> (&amp;<token>BorderVisible</token>)</para>
<para>&darootref;-&gt;<keyword>put_BorderVisible</keyword> (<token>BorderVisible</token>)</para>
</cpp>
<csharp>
<para>[<token>BorderVisible</token> = ]&darootref;.<keyword>BorderVisible</keyword></para>
<para>&darootref;.<keyword>BorderVisible</keyword> = <token>BorderVisible</token></para>
</csharp>
<vbnet>
<para>[<token>BorderVisible</token> = ]&darootref;.<keyword>BorderVisible</keyword></para>
<para>&darootref;.<keyword>BorderVisible</keyword> = <token>BorderVisible</token></para>
</vbnet>
<vb>
<para>[<token>BorderVisible</token> = ]&darootref;.<keyword>BorderVisible</keyword></para>
<para>&darootref;.<keyword>BorderVisible</keyword> = <token>BorderVisible</token></para>
</vb>
</syntax>
			<value name="BorderVisible">
				An <typename>boolean</typename> value that indicates if the border is visible.
			</value>
			<remarks>
				<include file="&dainclude;" path="/doc/properties/note[@name='ContainedOnly']" />
			</remarks>
			<seealso cref="P:&darootobj;.BorderColor" suffix="Property" prefix="The" />
			<seealso cref="P:&darootobj;.BorderStyle" suffix="Property" prefix="The" />
			<seealso cref="P:&darootobj;.BorderWidth" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&darootobj;.BorderWidth">
			<summary>
				<para>
					Specifies the width of the ActiveX<sup>®</sup> control's border.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>&darootref;-&gt;<keyword>get_BorderWidth</keyword> (&amp;<token>BorderWidth</token>)</para>
<para>&darootref;-&gt;<keyword>put_BorderWidth</keyword> (<token>BorderWidth</token>)</para>
</cpp>
<csharp>
<para>[<token>BorderWidth</token> = ]&darootref;.<keyword>BorderWidth</keyword></para>
<para>&darootref;.<keyword>BorderWidth</keyword> = <token>BorderWidth</token></para>
</csharp>
<vbnet>
<para>[<token>BorderWidth</token> = ]&darootref;.<keyword>BorderWidth</keyword></para>
<para>&darootref;.<keyword>BorderWidth</keyword> = <token>BorderWidth</token></para>
</vbnet>
<vb>
<para>[<token>BorderWidth</token> = ]&darootref;.<keyword>BorderWidth</keyword></para>
<para>&darootref;.<keyword>BorderWidth</keyword> = <token>BorderWidth</token></para>
</vb>
</syntax>
			<value name="BorderWidth">
				An <typename>numeric</typename> value that specifies the border width, in
				pixels.
			</value>
			<remarks>
				<include file="&dainclude;" path="/doc/properties/note[@name='ContainedOnly']" />
			</remarks>
			<seealso cref="P:&darootobj;.BorderVisible" suffix="Property" prefix="The" />
			<seealso cref="P:&darootobj;.BorderColor" suffix="Property" prefix="The" />
			<seealso cref="P:&darootobj;.BorderStyle" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&darootobj;.MousePointer">
			<summary>
				<para>
					Specifies the pointer to show when the mouse moves over the ActiveX<sup>®</sup> control.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>&darootref;-&gt;<keyword>get_MousePointer</keyword> (&amp;<token>MousePointer</token>)</para>
<para>&darootref;-&gt;<keyword>put_MousePointer</keyword> (<token>MousePointer</token>)</para>
</cpp>
<csharp>
<para>[<token>MousePointer</token> = ]&darootref;.<keyword>MousePointer</keyword></para>
<para>&darootref;.<keyword>MousePointer</keyword> = <token>MousePointer</token></para>
</csharp>
<vbnet>
<para>[<token>MousePointer</token> = ]&darootref;.<keyword>MousePointer</keyword></para>
<para>&darootref;.<keyword>MousePointer</keyword> = <token>MousePointer</token></para>
</vbnet>
<vb>
<para>[<token>MousePointer</token> = ]&darootref;.<keyword>MousePointer</keyword></para>
<para>&darootref;.<keyword>MousePointer</keyword> = <token>MousePointer</token></para>
</vb>
</syntax>
			<value name="MousePointer">
				A <typename>numeric</typename> value that specifies the pointer style as
				follows:
				<list type="table">
					<item>
						<term xml:space="preserve">0 = Default</term>
						<description>The default pointer style (default for the target environment)</description>
					</item>
					<item>
						<term xml:space="preserve">1 = Arrow</term>
						<description>The arrow-shaped pointer</description>
					</item>
					<item>
						<term xml:space="preserve">2 = Cross</term>
						<description>The cross-shaped pointer</description>
					</item>
					<item>
						<term xml:space="preserve">11 = Hourglass</term>
						<description>The "wait" pointer</description>
					</item>
					<item>
						<term xml:space="preserve">12 = No Drop</term>
						<description>The pointer that indicates that drag-and-drop is not possible here</description>
					</item>
					<item>
						<term xml:space="preserve">13 = Arrow and Hourglass</term>
						<description>The pointer that indicates that an application is starting</description>
					</item>
					<item>
						<term xml:space="preserve">14 = Arrow and Question</term>
						<description>The pointer used for "What's this?" help</description>
					</item>
					<item>
						<term xml:space="preserve">16 = Hand</term>
						<description>The hand-shaped pointer</description>
					</item>
				</list>
			</value>
			<remarks>
				<include file="&dainclude;" path="/doc/properties/note[@name='ContainedOnly']" />
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&darootobj;.CharacterFiles">
			<summary>
				<para>
					Returns the control's <see cref="T:&dans;.CharacterFiles" suffix="Object" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>&darootref;-&gt;<keyword>get_CharacterFiles</keyword> (&amp;<token>CharacterFiles</token>)</para>
</cpp>
<csharp>
<para>[<token>CharacterFiles</token> = ]&darootref;.<keyword>CharacterFiles</keyword></para>
</csharp>
<vbnet>
<para>[<token>CharacterFiles</token> = ]&darootref;.<keyword>CharacterFiles</keyword></para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>CharacterFiles</token> = ]&darootref;.<keyword>CharacterFiles</keyword></para>
</vb>
</syntax>
			<value name="CharacterFiles">
				The control's <see class="typename" cref="T:&dans;.CharacterFiles" suffix="Object" />.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:&darootobj;.Characters">
			<summary>
				<para>
					Returns the control's <see cref="T:&dans;.Characters" suffix="Collection" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>&darootref;-&gt;<keyword>get_Characters</keyword> (&amp;<token>Characters</token>)</para>
</cpp>
<csharp>
<para>[<token>Characters</token> = ]&darootref;.<keyword>Characters</keyword></para>
</csharp>
<vbnet>
<para>[<token>Characters</token> = ]&darootref;.<keyword>Characters</keyword></para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>Characters</token> = ]&darootref;.<keyword>Characters</keyword></para>
</vb>
</syntax>
			<value name="Characters">
				The control's <see class="typename" cref="T:&dans;.Characters" suffix="Collection" />.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:&darootobj;.CharacterStyle">
			<summary>
				<para>
					Specifies the initial style to use when a <see cref="T:&dans;.Character" /> is loaded.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>&darootref;-&gt;<keyword>get_CharacterStyle</keyword> (&amp;<token>CharacterStyle</token>)</para>
<para>&darootref;-&gt;<keyword>put_CharacterStyle</keyword> (<token>CharacterStyle</token>)</para>
</cpp>
<csharp>
<para>[<token>CharacterStyle</token> = ]&darootref;.<keyword>CharacterStyle</keyword></para>
<para>&darootref;.<keyword>CharacterStyle</keyword> = <token>CharacterStyle</token></para>
</csharp>
<vbnet>
<para>[<token>CharacterStyle</token> = ]&darootref;.<keyword>CharacterStyle</keyword></para>
<para>&darootref;.<keyword>CharacterStyle</keyword> = <token>CharacterStyle</token></para>
</vbnet>
<vb>
<para>[<token>CharacterStyle</token> = ]&darootref;.<keyword>CharacterStyle</keyword></para>
<para>&darootref;.<keyword>CharacterStyle</keyword> = <token>CharacterStyle</token></para>
</vb>
</syntax>
			<value name="CharacterStyle">
				A <typename>numeric</typename> bit-field value that specifies the <see cref="P:&dans;.Character.Style" />
				to apply when a <see cref="T:&dans;.Character" /> is loaded:<include path="/doc/members/member[@name='T:&dans;.CharacterStyleFlags']/syntax/list" />
			</value>
			<remarks>
				<para>
					Setting this property allows you to establish a default <see cref="T:&dans;.Character" />.<see cref="P:&dans;.Character.Style" />
					for you application. It's initial value is <see class="" cref="F:&dans;.CharacterStyleFlags.AutoPopupMenu" />,
					<see class="" cref="F:&dans;.CharacterStyleFlags.IdleEnabled" />, <see class="" cref="F:&dans;.CharacterStyleFlags.IconShown" />,
					<see class="" cref="F:&dans;.CharacterStyleFlags.SoundEffects" />.
				</para>
				<para>
					The <see class="" cref="F:&dans;.CharacterStyleFlags.Smoothed" /> and <see class="" cref="F:&dans;.CharacterStyleFlags.SmoothEdges" />
					flags can only be changed here. Once a <see cref="T:&dans;.Character" /> is loaded, these bits <strong>cannot</strong>
					be changed in it's <see cref="P:&dans;.Character.Style" /> property. Also, these two settings are only used
					the first time the character is loaded. If another client has already loaded the character, it's
					smoothing settings will not change. If your client application is the first client to load the
					character, then your smoothing settings will apply to all clients.
				</para>
				<note>
					For compatibility with Microsoft<sup>®</sup> Agent, the <see class="" cref="F:&dans;.CharacterStyleFlags.IconShown" />
					flag is set by default. To load a <see cref="T:&dans;.Character" /> without showing it's <a class="see" href="&daniref;">&daniname;</a>,
					set the <see class="" cref="F:&dans;.CharacterStyleFlags.IconShown" /> flag off.
				</note>
			</remarks>
			<seealso cref="P:&dans;.Character.Style" suffix="Property" prefix="The" />
			<seealso cref="T:&dans;.CharacterStyleFlags" suffix="Enumeration" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&darootobj;.CommandsWindow">
			<summary>
				<para>
					Returns the control's <see cref="T:&dans;.CommandsWindow" suffix="Object" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>&darootref;-&gt;<keyword>get_CommandsWindow</keyword> (&amp;<token>CommandsWindow</token>)</para>
</cpp>
<csharp>
<para>[<token>CommandsWindow</token> = ]&darootref;.<keyword>CommandsWindow</keyword></para>
</csharp>
<vbnet>
<para>[<token>CommandsWindow</token> = ]&darootref;.<keyword>CommandsWindow</keyword></para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>CommandsWindow</token> = ]&darootref;.<keyword>CommandsWindow</keyword></para>
</vb>
</syntax>
			<value name="CommandsWindow">
				The control's <see class="typename" cref="T:&dans;.CommandsWindow" suffix="Object" />.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:&darootobj;.Connected">
			<summary>
				<para>
					Specifies if the control is currently connected to the Double Agent server.
				</para>
				<para>
					The Double Agent control will work whether or not it's connected to the server, but there are are special
					considerations in each case. See <a href="..\Programming\Ctl_Programming_Modes.htm">Connected, Stand-Alone, and Contained</a>
					for more information.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>&darootref;-&gt;<keyword>get_Connected</keyword> (&amp;<token>Connected</token>)</para>
<para>&darootref;-&gt;<keyword>put_Connected</keyword> (<token>Connected</token>)</para>
</cpp>
<csharp>
<para>[<token>Connected</token> = ]&darootref;.<keyword>Connected</keyword></para>
<para>&darootref;.<keyword>Connected</keyword> = <token>Connected</token></para>
</csharp>
<vbnet>
<para>[<token>Connected</token> = ]&darootref;.<keyword>Connected</keyword></para>
<para>&darootref;.<keyword>Connected</keyword> = <token>Connected</token></para>
</vbnet>
<vb>
<para>[<token>Connected</token> = ]&darootref;.<keyword>Connected</keyword></para>
<para>&darootref;.<keyword>Connected</keyword> = <token>Connected</token></para>
</vb>
</syntax>
			<value name="Connected">
				A <typename>boolean</typename> value specifying whether the control is connected.
			</value>
			<remarks>
				<para>
					You can manually open or close the connection to the server by changing the <self>Connected</self>
					property. When the connection state changes, any characters you've loaded are automatically unloaded. If
					you still have references to any objects except the control itself, any attempt to access the objects'
					properties or methods will fail.
				</para>
			</remarks>
			<details>
				<h4 class="details">Details</h4>
				<para>
					In many situations, using the control automatically creates a connection with the Double Agent server
					(depending on the <see cref="P:&darootobj;.AutoConnect" /> property setting). For example, using the Double
					Agent control's CLSID in the &lt;OBJECT&gt; tag in a Web page automatically opens a server connection and
					exiting the page closes the connection. Similarly, for Visual Basic or other languages that enable
					you to drop a control on a form, running the program automatically opens a connection and exiting
					the program closes the connection. If the server isn't currently running, it automatically starts.
				</para>
				<para>
					When you release <strong>all</strong> references to Double Agent objects, such as <see cref="T:&dans;.Character" />
					and <see cref="T:&dans;.Command" />, the connection with the Double Agent server will automatically be
					closed. You must also release your reference to the <see cref="T:&darootobj;" suffix="Object" /> itself. In
					Visual Basic, you can release a reference to an object by setting its variable to <keyword>Nothing</keyword>.
					If you have loaded characters, your should unload them before releasing the <see cref="T:&dans;.Character" suffix="Object" />.
				</para>
				<h4 class="details">Example</h4>
				<code xml:space="preserve"><keyword>Dim</keyword> <keyword>WithEvents</keyword> MyAgent <keyword>as</keyword> <keyword>DoubleAgentCtl</keyword>
<keyword>Dim</keyword> Genie <keyword>as</keyword> <keyword>DaCtlCharacter</keyword>

<keyword>Sub</keyword> Form_Load
    ' Create an instance of the control using New
    <keyword>Set</keyword> MyAgent = <keyword>New</keyword> <keyword>DoubleAgentCtl</keyword>

    ' Open a connection to the server
    MyAgent.<keyword>Connected</keyword> = <keyword>True</keyword>

    ' Load the character into the Characters collection
    MyAgent.<keyword>Characters</keyword>.<keyword>Load</keyword> "Genie", "Genie.acs"

    ' Create a reference to the character
    <keyword>Set</keyword> Genie = MyAgent.<keyword>Characters</keyword> ("Genie")
<keyword>End Sub</keyword>

<keyword>Sub</keyword> CloseConnection
    ' Unload the character
    MyAgent.<keyword>Charcters</keyword>.<keyword>Unload</keyword> "Genie"

    ' Release the reference to the character object
    <keyword>Set</keyword> Genie = <keyword>Nothing</keyword>

    ' Release the reference to the Agent control
    <keyword>Set</keyword> MyAgent = <keyword>Nothing</keyword>
<keyword>End Sub</keyword></code>
			</details>
			<seealso cref="P:&darootobj;.AutoConnect" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&darootobj;.ControlCharacter">
			<summary>
				<para>
					Specifies the control's <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#contained">contained</a> character.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>&darootref;-&gt;<keyword>get_ControlCharacter</keyword> (&amp;<token>ControlCharacter</token>)</para>
<para>&darootref;-&gt;<keyword>put_ControlCharacter</keyword> (<token>ControlCharacter</token>|<keyword>NULL</keyword>)</para>
</cpp>
<csharp>
<para>[<token>ControlCharacter</token> = ]&darootref;.<keyword>ControlCharacter</keyword></para>
<para>&darootref;.<keyword>ControlCharacter</keyword> = <token>ControlCharacter</token>|<keyword>null</keyword></para>
</csharp>
<vbnet>
<para>[<token>ControlCharacter</token> = ]&darootref;.<keyword>ControlCharacter</keyword></para>
<para>&darootref;.<keyword>ControlCharacter</keyword> = <token>ControlCharacter</token>|<keyword>Nothing</keyword></para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>ControlCharacter</token> = ]&darootref;.<keyword>ControlCharacter</keyword></para>
<para><keyword>Set</keyword> &darootref;.<keyword>ControlCharacter</keyword> = <token>ControlCharacter</token>|<keyword>Nothing</keyword></para>
</vb>
</syntax>
			<value name="ControlCharacter">
				The <see class="typename" cref="T:&dans;.Character" suffix="Object" />
				object that's contained within the visible area of the control, or an empty reference (<keyword>Nothing</keyword>).
			</value>
			<remarks>
				<para>
					Setting the <self>ControlCharacter</self> property to a <see cref="T:&dans;.Character" suffix="Object" />
					changes the control from <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#standalone">stand-alone</a>
					mode to <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#contained">contained</a> mode. Setting
					<self>ControlCharacter</self> to an empty reference changes the control from <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#contained">contained</a>
					mode back to <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#standalone">stand-alone</a>
					mode.
				</para>
				<para>
					Normally, the control isn't visible at runtime, but when it has a <self>ControlCharacter</self>
					it will become visible as a child window of its containing form. This is the only time the ActiveX<sup>®</sup>
					<glossary>appearance</glossary> properties, such as <see cref="P:&darootobj;.BackColor" /> and <see cref="P:&darootobj;.BorderColor" />,
					are used.
				</para>
				<note>
					You cannot set the <self>ControlCharacter</self> property if the control is <see cref="P:&darootobj;.Connected" />
					to the server.
				</note>
			</remarks>
			<seealso cref="P:&darootobj;.Connected" suffix="Property" prefix="The" />
			<seealso cref="P:&darootobj;.AutoSize" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&darootobj;.PropertySheet">
			<summary>
				<para>
					Returns the control's <see cref="T:&dans;.PropertySheet" suffix="Object" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>&darootref;-&gt;<keyword>get_PropertySheet</keyword> (&amp;<token>PropertySheet</token>)</para>
</cpp>
<csharp>
<para>[<token>PropertySheet</token> = ]&darootref;.<keyword>PropertySheet</keyword></para>
</csharp>
<vbnet>
<para>[<token>PropertySheet</token> = ]&darootref;.<keyword>PropertySheet</keyword></para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>PropertySheet</token> = ]&darootref;.<keyword>PropertySheet</keyword></para>
</vb>
</syntax>
			<value name="PropertySheet">
				The control's <see class="typename" cref="T:&dans;.PropertySheet" suffix="Object" />.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:&darootobj;.RaiseRequestErrors">
			<summary>
				<para>
					Specifies if an error condition is raised (an exception thrown) for failed requests.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>&darootref;-&gt;<keyword>get_RaiseRequestErrors</keyword> (&amp;<token>RaiseRequestErrors</token>)</para>
<para>&darootref;-&gt;<keyword>put_RaiseRequestErrors</keyword> (<token>RaiseRequestErrors</token>)</para>
</cpp>
<csharp>
<para>[<token>RaiseRequestErrors</token> = ]&darootref;.<keyword>RaiseRequestErrors</keyword></para>
<para>&darootref;.<keyword>RaiseRequestErrors</keyword> = <token>RaiseRequestErrors</token></para>
</csharp>
<vbnet>
<para>[<token>RaiseRequestErrors</token> = ]&darootref;.<keyword>RaiseRequestErrors</keyword></para>
<para>&darootref;.<keyword>RaiseRequestErrors</keyword> = <token>RaiseRequestErrors</token></para>
</vbnet>
<vb>
<para>[<token>RaiseRequestErrors</token> = ]&darootref;.<keyword>RaiseRequestErrors</keyword></para>
<para>&darootref;.<keyword>RaiseRequestErrors</keyword> = <token>RaiseRequestErrors</token></para>
</vb>
</syntax>
			<value name="RaiseRequestErrors">
				A <typename>boolean</typename> value that determines whether errors are
				raised for failed requests. The default value is <keyword>True</keyword>.
			</value>
			<remarks>
				<para>
					When a method that returns a <see cref="T:&dans;.Request" suffix="Object" /> fails, there are two ways
					to detect the error. If <self>RaiseRequestErrors</self> is set, the Double Agent control will raise an
					error condition. If it's not set, you can check the <see cref="T:&dans;.Request" suffix="Object's" /> <see cref="P:&dans;.Request.Status" />
					property. An example of a request error is when you specify an animation name that doesn't exist for
					the <see cref="M:&dans;.Character.Play" /> method.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&darootobj;.Settings">
			<summary>
				<para>
					Returns the control's <see cref="T:&dans;.Settings" suffix="Object" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>&darootref;-&gt;<keyword>get_Settings</keyword> (&amp;<token>Settings</token>)</para>
</cpp>
<csharp>
<para>[<token>Settings</token> = ]&darootref;.<keyword>Settings</keyword></para>
</csharp>
<vbnet>
<para>[<token>Settings</token> = ]&darootref;.<keyword>Settings</keyword></para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>Settings</token> = ]&darootref;.<keyword>Settings</keyword></para>
</vb>
</syntax>
			<value name="Settings">
				The control's <see class="typename" cref="T:&dans;.Settings" suffix="Object" />.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:&darootobj;.SpeechInput">
			<summary>
				<para>
					deprecated
				</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:&darootobj;.Settings" /> property, but is still supported
					for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&darootobj;.SREngines">
			<summary>
				<para>
					Returns a collection of <see cref="T:&dans;.SREngine" text="Speech Recognition Engine" suffix="Objects" />
					for all available speech recognition engines.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>&darootref;-&gt;<keyword>get_SREngines</keyword> (&amp;<token>SREngines</token>)</para>
</cpp>
<csharp>
<para>[<token>SREngines</token> = ]&darootref;.<keyword>SREngines</keyword></para>
</csharp>
<vbnet>
<para>[<token>SREngines</token> = ]&darootref;.<keyword>SREngines</keyword></para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>SREngines</token> = ]&darootref;.<keyword>SREngines</keyword></para>
</vb>
</syntax>
			<value name="SREngines">
				A <see class="typename" cref="T:&dans;.SREngines" suffix="Collection" /> that
				includes all available speech recognition engines.
			</value>
			<remarks>
				<para>
					This property allows you to query available speech recognition engines without loading a character.
				</para>
			</remarks>
			<seealso cref="T:&dans;.SREngines" suffix="Collection" prefix="The" />
			<seealso cref="T:&dans;.SREngine" suffix="Object" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&darootobj;.TTSEngines">
			<summary>
				<para>
					Returns a collection of <see cref="T:&dans;.TTSEngine" text="Text-To-Speech Engine" suffix="Objects" />
					for all available text-to-speech engines.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>&darootref;-&gt;<keyword>get_TTSEngines</keyword> (&amp;<token>TTSEngines</token>)</para>
</cpp>
<csharp>
<para>[<token>TTSEngines</token> = ]&darootref;.<keyword>TTSEngines</keyword></para>
</csharp>
<vbnet>
<para>[<token>TTSEngines</token> = ]&darootref;.<keyword>TTSEngines</keyword></para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>SREngines</token> = ]&darootref;.<keyword>TTSEngines</keyword></para>
</vb>
</syntax>
			<value name="TTSEngines">
				A <see class="typename" cref="T:&dans;.TTSEngines" suffix="Collection" />
				that includes all available text-to-speech engines.
			</value>
			<remarks>
				<para>
					This property allows you to query available text-to-speech engines without loading a character.
				</para>
			</remarks>
			<seealso cref="T:&dans;.TTSEngines" suffix="Collection" prefix="The" />
			<seealso cref="T:&dans;.TTSEngine" suffix="Object" prefix="The" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="E:&darootobj;.ActivateInput">
			<summary>
				<para>
					Signalled when a client becomes <glossary>input-active</glossary>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><keyword>void</keyword> &darootref;_<keyword>ActivateInput (LPCTSTR</keyword> <token>CharacterID</token>)</para>
</cpp>
<csharp>
<para><keyword>delegate void</keyword> &darootref;_<keyword>ActivateInput<token>EventHandler</token></keyword> (<keyword>string</keyword> <token>CharacterID</token>)</para>
</csharp>
<vbnet>
<para><keyword>Event</keyword> &darootref;_<keyword>ActivateInput</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>)</para>
</vbnet>
<vb6>
<para><keyword>Sub</keyword> &darootref;_<keyword>ActivateInput</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>)</para>
</vb6>
<vbscript>
<para><keyword>Sub</keyword> &darootref;_<keyword>ActivateInput</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">
				The unique identifier of the character that has become <glossary>input-active</glossary>.
			</param>
			<remarks>
				<para>
					The <glossary>input-active</glossary> client receives mouse and speech input events for the character. Double
					Agent sends this event only to the client that becomes <glossary>input-active</glossary>.
				</para>
				<para>
					This event can occur when the user uses your <see cref="T:&dans;.Commands" suffix="Collection" />,
					for example, by choosing a <see cref="T:&dans;.Commands" suffix="Collection" /> entry in the <a class="see" href="&davcref;">&davcname;</a>
					window or in the <a class="see" href="&dacmref;">&dacmname;</a> window for a character. It can also occur
					when the user selects a character (by clicking or speaking its name), when a character becomes visible,
					or when the character of another client application becomes hidden.
				</para>
				<para>
					You can also call the <see cref="M:&dans;.Character.Activate" /> method with <paramref name="State" /> set to <keyword xml:space="preserve"><copy path="/doc/members/member[@name='F:&dans;.ActiveStateType.InputActive']/value" /></keyword>
					(<see class="see" cref="F:&dans;.ActiveStateType.InputActive" />) to explicitly make the character topmost, which
					results in your client application becoming <glossary>input-active</glossary> and triggers this event. However,
					this event does not occur if you use the <see cref="M:&dans;.Character.Activate" /> method only to specify whether
					or not your client is the active client of the character.
				</para>
			</remarks>
			<seealso cref="M:&dans;.Character.Activate" prefix="The" suffix="Method" />
			<seealso cref="E:&darootobj;.DeactivateInput" prefix="The" suffix="Event" />
			<seealso cref="E:&darootobj;.ActiveClientChange" prefix="The" suffix="Event" />
		</member>

		<member name="T:&dans;.ActivateInputEventHandler">
			<summary>
				<para>
					See <see cref="E:&darootobj;.ActivateInput" prefix="the" suffix="event" />.
				</para>
			</summary>
		</member>

		<!--=============================================================================================-->

		<member name="E:&darootobj;.ActiveClientChange">
			<summary>
				<para>
					Signalled when the active client of the character changes.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><keyword>void</keyword> &darootref;_<keyword>ActiveClientChange</keyword> (<keyword>LPCTSTR</keyword> <token>CharacterID</token>, <keyword>VARIANT_BOOL</keyword> <token>Active</token>)</para>
</cpp>
<csharp>
<para><keyword>delegate void</keyword> &darootref;_<keyword>ActiveClientChange<token>EventHandler</token></keyword> (<keyword>string</keyword> <token>CharacterID</token>, <keyword>bool</keyword> <token>Active</token>)</para>
</csharp>
<vbnet>
<para><keyword>Event</keyword> &darootref;_<keyword>ActiveClientChange</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>, <keyword>ByVal</keyword> <token>Active</token> <keyword>As Boolean</keyword>)</para>
</vbnet>
<vb6>
<para><keyword>Sub</keyword> &darootref;_<keyword>ActiveClientChange</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>, <keyword>ByVal</keyword> <token>Active</token> <keyword>As Boolean</keyword>)</para>
</vb6>
<vbscript>
<para><keyword>Sub</keyword> &darootref;_<keyword>ActiveClientChange</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token>, <keyword>ByVal</keyword> <token>Active</token>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">The unique identifier of the character that has become active or inactive.</param>
			<param name="Active">
				<keyword>True</keyword> if the character has become the active client or <keyword>False</keyword>
				if it's no longer the active client.
			</param>
			<remarks>
				<para>
					When multiple clients (<see cref="T:&darootobj;" /> instances) share the same character, the active client
					of the character receives mouse input (for example, click or drag events). Similarly, when multiple
					characters are displayed, the active client of the topmost character (also known as the <glossary>input-active</glossary>
					client) receives <see cref="E:&darootobj;.Command" /> events.
				</para>
				<para>
					A client application may receive this event when the user selects one of the client's entries in the
					character's <a class="see" href="&dacmref;">&dacmname;</a> or by voice command, when the client application changes
					its active status, or when another client terminates.
				</para>
				<para>
					Double Agent sends this event only to the clients that are directly affected; that either become the
					active client or stop being the active client.
				</para>
			</remarks>
			<seealso cref="M:&dans;.Character.Activate" prefix="The" suffix="Method" />
			<seealso cref="P:&dans;.Character.ActiveState" prefix="The" suffix="Property" />
			<seealso cref="E:&darootobj;.ActivateInput" prefix="The" suffix="Event" />
			<seealso cref="E:&darootobj;.DeactivateInput" prefix="The" suffix="Event" />
		</member>

		<member name="T:&dans;.ActiveClientChangeEventHandler">
			<summary>
				<para>
					See <see cref="E:&darootobj;.ActiveClientChange" prefix="the" suffix="event" />.
				</para>
			</summary>
		</member>

		<!--=============================================================================================-->

		<member name="E:&darootobj;.AgentPropertyChange">
			<summary>
				<para>
					Signalled when the user changes a property in the <a class="see" href="&dapsref;">&dapsname;</a>
					window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><keyword>void</keyword> &darootref;_<keyword>AgentPropertyChange</keyword> ()</para>
</cpp>
<csharp>
<para><keyword>delegate void</keyword> &darootref;_<keyword>AgentPropertyChange<token>EventHandler</token></keyword> ()</para>
</csharp>
<vbnet>
<para><keyword>Event</keyword> &darootref;_<keyword>AgentPropertyChange</keyword> ()</para>
</vbnet>
<vb6>
<para><keyword>Sub</keyword> &darootref;_<keyword>AgentPropertyChange</keyword> ()</para>
</vb6>
<vbscript>
<para><keyword>Sub</keyword> &darootref;_<keyword>AgentPropertyChange</keyword> ()</para>
</vbscript>
</syntax>
			<remarks>
				<para>
					This event indicates that the user has changed and applied any property in the <a class="see" href="&dapsref;">&dapsname;</a>
					window. You can use the <see cref="T:&dans;.Settings" suffix="Object" /> to query the specific property settings.
				</para>
			</remarks>
			<seealso cref="E:&darootobj;.DefaultCharacterChange" prefix="The" suffix="Event" />
		</member>

		<member name="T:&dans;.AgentPropertyChangeEventHandler">
			<summary>
				<para>
					See <see cref="E:&darootobj;.AgentPropertyChange" prefix="the" suffix="event" />.
				</para>
			</summary>
		</member>

		<!--=============================================================================================-->

		<member name="E:&darootobj;.BalloonHide">
			<summary>
				<para>
					Signalled when a character's <a class="see" href="&dawbref;">&dawbname;</a> is hidden.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><keyword>void</keyword> &darootref;_<keyword>BalloonHide</keyword> (<keyword>LPCTSTR</keyword> <token>CharacterID</token>)</para>
</cpp>
<csharp>
<para><keyword>delegate void</keyword> &darootref;_<keyword>BalloonHide<token>EventHandler</token></keyword> (<keyword>string</keyword> <token>CharacterID</token>)</para>
</csharp>
<vbnet>
<para><keyword>Event</keyword> &darootref;_<keyword>BalloonHide</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>)</para>
</vbnet>
<vb6>
<para><keyword>Sub</keyword> &darootref;_<keyword>BalloonHide</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>)</para>
</vb6>
<vbscript>
<para><keyword>Sub</keyword> &darootref;_<keyword>BalloonHide</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">
				The unique identifier of the character who's <a class="see" href="&dawbref;">&dawbname;</a>
				was hidden.
			</param>
			<remarks>
				<para>
					Double Agent sends this event only to all clients of the character (applications that have loaded the
					character).
				</para>
			</remarks>
			<seealso cref="E:&darootobj;.BalloonShow" prefix="The" suffix="Event" />
		</member>

		<member name="T:&dans;.BalloonHideEventHandler">
			<summary>
				<para>
					See <see cref="E:&darootobj;.BalloonHide" prefix="the" suffix="event" />.
				</para>
			</summary>
		</member>

		<!--=============================================================================================-->

		<member name="E:&darootobj;.BalloonShow">
			<summary>
				<para>
					Signalled when a character's <a class="see" href="&dawbref;">&dawbname;</a> is shown.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><keyword>void</keyword> &darootref;_<keyword>BalloonShow</keyword> (<keyword>LPCTSTR</keyword> <token>CharacterID</token>)</para>
</cpp>
<csharp>
<para><keyword>delegate void</keyword> &darootref;_<keyword>BalloonShow<token>EventHandler</token></keyword> (<keyword>string</keyword> <token>CharacterID</token>)</para>
</csharp>
<vbnet>
<para><keyword>Event</keyword> &darootref;_<keyword>BalloonShow</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>)</para>
</vbnet>
<vb6>
<para><keyword>Sub</keyword> &darootref;_<keyword>BalloonShow</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>)</para>
</vb6>
<vbscript>
<para><keyword>Sub</keyword> &darootref;_<keyword>BalloonShow</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">
				The unique identifier of the character who's <a class="see" href="&dawbref;">&dawbname;</a>
				was shown.
			</param>
			<remarks>
				<para>
					Double Agent sends this event only to all clients of the character (applications that have loaded the
					character).
				</para>
			</remarks>
			<seealso cref="E:&darootobj;.BalloonHide" prefix="The" suffix="Event" />
		</member>

		<member name="T:&dans;.BalloonShowEventHandler">
			<summary>
				<para>
					See <see cref="E:&darootobj;.BalloonShow" prefix="the" suffix="event" />.
				</para>
			</summary>
		</member>

		<!--=============================================================================================-->

		<member name="E:&darootobj;.Bookmark">
			<summary>
				<para>
					Signalled when a bookmark defined by your application in a speech text string is reached.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><keyword>void</keyword> &darootref;_<keyword>Bookmark</keyword> (<keyword>long</keyword> <token>BookmarkID</token>)</para>
</cpp>
<csharp>
<para><keyword>delegate void</keyword> &darootref;_<keyword>Bookmark<token>EventHandler</token></keyword> (<keyword>int</keyword> <token>BookmarkID</token>)</para>
</csharp>
<vbnet>
<para><keyword>Event</keyword> &darootref;_<keyword>Bookmark</keyword> (<keyword>ByVal</keyword> <token>BookmarkID</token> <keyword>As Integer</keyword>)</para>
</vbnet>
<vb6>
<para><keyword>Sub</keyword> &darootref;_<keyword>Bookmark</keyword> (<keyword>ByVal</keyword> <token>BookmarkID</token> <keyword>As Long</keyword>)</para>
</vb6>
<vbscript>
<para><keyword>Sub</keyword> &darootref;_<keyword>Bookmark</keyword> (<keyword>ByVal</keyword> <token>BookmarkID</token>)</para>
</vbscript>
</syntax>
			<param name="BookmarkID">The bookmark's unique identifier.</param>
			<remarks>
				<para>
					To specify a bookmark event, use the <see cref="M:&dans;.Character.Speak" /> or <see cref="M:&dans;.Character.SpeakFormatted" />
					method with a <keyword>Mrk</keyword> tag in your supplied text. For more information about tags, see <a href="../Reference/Ref_SpeechTags.htm">Speech Output Tags</a>.
				</para>
			</remarks>
			<seealso cref="M:&dans;.Character.Speak" prefix="The" suffix="Method" />
			<seealso cref="M:&dans;.Character.SpeakFormatted" prefix="The" suffix="Method" />
		</member>

		<member name="T:&dans;.BookmarkEventHandler">
			<summary>
				<para>
					See <see cref="E:&darootobj;.Bookmark" prefix="the" suffix="event" />.
				</para>
			</summary>
		</member>

		<!--=============================================================================================-->

		<member name="E:&darootobj;.Click">
			<summary>
				<para>
					Signalled when the user clicks a character, or the character's <a class="see" href="&daniref;">&daniname;</a>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><keyword>void</keyword> &darootref;_<keyword>Click</keyword> (<keyword>LPCTSTR</keyword> <token>CharacterID</token>, <keyword>short</keyword> <token>Button</token>, <keyword>short</keyword> <token>Shift</token>, <keyword>short</keyword> <token>X</token>, <keyword>short</keyword> <token>Y</token>)</para>
</cpp>
<csharp>
<para><keyword>delegate void</keyword> &darootref;_<keyword>Click<token>EventHandler</token></keyword> (<keyword>string</keyword> <token>CharacterID</token>, <keyword>short</keyword> <token>Button</token>, <keyword>short</keyword> <token>Shift</token>, <keyword>short</keyword> <token>X</token>, <keyword>short</keyword> <token>Y</token>)</para>
</csharp>
<vbnet>
<para><keyword>Event</keyword> &darootref;_<keyword>Click</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>, <keyword>ByVal</keyword> <token>Button</token> <keyword>As Short</keyword>, <keyword>ByVal</keyword> <token>Shift</token> <keyword>As Short</keyword>, <keyword>ByVal</keyword> <token>X</token> <keyword>As Short</keyword>, <keyword>ByVal</keyword> <token>Y</token> <keyword>As Short</keyword>)</para>
</vbnet>
<vb6>
<para><keyword>Sub</keyword> &darootref;_<keyword>Click</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>, <keyword>ByVal</keyword> <token>Button</token> <keyword>As Integer</keyword>, <keyword>ByVal</keyword> <token>Shift</token> <keyword>As Integer</keyword>, <keyword>ByVal</keyword> <token>X</token> <keyword>As Integer</keyword>, <keyword>ByVal</keyword> <token>Y</token> <keyword>As Integer</keyword>)</para>
</vb6>
<vbscript>
<para><keyword>Sub</keyword> &darootref;_<keyword>Click</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token>, <keyword>ByVal</keyword> <token>Button</token>, <keyword>ByVal</keyword> <token>Shift</token>, <keyword>ByVal</keyword> <token>X</token>, <keyword>ByVal</keyword> <token>Y</token>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">The unique identifier of the character that was clicked.</param>
			<include file="&dainclude;" path="/doc/params/param[@name='Button']" />
			<include file="&dainclude;" path="/doc/params/param[@name='Shift']" />
			<include file="&dainclude;" path="/doc/params/param[@name='X']" />
			<include file="&dainclude;" path="/doc/params/param[@name='Y']" />
			<remarks>
				<para>
					This event is sent only to the <glossary>input-active</glossary> client of a character. When the user
					clicks a character or its <a class="see" href="&daniref;">&daniname;</a> with no <glossary>input-active</glossary>
					client, Double Agent sends the event to its active client. If the character is visible (<see cref="P:&dans;.Character.Visible" />
					is <keyword>True</keyword>), the user's action also sets the character's current <glossary>input-active</glossary>
					client as the last <glossary>input-active</glossary> client, sending the <see cref="E:&darootobj;.ActivateInput" />
					event to that client, and then sending the <keyword>Click</keyword> event. If the character is hidden (<see cref="P:&dans;.Character.Visible" />
					is <keyword>False</keyword>), and the user clicks the character's <a class="see" href="&daniref;">&daniname;</a>
					using button 1, the character is also automatically shown.
				</para>
				<note>
					Clicking a character does not disable all other character output. However, pressing the <glossary>Listening key</glossary> <em>does</em>
					flush the <glossary>input-active</glossary> character's output and triggers the <see cref="E:&darootobj;.RequestComplete" />
					event, passing a <see cref="P:&dans;.Request.Status" /> that indicates that the client's queue was interrupted.
				</note>
			</remarks>
			<seealso cref="E:&darootobj;.DblClick" prefix="The" suffix="Event" />
		</member>

		<member name="T:&dans;.ClickEventHandler">
			<summary>
				<para>
					See <see cref="E:&darootobj;.Click" prefix="the" suffix="event" />.
				</para>
			</summary>
		</member>

		<!--=============================================================================================-->

		<member name="E:&darootobj;.Command">
			<summary>
				<para>
					Signalled when the user chooses a (client's) command.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><keyword>void</keyword> &darootref;_<keyword>Command</keyword> (<see class="typename" cref="T:&dans;.UserInput" text="IDaCtlUserInput" /> <keyword>*</keyword> <token>UserInput</token>)</para>
</cpp>
<csharp>
<para><keyword>delegate void</keyword> &darootref;_<keyword>Command<token>EventHandler</token></keyword> (<see class="typename" cref="T:&dans;.UserInput" text="&dans;.UserInput" /> <token>UserInput</token>)</para>
</csharp>
<vbnet>
<para><keyword>Event</keyword> &darootref;_<keyword>Command</keyword> (<keyword>ByVal</keyword> <token>UserInput</token> <keyword>As</keyword> <see class="typename" cref="T:&dans;.UserInput" text="&dans;.UserInput" />)</para>
</vbnet>
<vb6>
<para><keyword>Sub</keyword> &darootref;_<keyword>Command</keyword> (<keyword>ByVal</keyword> <token>UserInput</token> <keyword>As</keyword> <see class="typename" cref="T:&dans;.UserInput" text="DaCtlUserInput" />)</para>
</vb6>
<vbscript>
<para><keyword>Sub</keyword> &darootref;_<keyword>Command</keyword> (<keyword>ByVal</keyword> <token>UserInput</token>)</para>
</vbscript>
</syntax>
			<param name="UserInput">
				A <see class="typename" cref="T:&dans;.UserInput" suffix="Object" /> that identifies
				the chosen command.
			</param>
			<remarks>
				<para>
					Double Agent sends this event when your application is <glossary>input-active</glossary> and the user
					chooses a command from the character's <a class="see" href="&dacmref;">&dacmname;</a>, or by spoken input.
				</para>
			</remarks>
			<seealso cref="T:&dans;.UserInput" prefix="The" suffix="Object" />
		</member>

		<member name="T:&dans;.CommandEventHandler">
			<summary>
				<para>
					See <see cref="E:&darootobj;.Command" prefix="the" suffix="event" />.
				</para>
			</summary>
		</member>

		<!--=============================================================================================-->

		<member name="E:&darootobj;.DblClick">
			<summary>
				<para>
					Signalled when the user double-clicks a character.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><keyword>void</keyword> &darootref;_<keyword>DblClick</keyword> (<keyword>LPCTSTR</keyword> <token>CharacterID</token>, <keyword>short</keyword> <token>Button</token>, <keyword>short</keyword> <token>Shift</token>, <keyword>short</keyword> <token>X</token>, <keyword>short</keyword> <token>Y</token>)</para>
</cpp>
<csharp>
<para><keyword>delegate void</keyword> &darootref;_<keyword>DblClick<token>EventHandler</token></keyword> (<keyword>string</keyword> <token>CharacterID</token>, <keyword>short</keyword> <token>Button</token>, <keyword>short</keyword> <token>Shift</token>, <keyword>short</keyword> <token>X</token>, <keyword>short</keyword> <token>Y</token>)</para>
</csharp>
<vbnet>
<para><keyword>Event</keyword> &darootref;_<keyword>DblClick</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>, <keyword>ByVal</keyword> <token>Button</token> <keyword>As Short</keyword>, <keyword>ByVal</keyword> <token>Shift</token> <keyword>As Short</keyword>, <keyword>ByVal</keyword> <token>X</token> <keyword>As Short</keyword>, <keyword>ByVal</keyword> <token>Y</token> <keyword>As Short</keyword>)</para>
</vbnet>
<vb6>
<para><keyword>Sub</keyword> &darootref;_<keyword>DblClick</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>, <keyword>ByVal</keyword> <token>Button</token> <keyword>As Integer</keyword>, <keyword>ByVal</keyword> <token>Shift</token> <keyword>As Integer</keyword>, <keyword>ByVal</keyword> <token>X</token> <keyword>As Integer</keyword>, <keyword>ByVal</keyword> <token>Y</token> <keyword>As Integer</keyword>)</para>
</vb6>
<vbscript>
<para><keyword>Sub</keyword> &darootref;_<keyword>DblClick</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token>, <keyword>ByVal</keyword> <token>Button</token>, <keyword>ByVal</keyword> <token>Shift</token>, <keyword>ByVal</keyword> <token>X</token>, <keyword>ByVal</keyword> <token>Y</token>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">The unique identifier of the character that was double-clicked.</param>
			<include file="&dainclude;" path="/doc/params/param[@name='Button']" />
			<include file="&dainclude;" path="/doc/params/param[@name='Shift']" />
			<include file="&dainclude;" path="/doc/params/param[@name='X']" />
			<include file="&dainclude;" path="/doc/params/param[@name='Y']" />
			<remarks>
				<para>
					This event is sent only to the <glossary>input-active</glossary> client of a character. When the user
					double-clicks a character or its <a class="see" href="&daniref;">&daniname;</a> with no <glossary>input-active</glossary>
					client, Double Agent sends the event to its active client. If the character is visible (<see cref="P:&dans;.Character.Visible" />
					is <keyword>True</keyword>), the user's action also sets the character's current <glossary>input-active</glossary>
					client as the last <glossary>input-active</glossary> client, sending the <see cref="E:&darootobj;.ActivateInput" />
					event to that client, and then sending the <keyword>DblClick</keyword> event. If the character is hidden (<see cref="P:&dans;.Character.Visible" />
					is <keyword>False</keyword>), and the user double-clicks the character's <a class="see" href="&daniref;">&daniname;</a>
					using button 1, the character is also automatically shown.
				</para>
			</remarks>
			<seealso cref="E:&darootobj;.Click" prefix="The" suffix="Event" />
		</member>

		<member name="T:&dans;.DblClickEventHandler">
			<summary>
				<para>
					See <see cref="E:&darootobj;.DblClick" prefix="the" suffix="event" />.
				</para>
			</summary>
		</member>

		<!--=============================================================================================-->

		<member name="E:&darootobj;.DeactivateInput">
			<summary>
				<para>
					Signalled when a client becomes <glossary>non-input-active</glossary>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><keyword>void</keyword> &darootref;_<keyword>DeactivateInput</keyword> (<keyword>LPCTSTR</keyword> <token>CharacterID</token>)</para>
</cpp>
<csharp>
<para><keyword>delegate void</keyword> &darootref;_<keyword>DeactivateInput<token>EventHandler</token></keyword><keyword> (string</keyword> <token>CharacterID</token>)</para>
</csharp>
<vbnet>
<para><keyword>Event</keyword> &darootref;_<keyword>DeactivateInput</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>)</para>
</vbnet>
<vb6>
<para><keyword>Sub</keyword> &darootref;_<keyword>DeactivateInput</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>)</para>
</vb6>
<vbscript>
<para><keyword>Sub</keyword> &darootref;_<keyword>DeactivateInput</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">
				The unique identifier of the character that has become <glossary>non-input-active</glossary>.
			</param>
			<remarks>
				<para>
					A <glossary>non-input-active</glossary> client no longer receives mouse or speech events from Double Agent
					(unless it becomes <glossary>input-active</glossary> again). Double Agent sends this event only to the client
					that becomes <glossary>non-input-active</glossary>.
				</para>
				<para>
					This event is signalled when your client application is <glossary>input-active</glossary> and the user
					chooses a another client's <see cref="T:&dans;.Command" /> in a character's <a class="see" href="&dacmref;">&dacmname;</a>
					or the <a class="see" href="&davcref;">&davcname;</a> window, or you call the <see cref="M:&dans;.Character.Activate" />
					method and set the <paramref name="State" /> parameter to <keyword xml:space="preserve"><copy path="/doc/members/member[@name='F:&dans;.ActiveStateType.Inactive']/value" /></keyword>
					(<see class="see" cref="F:&dans;.ActiveStateType.Inactive" />). It may also occur when the user selects the
					name of another character by clicking or speaking. You also get this event when your character is
					hidden or another character becomes visible.
				</para>
			</remarks>
			<seealso cref="E:&darootobj;.ActivateInput" prefix="The" suffix="Event" />
			<seealso cref="E:&darootobj;.ActiveClientChange" prefix="The" suffix="Event" />
		</member>

		<member name="T:&dans;.DeactivateInputEventHandler">
			<summary>
				<para>
					See <see cref="E:&darootobj;.DeactivateInput" prefix="the" suffix="event" />.
				</para>
			</summary>
		</member>

		<!--=============================================================================================-->

		<member name="E:&darootobj;.DefaultCharacterChange">
			<summary>
				<para>
					Signalled when the user changes the default character.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><keyword>void</keyword> &darootref;_<keyword>DefaultCharacterChange</keyword> (<keyword>LPCTSTR</keyword> <token>CharGUID</token>)</para>
</cpp>
<csharp>
<para><keyword>delegate void</keyword> &darootref;_<keyword>DefaultCharacterChange<token>EventHandler</token></keyword> (<keyword>string</keyword> <token>CharGUID</token>)</para>
</csharp>
<vbnet>
<para><keyword>Event</keyword> &darootref;_<keyword>DefaultCharacterChange</keyword> (<keyword>ByVal</keyword> <token>CharGUID</token> <keyword>As String)</keyword></para>
</vbnet>
<vb6>
<para><keyword>Sub</keyword> &darootref;_<keyword>DefaultCharacterChange</keyword> (<keyword>ByVal</keyword> <token>CharGUID</token> <keyword>As String)</keyword></para>
</vb6>
<vbscript>
<para><keyword>Sub</keyword> &darootref;_<keyword>DefaultCharacterChange</keyword> (<keyword>ByVal</keyword> <token>CharGUID</token>)</para>
</vbscript>
</syntax>
			<param name="CharGUID">The unique identifier of the new default character.</param>
			<remarks>
				<para>
					This event indicates that the user has changed the character assigned as the user's default character. Double
					Agent sends this only to clients that have loaded the default character.
				</para>
				<para>
					When the new character appears, it assumes the same size as any already loaded instance of the character,
					or the size of the previous default character (in that order).
				</para>
			</remarks>
			<seealso cref="M:&darootobj;.ShowDefaultCharacterProperties" prefix="The" suffix="Method" />
			<seealso cref="M:&dans;.Characters.Load" prefix="The" suffix="Method" />
			<seealso cref="P:&dans;.CharacterFiles.DefaultFilePath" prefix="The" suffix="Property" />
		</member>

		<member name="T:&dans;.DefaultCharacterChangeEventHandler">
			<summary>
				<para>
					See <see cref="E:&darootobj;.DefaultCharacterChange" prefix="the" suffix="event" />.
				</para>
			</summary>
		</member>

		<!--=============================================================================================-->

		<member name="E:&darootobj;.DragComplete">
			<summary>
				<para>
					Signalled when the user stops dragging a character.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><keyword>void</keyword> &darootref;_<keyword>DragComplete</keyword> (<keyword>LPCTSTR</keyword> <token>CharacterID</token>, <keyword>short</keyword> <token>Button</token>, <keyword>short</keyword> <token>Shift</token>, <keyword>short</keyword> <token>X</token>, <keyword>short</keyword> <token>Y</token>)</para>
</cpp>
<csharp>
<para><keyword>delegate void</keyword> &darootref;_<keyword>DragComplete<token>EventHandler</token></keyword> (<keyword>string</keyword> <token>CharacterID</token>, <keyword>short</keyword> <token>Button</token>, <keyword>short</keyword> <token>Shift</token>, <keyword>short</keyword> <token>X</token>, <keyword>short</keyword> <token>Y</token>)</para>
</csharp>
<vbnet>
<para><keyword>Event</keyword> &darootref;_<keyword>DragComplete</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>, <keyword>ByVal</keyword> <token>Button</token> <keyword>As Short</keyword>, <keyword>ByVal</keyword> <token>Shift</token> <keyword>As Short</keyword>, <keyword>ByVal</keyword> <token>X</token> <keyword>As Short</keyword>, <keyword>ByVal</keyword> <token>Y</token> <keyword>As Short</keyword>)</para>
</vbnet>
<vb6>
<para><keyword>Sub</keyword> &darootref;_<keyword>DragComplete</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>, <keyword>ByVal</keyword> <token>Button</token> <keyword>As Integer</keyword>, <keyword>ByVal</keyword> <token>Shift</token> <keyword>As Integer</keyword>, <keyword>ByVal</keyword> <token>X</token> <keyword>As Integer</keyword>, <keyword>ByVal</keyword> <token>Y</token> <keyword>As Integer</keyword>)</para>
</vb6>
<vbscript>
<para><keyword>Sub</keyword> &darootref;_<keyword>DragComplete</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token>, <keyword>ByVal</keyword> <token>Button</token>, <keyword>ByVal</keyword> <token>Shift</token>, <keyword>ByVal</keyword> <token>X</token>, <keyword>ByVal</keyword> <token>Y</token>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">The unique identifier of the character that was dragged.</param>
			<include file="&dainclude;" path="/doc/params/param[@name='Button']" />
			<include file="&dainclude;" path="/doc/params/param[@name='Shift']" />
			<include file="&dainclude;" path="/doc/params/param[@name='X']" />
			<include file="&dainclude;" path="/doc/params/param[@name='Y']" />
			<remarks>
				<para>
					This event is sent only to the <glossary>input-active</glossary> client of a character. When the user
					drags a character with no <glossary>input-active</glossary> client, Double Agent sets its current <glossary>input-active</glossary>
					client as the last <glossary>input-active</glossary> client, sending the <see cref="E:&darootobj;.ActivateInput" />
					event to that client, and then sending the <see cref="E:&darootobj;.DragStart" /> and <keyword>DragComplete</keyword>
					events.
				</para>
			</remarks>
			<seealso cref="E:&darootobj;.DragStart" prefix="The" suffix="Event" />
		</member>

		<member name="T:&dans;.DragCompleteEventHandler">
			<summary>
				<para>
					See <see cref="E:&darootobj;.DragComplete" prefix="the" suffix="event" />.
				</para>
			</summary>
		</member>

		<!--=============================================================================================-->

		<member name="E:&darootobj;.DragStart">
			<summary>
				<para>
					Signalled when the user starts dragging a character.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><keyword>void</keyword> &darootref;_<keyword>DragStart</keyword> (<keyword>LPCTSTR</keyword> <token>CharacterID</token>, <keyword>short</keyword> <token>Button</token>, <keyword>short</keyword> <token>Shift</token>, <keyword>short</keyword> <token>X</token>, <keyword>short</keyword> <token>Y</token>)</para>
</cpp>
<csharp>
<para><keyword>delegate void</keyword> &darootref;_<keyword>DragStart<token>EventHandler</token></keyword> (<keyword>string</keyword> <token>CharacterID</token>, <keyword>short</keyword> <token>Button</token>, <keyword>short</keyword> <token>Shift</token>, <keyword>short</keyword> <token>X</token>, <keyword>short</keyword> <token>Y</token>)</para>
</csharp>
<vbnet>
<para><keyword>Event</keyword> &darootref;_<keyword>DragStart</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>, <keyword>ByVal</keyword> <token>Button</token> <keyword>As Short</keyword>, <keyword>ByVal</keyword> <token>Shift</token> <keyword>As Short</keyword>, <keyword>ByVal</keyword> <token>X</token> <keyword>As Short</keyword>, <keyword>ByVal</keyword> <token>Y</token> <keyword>As Short</keyword>)</para>
</vbnet>
<vb6>
<para><keyword>Sub</keyword> &darootref;_<keyword>DragStart</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>, <keyword>ByVal</keyword> <token>Button</token> <keyword>As Integer</keyword>, <keyword>ByVal</keyword> <token>Shift</token> <keyword>As Integer</keyword>, <keyword>ByVal</keyword> <token>X</token> <keyword>As Integer</keyword>, <keyword>ByVal</keyword> <token>Y</token> <keyword>As Integer</keyword>)</para>
</vb6>
<vbscript>
<para><keyword>Sub</keyword> &darootref;_<keyword>DragStart</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token>, <keyword>ByVal</keyword> <token>Button</token>, <keyword>ByVal</keyword> <token>Shift</token>, <keyword>ByVal</keyword> <token>X</token>, <keyword>ByVal</keyword> <token>Y</token>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">The unique identifier of the character that's being dragged.</param>
			<include file="&dainclude;" path="/doc/params/param[@name='Button']" />
			<include file="&dainclude;" path="/doc/params/param[@name='Shift']" />
			<include file="&dainclude;" path="/doc/params/param[@name='X']" />
			<include file="&dainclude;" path="/doc/params/param[@name='Y']" />
			<remarks>
				<para>
					This event is sent only to the <glossary>input-active</glossary> client of a character. When the user
					drags a character with no <glossary>input-active</glossary> client, Double Agent sets its current <glossary>input-active</glossary>
					client as the last <glossary>input-active</glossary> client, sending the <see cref="E:&darootobj;.ActivateInput" />
					event to that client, and then sending the <keyword>DragStart</keyword> event.
				</para>
			</remarks>
			<seealso cref="E:&darootobj;.DragComplete" prefix="The" suffix="Event" />
		</member>

		<member name="T:&dans;.DragStartEventHandler">
			<summary>
				<para>
					See <see cref="E:&darootobj;.DragStart" prefix="the" suffix="event" />.
				</para>
			</summary>
		</member>

		<!--=============================================================================================-->

		<member name="E:&darootobj;.Hide">
			<summary>
				<para>
					Signalled when a character is hidden.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><keyword>void</keyword> &darootref;_<keyword>Hide</keyword> (<keyword>LPCTSTR</keyword> <token>CharacterID</token>, <keyword>VisibilityCauseType</keyword> <token>Cause</token>)</para>
</cpp>
<csharp>
<para><keyword>delegate void</keyword> &darootref;_<keyword>Hide<token>EventHandler</token></keyword> (<keyword>string</keyword> <token>CharacterID</token>, <keyword>&dans;.VisibilityCauseType</keyword> <token>Cause</token>)</para>
</csharp>
<vbnet>
<para><keyword>Event</keyword> &darootref;_<keyword>Hide</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>, <keyword>ByVal</keyword> <token>Cause</token> <keyword>As &dans;.VisibilityCauseType</keyword>)</para>
</vbnet>
<vb6>
<para><keyword>Sub</keyword> &darootref;_<keyword>Hide</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>, <keyword>ByVal</keyword> <token>Cause</token> <keyword>As VisibilityCauseType</keyword>)</para>
</vb6>
<vbscript>
<para><keyword>Sub</keyword> &darootref;_<keyword>Hide</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token>, <keyword>ByVal</keyword> <token>Cause</token>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">The unique identifier of the character that was hidden.</param>
			<param name="Cause">
				A <see class="typename" cref="T:&dans;.VisibilityCauseType" /> value that indicates what
				caused the character to be hidden:
				<list type="table">
					<include path="/doc/members/member[@name='T:&dans;.VisibilityCauseType']/syntax/list/item[@name='UserHid']" />
					<include path="/doc/members/member[@name='T:&dans;.VisibilityCauseType']/syntax/list/item[@name='ProgramHid']" />
					<include path="/doc/members/member[@name='T:&dans;.VisibilityCauseType']/syntax/list/item[@name='OtherProgramHid']" />
				</list>
			</param>
			<remarks>
				<para>
					Double Agent sends this event to all clients of the character. To query the current state of the character,
					use the <see cref="P:&dans;.Character.Visible" /> property.
				</para>
			</remarks>
			<seealso cref="E:&darootobj;.Show" prefix="The" suffix="Event" />
			<seealso cref="M:&dans;.Character.Hide" prefix="The" suffix="Method" />
			<seealso cref="P:&dans;.Character.Visible" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Character.VisibilityCause" prefix="The" suffix="Property" />
		</member>

		<member name="T:&dans;.HideEventHandler">
			<summary>
				<para>
					See <see cref="E:&darootobj;.Hide" prefix="the" suffix="event" />.
				</para>
			</summary>
		</member>

		<!--=============================================================================================-->

		<member name="E:&darootobj;.IdleComplete">
			<summary>
				<para>
					Signalled when Double Agent ends the <glossary>Idling</glossary> state of a character.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><keyword>void</keyword> &darootref;_<keyword>IdleComplete</keyword> (<keyword>LPCTSTR</keyword> <token>CharacterID</token>)</para>
</cpp>
<csharp>
<para><keyword>delegate void</keyword> &darootref;_<keyword>IdleComplete<token>EventHandler</token></keyword> (<keyword>string</keyword> <token>CharacterID</token>)</para>
</csharp>
<vbnet>
<para><keyword>Event</keyword> &darootref;_<keyword>IdleComplete</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>)</para>
</vbnet>
<vb6>
<para><keyword>Sub</keyword> &darootref;_<keyword>IdleComplete</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>)</para>
</vb6>
<vbscript>
<para><keyword>Sub</keyword> &darootref;_<keyword>IdleComplete</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">
				The unique identifier of the <glossary>Idling</glossary> character.
			</param>
			<remarks>
				<para>
					Double Agent sends this event to all clients of the character.
				</para>
			</remarks>
			<seealso cref="E:&darootobj;.IdleStart" prefix="The" suffix="Event" />
			<seealso cref="P:&dans;.Character.IdleEnabled" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Character.IdleState" prefix="The" suffix="Property" />
		</member>

		<member name="T:&dans;.IdleCompleteEventHandler">
			<summary>
				<para>
					See <see cref="E:&darootobj;.IdleComplete" prefix="the" suffix="event" />.
				</para>
			</summary>
		</member>

		<!--=============================================================================================-->

		<member name="E:&darootobj;.IdleStart">
			<summary>
				<para>
					Signalled when Double Agent sets a character to the <glossary>Idling</glossary> state.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><keyword>void</keyword> &darootref;_<keyword>IdleStart</keyword> (<keyword>LPCTSTR</keyword> <token>CharacterID</token>)</para>
</cpp>
<csharp>
<para><keyword>delegate void</keyword> &darootref;_<keyword>IdleStart<token>EventHandler</token></keyword> (<keyword>string</keyword> <token>CharacterID</token>)</para>
</csharp>
<vbnet>
<para><keyword>Event</keyword> &darootref;_<keyword>IdleStart</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>)</para>
</vbnet>
<vb6>
<para><keyword>Sub</keyword> &darootref;_<keyword>IdleStart</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>)</para>
</vb6>
<vbscript>
<para><keyword>Sub</keyword> &darootref;_<keyword>IdleStart</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">
				The unique identifier of the <glossary>Idling</glossary> character.
			</param>
			<remarks>
				<para>
					Double Agent sends this event to all clients of the character.
				</para>
			</remarks>
			<seealso cref="E:&darootobj;.IdleComplete" prefix="The" suffix="Event" />
			<seealso cref="P:&dans;.Character.IdleEnabled" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Character.IdleState" prefix="The" suffix="Property" />
		</member>

		<member name="T:&dans;.IdleStartEventHandler">
			<summary>
				<para>
					See <see cref="E:&darootobj;.IdleStart" prefix="the" suffix="event" />.
				</para>
			</summary>
		</member>

		<!--=============================================================================================-->

		<member name="E:&darootobj;.HelpComplete">
			<summary>
				<para>
					Not Implemented
				</para>
			</summary>
		</member>

		<!--=============================================================================================-->

		<member name="E:&darootobj;.ListenComplete">
			<summary>
				<para>
					Signalled when <glossary>Listening mode</glossary> (speech recognition) has ended.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><keyword>void</keyword> &darootref;_<keyword>ListenComplete</keyword> (<keyword>LPCTSTR</keyword> <token>CharacterID</token>, <keyword>ListenCompleteType</keyword> <token>Cause</token>)</para>
</cpp>
<csharp>
<para><keyword>delegate void</keyword> &darootref;_<keyword>ListenComplete<token>EventHandler</token></keyword> (<keyword>string</keyword> <token>CharacterID</token>, <keyword>&dans;.ListenCompleteType</keyword> <token>Cause</token>)</para>
</csharp>
<vbnet>
<para><keyword>Event</keyword> &darootref;_<keyword>ListenComplete</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>, <keyword>ByVal</keyword> <token>Cause</token> <keyword>As &dans;.ListenCompleteType</keyword>)</para>
</vbnet>
<vb6>
<para><keyword>Sub</keyword> &darootref;_<keyword>ListenComplete</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>, <keyword>ByVal</keyword> <token>Cause</token> <keyword>As ListenCompleteType</keyword>)</para>
</vb6>
<vbscript>
<para><keyword>Sub</keyword> &darootref;_<keyword>ListenComplete</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token>, <keyword>ByVal</keyword> <token>Cause</token>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">The unique identifier of the listening character.</param>
			<param name="Cause">
				The cause of the <keyword>ListenComplete</keyword> event.<include path="/doc/members/member[@name='T:&dans;.ListenCompleteType']/syntax/list" />
			</param>
			<remarks>
				<para>
					This event is sent to all clients when the <glossary>Listening mode</glossary> time-out ends, after the
					user releases the <glossary>Listening key</glossary>, when the <glossary>input-active</glossary> client calls
					the <see cref="M:&dans;.Character.Listen" /> method with <keyword>False</keyword>, or when the user has
					finished speaking. You can use this event to determine when to resume spoken output.
				</para>
				<para>
					If you turn on <glossary>Listening mode</glossary> using the <see cref="M:&dans;.Character.Listen" />
					method and then the user presses the <glossary>Listening key</glossary>, the <glossary>Listening mode</glossary>
					resets and continues until the <glossary>Listening key</glossary> time-out completes, the <glossary>Listening key</glossary>
					is released, or the user finishes speaking, whichever is later. In this situation, you will <em>not</em>
					receive a <self>ListenComplete</self> event until the <glossary>Listening key</glossary>'s mode completes.
				</para>
				<para>
					The event returns the <paramref name="CharacterID" /> to the clients that currently have this character loaded.
					All other clients receive a null <paramref name="CharacterID" /> (empty string).
				</para>
			</remarks>
			<seealso cref="T:&dans;.ListenCompleteType" suffix="Enumeration" prefix="The" />
			<seealso cref="E:&darootobj;.ListenStart" prefix="The" suffix="Event" />
			<seealso cref="M:&dans;.Character.Listen" prefix="The" suffix="Method" />
			<seealso cref="P:&dans;.Settings.SRHotKeyTime" prefix="The" suffix="Property" />
		</member>

		<member name="T:&dans;.ListenCompleteEventHandler">
			<summary>
				<para>
					See <see cref="E:&darootobj;.ListenComplete" prefix="the" suffix="event" />.
				</para>
			</summary>
		</member>

		<!--=============================================================================================-->

		<member name="E:&darootobj;.ListenStart">
			<summary>
				<para>
					Signalled when <glossary>Listening mode</glossary> (speech recognition) begins.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><keyword>void</keyword> &darootref;_<keyword>ListenStart</keyword> (<keyword>LPCTSTR</keyword> <token>CharacterID</token>)</para>
</cpp>
<csharp>
<para><keyword>delegate void</keyword> &darootref;_<keyword>ListenStart<token>EventHandler</token></keyword> (<keyword>string</keyword> <token>CharacterID</token>)</para>
</csharp>
<vbnet>
<para><keyword>Event</keyword> &darootref;_<keyword>ListenStart</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>)</para>
</vbnet>
<vb6>
<para><keyword>Sub</keyword> &darootref;_<keyword>ListenStart</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>)</para>
</vb6>
<vbscript>
<para><keyword>Sub</keyword> &darootref;_<keyword>ListenStart</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">The unique identifier of the listening character.</param>
			<remarks>
				<para>
					This event is sent to all clients when <glossary>Listening mode</glossary> begins because the user pressed
					the <glossary>Listening key</glossary> or the <glossary>input-active</glossary> client called the <see cref="M:&dans;.Character.Listen" />
					method with <keyword>True</keyword>. You can use this event to avoid having your character speak while <glossary>Listening mode</glossary>
					is active.
				</para>
				<para>
					If you turn on <glossary>Listening mode</glossary> with the <see cref="M:&dans;.Character.Listen" />
					method and then the user presses the <glossary>Listening key</glossary>, the <glossary>Listening mode</glossary>
					resets and continues until the <glossary>Listening key</glossary> time-out completes, the <glossary>Listening key</glossary>
					is released, or the user finishes speaking, whichever is later. In this situation, when <glossary>Listening mode</glossary>
					is already on, you will <em>not</em> get an additional <self>ListenStart</self> event when the user presses
					the <glossary>Listening key</glossary>.
				</para>
				<para>
					The event returns the <paramref name="CharacterID" /> to the clients that currently have this character loaded.
					All other clients receive a null <paramref name="CharacterID" /> (empty string).
				</para>
			</remarks>
			<seealso cref="E:&darootobj;.ListenComplete" prefix="The" suffix="Event" />
			<seealso cref="M:&dans;.Character.Listen" prefix="The" suffix="Method" />
			<seealso cref="P:&dans;.Settings.SRHotKey" prefix="The" suffix="Property" />
		</member>

		<member name="T:&dans;.ListenStartEventHandler">
			<summary>
				<para>
					See <see cref="E:&darootobj;.ListenStart" prefix="the" suffix="event" />.
				</para>
			</summary>
		</member>

		<!--=============================================================================================-->

		<member name="E:&darootobj;.Move">
			<summary>
				<para>
					Signalled when a character has moved.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><keyword>void</keyword> &darootref;_<keyword>Move</keyword> (<keyword>LPCTSTR</keyword> <token>CharacterID</token>, <keyword>short</keyword> <token>X</token>, <keyword>short</keyword> <token>Y</token>, <keyword>MoveCauseType</keyword> <token>Cause</token>)</para>
</cpp>
<csharp>
<para><keyword>delegate void</keyword> &darootref;_<keyword>Move<token>EventHandler</token></keyword> (<keyword>string</keyword> <token>CharacterID</token>, <keyword>short</keyword> <token>X</token>, <keyword>short</keyword> <token>Y</token>, <keyword>&dans;.MoveCauseType</keyword> <token>Cause</token>)</para>
</csharp>
<vbnet>
<para><keyword>Event</keyword> &darootref;_<keyword>Move</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>, <keyword>ByVal</keyword> <token>X</token> <keyword>As Short</keyword>, <keyword>ByVal</keyword> <token>Y</token> <keyword>As Short</keyword>, <keyword>ByVal</keyword> <token>Cause</token> <keyword>As &dans;.MoveCauseType</keyword>)</para>
</vbnet>
<vb6>
<para><keyword>Sub</keyword> &darootref;_<keyword>Move</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>, <keyword>ByVal</keyword> <token>X</token> <keyword>As Integer</keyword>, <keyword>ByVal</keyword> <token>Y</token> <keyword>As Integer</keyword>, <keyword>ByVal</keyword> <token>Cause</token> <keyword>As MoveCauseType</keyword>)</para>
</vb6>
<vbscript>
<para><keyword>Sub</keyword> &darootref;_<keyword>Move</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token>, <keyword>ByVal</keyword> <token>X</token>, <keyword>ByVal</keyword> <token>Y</token>, <keyword>ByVal</keyword> <token>Cause</token>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">The unique identifier of the character that was moved.</param>
			<param name="X">The character's new horizontal location, in pixels, relative to the left side of the screen.</param>
			<param name="Y">The character's new vertical location, in pixels, relative to the top of the screen.</param>
			<param name="Cause">
				The reason the character moved:
				<list type="table">
					<include path="/doc/members/member[@name='T:&dans;.MoveCauseType']/syntax/list/item[@name='UserMoved']" />
					<include path="/doc/members/member[@name='T:&dans;.MoveCauseType']/syntax/list/item[@name='ProgramMoved']" />
					<include path="/doc/members/member[@name='T:&dans;.MoveCauseType']/syntax/list/item[@name='OtherProgramMoved']" />
				</list>
			</param>
			<remarks>
				<para>
					This event is signalled when the user or an application changes the character's position. Coordinates are
					relevant to the upper left corner of the screen. This event is sent only to the clients of the character
					(applications that have loaded the character).
				</para>
			</remarks>
			<seealso cref="E:&darootobj;.Size" prefix="The" suffix="Event" />
			<seealso cref="M:&dans;.Character.MoveTo" prefix="The" suffix="Method" />
			<seealso cref="P:&dans;.Character.MoveCause" prefix="The" suffix="Property" />
			<seealso cref="T:&dans;.MoveCauseType" suffix="Enumeration" prefix="The" />
		</member>

		<member name="T:&dans;.MoveEventHandler">
			<summary>
				<para>
					See <see cref="E:&darootobj;.Move" prefix="the" suffix="event" />.
				</para>
			</summary>
		</member>

		<!--=============================================================================================-->

		<member name="E:&darootobj;.RequestComplete">
			<summary>
				<para>
					Signalled when Double Agent completes a queued request.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><keyword>void</keyword> &darootref;_<keyword>RequestComplete</keyword> (<see class="typename" cref="T:&dans;.Request" text="IDaCtlRequest" /> * <token>Request</token>)</para>
</cpp>
<csharp>
<para><keyword>delegate void</keyword> &darootref;_<keyword>RequestComplete<token>EventHandler</token></keyword> (<see class="typename" cref="T:&dans;.Request" text="&dans;.Request" /> <token>Request</token>)</para>
</csharp>
<vbnet>
<para><keyword>Event</keyword> &darootref;_<keyword>RequestComplete</keyword> (<keyword>ByVal</keyword> <token>Request</token> <keyword>As</keyword> <see class="typename" cref="T:&dans;.Request" text="&dans;.Request" />)</para>
</vbnet>
<vb6>
<para><keyword>Sub</keyword> &darootref;_<keyword>RequestComplete</keyword> (<keyword>ByVal</keyword> <token>Request</token> <keyword>As</keyword> <see class="typename" cref="T:&dans;.Request" text="DaCtlRequest" />)</para>
</vb6>
<vbscript>
<para><keyword>Sub</keyword> &darootref;_<keyword>RequestComplete</keyword> (<keyword>ByVal</keyword> <token>Request</token>)</para>
</vbscript>
</syntax>
			<param name="Request">
				The <see class="typename" cref="T:&dans;.Request" suffix="Object" /> that identifies the
				completed request.
			</param>
			<remarks>
				<para>
					This event provides a <see cref="T:&dans;.Request" suffix="Object" />. Because requests are processed asynchronously,
					you can use this event to determine when Double Agent finishes processing a request (such
					as a <see cref="M:&dans;.Character.Prepare" />, <see cref="M:&dans;.Character.Play" />, or <see cref="M:&dans;.Character.Speak" />
					method) to synchronize this event with other requests generated by your application. Double Agent sends
					the event only to the client that created the reference to the <see cref="T:&dans;.Request" suffix="Object" />,
					and only if you defined a global variable for the request reference.
				</para>
				<example>
					<code xml:space="preserve"><keyword>Dim</keyword> MyRequest 
<keyword>Dim</keyword> Genie

<keyword>Sub</keyword> <token>window</token>_<keyword>Onload</keyword>
    &darootref;.<keyword>Characters</keyword>.<keyword>Load</keyword> "Genie","Genie.acs"

    <keyword>Set</keyword> Genie = &darootref;.<keyword>Characters</keyword>("Genie")

    ' This syntax will generate RequestStart and RequestComplete events.
    <keyword>Set</keyword> MyRequest = Genie.<keyword>Show</keyword>(False)
    ' This syntax will not generate RequestStart and RequestComplete events.
    Genie.<keyword>Hide</keyword> False
<keyword>End Sub</keyword>

<keyword>Sub</keyword> &darootref;_<keyword>RequestComplete</keyword>(<keyword>ByVal</keyword> Request)
    <keyword>If</keyword> Request <keyword>Is</keyword> MyRequest <keyword>Then</keyword>
        <token>status</token> = "Genie was shown"
<keyword>End Sub</keyword></code>
				</example>
				<para>
					Because animation <see cref="T:&dans;.Request" suffix="Objects" /> don't get assigned until Double Agent
					has queued the request, make sure that the <see cref="T:&dans;.Request" suffix="Object" /> exists before you
					attempt to evaluate it. For example, in Visual Basic, if you use a conditional to test whether a
					specific request was completed, you can use the <keyword>Nothing</keyword> keyword.
				</para>
				<example>
					<code xml:space="preserve"><keyword>Sub</keyword> &darootref;_<keyword>RequestComplete</keyword> (<keyword>ByVal</keyword> Request)
    <keyword>If</keyword> <keyword>Not</keyword> (MyRequest <keyword>Is</keyword> Nothing) <keyword>Then</keyword>
        <keyword>If</keyword> Request <keyword>Is</keyword> MyRequest <keyword>Then</keyword>
            '-- Do whatever
        <keyword>End If</keyword>
    <keyword>End If</keyword>
<keyword>End Sub</keyword></code>
				</example>
			</remarks>
			<seealso cref="E:&darootobj;.RequestStart" prefix="The" suffix="Event" />
		</member>

		<member name="T:&dans;.RequestCompleteEventHandler">
			<summary>
				<para>
					See <see cref="E:&darootobj;.RequestComplete" prefix="the" suffix="event" />.
				</para>
			</summary>
		</member>

		<!--=============================================================================================-->

		<member name="E:&darootobj;.RequestStart">
			<summary>
				<para>
					Signalled when Double Agent begins a queued request.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><keyword>void</keyword> &darootref;_<keyword>RequestStart</keyword> (<see class="typename" cref="T:&dans;.Request" text="IDaCtlRequest" /> * <token>Request</token>)</para>
</cpp>
<csharp>
<para><keyword>delegate void</keyword> &darootref;_<keyword>RequestStart<token>EventHandler</token></keyword> (<see class="typename" cref="T:&dans;.Request" text="&dans;.Request" /> <token>Request</token>)</para>
</csharp>
<vbnet>
<para><keyword>Event</keyword> &darootref;_<keyword>RequestStart</keyword> (<keyword>ByVal</keyword> <token>Request</token> <keyword>As</keyword> <see class="typename" cref="T:&dans;.Request" text="&dans;.Request" />)</para>
</vbnet>
<vb6>
<para><keyword>Sub</keyword> &darootref;_<keyword>RequestStart</keyword> (<keyword>ByVal</keyword> <token>Request</token> <keyword>As</keyword> <see class="typename" cref="T:&dans;.Request" text="DaCtlRequest" />)</para>
</vb6>
<vbscript>
<para><keyword>Sub</keyword> &darootref;_<keyword>RequestStart</keyword> (<keyword>ByVal</keyword> <token>Request</token>)</para>
</vbscript>
</syntax>
			<param name="Request">
				The <see class="typename" cref="T:&dans;.Request" suffix="Object" /> that identifies the
				queued request.
			</param>
			<remarks>
				<para>
					The event provides a <see cref="T:&dans;.Request" suffix="Object" />. Because requests are processed asynchronously,
					you can use this event to determine when Double Agent begins processing a request (such
					as a <see cref="M:&dans;.Character.Prepare" />, <see cref="M:&dans;.Character.Play" />, or <see cref="M:&dans;.Character.Speak" />
					method) and thereby synchronize this with other requests generated by your application. The event is
					sent only to the client that created the reference to the <see cref="T:&dans;.Request" suffix="Object" />,
					and only if you defined a global variable for the request reference.
				</para>
				<example>
					<code xml:space="preserve"><keyword>Dim</keyword> MyRequest 
<keyword>Dim</keyword> Genie 

<keyword>Sub</keyword> <token>window</token>_<keyword>Onload</keyword>
    &darootref;.<keyword>Characters</keyword>.<keyword>Load</keyword> "Genie", "Genie.acs"

    <keyword>Set</keyword> Genie = &darootref;.<keyword>Characters</keyword>("Genie")

    ' This syntax will generate RequestStart and RequestComplete events.
    <keyword>Set</keyword> MyRequest = Genie.<keyword>Show</keyword>(False)

    ' This syntax will not generate RequestStart and RequestComplete events.
    Genie.<keyword>Hide</keyword> False
<keyword>End Sub</keyword>

<keyword>Sub</keyword> &darootref;_<keyword>RequestStart</keyword>(<keyword>ByVal</keyword> Request)
    <keyword>If</keyword> Request <keyword>Is</keyword> MyRequest <keyword>Then</keyword>
        <token>status</token> = "Genie is showing"
<keyword>End Sub</keyword></code>
				</example>
				<para>
					The <see cref="P:&dans;.Request.Status" text="Request.Status" /> property is 4 (InProgress) for the
					<see cref="T:&dans;.Request" suffix="Object" />.
				</para>
				<para>
					Because animation <see cref="T:&dans;.Request" suffix="Objects" /> don't get assigned until Double Agent
					has queued the request, make sure that the <see cref="T:&dans;.Request" suffix="Object" /> exists before you
					attempt to evaluate it. For example, in Visual Basic, if you use a conditional to test whether a
					specific request was completed, you can use the <keyword>Nothing</keyword> keyword.
				</para>
				<example>
					<code xml:space="preserve"><keyword>Sub</keyword> &darootref;_<keyword>RequestStart</keyword> (<keyword>ByVal</keyword> Request)
    <keyword>If</keyword> <keyword>Not</keyword> (MyRequest <keyword>Is</keyword> <keyword>Nothing</keyword>) <keyword>Then</keyword>
        <keyword>If</keyword> Request <keyword>Is</keyword> MyRequest <keyword>Then</keyword>
            '-- Do whatever
        <keyword>End If</keyword>
    <keyword>End If</keyword>
<keyword>End Sub</keyword></code>
				</example>
			</remarks>
			<seealso cref="E:&darootobj;.RequestComplete" prefix="The" suffix="Event" />
		</member>

		<member name="T:&dans;.RequestStartEventHandler">
			<summary>
				<para>
					See <see cref="E:&darootobj;.RequestStart" prefix="the" suffix="event" />.
				</para>
			</summary>
		</member>

		<!--=============================================================================================-->

		<member name="E:&darootobj;.Show">
			<summary>
				<para>
					Signalled when a character is displayed.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><keyword>void</keyword> &darootref;_<keyword>Show</keyword> (<keyword>LPCTSTR</keyword> <token>CharacterID</token>, <keyword>VisibilityCauseType</keyword> <token>Cause</token>)</para>
</cpp>
<csharp>
<para><keyword>delegate void</keyword> &darootref;_<keyword>Show<token>EventHandler</token></keyword> (<keyword>string</keyword> <token>CharacterID</token>, <keyword>&dans;.VisibilityCauseType</keyword> <token>Cause</token>)</para>
</csharp>
<vbnet>
<para><keyword>Event</keyword> &darootref;_<keyword>Show</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>, <keyword>ByVal</keyword> <token>Cause</token> <keyword>As &dans;.VisibilityCauseType</keyword>)</para>
</vbnet>
<vb6>
<para><keyword>Sub</keyword> &darootref;_<keyword>Show</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>, <keyword>ByVal</keyword> <token>Cause</token> <keyword>As VisibilityCauseType</keyword>)</para>
</vb6>
<vbscript>
<para><keyword>Sub</keyword> &darootref;_<keyword>Show</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token>, <keyword>ByVal</keyword> <token>Cause</token>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">The unique identifier of the character that was shown.</param>
			<param name="Cause">
				A <see class="typename" cref="T:&dans;.VisibilityCauseType" /> value that indicates what
				caused the character to be shown.
				<list type="table">
					<include path="/doc/members/member[@name='T:&dans;.VisibilityCauseType']/syntax/list/item[@name='UserShowed']" />
					<include path="/doc/members/member[@name='T:&dans;.VisibilityCauseType']/syntax/list/item[@name='ProgramShowed']" />
					<include path="/doc/members/member[@name='T:&dans;.VisibilityCauseType']/syntax/list/item[@name='OtherProgramShowed']" />
				</list>
			</param>
			<remarks>
				<para>
					Double Agent sends this event to all clients of the character. To query the current state of the character,
					use the <see cref="P:&dans;.Character.Visible" /> property.
				</para>
			</remarks>
			<seealso cref="E:&darootobj;.Hide" prefix="The" suffix="Event" />
			<seealso cref="M:&dans;.Character.Show" prefix="The" suffix="Method" />
			<seealso cref="P:&dans;.Character.Visible" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Character.VisibilityCause" prefix="The" suffix="Property" />
		</member>

		<member name="T:&dans;.ShowEventHandler">
			<summary>
				<para>
					See <see cref="E:&darootobj;.Show" prefix="the" suffix="event" />.
				</para>
			</summary>
		</member>

		<!--=============================================================================================-->

		<member name="E:&darootobj;.Size">
			<summary>
				<para>
					Signalled when a character's size changes.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><keyword>void</keyword> &darootref;_<keyword>Size</keyword> (<keyword>LPCTSTR</keyword> <token>CharacterID</token>, <keyword>short</keyword> <token>Width</token>, <keyword>short</keyword> <token>Height</token>)</para>
</cpp>
<csharp>
<para><keyword>delegate void</keyword> &darootref;_<keyword>Size<token>EventHandler</token></keyword> (<keyword>string</keyword> <token>CharacterID</token>, <keyword>short</keyword> <token>Width</token>, <keyword>short</keyword> <token>Height</token>)</para>
</csharp>
<vbnet>
<para><keyword>Event</keyword> &darootref;_<keyword>Size</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>, <keyword>ByVal</keyword> <token>Width</token> <keyword>As Short</keyword>, <keyword>ByVal</keyword> <token>Height</token> <keyword>As Short</keyword>)</para>
</vbnet>
<vb6>
<para><keyword>Sub</keyword> &darootref;_<keyword>Size</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>, <keyword>ByVal</keyword> <token>Width</token> <keyword>As Integer</keyword>, <keyword>ByVal</keyword> <token>Height</token> <keyword>As Integer</keyword>)</para>
</vb6>
<vbscript>
<para><keyword>Sub</keyword> &darootref;_<keyword>Size</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token>, <keyword>ByVal</keyword> <token>Width</token>, <keyword>ByVal</keyword> <token>Height</token>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">The unique identifier of the character that was resized.</param>
			<param name="Width">The character's new width, in pixels.</param>
			<param name="Height">The character's new height, in pixels.</param>
			<remarks>
				<para>
					This event is signalled when an application changes the size of a character. This event is sent only
					to the clients of the character (applications that have loaded the character).
				</para>
			</remarks>
			<seealso cref="E:&darootobj;.Move" prefix="The" suffix="Event" />
		</member>

		<member name="T:&dans;.SizeEventHandler">
			<summary>
				<para>
					See <see cref="E:&darootobj;.Size" prefix="the" suffix="event" />.
				</para>
			</summary>
		</member>

		<!--=============================================================================================-->

		<member name="E:&darootobj;.SpeechStart">
			<summary>
				<para>
					Signalled when the character starts speaking for the <see cref="M:&dans;.Character.SpeakFormatted" />
					method.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><keyword>void</keyword> &darootref;_<keyword>SpeechStart</keyword> (<keyword>LPCTSTR</keyword> <token>CharacterID</token>, <see class="typename" cref="T:&dans;.FormattedText" text="IDaSvrFormattedText" /> <keyword>*</keyword> <token>FormattedText</token>)</para>
</cpp>
<csharp>
<para><keyword>delegate void</keyword> &darootref;_<keyword>SpeechStart<token>EventHandler</token></keyword> (<keyword>string</keyword> <token>CharacterID</token>, <see class="typename" cref="T:&dans;.FormattedText" text="&dans;.FormattedText" /> <token>FormattedText</token>)</para>
</csharp>
<vbnet>
<para><keyword>Event</keyword> &darootref;_<keyword>SpeechStart</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>, <keyword>ByVal</keyword> <token>FormattedText</token> <keyword>As</keyword> <see class="typename" cref="T:&dans;.FormattedText" text="&dans;.FormattedText" />)</para>
</vbnet>
<vb6>
<para><keyword>Sub</keyword> &darootref;_<keyword>SpeechStart</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>, <keyword>ByVal</keyword> <token>FormattedText</token> <keyword>As</keyword> <see class="typename" cref="T:&dans;.FormattedText" text="DaSvrFormattedText" />)</para>
</vb6>
<vbscript>
<para><keyword>Sub</keyword> &darootref;_<keyword>SpeechStart</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token>, <keyword>ByVal</keyword> <token>FormattedText</token>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">The unique identifier of the speaking character.</param>
			<param name="FormattedText">
				The <see class="typename" cref="T:&dans;.FormattedText" /> that's being spoken.
			</param>
			<remarks>
				<include file="&dainclude;" path="/doc/remarks/note[@name='FormattedText']" />
			</remarks>
			<seealso cref="E:&darootobj;.SpeechEnd" prefix="The" suffix="Event" />
			<seealso cref="E:&darootobj;.SpeechWord" prefix="The" suffix="Event" />
			<seealso cref="T:&dans;.FormattedText" suffix="Object" prefix="The" />
			<seealso cref="M:&dans;.Character.SpeakFormatted" suffix="Method" prefix="The" />
		</member>

		<member name="T:&dans;.SpeechStartEventHandler">
			<summary>
				<para>
					See <see cref="E:&darootobj;.SpeechStart" prefix="the" suffix="event" />.
				</para>
			</summary>
		</member>

		<!--=============================================================================================-->

		<member name="E:&darootobj;.SpeechEnd">
			<summary>
				<para>
					Signalled when the character stops speaking for the <see cref="M:&dans;.Character.SpeakFormatted" />
					method.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><keyword>void</keyword> &darootref;_<keyword>SpeechEnd</keyword> (<keyword>LPCTSTR</keyword> <token>CharacterID</token>, <see class="typename" cref="T:&dans;.FormattedText" text="IDaSvrFormattedText" /> <keyword>*</keyword> <token>FormattedText</token>, <keyword>VARIANT_BOOL</keyword> <token>Stopped</token>)</para>
</cpp>
<csharp>
<para><keyword>delegate void</keyword> &darootref;_<keyword>SpeechEnd<token>EventHandler</token></keyword> (<keyword>string</keyword> <token>CharacterID</token>, <see class="typename" cref="T:&dans;.FormattedText" text="&dans;.FormattedText" /> <token>FormattedText</token>, <keyword>bool</keyword> <token>Stopped</token>)</para>
</csharp>
<vbnet>
<para><keyword>Event</keyword> &darootref;_<keyword>SpeechEnd</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>, <keyword>ByVal</keyword> <token>FormattedText</token> <keyword>As</keyword> <see class="typename" cref="T:&dans;.FormattedText" text="&dans;.FormattedText" />, <keyword>ByVal</keyword> <token>Stopped</token> <keyword>As Boolean</keyword>)</para>
</vbnet>
<vb6>
<para><keyword>Sub</keyword> &darootref;_<keyword>SpeechEnd</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>, <keyword>ByVal</keyword> <token>FormattedText</token> <keyword>As</keyword> <see class="typename" cref="T:&dans;.FormattedText" text="DaSvrFormattedText" />, <keyword>ByVal</keyword> <token>Stopped</token> <keyword>As Boolean</keyword>)</para>
</vb6>
<vbscript>
<para><keyword>Sub</keyword> &darootref;_<keyword>SpeechEnd</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token>, <keyword>ByVal</keyword> <token>FormattedText</token>, <keyword>ByVal</keyword> <token>Stopped</token>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">The unique identifier of the speaking character.</param>
			<param name="FormattedText">
				The <see class="typename" cref="T:&dans;.FormattedText" /> that's being spoken.
			</param>
			<param name="Stopped">
				A <typename>boolean</typename> value that indicates if the speech was stopped before
				completion.
			</param>
			<remarks>
				<include file="&dainclude;" path="/doc/remarks/note[@name='FormattedText']" />
			</remarks>
			<seealso cref="E:&darootobj;.SpeechStart" prefix="The" suffix="Event" />
			<seealso cref="E:&darootobj;.SpeechWord" prefix="The" suffix="Event" />
			<seealso cref="T:&dans;.FormattedText" suffix="Object" prefix="The" />
			<seealso cref="M:&dans;.Character.SpeakFormatted" suffix="Method" prefix="The" />
			<seealso cref="M:&dans;.Character.Stop" suffix="Method" prefix="The" />
			<seealso cref="M:&dans;.Character.StopAll" suffix="Method" prefix="The" />
		</member>

		<member name="T:&dans;.SpeechEndEventHandler">
			<summary>
				<para>
					See <see cref="E:&darootobj;.SpeechEnd" prefix="the" suffix="event" />.
				</para>
			</summary>
		</member>

		<!--=============================================================================================-->

		<member name="E:&darootobj;.SpeechWord">
			<summary>
				<para>
					Signalled when the character reaches a new word for the <see cref="M:&dans;.Character.SpeakFormatted" />
					method.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><keyword>void</keyword> &darootref;_<keyword>SpeechWord</keyword> (<keyword>LPCTSTR</keyword> <token>CharacterID</token>, <see class="typename" cref="T:&dans;.FormattedText" text="IDaSvrFormattedText" /> <keyword>*</keyword> <token>FormattedText</token>, <keyword>long</keyword> <token>WordIndex</token>)</para>
</cpp>
<csharp>
<para><keyword>delegate void</keyword> &darootref;_<keyword>SpeechWord<token>EventHandler</token></keyword> (<keyword>string</keyword> <token>CharacterID</token>, <see class="typename" cref="T:&dans;.FormattedText" text="&dans;.FormattedText" /> <token>FormattedText</token>, <keyword>int</keyword> <token>WordIndex</token>)</para>
</csharp>
<vbnet>
<para><keyword>Event</keyword> &darootref;_<keyword>SpeechWord</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>, <keyword>ByVal</keyword> <token>FormattedText</token> <keyword>As</keyword> <see class="typename" cref="T:&dans;.FormattedText" text="&dans;.FormattedText" />, <keyword>ByVal</keyword> <token>WordIndex</token> <keyword>As Integer</keyword>)</para>
</vbnet>
<vb6>
<para><keyword>Sub</keyword> &darootref;_<keyword>SpeechWord</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token> <keyword>As String</keyword>, <keyword>ByVal</keyword> <token>FormattedText</token> <keyword>As</keyword> <see class="typename" cref="T:&dans;.FormattedText" text="DaSvrFormattedText" />, <keyword>ByVal</keyword> <token>WordIndex</token> <keyword>As Long</keyword>)</para>
</vb6>
<vbscript>
<para><keyword>Sub</keyword> &darootref;_<keyword>SpeechWord</keyword> (<keyword>ByVal</keyword> <token>CharacterID</token>, <keyword>ByVal</keyword> <token>FormattedText</token>, <keyword>ByVal</keyword> <token>WordIndex</token>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">The unique identifier of the speaking character.</param>
			<param name="FormattedText">
				The <see class="typename" cref="T:&dans;.FormattedText" /> that's being spoken.
			</param>
			<param name="WordIndex">
				A <typename>numeric</typename> value that identifies the word that is currently being
				spoken.
			</param>
			<remarks>
				<para>
					Because events are signalled asynchronously, the synchronization between the speech output and the
					receipt of this event cannot be exact. However, <paramref name="WordIndex" /> will generally identify the
					<em>next</em> word to be spoken.
				</para>
				<include file="&dainclude;" path="/doc/remarks/note[@name='FormattedText']" />
			</remarks>
			<seealso cref="E:&darootobj;.SpeechStart" prefix="The" suffix="Event" />
			<seealso cref="E:&darootobj;.SpeechEnd" prefix="The" suffix="Event" />
			<seealso cref="T:&dans;.FormattedText" suffix="Object" prefix="The" />
			<seealso cref="P:&dans;.FormattedText.WordIndex" suffix="Property" prefix="The" />
			<seealso cref="M:&dans;.Character.SpeakFormatted" suffix="Method" prefix="The" />
		</member>

		<member name="T:&dans;.SpeechWordEventHandler">
			<summary>
				<para>
					See <see cref="E:&darootobj;.SpeechWord" prefix="the" suffix="event" />.
				</para>
			</summary>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:&darootobj;">
			<summary>
				<para>
					The Double Agent control has its own methods, properties and events, and provides access to most other
					objects supported by Double Agent.
				</para>
			</summary>
			<syntax>
				<list>
					<item>
						<term>
							<h4>
								<bookmark name="Methods"></bookmark>Methods
							</h4>
						</term>
						<description>
							<list type="&typelisttype;" class="syntax">
								<item>
									<term width="&typelistwidth;">
										<see cref="M:&darootobj;.FindCharacterSREngines" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&darootobj;.FindCharacterSREngines']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&darootobj;.FindCharacterTTSEngines" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&darootobj;.FindCharacterTTSEngines']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&darootobj;.FindSREngines" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&darootobj;.FindSREngines']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&darootobj;.FindTTSEngines" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&darootobj;.FindTTSEngines']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&darootobj;.GetCharacterSREngine" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&darootobj;.GetCharacterSREngine']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&darootobj;.GetCharacterTTSEngine" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&darootobj;.GetCharacterTTSEngine']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&darootobj;.ShowDefaultCharacterProperties" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&darootobj;.ShowDefaultCharacterProperties']/summary/para[1]" />
									</description>
								</item>
							</list>
						</description>
					</item>
					<item>
						<term>
							<h4>
								<bookmark name="Properties"></bookmark>Properties
							</h4>
						</term>
						<description>
							<list type="&typelisttype;" class="syntax">
								<item>
									<term width="&typelistwidth;">
										<see cref="P:&darootobj;.AutoConnect" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&darootobj;.AutoConnect']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&darootobj;.CharacterStyle" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&darootobj;.CharacterStyle']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&darootobj;.Connected" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&darootobj;.Connected']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&darootobj;.ControlCharacter" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&darootobj;.ControlCharacter']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&darootobj;.RaiseRequestErrors" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&darootobj;.RaiseRequestErrors']/summary/para[1]" />
									</description>
								</item>
							</list>
						</description>
					</item>
					<item>
						<description>
							<para>
								The <self>Control Object</self> also includes properties to retrieve other Double Agent objects:
							</para>
						</description>
					</item>
					<item>
						<description>
							<list type="&typelisttype;" class="syntax">
								<item>
									<term width="&typelistwidth;">
										<see cref="P:&darootobj;.CharacterFiles" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&darootobj;.CharacterFiles']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&darootobj;.Characters" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&darootobj;.Characters']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&darootobj;.CommandsWindow" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&darootobj;.CommandsWindow']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&darootobj;.PropertySheet" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&darootobj;.PropertySheet']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&darootobj;.Settings" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&darootobj;.Settings']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&darootobj;.SREngines" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&darootobj;.SREngines']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&darootobj;.TTSEngines" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&darootobj;.TTSEngines']/summary/para[1]" />
									</description>
								</item>
							</list>
						</description>
					</item>
					<item>
						<description>
							<para>
								The <self>Control Object</self> supports following ActiveX<sup>®</sup> <glossary>appearance</glossary>
								properties when the control is used in <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#contained">contained</a>
								mode:
							</para>
						</description>
					</item>
					<item>
						<description>
							<list type="&typelisttype;" class="syntax">
								<item>
									<term width="&typelistwidth;">
										<see cref="P:&darootobj;.AutoSize" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&darootobj;.AutoSize']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&darootobj;.BackColor" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&darootobj;.BackColor']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&darootobj;.BorderColor" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&darootobj;.BorderColor']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&darootobj;.BorderStyle" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&darootobj;.BorderStyle']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&darootobj;.BorderVisible" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&darootobj;.BorderVisible']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&darootobj;.BorderWidth" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&darootobj;.BorderWidth']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&darootobj;.MousePointer" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&darootobj;.MousePointer']/summary/para[1]" />
									</description>
								</item>
							</list>
						</description>
					</item>
					<item>
						<term>
							<h4>
								<bookmark name="Events"></bookmark>Events
							</h4>
						</term>
						<description>
							<list type="&typelisttype;" class="syntax">
								<item>
									<term width="&typelistwidth;">
										<see cref="E:&darootobj;.ActivateInput" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='E:&darootobj;.ActivateInput']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="E:&darootobj;.ActiveClientChange" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='E:&darootobj;.ActiveClientChange']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="E:&darootobj;.AgentPropertyChange" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='E:&darootobj;.AgentPropertyChange']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="E:&darootobj;.BalloonHide" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='E:&darootobj;.BalloonHide']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="E:&darootobj;.BalloonShow" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='E:&darootobj;.BalloonShow']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="E:&darootobj;.Bookmark" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='E:&darootobj;.Bookmark']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="E:&darootobj;.Click" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='E:&darootobj;.Click']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="E:&darootobj;.Command" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='E:&darootobj;.Command']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="E:&darootobj;.DblClick" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='E:&darootobj;.DblClick']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="E:&darootobj;.DeactivateInput" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='E:&darootobj;.DeactivateInput']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="E:&darootobj;.DefaultCharacterChange" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='E:&darootobj;.DefaultCharacterChange']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="E:&darootobj;.DragComplete" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='E:&darootobj;.DragComplete']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="E:&darootobj;.DragStart" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='E:&darootobj;.DragStart']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="E:&darootobj;.Hide" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='E:&darootobj;.Hide']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="E:&darootobj;.IdleComplete" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='E:&darootobj;.IdleComplete']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="E:&darootobj;.IdleStart" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='E:&darootobj;.IdleStart']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="E:&darootobj;.ListenComplete" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='E:&darootobj;.ListenComplete']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="E:&darootobj;.ListenStart" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='E:&darootobj;.ListenStart']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="E:&darootobj;.Move" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='E:&darootobj;.Move']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="E:&darootobj;.RequestComplete" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='E:&darootobj;.RequestComplete']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="E:&darootobj;.RequestStart" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='E:&darootobj;.RequestStart']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="E:&darootobj;.Show" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='E:&darootobj;.Show']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="E:&darootobj;.Size" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='E:&darootobj;.Size']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="E:&darootobj;.SpeechEnd" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='E:&darootobj;.SpeechEnd']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="E:&darootobj;.SpeechStart" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='E:&darootobj;.SpeechStart']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="E:&darootobj;.SpeechWord" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='E:&darootobj;.SpeechWord']/summary/para[1]" />
									</description>
								</item>
							</list>
							<note>
								Double Agent does not support the <keyword>Restart</keyword>, <keyword>Shutdown</keyword>
								or <keyword>HelpComplete</keyword> events.
							</note>
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					Some programming environments may assign additional design-time or run-time properties. For example, Visual
					Basic adds a <a class="see keyword" href="../Programming/Ctl_Control_Name.htm">Name</a> property that identifies
					the control, and also <keyword>Left</keyword> and <keyword>Top</keyword> properties that define the location
					of the control on a form, even if the control doesn't appear on the form's page at run time.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="M:&dans;.Characters.Unload">
			<summary>
				<para>
					Unloads the character data for a loaded character.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>characters</token>-&gt;<keyword>Unload</keyword> ("<token>CharacterID</token>")</para>
</cpp>
<csharp>
<para>&darootref;.<keyword>Characters</keyword>.<keyword>Unload</keyword> ("<token>CharacterID</token>")</para>
</csharp>
<vbnet>
<para>&darootref;.<keyword>Characters</keyword>.<keyword>Unload</keyword> ("<token>CharacterID</token>")</para>
</vbnet>
<vb>
<para>&darootref;.<keyword>Characters</keyword>.<keyword>Unload</keyword> "<token>CharacterID</token>"</para>
</vb>
</syntax>
			<param name="CharacterID">
				A <typename>string</typename> value that contains the character's unique identifier,
				specified when the character was loaded.
			</param>
			<remarks>
				<para>
					Use this method when you no longer need a character, to free up memory used to store information about
					the character. If you access the character again, use the <see cref="M:&dans;.Characters.Load" /> method.
				</para>
				<para>
					This method does <strong>not</strong> return a <see cref="T:&dans;.Request" suffix="Object" />.
				</para>
			</remarks>
			<seealso cref="M:&dans;.Characters.Load" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Characters.Load">
			<summary>
				<para>
					Loads a character into the <see cref="T:&dans;.Characters" suffix="Collection" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>characters</token>-&gt;<keyword>Load</keyword> ("<token>CharacterID</token>", <token>Provider</token>, &amp;<token>Request</token>)</para>
</cpp>
<csharp>
<para>[<token>Request</token> = ]&darootref;.<keyword>Characters</keyword>.<keyword>Load</keyword> ("<token>CharacterID</token>, <token>Provider</token>")</para>
</csharp>
<vbnet>
<para>[<token>Request</token> = ]&darootref;.<keyword>Characters</keyword>.<keyword>Load</keyword> ("<token>CharacterID</token>, <token>Provider</token>")</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>Request</token> = ]&darootref;.<keyword>Characters</keyword>.<keyword>Load</keyword> "<token>CharacterID</token>", <token>Provider</token></para>
</vb>
</syntax>
			<param name="CharacterID">
				A <typename>string</typename> value that you will use to refer to the character when
				it's loaded. See the <see cref="P:&dans;.Characters.Item" /> property.
			</param>
			<param name="Provider">
				One of the following:
				<list type="table">
					<item>
						<term>
							<token>Filespec</token>
						</term>
						<description>
							The location of a local character definition file (<filename>.ACS</filename> format)
						</description>
					</item>
					<item>
						<term>
							<token>URL</token>
						</term>
						<description>
							The <glossary>HTTP</glossary> address of the character's definition file (<filename>.ACF</filename>
							format)
						</description>
					</item>
				</list>
			</param>
			<returns name="Request">
				A <see class="typename" cref="T:&dans;.Request" suffix="Object" /> your application can
				use to track the status of the <self>Load</self> request. The <self>Load</self> method is asynchronous only
				when loading a character using the <glossary>HTTP</glossary> protocol.
			</returns>
			<remarks>
				<para>
					You can load characters from the default location(s) by specifying only a file name. For example, specifying
					the following would search for Genie.acs using the <see class="see" cref="P:&dans;.CharacterFiles.SearchPath" text="search path" />.
				</para>
				<example>
					<code xml:space="preserve">&darootref;.<keyword>Characters</keyword>.<keyword>Load</keyword> "Genie", "Genie.acs"</code>
					<para>
						You can also specify an absolute location,
					</para>
					<code xml:space="preserve">&darootref;.<keyword>Characters</keyword>.<keyword>Load</keyword> "Genie", "C:\MyCharacters\Genie.acs"</code>
					<para>
						or specify your own subdirectory by using a relative path.
					</para>
					<code xml:space="preserve">&darootref;.<keyword>Characters</keyword>.<keyword>Load</keyword> "Genie", "MyCharacters\Genie.acs"</code>
				</example>
				<para>
					You can load the default character by omitting the second parameter of the <self>Load</self> method, or
					passing an empty string. This will load the <a class="see" href="&dapsref;#Gallery">default character</a>
					from the <see class="see" cref="P:&dans;.CharacterFiles.DefaultFilePath" text="default file path" />.
				</para>
				<example>
					<code xml:space="preserve">&darootref;.<keyword>Characters</keyword>.<keyword>Load</keyword> "DefChar"</code>
				</example>
				<para>
					You <strong>cannot</strong> load the same character (a character having the same <see cref="P:&dans;.Character.UniqueID" />)
					more than once from a single instance of the control. Similarly, you cannot load the default character and
					other characters at the same time from a single instance of the control because the default character
					could be the same as the other character. If you attempt to do this, Double Agent raises an
					error. However, you can create another instance of the Double Agent control and load the same character.
				</para>
				<para>
					Loading a character does not automatically display the character. Use the <see cref="M:&dans;.Character.Show" />
					method first to make the character visible.
				</para>
			</remarks>
			<details name="Providers">
				<h4 class="details">Data Providers</h4>
				<para>
					Character data can be loaded from a single structured file (<filename>.ACS</filename>) with character data
					and animation data together, or from separate character data (<filename>.ACF</filename>) and animation (<filename>.ACA</filename>)
					files. Use a single structured <filename>.ACS</filename> file to load a character that's stored on a local
					disk or network and accessed using a conventional file protocol (such as <glossary>UNC</glossary> path names).
					Use separate <filename>.ACF</filename> and <filename>.ACA</filename> files when you want to load the animation
					files individually from a remote site where they're accessed using the <glossary>HTTP</glossary> protocol. The
					<self>Load</self> method does not support downloading <filename>.ACS</filename> files from an <glossary>HTTP</glossary>
					site.
				</para>
				<para>
					For <filename>.ACS</filename> files, using the <self>Load</self> method provides access to a character's animations.
					For <filename>.ACF</filename> files, you should also use the <see cref="M:&dans;.Character.Prepare" />
					method to load animation data. Using <see cref="M:&dans;.Character.Prepare" /> is optional, but it will prevent
					unexpected delays when playing animations.
				</para>
			</details>
			<details name="Errors">
				<h4 class="details">Error Handling</h4>
				<para>
					If you use the <self>Load</self> method to load a character file stored on the local machine and the
					call fails; for example, because the file is not found, Double Agent raises an error. If <see cref="P:&darootobj;.RaiseRequestErrors" />
					is set to <keyword>True</keyword>, you should provide an error handling routine to catch and process the
					error.
				</para>
				<example>
					<code xml:space="preserve"><keyword>Sub</keyword> <token>form</token>_<keyword>Load</keyword>
    <keyword>On Error GoTo</keyword> ErrorHandler
    &darootref;.<keyword>Characters</keyword>.<keyword>Load</keyword> "MyChar", "Genie.acs"
    ' Successful load
    . . .
    <keyword>Exit Sub</keyword>
    ErrorHandler:
    ' Unsuccessful load
    . . .
    <keyword>Resume Next</keyword>
<keyword>End Sub</keyword></code>
				</example>
				<para>
					You can also handle the error by setting <see cref="P:&darootobj;.RaiseRequestErrors" /> to <keyword>False</keyword>,
					declaring an object, and assigning the <self>Load</self> request to it. Then follow the <self>Load</self>
					call with a statement that checks the status of the <see cref="T:&dans;.Request" suffix="Object" />.
				</para>
				<example>
					<code xml:space="preserve"><keyword>Dim</keyword> LoadRequest <keyword>as</keyword> <keyword>Object</keyword>

<keyword>Sub</keyword> <token>form</token>_<keyword>Load</keyword>
    &darootref;.<keyword>RaiseRequestErrors</keyword> = False
    <keyword>Set</keyword> LoadRequest = &darootref;.<keyword>Characters</keyword>.<keyword>Load</keyword> ("MyChar", "c:\some directory\some character.acs")
    <keyword>If</keyword> LoadRequest.<keyword>Status</keyword> <keyword>Not</keyword> 0 <keyword>Then</keyword>
        ' Unsuccessful load
        . . .
        <keyword>Exit Sub</keyword>
    <keyword>Else</keyword>
        ' Successful load
        . . .
    <keyword>End If</keyword>
<keyword>End Sub</keyword></code>
				</example>
				<para>
					If you load a character using the <glossary>HTTP</glossary> protocol, you can also check for a <self>Load</self>
					failure by assigning a <see cref="T:&dans;.Request" suffix="Object" /> to the <self>Load</self> method. However,
					because this method of loading a character is handled asynchronously, check its status in
					the <see cref="E:&darootobj;.RequestComplete" /> event. This technique will not work when loading a character
					using the <glossary>UNC</glossary> protocol because the <self>Load</self> method is processed synchronously.
				</para>
			</details>
			<seealso cref="M:&dans;.Characters.Unload" suffix="Method" prefix="The" />
			<seealso cref="P:&dans;.Characters.Item" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.CharacterFiles.SearchPath" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.CharacterFiles.DefaultFilePath" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Characters.Character">
			<summary>
				<para>
					Returns a <see cref="T:&dans;.Character" suffix="Object" /> in the <see cref="T:&dans;.Characters" suffix="Collection" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>characters</token>-&gt;<keyword>Character</keyword> ("<token>CharacterID</token>", &amp;<token>Character</token>)</para>
</cpp>
<csharp>
<para>[<token>Character</token> = ]&darootref;.<keyword>Characters</keyword>.<keyword>Character</keyword> ("<token>CharacterID</token>")</para>
</csharp>
<vbnet>
<para>[<token>Character</token> = ]&darootref;.<keyword>Characters</keyword>.<keyword>Character</keyword> ("<token>CharacterID</token>")</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>Character</token> = ]&darootref;.<keyword>Characters</keyword>.<keyword>Character</keyword> "<token>CharacterID</token>"</para>
</vb>
</syntax>
			<param name="CharacterID">The character's unique identifier specified when the character was loaded.</param>
			<returns name="Character">
				A loaded <see class="typename" cref="T:&dans;.Character" suffix="Object" />.
			</returns>
			<remarks>
				<para>
					You can use this method to access a <see cref="T:&dans;.Character" suffix="Object's" /> methods and
					properties.
				</para>
				<note>
					This method may be required for some programming languages that don't support collections. For
					languages that <em>do</em> support collections, you can use the language's collection indexing syntax.
				</note>
			</remarks>
			<seealso cref="P:&dans;.Characters.Item" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Characters.GetEnumerator">
			<inheritdoc/>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="P:&dans;.Characters.Count">
			<summary>
				<para>
					Returns the count of <see cref="T:&dans;.Character" suffix="Objects" /> in the <see cref="T:&dans;.Characters" suffix="Collection" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>characters</token>-&gt;<keyword>get_Count</keyword> (&amp;<token>Count</token>)</para>
</cpp>
<csharp>
<para>[<token>Count</token> = ]&darootref;.<keyword>Characters</keyword>.<keyword>Count</keyword></para>
</csharp>
<vb>
<para>[<token>Count</token> = ]&darootref;.<keyword>Characters</keyword>.<keyword>Count</keyword></para>
</vb>
</syntax>
			<value name="Count">
				A <typename>numeric</typename> value that indicates the number of <see cref="T:&dans;.Character" suffix="Objects" />
				in the collection.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Characters.Index">
			<summary>
				<para>
					Returns a <see cref="T:&dans;.Character" suffix="Object" /> in the collection.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>characters</token>-&gt;<keyword>get_Index</keyword> (<token>Index</token>, &amp;<token>Character</token>)</para>
</cpp>
<csharp>
<para>[<token>Character</token> = ]&darootref;.<keyword>Characters</keyword>.get_Index (<token>Index</token>)</para>
</csharp>
<vbnet>
<para>[<token>Character</token> = ]&darootref;.<keyword>Characters</keyword>.Index (<token>Index</token>)</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>Character</token> = ]&darootref;.<keyword>Characters</keyword>.Index (<token>Index</token>)</para>
</vb>
</syntax>
			<param name="Index">
				A <typename>numeric</typename> value that specifies the zero-based index of the item
				to retrieve.
			</param>
			<value name="Character">
				The <see class="typename" cref="T:&dans;.Character" suffix="Object" /> at
				the spedified <paramref name="Index" />.
			</value>
			<remarks>
				<para>
					When you want to use the <see cref="T:&dans;.Characters" suffix="Collection" /> as an <em>ordered</em>
					collection, you can use the <self>Index</self> property instead of the <see cref="P:&dans;.Characters.Item" />
					property.
				</para>
			</remarks>
			<seealso cref="P:&dans;.Characters.Count" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.Characters.Item" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Characters.Item">
			<summary>
				<para>
					Returns a <see cref="T:&dans;.Character" suffix="Object" /> in the collection.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para>&darootref;-&gt;<keyword>get_Item</keyword> (<token>CharacterID</token>, &amp;<token>Character</token>)</para>
</cpp>
<csharp>
<para>[<token>Command</token> = ]&darootref;.<keyword>Characters</keyword>.this [<token>CharacterID</token>]</para>
</csharp>
<vbnet>
<para>[<token>Command</token> = ]&darootref;.<keyword>Characters</keyword> (<token>CharacterID</token>)</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>Command</token> = ]&darootref;.<keyword>Characters</keyword> (<token>CharacterID</token>)</para>
</vb>
</syntax>
			<param name="CharacterID">
				A <typename>string</typename> value that specifies the <see cref="P:&dans;.Character.CharacterID" />
				assigned to the character when it was loaded.
			</param>
			<value name="Character">
				The <see class="typename" cref="T:&dans;.Character" suffix="Object" /> with
				the specified <paramref name="CharacterID" />.
			</value>
			<seealso cref="P:&dans;.Character.CharacterID" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.Characters.Index" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:&dans;.Characters" kind="Collection">
			<summary>
				<para>
					The <self>Characters Collection</self> includes methods and properties for loading, unloading, and
					accessing <see cref="T:&dans;.Character" suffix="Objects" />.
				</para>
			</summary>
			<syntax>
				<list>
					<item>
						<term>
							<h4>
								<bookmark name="Methods"></bookmark>Methods
							</h4>
						</term>
						<description>
							<list type="&typelisttype;" class="syntax">
								<item>
									<term width="&typelistwidth;">
										<see cref="M:&dans;.Characters.Character" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Characters.Character']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&dans;.Characters.Load" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Characters.Load']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&dans;.Characters.Unload" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Characters.Unload']/summary/para[1]" />
									</description>
								</item>
							</list>
						</description>
					</item>
					<item>
						<term>
							<h4>
								<bookmark name="Properties"></bookmark>Properties
							</h4>
						</term>
						<description>
							<list type="&typelisttype;" class="syntax">
								<item>
									<term width="&typelistwidth;">
										<see cref="P:&dans;.Characters.Count" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Characters.Count']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Characters.Index" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Characters.Index']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Characters.Item" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Characters.Item']/summary/para[1]" />
									</description>
								</item>
							</list>
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					This object can be accessed using the <see class="" cref="T:&darootobj;" suffix="Object's" /> <see class="" cref="P:&darootobj;.Characters" />
					property.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="M:&dans;.Character.Activate">
			<summary>
				<para>
					Sets the active client or character.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>Activate</keyword> (<token>State</token>, &amp;<token>Success</token>)</para>
</cpp>
<csharp>
<para>[<token>Success</token> = ]&dacharref_csharp;.<keyword>Activate</keyword> (<token>State</token>)</para>
</csharp>
<vbnet>
<para>[<token>Success</token> = ]&dacharref_vb;.<keyword>Activate</keyword> (<token>State</token>)</para>
</vbnet>
<vb>
<para>[<token>Success</token> = ]&dacharref_vb;.<keyword>Activate</keyword>[ <token>State</token>]</para>
</vb>
</syntax>
			<param name="State">
				An optional <typename>numeric</typename> value from the <see class="typename" cref="T:&dans;.ActiveStateType" suffix="Enumeration" />:
				<include path="/doc/members/member[@name='T:&dans;.ActiveStateType']/syntax/list" />
			</param>
			<returns name="Success">
				<keyword>True</keyword> if the method succeeded.
			</returns>
			<details name="Text">
				<h4 class="details">Details</h4>
				<para>
					When multiple characters are visible, only one of the characters receives speech input at a time. Similarly,
					when multiple client applications share the same character, only one of the clients receives
					mouse input (for example, <see cref="E:&darootobj;.Click" /> or <see cref="E:&darootobj;.DragStart" text="Drag" />
					events). The character set to receive mouse and speech input is the <glossary>input-active</glossary>
					character and the client that receives the input is the <glossary>active</glossary> client of that character. (The
					<glossary>input-active</glossary> character's window also appears at the top of the character windows' z-order.)
					Typically, the user determines the <glossary>input-active</glossary> character by explicitly selecting the
					character. However, input activation also changes when a character is shown or hidden (the character
					becomes or is no longer <glossary>input-active</glossary>, respectively.)
				</para>
				<para>
					You can also use this method to explicitly manage when your client receives input directed to the character,
					such as when your application itself becomes active. For example, setting <paramref name="State" /> to <keyword xml:space="preserve"><copy path="/doc/members/member[@name='F:&dans;.ActiveStateType.InputActive']/value" /></keyword>
					(<see class="see" cref="F:&dans;.ActiveStateType.InputActive" />) makes the character <glossary>input-active</glossary>
					and your client receives all mouse and speech input events generated from user interaction with the
					character. Therefore, it also makes your client the <glossary>input-active</glossary> client of the character.
				</para>
				<para>
					However, you can also set yourself to be the <glossary>active</glossary> client for a character without
					making the character <glossary>input-active</glossary>, by setting <paramref name="State" /> to <keyword xml:space="preserve"><copy path="/doc/members/member[@name='F:&dans;.ActiveStateType.Active']/value" /></keyword>
					(<see class="see" cref="F:&dans;.ActiveStateType.Active" />). This allows your client to receive input directed
					to that character when the character does become <glossary>input-active</glossary>. Similarly, you can set
					your client to <em>not</em> be the <glossary>active</glossary> client (not to receive input) when the character
					becomes <glossary>input-active</glossary>, by setting <paramref name="State" /> to <keyword xml:space="preserve"><copy path="/doc/members/member[@name='F:&dans;.ActiveStateType.Inactive']/value" /></keyword>
					(<see class="see" cref="F:&dans;.ActiveStateType.Inactive" />).
				</para>
			</details>
			<details name="Example">
				<para>
					If you call this method as a function, it returns a boolean value that indicates whether the method succeeded.
					Attempting to call this method with the <paramref name="State" /> parameter set to <keyword xml:space="preserve"><copy path="/doc/members/member[@name='F:&dans;.ActiveStateType.InputActive']/value" /></keyword>
					(<see class="see" cref="F:&dans;.ActiveStateType.InputActive" />) when the specified character is hidden will
					fail. Similarly, if you set <paramref name="State" /> to <keyword xml:space="preserve"><copy path="/doc/members/member[@name='F:&dans;.ActiveStateType.Inactive']/value" /></keyword>
					(<see class="see" cref="F:&dans;.ActiveStateType.Inactive" />) and your application is the only client, this
					call fails because a character must always have a <glossary>input-active</glossary> client.
				</para>
				<h4 class="details">Example</h4>
				<code xml:space="preserve"><keyword>Dim</keyword> Genie <keyword>as</keyword> <keyword>Object</keyword>

<keyword>Sub</keyword> <token>form</token>_<keyword>Load</keyword>()
    &darootref;.<keyword>Characters</keyword>.<keyword>Load</keyword> "Genie", "Genie.acs"

    <keyword>Set</keyword> Genie = &darootref;.<keyword>Characters</keyword> ("Genie")

    <keyword>If</keyword> (Genie.<keyword>Activate</keyword> = True) <keyword>Then</keyword>
      ' I'm active
    <keyword>Else</keyword>
      ' I must be hidden or something
    <keyword>End If</keyword> 
<keyword>End Sub</keyword></code>
			</details>
			<remarks>
				<para>
					Avoid calling this method directly after a <see cref="M:&dans;.Character.Show" /> method. <see cref="M:&dans;.Character.Show" />
					automatically sets the <glossary>input-active</glossary> client. When the character is shown, the <self>Activate</self>
					call may fail if it gets processed before the <see cref="M:&dans;.Character.Show" /> method completes.
				</para>
				<note>
					Calling this method with <paramref name="State" /> set to <keyword xml:space="preserve"><copy path="/doc/members/member[@name='F:&dans;.ActiveStateType.Active']/value" /></keyword>
					(<see class="see" cref="F:&dans;.ActiveStateType.Active" />) does not typically generate an <see cref="E:&darootobj;.ActivateInput" />
					event unless there are no other characters loaded or your application is already <glossary>input-active</glossary>.
				</note>
			</remarks>
			<seealso cref="E:&darootobj;.ActivateInput" prefix="The" suffix="Event" />
			<seealso cref="E:&darootobj;.DeactivateInput" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Character.FindSREngines">
			<summary>
				<para>
					Retrieves a collection of <see cref="T:&dans;.SREngine" text="Speech Recognition Engine" suffix="Objects" />
					that meet the character's requirements.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>FindSREngines</keyword> (<token>LanguageID</token>, &amp;<token>SREngines</token>)</para>
</cpp>
<csharp>
<para>[<token>SREngines</token> = ]&dacharref_csharp;.<keyword>FindSREngines</keyword> (<token>LanguageID</token>)</para>
</csharp>
<vbnet>
<para>[<token>SREngines</token> = ]&dacharref_vb;.<keyword>FindSREngines</keyword> (<token>LanguageID</token>)</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>SREngines</token> = ]&dacharref_vb;.<keyword>FindSREngines</keyword> (<token>LanguageID</token>)</para>
</vb>
</syntax>
			<param name="LanguageID">
				A <typename>numeric</typename> value that specifies the language to match, or
				<keyword>zero</keyword> for any language.
			</param>
			<returns name="SREngines">
				A <see class="typename" cref="T:&dans;.SREngines" suffix="Collection" />
				that matches the character's text-to-speech requirements and the specified <paramref name="LanguageID" />.
			</returns>
			<seealso cref="T:&dans;.SREngines" suffix="Collection" prefix="The" />
			<seealso cref="T:&dans;.SREngine" suffix="Object" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Character.FindTTSEngines">
			<summary>
				<para>
					Retrieves a collection of <see cref="T:&dans;.TTSEngine" text="Text-To-Speech Engine" suffix="Objects" />
					that meet the character's requirements.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>FindTTSEngines</keyword> (<token>LanguageID</token>, &amp;<token>TTSEngines</token>)</para>
</cpp>
<csharp>
<para>[<token>TTSEngines</token> = ]&dacharref_csharp;.<keyword>FindTTSEngines</keyword> (<token>LanguageID</token>)</para>
</csharp>
<vbnet>
<para>[<token>TTSEngines</token> = ]&dacharref_vb;.<keyword>FindTTSEngines</keyword> (<token>LanguageID</token>)</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>TTSEngines</token> = ]&dacharref_vb;.<keyword>FindTTSEngines</keyword> (<token>LanguageID</token>)</para>
</vb>
</syntax>
			<param name="LanguageID">
				A <typename>numeric</typename> value that specifies the language to match, or
				<keyword>zero</keyword> for any language.
			</param>
			<returns name="TTSEngines">
				A <see class="typename" cref="T:&dans;.TTSEngines" suffix="Collection" />
				that matches the character's text-to-speech requirements and the specified <paramref name="LanguageID" />.
			</returns>
			<seealso cref="T:&dans;.TTSEngines" suffix="Collection" prefix="The" />
			<seealso cref="T:&dans;.TTSEngine" suffix="Object" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Character.GenerateIcon">
			<summary>
				<para>
					Generates a <a class="see" href="&daniref;">&daniname;</a> from one frame of the character's animations.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>GenerateIcon</keyword> (<token>ClipLeft</token>, <token>ClipTop</token>, <token>ClipWidth</token>, <token>ClipHeight</token>)</para>
</cpp>
<csharp>
<para>&dacharref_csharp;.<keyword>GenerateIcon</keyword> (<token>ClipLeft</token>, <token>ClipTop</token>, <token>ClipWidth</token>, <token>ClipHeight</token>)</para>
</csharp>
<vbnet>
<para>&dacharref_vb;.<keyword>GenerateIcon</keyword> (<token>ClipLeft</token>, <token>ClipTop</token>, <token>ClipWidth</token>, <token>ClipHeight</token>)</para>
</vbnet>
<vb>
<para>&dacharref_vb;.<keyword>GenerateIcon</keyword> [<token>ClipLeft</token>][, <token>ClipTop</token>][, <token>ClipWidth</token>][, <token>ClipHeight</token>]</para>
</vb>
</syntax>
			<param name="ClipLeft">
				An optional <typename>numeric</typename> value that specifies the left side of
				the clipping area. The default value is 0.
			</param>
			<param name="ClipTop">
				An optional <typename>numeric</typename> value that specifies the top of the clipping
				area. The default value is 0.
			</param>
			<param name="ClipWidth">
				An optional <typename>numeric</typename> value that specifies the width of the
				clipping area. The default value is -1, meaning the full width of the animation frame.
			</param>
			<param name="ClipHeight">
				An optional <typename>numeric</typename> value that specifies the height of
				the clipping area. The default value is -1, meaning the full width of the animation frame.
			</param>
			<remarks>
				<para>
					The icon is generated using the first frame of one of the character's animations as the source of
					the icon image. Which animation is used depends on which animations the character supports.
				</para>
				<para>
					You can specify an optional clipping area to generate the icon from only a part of the animation frame.
				</para>
				<para>
					If you don't specify a clipping area, the entire image is used (with any empty space around the edges
					removed).
				</para>
				<note>
					You can only use this method once per character. Once a <a class="see" href="&daniref;">&daniname;</a>
					has been generated, it cannot be changed.
				</note>
				<note>
					If you use this method for a character that has a <a class="see" href="&daniref;">&daniname;</a>
					in its definition, the defined icon is replaced by the generated icon for as long as the character is
					loaded.
				</note>
			</remarks>
			<seealso cref="P:&dans;.Character.HasIcon" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.Character.IconShown" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Character.GestureAt">
			<summary>
				<para>
					Plays a character's gesturing animation towards the specified location.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>GestureAt</keyword> (<token>X</token>, <token>Y</token>, &amp;<token>Request</token>)</para>
</cpp>
<csharp>
<para>[<token>Request</token> = ]&dacharref_csharp;.<keyword>GestureAt</keyword> (<token>X</token>, <token>Y</token>)</para>
</csharp>
<vbnet>
<para>[<token>Request</token> = ]&dacharref_vb;.<keyword>GestureAt</keyword> (<token>X</token>, <token>Y</token>)</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>Request</token> = ]&dacharref_vb;.<keyword>GestureAt</keyword> <token>X</token>, <token>Y</token></para>
</vb>
</syntax>
			<param name="X">
				A <typename>numeric</typename> value that indicates the horizontal screen coordinate, in
				pixels, to which the character will gesture.
			</param>
			<param name="Y">
				A <typename>numeric</typename> value that indicates the vertical screen coordinate, in
				pixels, to which the character will gesture.
			</param>
			<returns name="Request">
				A <see class="typename" cref="T:&dans;.Request" suffix="Object" /> your application can
				use to track the method's status.
			</returns>
			<remarks>
				<para>
					Double Agent automatically plays the appropriate animation to gesture toward the specified location. The
					coordinates are always relative to the upper left corner of the screen.
				</para>
			</remarks>
			<seealso cref="E:&darootobj;.RequestStart" prefix="The" suffix="Event" />
			<seealso cref="E:&darootobj;.RequestComplete" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Character.Get">
			<summary>
				<para>
					deprecated
				</para>
			</summary>
			<remarks>
				<para>
					This method has been replaced by the <see cref="M:&dans;.Character.Prepare" /> method, but is still supported
					for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Character.Hide">
			<summary>
				<para>
					Hides the character.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>Hide</keyword> (<token>Fast</token>, &amp;<token>Request</token>)</para>
</cpp>
<csharp>
<para>[<token>Request</token> = ]&dacharref_csharp;.<keyword>Hide</keyword> (<token>Fast</token>)</para>
</csharp>
<vbnet>
<para>[<token>Request</token> = ]&dacharref_vb;.<keyword>Hide</keyword> (<token>Fast</token>)</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>Request</token> = ]&dacharref_vb;.<keyword>Hide</keyword>[ <token>Fast</token>]</para>
</vb>
</syntax>
			<param name="Fast">
				A <typename>boolean</typename> value that indicates whether to skip the character's <glossary>Hiding</glossary>
				state animation.
			</param>
			<returns name="Request">
				A <see class="typename" cref="T:&dans;.Request" suffix="Object" /> your application can
				use to track the method's status.
			</returns>
			<remarks>
				<para>
					Double Agent queues the actions of the <self>Hide</self> method in the character's queue, so you can
					use it to hide the character after a sequence of other animations. You can play the action immediately
					by using the <see cref="M:&dans;.Character.Stop" /> or <see cref="M:&dans;.Character.StopAll" /> method before
					calling this method.
				</para>
				<note>
					Hiding a character can trigger the <see cref="E:&darootobj;.ActivateInput" /> event of another client.
				</note>
				<note>
					Hidden characters cannot access the screen or the audio channel. Double Agent will pass a failure status
					in the <see cref="E:&darootobj;.RequestComplete" /> event if you attempt to animate a hidden character.
				</note>
			</remarks>
			<seealso cref="M:&dans;.Character.Show" prefix="The" suffix="Method" />
			<seealso cref="E:&darootobj;.RequestStart" prefix="The" suffix="Event" />
			<seealso cref="E:&darootobj;.RequestComplete" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Character.Interrupt">
			<summary>
				<para>
					Interrupts an animation for another character.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>Interrupt</keyword> (<token>InterruptRequest</token>, &amp;<token>Request</token>)</para>
</cpp>
<csharp>
<para>[<token>Request</token> = ]&dacharref_csharp;.<keyword>Interrupt</keyword> (<token>InterruptRequest</token>)</para>
</csharp>
<vbnet>
<para>[<token>Request</token> = ]&dacharref_vb;.<keyword>Interrupt</keyword> (<token>InterruptRequest</token>)</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>Request</token> = ]&dacharref_vb;.<keyword>Interrupt</keyword> <token>InterruptRequest</token></para>
</vb>
</syntax>
			<param name="InterruptRequest">
				The <see cref="T:&dans;.Request" suffix="Object" /> for the animation call
				you want to interrupt.
			</param>
			<returns name="Request">
				A <see class="typename" cref="T:&dans;.Request" suffix="Object" /> your application can
				use to track the method's status.
			</returns>
			<remarks>
				<para>
					You can use this to synchronize animation between characters. For example, if another character is
					in a looping animation, this method will stop the loop and move to the next animation in the character's
					queue.
				</para>
			</remarks>
			<details name="Example">
				<h4 class="details">Example</h4>
				<para>
					To specify the request parameter, create a variable for the animation request you want to interrupt:
				</para>
				<code xml:space="preserve"><keyword>Dim</keyword> GenieRequest <keyword>as</keyword> <keyword>Object</keyword>
<keyword>Dim</keyword> RobbyRequest <keyword>as</keyword> <keyword>Object</keyword>
<keyword>Dim</keyword> Genie <keyword>as</keyword> <keyword>Object</keyword>
<keyword>Dim</keyword> Robby <keyword>as</keyword> <keyword>Object</keyword>

<keyword>Sub</keyword> <token>form</token>_<keyword>Load</keyword>()
    &darootref;.<keyword>Characters</keyword>.<keyword>Load</keyword> "Genie", "Genie.acs"
    &darootref;.<keyword>Characters</keyword>.<keyword>Load</keyword> "Robby", "Robby.acs"

    <keyword>Set</keyword> Genie = &darootref;.<keyword>Characters</keyword> ("Genie")
    <keyword>Set</keyword> Robby = &darootref;.<keyword>Characters</keyword> ("Robby")

    Genie.<keyword>Show</keyword>
    Genie.<keyword>Speak</keyword> "Just a moment"
    <keyword>Set</keyword> GenieRequest = Genie.Play ("Processing")

    Robby.<keyword>Show</keyword>
    Robby.<keyword>Play</keyword> "confused"
    Robby.<keyword>Speak</keyword> "Hey, Genie. What are you doing?"
    Robby.<keyword>Interrupt</keyword> GenieRequest

    Genie.<keyword>Speak</keyword> "I was just checking on something."
<keyword>End Sub</keyword></code>
			</details>
			<details name="Details">
				<h4 class="details">Details</h4>
				<para>
					You can only use the <self>Interrupt</self> method to interrupt <em>another</em> character. To stop
					an animation for a single character, use the <see cref="M:&dans;.Character.Stop" /> method.
				</para>
				<note>
					The <self>Interrupt</self> method does not flush the character's queue; it halts the specified animation
					and moves on to the next animation in the character's queue. To halt and flush a character's queue,
					use that character's <see cref="M:&dans;.Character.StopAll" /> method.
				</note>
				<note>You cannot interrupt a character animation that you didn't start (that was started by another client).</note>
			</details>
			<seealso cref="M:&dans;.Character.Stop" prefix="The" suffix="Method" />
			<seealso cref="E:&darootobj;.RequestStart" prefix="The" suffix="Event" />
			<seealso cref="E:&darootobj;.RequestComplete" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Character.Listen">
			<summary>
				<para>
					Turns on <glossary>Listening mode</glossary> (speech recognition) for a timed period.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>Listen</keyword> (<token>Listen</token>, &amp;<token>StartedListening</token>)</para>
</cpp>
<csharp>
<para>[<token>StartedListening</token> = ]&dacharref_csharp;.<keyword>Listen</keyword> (<token>Listen</token>)</para>
</csharp>
<vbnet>
<para>[<token>StartedListening</token> = ]&dacharref_vb;.<keyword>Listen</keyword> (<token>Listen</token>)</para>
</vbnet>
<vb>
<para>[<token>StartedListening</token> = ]&dacharref_vb;.<keyword>Listen</keyword> <token>Listen</token></para>
</vb>
</syntax>
			<param name="Listen">
				A <typename>boolean</typename> value that determines whether to turn <glossary>Listening mode</glossary>
				on or off.
			</param>
			<returns name="StartedListening">
				<keyword>True</keyword> if <glossary>Listening mode</glossary> was
				started.
			</returns>
			<remarks>
				<para>
					Setting the <paramref name="Listen" /> parameter to <keyword>True</keyword> enables <glossary>Listening mode</glossary>
					(turns on speech recognition) for a fixed period of time (10 seconds). While you cannot set the value
					of the time-out, you can turn off <glossary>Listening mode</glossary> before the time-out expires.
				</para>
				<para>
					If you (or another client) successfully set <glossary>Listening mode</glossary> on and you attempt to
					set this property to <keyword>True</keyword> before the time-out expires, the method succeeds and resets the
					time-out. However, if the <glossary>Listening mode</glossary> is on because the user is pressing the <glossary>Listening key</glossary>,
					the method succeeds, but the time-out is ignored and <glossary>Listening mode</glossary> ends based on
					the user's interaction with the <glossary>Listening key</glossary>.
				</para>
			</remarks>
			<details name="Example">
				<para>
					This method succeeds only when called by the <glossary>input-active</glossary> client and only if
					speech services are available. To detect the success of this method, call it as a function and it
					will return a boolean value indicating whether the method succeeded.
				</para>
				<example>
					<code xml:space="preserve"><keyword>If</keyword> Genie.<keyword>Listen</keyword>(True) <keyword>Then</keyword>
    ' The method succeeded
<keyword>Else</keyword>
    ' The method failed
<keyword>End If</keyword></code>
				</example>
			</details>
			<details name="Details">
				<h4 class="details">Details</h4>
				<para>
					This method fails if the user is pressing the <glossary>Listening key</glossary> and you attempt to
					set <paramref name="Listen" /> to <keyword>False</keyword>. However, if the user has released the <glossary>Listening key</glossary>
					and <glossary>Listening mode</glossary> has not timed out, it will succeed.
				</para>
				<para>
					<self>Listen</self> also fails if there is no compatible speech engine available that matches the
					character's <see cref="P:&dans;.Character.LanguageID" /> setting, the user has disabled speech input using
					the <a class="see" href="&dapsref;#SpeechInput">&dapsname;</a> window, or the audio device is busy.
				</para>
				<para>
					When you successfully set this method to <keyword>True</keyword>, the Double Agent signals the <see cref="E:&darootobj;.ListenStart" />
					event. Double Agent also signals the <see cref="E:&darootobj;.ListenComplete" /> event when the <glossary>Listening mode</glossary>
					time-out completes or when you set <paramref name="Listen" /> to <keyword>False</keyword>.
				</para>
				<para>
					This method <em>does not</em> automatically call the <see cref="M:&dans;.Character.Stop" /> method and
					play a <glossary>Listening</glossary> state animation as Double Agent does when the <glossary>Listening key</glossary>
					is pressed. This allows you to determine whether to interrupt the current animation for the <see cref="E:&darootobj;.ListenStart" />
					event by calling <see cref="M:&dans;.Character.Stop" /> and playing your own appropriate animation. However,
					the Double Agent <em>does</em> call <see cref="M:&dans;.Character.Stop" /> and plays a <glossary>Hearing</glossary>
					state animation when a user utterance is detected.
				</para>
			</details>
			<seealso cref="P:&dans;.Character.ListeningStatus" prefix="The" suffix="Property" />
			<seealso cref="E:&darootobj;.ListenStart" prefix="The" suffix="Event" />
			<seealso cref="E:&darootobj;.ListenComplete" prefix="The" suffix="Event" />
			<seealso cref="P:&dans;.Character.LanguageID" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Character.MoveTo">
			<summary>
				<para>
					Moves the character to the specified location.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>MoveTo</keyword> (<token>X</token>, <token>Y</token>, <token>Speed</token>, &amp;<token>Request</token>)</para>
</cpp>
<csharp>
<para>[<token>Request</token> = ]&dacharref_csharp;.<keyword>MoveTo</keyword> (<token>X</token>, <token>Y</token>, <token>Speed</token>)</para>
</csharp>
<vbnet>
<para>[<token>Request</token> = ]&dacharref_vb;.<keyword>MoveTo</keyword> (<token>X</token>, <token>Y</token>, <token>Speed</token>)</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>Request</token> = ]&dacharref_vb;.<keyword>MoveTo</keyword> <token>X</token>, <token>Y</token>[, <token>Speed</token>]</para>
</vb>
</syntax>
			<param name="X">The horizontal location, in pixels, relative to the left side of the screen.</param>
			<param name="Y">The vertical location, in pixels, relative to the top of the screen.</param>
			<param name="Speed">
				An optional <typename>numeric</typename> value specifying how quickly the character's image
				moves, in milliseconds. The default value is 1000. Specifying zero moves the image without playing
				an animation.
			</param>
			<returns name="Request">
				A <see class="typename" cref="T:&dans;.Request" suffix="Object" /> your application can
				use to track the method's status.
			</returns>
			<remarks>
				<para>
					The location of a character is based on the upper left corner of its image. Double Agent automatically plays
					the appropriate animation assigned to the <glossary>Moving</glossary> states.
				</para>
				<note>
					The <paramref name="Speed" /> parameter's actual effect may vary based on the computer's processor speed
					and the priority of other tasks running on the system.
				</note>
				<note>
					If you call <self>MoveTo</self> with a non-zero <paramref name="Speed" /> before the character is
					shown, it will return a failure status if you assigned a <see cref="T:&dans;.Request" suffix="Object" />,
					because the non-zero value indicates that you're attempting to play an animation when the character isn't
					visible.
				</note>
			</remarks>
			<seealso cref="E:&darootobj;.Move" prefix="The" suffix="Event" />
			<seealso cref="E:&darootobj;.RequestStart" prefix="The" suffix="Event" />
			<seealso cref="E:&darootobj;.RequestComplete" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Character.Play">
			<summary>
				<para>
					Plays the specified animation.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>GestureAt</keyword> ("<token>Animation</token>", &amp;<token>Request</token>)</para>
</cpp>
<csharp>
<para>[<token>Request</token> = ]&dacharref_csharp;.<keyword>GestureAt</keyword> ("<token>Animation</token>")</para>
</csharp>
<vbnet>
<para>[<token>Request</token> = ]&dacharref_vb;.<keyword>GestureAt</keyword> ("<token>Animation</token>")</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>Request</token> = ]&dacharref_vb;.<keyword>GestureAt</keyword> "<token>Animation</token>"</para>
</vb>
</syntax>
			<param name="Animation">
				A <typename>string</typename> value that specifies the name of an animation sequence.
			</param>
			<returns name="Request">
				A <see class="typename" cref="T:&dans;.Request" suffix="Object" /> your application can
				use to track the method's status.
			</returns>
			<remarks>
				<para>
					An animation's name is defined when the character is authored. Before playing the specified animation, Double
					Agent attempts to play the <glossary>Return</glossary> animation for the previous animation, if one has
					been assigned.
				</para>
				<para>
					The <self>Play</self> method does not make the character visible. If the character is not visible, Double
					Agent plays the animation invisibly, and sets the <see cref="P:&dans;.Request.Status" /> property of the
					<see cref="T:&dans;.Request" suffix="Object" />.
				</para>
				<para>
					When accessing a character's animations using a conventional file protocol, you can simply use the<self>Play</self>
					method specifying the name of the animation. However, if you're using the <glossary>HTTP</glossary> protocol
					to access character animation data, use the <see cref="M:&dans;.Character.Prepare" /> method to load the
					animation before calling the <self>Play</self> method.
				</para>
			</remarks>
			<seealso cref="P:&dans;.Character.Animations" prefix="The" suffix="Property" />
			<seealso cref="E:&darootobj;.RequestStart" prefix="The" suffix="Event" />
			<seealso cref="E:&darootobj;.RequestComplete" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Character.Prepare">
			<summary>
				<para>
					Retrieves the specified animation data for the a remote character.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>Prepare</keyword> (<token>ResourceType</token>, "<token>Name</token>", <token>Queue</token>, &amp;<token>Request</token>)</para>
</cpp>
<csharp>
<para>[<token>Request</token> = ]&dacharref_csharp;.<keyword>Prepare</keyword> (<token>ResourceType</token>, "<token>Name</token>", <token>Queue</token>)</para>
</csharp>
<vbnet>
<para>[<token>Request</token> = ]&dacharref_vb;.<keyword>Prepare</keyword> (<token>ResourceType</token>, "<token>Name</token>", <token>Queue</token>)</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>Request</token> = ]&dacharref_vb;.<keyword>Prepare</keyword> <token>ResourceType</token>, "<token>Name</token>"[, <token>Queue</token>]</para>
</vb>
</syntax>
			<param name="ResourceType">
				One of the following members of the <see class="typename" cref="T:&dans;.PrepareResourceType" suffix="Enumeration" />:
				<include path="/doc/members/member[@name='T:&dans;.PrepareResourceType']/syntax/list" />
			</param>
			<param name="Name">
				A <typename>string</typename> that indicates the name of the animation resource.
				<list type="bullet">
					<item>For animations, the name is one of those defined for the character when it was authored.</item>
					<item>
						For states, the name is one of those defined for the character when it was authored. See the <see cref="P:&dans;.Character.States" />
						property for details.
					</item>
					<item>
						For audio files, specify the location of the .WAV file. If an incomplete path is specified, it's
						interpreted as being relative to the location used in the <see cref="M:&dans;.Characters.Load" /> method.
					</item>
					<item>
						You can specify multiple animations and states by separating them with commas. However, you cannot
						mix types in the same <self>Prepare</self> call.
					</item>
				</list>
			</param>
			<param name="Queue">
				A <typename>boolean</typename> value specifying whether the Double Agent queues the
				<self>Prepare</self>, or starts it immediately.
			</param>
			<returns name="Request">
				A <see class="typename" cref="T:&dans;.Request" suffix="Object" /> your application can
				use to track the method's status.
			</returns>
			<remarks>
				<para>
					If you load a character using the <glossary>HTTP</glossary> protocol (an <filename>.ACF</filename>
					file), you should use the <self>Prepare</self> method to retrieve animation data before you play the animation.
					You do not use this method if you loaded the character using the <glossary>UNC</glossary> protocol (an <filename>.ACS</filename>
					file).
				</para>
				<para>
					Using the <self>Prepare</self> method is <strong>not</strong> mandatory. If Double Agent requires an
					animation from an <filename>.ACS</filename> file, it will load the file automatically (from the same location
					the <filename>.ACF</filename> file was loaded). However, this may cause unexpected delays when using the
					<glossary>HTTP</glossary> protocol.
				</para>
			</remarks>
			<details>
				<para>
					You can declare an object reference and set it to the method's <see cref="T:&dans;.Request" suffix="Object" />
					return value. If the associated animation fails to load, Double Agent sets the <see cref="T:&dans;.Request" suffix="Object's" /> <see cref="P:&dans;.Request.Status" />
					property to 1 (Failed) with an appropriate error <see cref="P:&dans;.Request.Number" />. You can use the
					<see cref="E:&darootobj;.RequestComplete" /> event to check the status and determine what action to take.
				</para>
				<para>
					Animation or sound data retrieved with the <self>Prepare</self> method is cached locally. Subsequent calls
					will check the cache, and if the animation data is already there, the control loads the data directly
					from the cache. Once loaded, the animation or sound data can be played with the <see cref="M:&dans;.Character.Play" />
					or <see cref="M:&dans;.Character.Speak" /> methods.
				</para>
			</details>
			<seealso cref="T:&dans;.PrepareResourceType" suffix="Enumeration" prefix="The" />
			<seealso cref="M:&dans;.Characters.Load" prefix="The" suffix="Method" />
			<seealso cref="P:&dans;.Character.Animations" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Character.States" prefix="The" suffix="Property" />
			<seealso cref="E:&darootobj;.RequestStart" prefix="The" suffix="Event" />
			<seealso cref="E:&darootobj;.RequestComplete" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Character.Show">
			<summary>
				<para>
					Shows the character and optionally plays its associated <glossary>Showing</glossary> animation.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>Show</keyword> (<token>Fast</token>, &amp;<token>Request</token>)</para>
</cpp>
<csharp>
<para>[<token>Request</token> = ]&dacharref_csharp;.<keyword>Show</keyword> (<token>Fast</token>)</para>
</csharp>
<vbnet>
<para>[<token>Request</token> = ]&dacharref_vb;.<keyword>Show</keyword> (<token>Fast</token>)</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>Request</token> = ]&dacharref_vb;.<keyword>Show</keyword>[ <token>Fast</token>]</para>
</vb>
</syntax>
			<param name="Fast">
				A <typename>boolean</typename> value specifying whether or not the <glossary>Showing</glossary>
				state animation is played.
			</param>
			<returns name="Request">
				A <see class="typename" cref="T:&dans;.Request" suffix="Object" /> your application can
				use to track the method's status.
			</returns>
			<remarks>
				<para>
					Avoid setting the <paramref name="Fast" /> parameter to <keyword>True</keyword> without first playing an
					animation; otherwise, the character may be shown with no image. In particular, note that if you
					call <see cref="M:&dans;.Character.MoveTo" /> when the character is not visible, it <em>does not</em>
					play any animation. Therefore, if you call the <self>Show</self> method with <paramref name="Fast" />
					set to <keyword>True</keyword>, no image will display. Similarly, if you call <see cref="M:&dans;.Character.Hide" />,
					then <self>Show</self> with <paramref name="Fast" /> set to <keyword>True</keyword>, there will be no visible
					image.
				</para>
			</remarks>
			<seealso cref="M:&dans;.Character.Hide" prefix="The" suffix="Method" />
			<seealso cref="E:&darootobj;.RequestStart" prefix="The" suffix="Event" />
			<seealso cref="E:&darootobj;.RequestComplete" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Character.ShowPopupMenu">
			<summary>
				<para>
					Displays the character's <a class="see" href="&dacmref;">&dacmname;</a> at the specified location.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>ShowPopupMenu</keyword> (<token>X</token>, <token>Y</token>, &amp;<token>Showed</token>)</para>
</cpp>
<csharp>
<para>[<token>Showed</token> = ]&dacharref_csharp;.<keyword>ShowPopupMenu</keyword> (<token>X</token>, <token>Y</token>)</para>
</csharp>
<vbnet>
<para>[<token>Showed</token> = ]&dacharref_vb;.<keyword>ShowPopupMenu</keyword> (<token>X</token>, <token>Y</token>)</para>
</vbnet>
<vb>
<para>[<token>Showed</token> = ]&dacharref_vb;.<keyword>ShowPopupMenu</keyword> <token>X</token>, <token>Y</token></para>
</vb>
</syntax>
			<param name="X">The horizontal screen coordinate to display the menu, in pixels.</param>
			<param name="Y">The vertical screen coordinate to display the menu, in pixels.</param>
			<returns name="Showed">
				<keyword>True</keyword> if the method succeeded.
			</returns>
			<remarks>
				<para>
					If the <see cref="P:&dans;.Character.AutoPopupMenu" /> property is set to <keyword>True</keyword>,
					Double Agent automatically displays the character's <a class="see" href="&dacmref;">&dacmname;</a> when the
					user right-clicks the character. If you set <see cref="P:&dans;.Character.AutoPopupMenu" /> to <keyword>False</keyword>,
					you can use <self>ShowPopupMenu</self> to display the menu.
				</para>
				<para>
					The menu remains displayed until the user selects a command or displays another menu. Only one pop-up
					menu can be displayed at a time; therefore, calls to this method will cancel (remove) the former
					menu.
				</para>
				<para>
					This method should be called only when your client application is the active client of the character; otherwise
					it fails. To determine the success of this method you can call it as a function and it will
					return a boolean value indicating whether the method succeeded.
				</para>
			</remarks>
			<details>
				<example>
					<code xml:space="preserve"><keyword>If</keyword> Genie.<keyword>ShowPopupMenu</keyword> (10,10) = True <keyword>Then</keyword>
    ' The menu was displayed
<keyword>Else</keyword>
    ' The menu was not displayed
<keyword>End If</keyword></code>
				</example>
			</details>
			<seealso cref="P:&dans;.Character.AutoPopupMenu" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Character.Speak">
			<summary>
				<para>
					Speaks the specified text or sound file.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>Speak</keyword> (<token>Text</token>, <token>Url</token>, &amp;<token>Request</token>)</para>
</cpp>
<csharp>
<para>[<token>Request</token> = ]&dacharref_csharp;.<keyword>Speak</keyword> (<token>Text</token>, <token>Url</token>)</para>
</csharp>
<vbnet>
<para>[<token>Request</token> = ]&dacharref_vb;.<keyword>Speak</keyword> (<token>Text</token>, <token>Url</token>)</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>Request</token> = ]&dacharref_vb;.<keyword>Speak</keyword> [<token>Text</token>][, <token>Url</token>]</para>
</vb>
</syntax>
			<param name="Text">
				A <typename>string</typename> value that specifies what the character says.
			</param>
			<param name="Url">
				A <typename>string</typename> value specifying the location of an audio file (.WAV format).
				The location can be specified as a file (including a <glossary>UNC</glossary> path specification) or URL
				(when character animation data is also being retrieved via <glossary>HTTP</glossary> protocol).
			</param>
			<returns name="Request">
				A <see class="typename" cref="T:&dans;.Request" suffix="Object" /> your application can
				use to track the method's status.
			</returns>
			<remarks>
				<para>
					At least one of the <paramref name="Text" /> and <paramref name="Url" /> parameters must be supplied. To
					use this method with a character configured to speak only in its <a class="see" href="&dawbref;">&dawbname;</a>
					or using a text-to-speech (TTS) engine, simply provide the <paramref name="Text" /> parameter. Include a
					space between words to define appropriate word breaks in the <a class="see" href="&dawbref;">&dawbname;</a>,
					even for languages that do not traditionally include spaces.
				</para>
				<para>
					You can also include vertical bar '|' characters in the <paramref name="Text" /> parameter to designate alternative
					strings, so that Double Agent randomly chooses a different string each time it processes the
					method.
				</para>
			</remarks>
			<details>
				<h4 class="details">Text-To-Speech</h4>
				<para>
					Support for TTS output is defined when the character is authored. To generate TTS output, a compatible TTS
					engine must already be installed before calling this method. For further information, see <a href="../Programming/Ctl_Programming_Speech.htm">Using Speech Services</a>.
				</para>
				<para>
					Unlike Microsoft<sup>®</sup> Agent, Double Agents supports the <self>Speak</self> method for characters that
					are not designed to speak. However, there won't be any mouth animations because they aren't included
					in the character design.
				</para>
				<para>
					You can vary parameters of the speech output with special tags that you include in the <paramref name="Text" />
					parameter. For more information, see <a href="../Reference/Ref_SpeechTags.htm">Speech Output Tags</a>.
				</para>
				<example>
					<para>
						You can also include bookmark speech tags in your <self>Speak</self> text to synchronize your code:
					</para>
					<code xml:space="preserve"><keyword>Dim</keyword> SpeakRequest <keyword>as</keyword> <keyword>Object</keyword>
...
<keyword>Set</keyword> SpeakRequest = Genie.<keyword>Speak</keyword> ("And here \mrk=100\it is.")
...
<keyword>Sub</keyword> &darootref;_<keyword>Bookmark</keyword> (<keyword>ByVal</keyword> BookmarkID <keyword>as</keyword> <keyword>Long</keyword>)
   <keyword>If</keyword> BookmarkID = 100 <keyword>Then</keyword>
       ' Display the message box 
       <keyword>Msgbox</keyword> "Tada!"
    <keyword>End If</keyword>
<keyword>End Sub</keyword></code>
					For more information on the bookmark speech tag, see <a href="../Reference/Ref_SpeechTags.htm#Mrk">Speech Output Tags</a>.
				</example>
				<para>
					Agent's automatic word breaking in the <a class="see" href="&dawbref;">&dawbname;</a> breaks words using
					<glossary>white-space</glossary> characters (for example, Space or Tab). However, if it cannot, it may break
					a word to fit the <a class="see" href="&dawbref;">&dawbname;</a>. In languages like Japanese, Chinese, and
					Thai, where spaces are not used to break words, insert a Unicode zero-width space character (0x200B)
					between characters to define logical word breaks.
				</para>
				<h4 class="details">Sound Files</h4>
				<para>
					If you use recorded sound file (.WAV format only) output for the character, specify the file's location
					in the <paramref name="Url" /> parameter. This file specification can include a local (absolute or relative) or
					<glossary>universal naming convention (UNC)</glossary> path. The filename cannot include any characters not
					included in the US code page 1252. However, if you are using the <glossary>HTTP</glossary> protocol to
					access the character data, use the <see cref="M:&dans;.Character.Prepare" /> method to load the sound file
					before calling the <self>Speak</self> method.
				</para>
				<para>
					When using recorded sound file output, you can still use the <paramref name="Text" /> parameter to
					specify the words that appear in the character's <a class="see" href="&dawbref;">&dawbname;</a>.
				</para>
				<para>
					If you call <self>Speak</self> and the audio channel is busy, the character's audio output will not
					be heard, but the text will display in the <a class="see" href="&dawbref;">&dawbname;</a>.
				</para>
				<h4 class="details">Animation</h4>
				<para>
					The <self>Speak</self> method uses the last action played to determine which speaking animation to
					play. For example, if you preceded the <self>Speak</self> command with <keyword>Play</keyword> <literal>"GestureRight"</literal>,
					Double Agent will play <glossary>GestureRight</glossary> and then the <glossary>GestureRight</glossary>
					speaking animation. If the last animation played has no speaking animation, Double Agent plays the
					animation assigned to the character's <glossary>Speaking</glossary> state.
				</para>
				<br />
				<note>
					To track the method's status, you can declare an object reference and set it to the method's <see cref="T:&dans;.Request" suffix="Object" />
					return value.
				</note>
				<note>
					The <a class="see" href="&dawbref;">&dawbname;'s</a> <see cref="P:&dans;.Balloon.Enabled" />
					property must also be <keyword>True</keyword> for text to display.
				</note>
				<note>
					Set the character's <see cref="P:&dans;.Character.LanguageID" /> before using the <self>Speak</self>
					method to ensure appropriate text display within the <a class="see" href="&dawbref;">&dawbname;</a>.
				</note>
			</details>
			<seealso cref="P:&dans;.Character.LanguageID" prefix="The" suffix="Property" />
			<seealso cref="M:&dans;.Character.Think" prefix="The" suffix="Method" />
			<seealso cref="E:&darootobj;.Bookmark" prefix="The" suffix="Event" />
			<seealso cref="E:&darootobj;.RequestStart" prefix="The" suffix="Event" />
			<seealso cref="E:&darootobj;.RequestComplete" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Character.Stop">
			<summary>
				<para>
					Stops an animation.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>Stop</keyword> (<token>Request</token>)</para>
</cpp>
<csharp>
<para>&dacharref_csharp;.<keyword>Stop</keyword> (<token>Request</token>)</para>
</csharp>
<vbnet>
<para>&dacharref_vb;.<keyword>Stop</keyword> (<token>Request</token>)</para>
</vbnet>
<vb>
<para>&dacharref_vb;.<keyword>Stop</keyword> <token>Request</token></para>
</vb>
</syntax>
			<param name="Request">
				A <see class="typename" cref="T:&dans;.Request" suffix="Object" /> specifying a
				particular animation call, or a null reference to stop all animations.
			</param>
			<remarks>
				<para>
					To specify the <paramref name="Request" /> parameter, you must create a variable and assign the animation
					request you want to stop. If you don't set the <paramref name="Request" /> parameter, Double Agent stops all
					animations for the character, including queued <see cref="M:&dans;.Character.Prepare" /> calls, and clears
					its animation queue (unless the character is currently playing its <glossary>Hiding</glossary> or <glossary>Showing</glossary>
					animation).
				</para>
				<note>
					This method is performed immediately and does not generate a <see cref="T:&dans;.Request" suffix="Object" />.
				</note>
				<note>
					This method <em>does not</em> stop immediate <see cref="M:&dans;.Character.Prepare" /> calls.
				</note>
			</remarks>
			<details>
				<example>
					<para>
						To stop a specific animation or <see cref="M:&dans;.Character.Prepare" /> call, declare an object variable
						and assign your animation request to that variable:
					</para>
					<code xml:space="preserve"><keyword>Dim</keyword> MyRequest
<keyword>Dim</keyword> Genie

&darootref;.<keyword>Characters</keyword>.<keyword>Load</keyword> "Genie", "Genie.acs"

<keyword>Set</keyword> Genie = &darootref;.<keyword>Characters</keyword> ("Genie")
Genie.<keyword>Show</keyword>

'This animation will never play
<keyword>Set</keyword> MyRequest = Genie.<keyword>Play</keyword> ("Greet")

Genie.<keyword>Stop</keyword> MyRequest</code>
				</example>
			</details>
			<seealso cref="M:&dans;.Character.StopAll" prefix="The" suffix="Method" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Character.StopAll">
			<summary>
				<para>
					Stops all animation requests or specified types of requests.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>StopAll</keyword> (<token>Types</token>)</para>
</cpp>
<csharp>
<para>&dacharref_csharp;.<keyword>StopAll</keyword> (<token>Types</token>)</para>
</csharp>
<vbnet>
<para>&dacharref_vb;.<keyword>StopAll</keyword> (<token>Types</token>)</para>
</vbnet>
<vb>
<para>&dacharref_vb;.<keyword>StopAll</keyword> [<token>Types</token>]</para>
</vb>
</syntax>
			<param name="Types">
				You can omit this parameter you or use any combination of the following members of
				the <see class="typename" cref="T:&dans;.StopAllFlags" suffix="Enumeration" />: <include path="/doc/members/member[@name='T:&dans;.StopAllFlags']/syntax/list" />
				<para>
					You can use a <typename>string</typename> value instead, with one or more of the following values, separated
					with commas:
				</para>
				<list type="table">
					<item>
						<term>"Play"</term>
						<description>StopAllFlags.Play</description>
					</item>
					<item>
						<term>"Move"</term>
						<description>StopAllFlags.Move</description>
					</item>
					<item>
						<term>"Speak"</term>
						<description>StopAllFlags.Speak</description>
					</item>
					<item>
						<term>"QueuedPrepare" (or "Get" for compatibility)</term>
						<description>StopAllFlags.QueuedPrepare</description>
					</item>
					<item>
						<term>"ImmediatePrepare" (or "NonQueuedGet" for compatibility)</term>
						<description>StopAllFlags.ImmediatePrepare</description>
					</item>
					<item>
						<term>"Visibility" or "Visible"</term>
						<description>StopAllFlags.Visibility</description>
					</item>
					<item>
						<term>"Everything" or "All"</term>
						<description>StopAllFlags.Everything</description>
					</item>
				</list>
			</param>
			<remarks>
				<para>
					If you don't set the <paramref name="Type" /> parameter, Double Agent stops all animations for the
					character, including queued and immediate <see cref="M:&dans;.Character.Prepare" /> requests, and clears its
					animation queue. It also stops playing a character's <glossary>Hiding</glossary> or <glossary>Showing</glossary>
					animation.
				</para>
				<para>
					This method is performed immediately and does not generate a <see cref="T:&dans;.Request" suffix="Object" />.
				</para>
			</remarks>
			<seealso cref="M:&dans;.Character.Stop" prefix="The" suffix="Method" />
			<seealso cref="T:&dans;.StopAllFlags" prefix="The" suffix="Enumeration" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Character.Think">
			<summary>
				<para>
					Displays the specified text in the character's <glossary>thought</glossary> <a class="see" href="&dawbref;">&dawbname;</a>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>Think</keyword> (<token>Text</token>, &amp;<token>Request</token>)</para>
</cpp>
<csharp>
<para>[<token>Request</token> = ]&dacharref_csharp;.<keyword>Think</keyword> (<token>Text</token>)</para>
</csharp>
<vbnet>
<para>[<token>Request</token> = ]&dacharref_vb;.<keyword>Think</keyword> (<token>Text</token>)</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>Request</token> = ]&dacharref_vb;.<keyword>Think</keyword> <token>Text</token></para>
</vb>
</syntax>
			<param name="Text">
				A <typename>string</typename> value that specifies the character's thought output.
			</param>
			<returns name="Request">
				A <see class="typename" cref="T:&dans;.Request" suffix="Object" /> your application can
				use to track the method's status.
			</returns>
			<remarks>
				<para>
					Like the <see cref="M:&dans;.Character.Speak" /> method, the <self>Think</self> method is a queued request
					that displays text in a <a class="see" href="&dawbref;">&dawbname;</a>, except that the <self>Think</self> <a class="see" href="&dawbref;">&dawbname;</a>
					differs visually. In addition, the <a class="see" href="&dawbref;">&dawbname;</a> supports only the bookmark
					speech control tag (<keyword>Mrk</keyword>) and ignores any other speech control tags. Unlike <see cref="M:&dans;.Character.Speak" />,
					the <self>Think</self> method does not change the character's animation state.
				</para>
				<para>
					The <see cref="T:&dans;.Balloon" suffix="Object's" /> properties affect the output of both the <see cref="M:&dans;.Character.Speak" />
					and <self>Think</self> methods. For example, the <see cref="T:&dans;.Balloon" suffix="Object's" /> <see cref="P:&dans;.Balloon.Enabled" />
					property must be <keyword>True</keyword> for text to display.
				</para>
				<para>
					Agent's automatic word breaking in the <a class="see" href="&dawbref;">&dawbname;</a> breaks words using
					<glossary>white-space</glossary> characters (for example, SPACE or TAB). However, if it cannot, it may break
					a word to fit the <a class="see" href="&dawbref;">&dawbname;</a>. In languages like Japanese, Chinese, and
					Thai where spaces are not used to break words, insert a Unicode zero-width space character (0x200B) between
					characters to define logical word breaks.
				</para>
				<note>
					To track the method's status, you can declare an object reference and set it to the method's <see cref="T:&dans;.Request" suffix="Object" />
					return value.
				</note>
				<note>
					Set the character's <see cref="P:&dans;.Character.LanguageID" /> before using the <self>Think</self>
					method to ensure appropriate text display within the <a class="see" href="&dawbref;">&dawbname;</a>.
				</note>
			</remarks>
			<seealso cref="P:&dans;.Character.LanguageID" prefix="The" suffix="Property" />
			<seealso cref="M:&dans;.Character.Speak" prefix="The" suffix="Method" />
			<seealso cref="E:&darootobj;.RequestStart" prefix="The" suffix="Event" />
			<seealso cref="E:&darootobj;.RequestComplete" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Character.Wait">
			<summary>
				<para>
					Causes the character's animation queue to wait until the specified animation request completes.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>Wait</keyword> (<token>WaitForRequest</token>, &amp;<token>Request</token>)</para>
</cpp>
<csharp>
<para>[<token>Request</token> = ]&dacharref_csharp;.<keyword>Wait</keyword> (<token>WaitForRequest</token>)</para>
</csharp>
<vbnet>
<para>[<token>Request</token> = ]&dacharref_vb;.<keyword>Wait</keyword> (<token>WaitForRequest</token>)</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>Request</token> = ]&dacharref_vb;.<keyword>Wait</keyword> <token>WaitForRequest</token></para>
</vb>
</syntax>
			<param name="WaitForRequest">
				A <see class="typename" cref="T:&dans;.Request" suffix="Object" /> specifying the
				animation to wait for.
			</param>
			<returns name="Request">
				A <see class="typename" cref="T:&dans;.Request" suffix="Object" /> your application can
				use to track the method's status.
			</returns>
			<remarks>
				<para>
					Use this method only when you are using multiple (simultaneous) characters and are trying to sequence the
					interaction of characters. (For a single character, each animation request is played sequentially--after the
					previous request completes.)
				</para>
				<para>
					If you have two characters and you want one character's animation request to wait until the other character's
					animation completes, use the <self>Wait</self> method with the other character's animation <see cref="T:&dans;.Request" suffix="Object" />.
				</para>
			</remarks>
			<details>
				<example>
					<para>
						To specify the request parameter, create a variable for the animation request you want to wait for:
					</para>
					<code xml:space="preserve"><keyword>Dim</keyword> GenieRequest
<keyword>Dim</keyword> RobbyRequest
<keyword>Dim</keyword> Genie
<keyword>Dim</keyword> Robby

<keyword>Sub</keyword> window_Onload
    &darootref;.<keyword>Characters</keyword>.<keyword>Load</keyword> "Genie", "Genie.acs"
    &darootref;.<keyword>Characters</keyword>.<keyword>Load</keyword> "Robby", "Robby.acs"

    <keyword>Set</keyword> Genie = &darootref;.<keyword>Characters</keyword>("Genie")
    <keyword>Set</keyword> Robby = &darootref;.<keyword>Characters</keyword>("Robby")

    Genie.<keyword>MoveTo</keyword> 100,100
    Genie.<keyword>Show</keyword>

    Robby.<keyword>MoveTo</keyword> 250,100
    Robby.<keyword>Show</keyword>

    Genie.<keyword>Play</keyword> "Announce"
    <keyword>Set</keyword> GenieRequest = Genie.<keyword>Speak</keyword> ("Why did the chicken cross the road?")

    Robby.<keyword>Wait</keyword> GenieRequest
    Robby.<keyword>Play</keyword> "Confused"
    <keyword>Set</keyword> RobbyRequest = Robby.<keyword>Speak</keyword> ("I don't know. Why did the chicken cross the road?")

    Genie.<keyword>Wait</keyword> RobbyRequest
    Genie.<keyword>Play</keyword> "Pleased"
    <keyword>Set</keyword> GenieRequest = Genie.<keyword>Speak</keyword> ("To get to the other side.")

    Robby.<keyword>Wait</keyword> GenieRequest
    Robby.<glossary>Play</glossary> "Sad"
    Robby.<keyword>Speak</keyword> "I never should have asked."
<keyword>End Sub</keyword></code>
				</example>
				<example>
					<para>
						You can also streamline your code by just calling <self>Wait</self> directly, using a specific animation
						request.
					</para>
					<code xml:space="preserve">
Robby.<keyword>Wait</keyword> Genie.<keyword>Play</keyword> "GestureRight"
</code>
					<para>
						This avoids having to explicitly declare a <see cref="T:&dans;.Request" suffix="Object" />.
					</para>
				</example>
			</details>
			<seealso cref="E:&darootobj;.RequestStart" prefix="The" suffix="Event" />
			<seealso cref="E:&darootobj;.RequestComplete" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="P:&dans;.Character.Active">
			<summary>
				<para>
					deprecated
				</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:&dans;.Character.ActiveState" /> property, but
					is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.ActiveState">
			<summary>
				<para>
					Indicates if your application is the character's active client and if the character is <glossary>input-active</glossary>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_ActiveState</keyword> (&amp;<token>ActiveState</token>)</para>
</cpp>
<csharp>
<para>[<token>ActiveState</token> = ]&dacharref_csharp;.<keyword>ActiveState</keyword></para>
</csharp>
<vb>
<para>[<token>ActiveState</token> = ]&dacharref_vb;.<keyword>ActiveState</keyword></para>
</vb>
</syntax>
			<value name="ActiveState">
				A member of the <see class="typename" cref="T:&dans;.ActiveStateType" suffix="Enumeration" />
				indicating the state of the character and your client application: <include path="/doc/members/member[@name='T:&dans;.ActiveStateType']/syntax/list" />
			</value>
			<remarks>
				<para>
					When multiple client applications share the same character, the character's active client receives mouse
					input (for example, Double Agent control <keyword>Click</keyword> or <keyword>Drag</keyword> events). Similarly,
					when multiple characters are displayed, the active client of the topmost character (also known
					as the <glossary>input-active</glossary> client) receives Command events.
				</para>
				<para>
					You can use the <see cref="M:&dans;.Character.Activate" /> method to set whether your application is
					the character's active client or to make your application the <glossary>input-active</glossary> client (which
					also makes the character topmost).
				</para>
			</remarks>
			<seealso cref="M:&dans;.Character.Activate" prefix="The" suffix="Method" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.AnimationNames">
			<summary>
				<para>
					deprecated
				</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:&dans;.Character.Animations" /> property, but is
					still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.Animations">
			<summary>
				<para>
					Returns the names of the character's animations.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_Animations</keyword> (&amp;<token>Animations</token>)</para>
</cpp>
<csharp>
<para>[<token>Animations</token> = ]&dacharref_csharp;.<keyword>Animations</keyword></para>
</csharp>
<vb>
<para>[<token>Animations</token> = ]&dacharref_vb;.<keyword>Animations</keyword></para>
</vb>
</syntax>
			<value name="Animations">
				An array of <typename>string</typename> values that name all of the animations the
				character can play.
			</value>
			<remarks>
				<para>
					For <filename>.ACF</filename> characters, the array contains all the animations defined for the character,
					not just the ones that have been retrieved with the <see cref="M:&dans;.Character.Prepare" /> method.
				</para>
			</remarks>
			<seealso cref="M:&dans;.Character.Play" suffix="Method" prefix="The" />
			<seealso cref="M:&dans;.Character.Prepare" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.AutoPopupMenu">
			<summary>
				<para>
					Specifies if right-clicking the character or its <a class="see" href="&daniref;">&daniname;</a>
					automatically displays the character's <a class="see" href="&dacmref;">&dacmname;</a>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_AutoPopupMenu</keyword> (&amp;<token>Enabled</token>)</para>
<para><token>character</token>-&gt;<keyword>put_AutoPopupMenu</keyword> (<token>Enabled</token>)</para>
</cpp>
<csharp>
<para>[<token>Enabled</token> = ]&dacharref_csharp;.<keyword>AutoPopupMenu</keyword></para>
<para>&dacharref_csharp;.<keyword>AutoPopupMenu</keyword> = <token>Enabled</token></para>
</csharp>
<vb>
<para>[<token>Enabled</token> = ]&dacharref_vb;.<keyword>AutoPopupMenu</keyword></para>
<para>&dacharref_vb;.<keyword>AutoPopupMenu</keyword> = <token>Enabled</token></para>
</vb>
</syntax>
			<value name="Enabled">
				A <typename>boolean</typename> value specifying whether Double Agent automatically displays
				the character's <a class="see" href="&dacmref;">&dacmname;</a> on right-click.
			</value>
			<remarks>
				<para>
					By setting this property to <keyword>False</keyword>, you can create your own menu-handling behaviour. To
					display the menu after setting this property to <keyword>False</keyword>, use the <see cref="M:&dans;.Character.ShowPopupMenu" />
					method.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='ThisClientOnly']" />
			</remarks>
			<seealso cref="P:&dans;.Character.Style" suffix="Property" prefix="The" />
			<seealso cref="F:&dans;.CharacterStyleFlags.AutoPopupMenu" suffix="Member" prefix="The" />
			<seealso cref="M:&dans;.Character.ShowPopupMenu" prefix="The" suffix="Method" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.Balloon">
			<summary>
				<para>
					Returns the character's <see cref="T:&dans;.Balloon" suffix="Object" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_Balloon</keyword> (&amp;<token>Balloon</token>)</para>
</cpp>
<csharp>
<para>[<token>Balloon</token> = ]&dacharref_csharp;.<keyword>Balloon</keyword></para>
</csharp>
<vbnet>
<para>[<token>Balloon</token> = ]&dacharref_vb;.<keyword>Balloon</keyword></para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>Balloon</token> = ]&dacharref_vb;.<keyword>Balloon</keyword></para>
</vb>
</syntax>
			<value name="Balloon">
				The character's <see class="typename" cref="T:&dans;.Balloon" suffix="Object" />.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.CharacterID">
			<summary>
				<para>
					Returns the unique string that identifies the <see cref="T:&dans;.Character" suffix="Object" />
					in the <see cref="T:&dans;.Characters" suffix="Collection" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_CharacterID</keyword> (&amp;<token>CharacterID</token>)</para>
</cpp>
<csharp>
<para>[<token>CharacterID</token> = ]<token>character</token>.<keyword>CharacterID</keyword></para>
</csharp>
<vb>
<para>[<token>CharacterID</token> = ]<token>character</token>.<keyword>CharacterID</keyword></para>
</vb>
</syntax>
			<value name="CharacterID">
				A <typename>string</typename> value that identifies the <see cref="T:&dans;.Character" suffix="Object" />.
			</value>
			<remarks>
				<para>
					When you keep a reference to a <see cref="T:&dans;.Character" suffix="Object" />, you can use this property
					to relate it back to it's owner <see cref="T:&dans;.Characters" suffix="Collection" />.
				</para>
			</remarks>
			<seealso cref="M:&dans;.Characters.Load" suffix="Method" prefix="The" />
			<seealso cref="P:&dans;.Characters.Item" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.Commands">
			<summary>
				<para>
					Returns the character's <see cref="T:&dans;.Commands" suffix="Collection" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_Commands</keyword> (&amp;<token>Commands</token>)</para>
</cpp>
<csharp>
<para>[<token>Commands</token> = ]&dacharref_csharp;.<keyword>Commands</keyword></para>
</csharp>
<vbnet>
<para>[<token>Commands</token> = ]&dacharref_vb;.<keyword>Commands</keyword></para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>Commands</token> = ]&dacharref_vb;.<keyword>Commands</keyword></para>
</vb>
</syntax>
			<value name="Commands">
				The character's <see class="typename" cref="T:&dans;.Commands" suffix="Collection" />.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.Connected">
			<summary>
				<para>
					Indicates if the <see cref="T:&dans;.Character" suffix="Object" /> is <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#connected">connected</a>
					to the Double Agent server.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_Connected</keyword> (&amp;<token>Connected</token>)</para>
</cpp>
<csharp>
<para>[<token>Connected</token> = ]&dacharref_csharp;.<keyword>Connected</keyword></para>
</csharp>
<vb>
<para>[<token>Connected</token> = ]&dacharref_vb;.<keyword>Connected</keyword></para>
</vb>
</syntax>
			<value name="Connected">
				A <keyword>boolean</keyword> value that indicates if the character is running on
				the server or locally.
			</value>
			<remarks>
				<para>
					When the control is being used in <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#standalone">stand-alone</a>
					mode, any <see cref="T:&dans;.Character" /> you load <em>will</em> be <self>Connected</self>. When the control
					is being used in <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#standalone">stand-alone</a>
					mode, any <see cref="T:&dans;.Character" /> you load <em>will not</em> be <self>Connected</self>.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.Description">
			<summary>
				<para>
					Specifies a string that specifies the description for the specified character.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_Description</keyword> (&amp;<token>Description</token>)</para>
<para><token>character</token>-&gt;<keyword>put_Description</keyword> (<token>Description</token>)</para>
</cpp>
<csharp>
<para>[<token>Description</token> = ]&dacharref_csharp;.<keyword>Description</keyword></para>
<para>&dacharref_csharp;.<keyword>Description</keyword> = "<token>Description</token>"</para>
</csharp>
<vb>
<para>[<token>Description</token> = ]&dacharref_vb;.<keyword>Description</keyword></para>
<para>&dacharref_vb;.<keyword>Description</keyword> = "<token>Description</token>"</para>
</vb>
</syntax>
			<value name="Description">
				A <typename>string</typename> value corresponding to the character's description (in
				the current language setting).
			</value>
			<remarks>
				<para>
					A character's <self>Description</self> may depend on the character's <see cref="P:&dans;.Character.LanguageID" />
					setting. A character's description in one language may be different or use different characters than
					in another. The character's default <self>Description</self> for a specific language is defined when the
					character is compiled with the Microsoft<sup>®</sup> Agent Character Editor.
				</para>
				<note>
					The <self>Description</self> property is optional and may not be supplied for all characters.
				</note>
				<include file="&dainclude;" path="/doc/properties/note[@name='AllClients']" />
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.ExtraData">
			<summary>
				<para>
					Returns a string that specifies additional data stored as part of the character.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_ExtraData</keyword> (&amp;<token>ExtraData</token>)</para>
</cpp>
<csharp>
<para>[<token>ExtraData</token> = ]&dacharref_csharp;.<keyword>ExtraData</keyword></para>
</csharp>
<vb>
<para>[<token>ExtraData</token> = ]&dacharref_vb;.<keyword>ExtraData</keyword></para>
</vb>
</syntax>
			<value name="ExtraData">
				A <typename>string</typename> that contains any additional data stored as part
				of the character.
			</value>
			<remarks>
				<para>
					The default value for a character's <self>ExtraData</self> property is defined when the character is
					compiled with the Microsoft<sup>®</sup> Agent Character Editor. It cannot be changed or specified at run
					time.
				</para>
				<note>
					The <self>ExtraData</self> property setting is optional and may not be supplied for all characters.
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.FileName">
			<summary>
				<para>
					Returns the name of the character's definition file.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_FileName</keyword> (&amp;<token>FileName</token>)</para>
</cpp>
<csharp>
<para>[<token>FileName</token> = ]&dacharref_csharp;.<keyword>FileName</keyword></para>
</csharp>
<vb>
<para>[<token>FileName</token> = ]&dacharref_vb;.<keyword>FileName</keyword></para>
</vb>
</syntax>
			<value name="FileName">
				A <typename>string</typename> value that contains the character's definition file
				name.
			</value>
			<remarks>
				<para>
					This is the name of the file that was used to <see cref="M:&dans;.Characters.Load" /> the character.
				</para>
			</remarks>
			<seealso cref="M:&dans;.Characters.Load" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.FilePath">
			<summary>
				<para>
					Returns the full path (<glossary>UNC</glossary> or <glossary>HTTP</glossary>) of the character's definition
					file.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_FilePath</keyword> (&amp;<token>FilePath</token>)</para>
</cpp>
<csharp>
<para>[<token>FilePath</token> = ]&dacharref_csharp;.<keyword>FilePath</keyword></para>
</csharp>
<vb>
<para>[<token>FilePath</token> = ]&dacharref_vb;.<keyword>FilePath</keyword></para>
</vb>
</syntax>
			<value name="FilePath">
				A <typename>string</typename> value that contains the character's definition file
				path.
			</value>
			<remarks>
				<para>
					This is the full path of the file that was used to <see cref="M:&dans;.Characters.Load" /> the character.
				</para>
			</remarks>
			<seealso cref="M:&dans;.Characters.Load" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.GUID">
			<summary>
				<para>
					deprecated
				</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:&dans;.Character.UniqueID" /> property, but is
					still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.HasIcon">
			<summary>
				<para>
					Indicates if the character has a <a class="see" href="&daniref;">&daniname;</a> in its definition.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_HasIcon</keyword> (&amp;<token>HasIcon</token>)</para>
</cpp>
<csharp>
<para>[<token>HasIcon</token> = ]&dacharref_csharp;.<keyword>HasIcon</keyword></para>
</csharp>
<vb>
<para>[<token>HasIcon</token> = ]&dacharref_vb;.<keyword>HasIcon</keyword></para>
</vb>
</syntax>
			<value name="HasIcon">
				A <typename>boolean</typename> value that indicates if the character definition includes
				a <a class="see" href="&daniref;">&daniname;</a>.
			</value>
			<remarks>
				<para>
					If the character definition does not include an icon (or even if it does) you can use the <see cref="M:&dans;.Character.GenerateIcon" />
					method to create an icon from the character's animations.
				</para>
			</remarks>
			<seealso cref="P:&dans;.Character.IconShown" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.Character.IconVisible" suffix="Property" prefix="The" />
			<seealso cref="M:&dans;.Character.GenerateIcon" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.HasOtherClients">
			<summary>
				<para>
					Indicates if the specified character is in use by other applications.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_HasOtherClients</keyword> (&amp;<token>HasOtherClients</token>)</para>
</cpp>
<csharp>
<para>[<token>HasOtherClients</token> = ]&dacharref_csharp;.<keyword>HasOtherClients</keyword></para>
</csharp>
<vb>
<para>[<token>HasOtherClients</token> = ]&dacharref_vb;.<keyword>HasOtherClients</keyword></para>
</vb>
</syntax>
			<value name="HasOtherClients">
				A <typename>boolean</typename> value that indicates if another client application
				is using this character.
			</value>
			<remarks>
				<para>
					You can use this property to determine if your application is the character's only client, or if another
					application is sharing (has loaded) the same character.
				</para>
				<note>
					Double Agent uses the <see cref="P:&dans;.Character.UniqueID" /> property, not the <see cref="P:&dans;.Character.FilePath" />
					property, to determine if the same character is being used by more than one client application.
				</note>
				<note>
					If your application uses multiple instances of the <see cref="T:&darootobj;" suffix="Object" />,
					each instance is a treated as a different client and this property will return <keyword>True</keyword>.
				</note>
			</remarks>
			<seealso cref="P:&dans;.Character.UniqueID" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.Height">
			<summary>
				<para>
					Specifies the height of the character's image.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_Height</keyword> (&amp;<token>Height</token>)</para>
<para><token>character</token>-&gt;<keyword>put_Height</keyword> (<token>Height</token>)</para>
</cpp>
<csharp>
<para>[<token>Height</token> = ]&dacharref_csharp;.<keyword>Height</keyword></para>
<para>&dacharref_csharp;.<keyword>Height</keyword> = <token>Height</token></para>
</csharp>
<vb>
<para>[<token>Height</token> = ]&dacharref_vb;.<keyword>Height</keyword></para>
<para>&dacharref_vb;.<keyword>Height</keyword> = <token>Height</token></para>
</vb>
</syntax>
			<value name="Height">
				A <typename>numeric</typename> value that specifies the height of the character's image.
			</value>
			<remarks>
				<para>
					The <self>Height</self> property is always expressed in pixels.
				</para>
				<para>
					Even though the character appears in an irregularly shaped region window, the dimensions of the character
					are based on the external dimensions of the rectangular animation frame used when the character
					was compiled with the Microsoft<sup>®</sup> Agent Character Editor.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='AllClients']" />
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.HelpContextID">
			<summary>Not Implemented</summary>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.HelpFile">
			<summary>Not Implemented</summary>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.HelpModeOn">
			<summary>Not Implemented</summary>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.IconIdentity">
			<summary>
				<para>
					Specifies the identity that Windows will use to remember the character's <a class="see" href="&daniref;">&daniname;</a>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_IconIdentity</keyword> (&amp;<token>IconIdentity</token>)</para>
<para><token>character</token>-&gt;<keyword>put_IconIdentity</keyword> (<token>IconIdentity</token>)</para>
</cpp>
<csharp>
<para>[<token>IconIdentity</token> =] &dacharref_csharp;.<keyword>IconIdentity</keyword></para>
<para>&dacharref_csharp;.<keyword>IconIdentity</keyword> = <token>IconIdentity</token></para>
</csharp>
<vb>
<para>[<token>IconIdentity</token> = ]&dacharref_vb;.<keyword>IconIdentity</keyword></para>
<para>&dacharref_vb;.<keyword>IconIdentity</keyword> = <token>IconIdentity</token></para>
</vb>
</syntax>
			<value name="IconIdentity">
				A <typename>string</typename> value that allows Windows to uniquely identify this
				character's <a class="see" href="&daniref;">&daniname;</a>. It must be either a valid GUID string or an
				empty string.
			</value>
			<remarks>
				<para>
					Every <a class="see" href="&daniref;">&daniname;</a> has an identity that allows Windows to remember it's
					state (shown, hidden, active, etc.). By default, Windows associates a <a class="see" href="&daniref;">&daniname;</a>
					with the application that creates it.
				</para>
				<para>
					You can supply either a GUID identifier, or an empty string to use the default identity.
				</para>
				<list type="bullet">
					<item>
						If the character was loaded by the Double Agent server, it's <a class="see" href="&daniref;">&daniname;</a>
						will be associated with the server by default.
					</item>
					<item>
						If you're using the control in <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#standalone">stand-alone</a>
						mode, the character's <a class="see" href="&daniref;">&daniname;</a> will be associated with your client application
						by default.
					</item>
					<item>
						You can supply a <em>single</em> GUID for all characters you load. All of their <a class="see" href="&daniref;">&daniname;s</a>
						will be associated with that single identity.
					</item>
					<item>
						You can supply a <em>unique</em> GUID for each character you load. Windows will then identify each
						character's <a class="see" href="&daniref;">&daniname;</a> uniquely.
					</item>
				</list>
				<include file="&dainclude;" path="/doc/properties/note[@name='ThisClientOnly']" />
			</remarks>
			<seealso cref="P:&dans;.Character.IconShown" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.Character.IconVisible" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.IconShown">
			<summary>
				<para>
					Specifies if the character's <a class="see" href="&daniref;">&daniname;</a> is shown in the Windows notification
					area.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_IconShown</keyword> (&amp;<token>IconShown</token>)</para>
<para><token>character</token>-&gt;<keyword>put_IconShown</keyword> (<token>IconShown</token>)</para>
</cpp>
<csharp>
<para>[<token>IconShown</token> =] &dacharref_csharp;.<keyword>IconShown</keyword></para>
<para>&dacharref_csharp;.<keyword>IconShown</keyword> = <token>IconShown</token></para>
</csharp>
<vb>
<para>[<token>IconShown</token> = ]&dacharref_vb;.<keyword>IconShown</keyword></para>
<para>&dacharref_vb;.<keyword>IconShown</keyword> = <token>IconShown</token></para>
</vb>
</syntax>
			<value name="IconShown">
				A <typename>boolean</typename> value that indicates if the icon is shown.
			</value>
			<remarks>
				<para>
					This property only specifies if the <a class="see" href="&daniref;">&daniname;</a> is added to the
					Windows notification area. The user decides whether it's visible or hidden. See the <see cref="P:&dans;.Character.IconIdentity" />
					property for more details.
				</para>
				<note>
					This property has no effect if the character doesn't have a <a class="see" href="&daniref;">&daniname;</a>.
				</note>
				<include file="&dainclude;" path="/doc/properties/note[@name='ThisClientOnly']" />
			</remarks>
			<seealso cref="P:&dans;.Character.Style" suffix="Property" prefix="The" />
			<seealso cref="F:&dans;.CharacterStyleFlags.IconShown" suffix="Member" prefix="The" />
			<seealso cref="P:&dans;.Character.HasIcon" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.Character.IconVisible" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.Character.IconIdentity" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.Character.IconTip" suffix="Property" prefix="The" />
			<seealso cref="M:&dans;.Character.GenerateIcon" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.IconTip">
			<summary>
				<para>
					Specifies the tip text associated with the character's <a class="see" href="&daniref;">&daniname;</a>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_IconTip</keyword> (&amp;<token>IconTip</token>)</para>
<para><token>character</token>-&gt;<keyword>put_IconTip</keyword> (<token>IconTip</token>)</para>
</cpp>
<csharp>
<para>[<token>IconTip</token> =] &dacharref_csharp;.<keyword>IconTip</keyword></para>
<para>&dacharref_csharp;.<keyword>IconTip</keyword> = <token>IconTip</token></para>
</csharp>
<vb>
<para>[<token>IconTip</token> = ]&dacharref_vb;.<keyword>IconTip</keyword></para>
<para>&dacharref_vb;.<keyword>IconTip</keyword> = <token>IconTip</token></para>
</vb>
</syntax>
			<value name="IconTip">
				A <typename>string</typename> value that specifies the <a class="see" href="&daniref;">&daniname;'s</a>
				tip text. An empty string means that the default tip (the character's name) is used.
			</value>
			<remarks>
				<para>
					By default, the character's <see cref="P:&dans;.Character.Name" /> is shown in the <a class="see" href="&daniref;">&daniname;</a>
					tip. You can use <em>this</em> property to show your own tip.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='ThisClientOnly']" />
			</remarks>
			<seealso cref="P:&dans;.Character.IconShown" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.Character.IconVisible" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.Character.Name" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.IconVisible">
			<summary>
				<para>
					Indicates if the character has a <a class="see" href="&daniref;">&daniname;</a> in the Windows notification
					area.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_IconVisible</keyword> (&amp;<token>IconVisible</token>)</para>
</cpp>
<csharp>
<para>[<token>IconVisible</token> = ]&dacharref_csharp;.<keyword>IconVisible</keyword></para>
</csharp>
<vb>
<para>[<token>IconVisible</token> = ]&dacharref_vb;.<keyword>IconVisible</keyword></para>
</vb>
</syntax>
			<value name="IconVisible">
				A <typename>boolean</typename> value that indicates if the character is showing
				a <a class="see" href="&daniref;">&daniname;</a>.
			</value>
			<remarks>
				<para>
					This property only indicates if the <a class="see" href="&daniref;">&daniname;</a> has been created. The
					user decides if the icon is actually visible or hidden.
				</para>
				<para>
					The <see cref="F:&dans;.CharacterStyleFlags.IconShown" /> style only applies to your client application, so
					it is only in effect when you application is the character's active client. When your application is
					<em>not</em> the character's active client, you can use this property to determine if another client has
					shown or hidden the <a class="see" href="&daniref;">&daniname;</a>.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='AllClients']" />
			</remarks>
			<seealso cref="P:&dans;.Character.IconShown" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.Character.IconIdentity" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.Character.IconTip" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.IdleEnabled">
			<summary>
				<para>
					Specifies if the character will show its <glossary>Idling</glossary> animations when it's not busy.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_IdleEnabled</keyword> (&amp;<token>IdleEnabled</token>)</para>
<para><token>character</token>-&gt;<keyword>put_IdleEnabled</keyword> (<token>IdleEnabled</token>)</para>
</cpp>
<csharp>
<para>[<token>IdleEnabled</token> =] &dacharref_csharp;.<keyword>IdleEnabled</keyword></para>
<para>&dacharref_csharp;.<keyword>IdleEnabled</keyword> = <token>IdleEnabled</token></para>
</csharp>
<vb>
<para>[<token>IdleEnabled</token> = ]&dacharref_vb;.<keyword>IdleEnabled</keyword></para>
<para>&dacharref_vb;.<keyword>IdleEnabled</keyword> = <token>IdleEnabled</token></para>
</vb>
</syntax>
			<value name="IdleEnabled">
				A <typename>boolean</typename> value specifying whether Double Agent manages idle
				mode.
			</value>
			<remarks>
				<para>
					Double Agent automatically sets a time-out after the last animation played for a character. When this
					timer's interval is complete, Double Agent begins the <glossary>Idling</glossary> state for a character, playing
					its associated <glossary>Idling</glossary> animations at regular intervals. If you want to disable Double Agent
					from automatically playing the <glossary>Idling</glossary> state animations, set the property to <keyword>False</keyword>
					and play an animation or call the <see cref="M:&dans;.Character.Stop" /> method. Setting this value does
					not affect the current animation state of the character.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='ThisClientOnly']" />
			</remarks>
			<seealso cref="P:&dans;.Character.Style" suffix="Property" prefix="The" />
			<seealso cref="F:&dans;.CharacterStyleFlags.IdleEnabled" suffix="Member" prefix="The" />
			<seealso cref="P:&dans;.Character.IdleState" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.IdleOn">
			<summary>
				<para>
					deprecated
				</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:&dans;.Character.IdleEnabled" /> property, but
					is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.IdleState">
			<summary>
				<para>
					Indicates if the character is currently playing its <glossary>Idling</glossary> animations.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_IdleState</keyword> (&amp;<token>IdleState</token>)</para>
</cpp>
<csharp>
<para>[<token>IdleState</token> = ]&dacharref_csharp;.<keyword>IdleState</keyword></para>
</csharp>
<vb>
<para>[<token>IdleState</token> = ]&dacharref_vb;.<keyword>IdleState</keyword></para>
</vb>
</syntax>
			<value name="IdleState">
				A <typename>boolean</typename> value that indicates if the character is idling.
			</value>
			<remarks>
				<include file="&dainclude;" path="/doc/properties/note[@name='AllClients']" />
			</remarks>
			<seealso cref="P:&dans;.Character.IdleEnabled" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.LanguageID">
			<summary>
				<para>
					Specifies the character's language identifier.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_LanguageID</keyword> (&amp;<token>LanguageID</token>)</para>
<para><token>character</token>-&gt;<keyword>put_LanguageID</keyword> (<token>LanguageID</token>)</para>
</cpp>
<csharp>
<para>[<token>LanguageID</token> = ]&dacharref_csharp;.<keyword>LanguageID</keyword></para>
<para>&dacharref_csharp;.<keyword>LanguageID</keyword> = <token>LanguageID</token></para>
</csharp>
<vb>
<para>[<token>LanguageID</token> = ]&dacharref_vb;.<keyword>LanguageID</keyword></para>
<para>&dacharref_vb;.<keyword>LanguageID</keyword> = <token>LanguageID</token></para>
</vb>
</syntax>
			<value name="LanguageID">
				A <typename>numeric</typename> value specifying the character's language ID.
				A character's language ID (LANGID) is a 16-bit value defined by Windows, consisting of a primary language
				ID and a secondary language ID.
			</value>
			<remarks>
				<para>
					If you do not set the character's <self>LanguageID</self>, its language will be the current system language,
					if the corresponding Agent language DLL is installed. Otherwise, the character's language will
					be English (US).
				</para>
				<para>
					This property also determines the language for <a class="see" href="&dawbref;">&dawbname;</a> text, the
					commands in the character's <a class="see" href="&dacmref;">&dacmname;</a>, and the speech recognition engine.
					It also determines the default language for text-to-speech output.
				</para>
			</remarks>
			<details>
				<h4 class="details">Details</h4>
				<para>
					If you try to set a character's <self>LanguageID</self> and the Agent language DLL for that language is
					not installed or a display font for the language is not available, Agent raises an error and <self>LanguageID</self>
					remains at its last setting.
				</para>
				<para>
					Setting this property does not raise an error if there are no matching speech engines for the language. To
					determine if there is a compatible speech engine available for the <self>LanguageID</self>, check <see cref="P:&dans;.Character.SRModeID" />
					or <see cref="P:&dans;.Character.TTSModeID" />. If you do not set <self>LanguageID</self>, it will be set
					to the user default language.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='ThisClientOnly']" />
				<note>
					If you set <self>LanguageID</self> to a language that supports bidirectional text (such as Arabic
					or Hebrew), but the system running your application does not have bidirectional support installed,
					text in the <a class="see" href="&dawbref;">&dawbname;</a> may appear in logical rather than display order.
				</note>
			</details>
			<seealso cref="P:&dans;.Character.TTSModeID" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Character.SRModeID" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.Left">
			<summary>
				<para>
					Specifies the left edge of the character's image.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_Left</keyword> (&amp;<token>Left</token>)</para>
<para><token>character</token>-&gt;<keyword>put_Left</keyword> (<token>Left</token>)</para>
</cpp>
<csharp>
<para>[<token>Left</token> = ]&dacharref_csharp;.<keyword>Left</keyword></para>
<para>&dacharref_csharp;.<keyword>Left</keyword> = <token>Left</token></para>
</csharp>
<vb>
<para>[<token>Left</token> = ]&dacharref_vb;.<keyword>Left</keyword></para>
<para>&dacharref_vb;.<keyword>Left</keyword> = <token>Left</token></para>
</vb>
</syntax>
			<value name="Left">
				A <typename>numeric</typename> value that specifies the left edge of the character's image.
			</value>
			<remarks>
				<para>
					The <self>Left</self> property is always expressed in pixels, relative to screen origin (upper left).
				</para>
				<para>
					Even though the character appears in an irregularly shaped region window, the location of the character is
					based on the external dimensions of the rectangular animation frame used when the character was
					compiled with the Microsoft<sup>®</sup> Agent Character Editor.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='AllClients']" />
			</remarks>
			<seealso cref="P:&dans;.Character.Top" prefix="The" suffix="Property" />
			<seealso cref="M:&dans;.Character.MoveTo" prefix="The" suffix="Method" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.ListeningStatus">
			<summary>
				<para>
					Indicates if speech input can be started for the character.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_SRStatus</keyword> (&amp;<token>SRStatus</token>)</para>
</cpp>
<csharp>
<para>[<token>SRStatus</token> = ]&dacharref_csharp;.<keyword>SRStatus</keyword></para>
</csharp>
<vb>
<para>[<token>SRStatus</token> = ]&dacharref_vb;.<keyword>SRStatus</keyword></para>
</vb>
</syntax>
			<value name="ListeningStatus">
				One of the following members of the <see class="typename" cref="T:&dans;.ListeningStatusType" suffix="Enumeration" />:
				<include path="/doc/members/member[@name='T:&dans;.ListeningStatusType']/syntax/list" />
			</value>
			<remarks>
				<para>
					This property checks for the conditions necessary to support speech input. You can check this property before
					you call the <see cref="M:&dans;.Character.Listen" /> method to better ensure its success.
				</para>
			</remarks>
			<details>
				<h4 class="details">Details</h4>
				<para>
					When speech input is enabled in the <a class="see" href="&dapsref;#SpeechInput">&dapsname;</a> window,
					querying this property will load the associated engine, if it is not already loaded, and start
					speech services. That is, the <glossary>Listening key</glossary> is available, and the <a class="see" href="&daltref;">&daltname;</a>
					is automatically displayable. (The <glossary>Listening key</glossary> and <a class="see" href="&daltref;">&daltname;</a>
					are only enabled if they are also enabled in the <a class="see" href="&dapsref;#SpeechInput">&dapsname;</a>
					window.) However, if you query the property when speech is disabled, Double Agent does not start speech
					services.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='ThisClientOnly']" />
			</details>
			<seealso cref="T:&dans;.ListeningStatusType" suffix="Enumeration" prefix="The" />
			<seealso cref="P:&dans;.Settings.SREnabled" suffix="Property" prefix="The" />
			<seealso cref="M:&dans;.Character.Listen" prefix="The" suffix="Method" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.MoveCause">
			<summary>
				<para>
					Returns the cause of the character's last move.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_MoveCause</keyword> (&amp;<token>MoveCause</token>)</para>
</cpp>
<csharp>
<para>[<token>MoveCause</token> = ]&dacharref_csharp;.<keyword>MoveCause</keyword></para>
</csharp>
<vb>
<para>[<token>MoveCause</token> = ]&dacharref_vb;.<keyword>MoveCause</keyword></para>
</vb>
</syntax>
			<value name="MoveCause">
				One of the following members of the <see class="typename" cref="T:&dans;.MoveCauseType" suffix="Enumeration" />:
				<include path="/doc/members/member[@name='T:&dans;.MoveCauseType']/syntax/list" />
			</value>
			<remarks>
				<para>
					You can use this property to determine what caused the character to move, when more than one application is
					sharing (has loaded) the same character. These values are the same as those returned by the <see cref="E:&darootobj;.Move" />
					event.
				</para>
			</remarks>
			<seealso cref="T:&dans;.MoveCauseType" suffix="Enumeration" prefix="The" />
			<seealso cref="E:&darootobj;.Move" prefix="The" suffix="Event" />
			<seealso cref="M:&dans;.Character.MoveTo" prefix="The" suffix="Method" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.Name">
			<summary>
				<para>
					Specifies the specified character's displayed name.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_Name</keyword> (&amp;<token>Name</token>)</para>
<para><token>character</token>-&gt;<keyword>put_Name</keyword> (<token>Name</token>)</para>
</cpp>
<csharp>
<para>[<token>Name</token> = ]&dacharref_csharp;.<keyword>Name</keyword></para>
<para>&dacharref_csharp;.<keyword>Name</keyword> = "<token>Name</token>"</para>
</csharp>
<vb>
<para>[<token>Name</token> = ]&dacharref_vb;.<keyword>Name</keyword></para>
<para>&dacharref_vb;.<keyword>Name</keyword> = "<token>Name</token>"</para>
</vb>
</syntax>
			<value name="Name">
				A <typename>string</typename> value corresponding to the character's name (in the
				current language setting).
			</value>
			<remarks>
				<para>
					A character's <self>Name</self> may depend on the character's <see cref="P:&dans;.Character.LanguageID" />
					setting. A character's name in one language may be different or use different characters than in
					another. The character's default <self>Name</self> for a specific language is defined when the character is
					compiled with the Microsoft<sup>®</sup> Agent Character Editor.
				</para>
				<para>
					Avoid renaming a character, especially when using it in a scenario where other client applications may
					use the same character. Also, Double Agent uses the character's <self>Name</self> to automatically create commands
					for hiding and showing the character.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='AllClients']" />
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.OriginalHeight">
			<summary>
				<para>
					Returns the character's default height.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_OriginalHeight</keyword> (&amp;<token>OriginalHeight</token>)</para>
</cpp>
<csharp>
<para>[<token>OriginalHeight</token> = ]&dacharref_csharp;.<keyword>OriginalHeight</keyword></para>
</csharp>
<vb>
<para>[<token>OriginalHeight</token> = ]&dacharref_vb;.<keyword>OriginalHeight</keyword></para>
</vb>
</syntax>
			<value name="OriginalHeight">
				The character's image height as defined with the Microsoft<sup>®</sup>
				Agent Character Editor.
			</value>
			<seealso cref="P:&dans;.Character.Height" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Character.OriginalWidth" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.OriginalWidth">
			<summary>
				<para>
					Returns the character's default width.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_OriginalWidth</keyword> (&amp;<token>OriginalWidth</token>)</para>
</cpp>
<csharp>
<para>[<token>OriginalWidth</token> = ]&dacharref_csharp;.<keyword>OriginalWidth</keyword></para>
</csharp>
<vb>
<para>[<token>OriginalWidth</token> = ]&dacharref_vb;.<keyword>OriginalWidth</keyword></para>
</vb>
</syntax>
			<value name="OriginalWidth">
				The character's image width as defined with the Microsoft<sup>®</sup>
				Agent Character Editor.
			</value>
			<seealso cref="P:&dans;.Character.Width" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Character.OriginalHeight" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.Pitch">
			<summary>
				<para>
					Returns the character's default speech output (text-to-speech) pitch setting.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_Pitch</keyword> (&amp;<token>Pitch</token>)</para>
</cpp>
<csharp>
<para>[<token>Pitch</token> = ]&dacharref_csharp;.<keyword>Pitch</keyword></para>
</csharp>
<vb>
<para>[<token>Pitch</token> = ]&dacharref_vb;.<keyword>Pitch</keyword></para>
</vb>
</syntax>
			<value name="Pitch">
				A <typename>numeric</typename> value that specifies the pitch (in hertz) of the character's
				<em>default</em> text-to-speech engine.
			</value>
			<remarks>
				<para>
					This property is of limited value since it only supplies the <em>default</em> pitch from the character's definition.
					It's supported for compatibility.
				</para>
				<para>
					Although your application cannot write this value, you can include <keyword>Pit</keyword> (pitch) tags
					in your speech output text that will temporarily change the pitch for a particular utterance. However,
					using the <keyword>Pit</keyword> tag to change the pitch will not change the <self>Pitch</self> property value.
					For further information, see <a href="../Reference/Ref_SpeechTags.htm#Pit">Speech Output Tags</a>.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.Smoothed">
			<summary>
				<para>
					Indicates if image smoothing is being applied to the character's animations.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_Smoothed</keyword> (&amp;<token>Smoothed</token>)</para>
</cpp>
<csharp>
<para>[<token>Smoothed</token> = ]&dacharref_csharp;.<keyword>Smoothed</keyword></para>
</csharp>
<vb>
<para>[<token>Smoothed</token> = ]&dacharref_vb;.<keyword>Smoothed</keyword></para>
</vb>
</syntax>
			<value name="Smoothed">
				A <typename>boolean</typename> value that indicates if animation frames are smoothed.
			</value>
			<remarks>
				<para>
					Agent character animations are defined with an 8-bit color depth (256 color palette), which can result
					in low image quality and visible pixilation. Image smoothing reduces pixilation by applying a
					slight blur to each animation frame.
				</para>
				<note>
					This is a read-only property. Its value is initialized from the <see cref="T:&darootobj;" />.<see cref="P:&darootobj;.CharacterStyle" />
					property.
				</note>
				<include file="&dainclude;" path="/doc/properties/note[@name='AllClients']" />
			</remarks>
			<seealso cref="P:&dans;.Character.SmoothEdges" suffix="Property" prefix="The" />
			<seealso cref="P:&darootobj;.CharacterStyle" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.Character.Style" suffix="Property" prefix="The" />
			<seealso cref="F:&dans;.CharacterStyleFlags.Smoothed" suffix="Member" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.SmoothEdges">
			<summary>
				<para>
					Indicates if image smoothing is being applied to the edges of the character's animations.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_SmoothEdges</keyword> (&amp;<token>SmoothEdges</token>)</para>
</cpp>
<csharp>
<para>[<token>SmoothEdges</token> = ]&dacharref_csharp;.<keyword>SmoothEdges</keyword></para>
</csharp>
<vb>
<para>[<token>SmoothEdges</token> = ]&dacharref_vb;.<keyword>SmoothEdges</keyword></para>
</vb>
</syntax>
			<value name="SmoothEdges">
				A <typename>boolean</typename> value that indicates if animation frames have
				smoothed edges.
			</value>
			<remarks>
				<para>
					Agent character animations are defined with an 8-bit color depth (256 color palette), which can result
					in low image quality and visible pixilation. Edge smoothing reduces pixilation by applying a
					slight blur to the edges of each animation frame.
				</para>
				<note>
					This is a read-only property. Its value is initialized from the <see cref="T:&darootobj;" />.<see cref="P:&darootobj;.CharacterStyle" />
					property.
				</note>
				<include file="&dainclude;" path="/doc/properties/note[@name='AllClients']" />
			</remarks>
			<seealso cref="P:&dans;.Character.Smoothed" suffix="Property" prefix="The" />
			<seealso cref="P:&darootobj;.CharacterStyle" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.Character.Style" suffix="Property" prefix="The" />
			<seealso cref="F:&dans;.CharacterStyleFlags.SmoothEdges" suffix="Member" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.SoundEffectsEnabled">
			<summary>
				<para>
					Specifies if sound effects are enabled for your character.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_SoundEffectsEnabled</keyword> (&amp;<token>SoundEffectsEnabled</token>)</para>
<para><token>character</token>-&gt;<keyword>put_SoundEffectsEnabled</keyword> (<token>SoundEffectsEnabled</token>)</para>
</cpp>
<csharp>
<para>[<token>SoundEffectsEnabled</token> = ]&dacharref_csharp;.<keyword>SoundEffectsEnabled</keyword></para>
<para>&dacharref_csharp;.<keyword>SoundEffectsEnabled</keyword> = <token>SoundEffectsEnabled</token></para>
</csharp>
<vb>
<para>[<token>SoundEffectsEnabled</token> = ]&dacharref_vb;.<keyword>SoundEffectsEnabled</keyword></para>
<para>&dacharref_vb;.<keyword>SoundEffectsEnabled</keyword> = <token>SoundEffectsEnabled</token></para>
</vb>
</syntax>
			<value name="SoundEffectsEnabled">
				A <typename>boolean</typename> value specifying whether sound effects are
				enabled.
			</value>
			<remarks>
				<para>
					This property determines whether the sound effects included as a part of a character's animations will
					play when an animation plays.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='ThisClientOnly']" />
				<note>
					This settings can be overridden by the user in the <a class="see" href="&dapsref;#Output">&dapsname;</a>
					window.
				</note>
			</remarks>
			<seealso cref="P:&dans;.Character.Style" suffix="Property" prefix="The" />
			<seealso cref="F:&dans;.CharacterStyleFlags.SoundEffects" suffix="Member" prefix="The" />
			<seealso cref="P:&dans;.Settings.SoundEffectsEnabled" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.SoundEffectsOn">
			<summary>
				<para>
					deprecated
				</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:&dans;.Character.SoundEffectsEnabled" /> property, but
					is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.Speed">
			<summary>
				<para>
					Returns the character's speech output (text-to-speech) speed setting.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_Speed</keyword> (&amp;<token>Speed</token>)</para>
</cpp>
<csharp>
<para>[<token>Speed</token> = ]&dacharref_csharp;.<keyword>Speed</keyword></para>
</csharp>
<vb>
<para>[<token>Speed</token> = ]&dacharref_vb;.<keyword>Speed</keyword></para>
</vb>
</syntax>
			<value name="Speed">
				A <typename>numeric</typename> value that specifies the speed (in words-per-minute) of
				the character's <em>default</em> text-to-speech engine.
			</value>
			<remarks>
				<para>
					This property is of limited value since it only supplies the <em>default</em> speed from the character's definition,
					scaled by the <see cref="P:&dans;.Settings.TTSSpeed" /> property. It's supported for compatibility.
				</para>
				<para>
					Although your application cannot write this value, you can include <keyword>Spd</keyword> (speed) tags
					in your speech output text that will temporarily change the output speed for a particular utterance.
					However, using the <keyword>Spd</keyword> tag to change the character's spoken output does not affect the
					<self>Speed</self> property value. For further information, see <a href="../Reference/Ref_SpeechTags.htm#Spd">Speech Output Tags</a>.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.SREngine">
			<summary>
				<para>
					Returns the character's current or default <see cref="T:&dans;.SREngine" text="Speech Recognition Engine" suffix="Object" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_SREngine</keyword> (<token>GetDefault</token>, &amp;<token>SREngine</token>)</para>
</cpp>
<csharp>
<para>[<token>SREngine</token> = ]&dacharref_csharp;.<keyword>get_SREngine</keyword> (<token>GetDefault</token>)</para>
</csharp>
<vbnet>
<para>[<token>SREngine</token> = ]&dacharref_vb;.<keyword>SREngine</keyword>[ [<token>GetDefault</token>]]</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>SREngine</token> = ]&dacharref_vb;.<keyword>SREngine</keyword>[ [<token>GetDefault</token>]]</para>
</vb>
</syntax>
			<param name="GetDefault">
				An optional <typename>boolean</typename> value that indicates if you want the
				character's current or default speech recognition engine. The default value is <keyword>False</keyword>.
			</param>
			<value name="SREngine">
				A <see class="typename" cref="T:&dans;.SREngine" suffix="Object" /> that corresponds to
				the character's current or default <see class="typename" cref="P:&dans;.Character.SRModeID" />.
			</value>
			<remarks>
				<para>
					If you change the character's <see cref="P:&dans;.Character.SRModeID" /> you must re-access this property
					to get the correct current <see cref="T:&dans;.SREngine" suffix="Object" />.
				</para>
			</remarks>
			<seealso cref="T:&dans;.SREngine" suffix="Object" prefix="The" />
			<seealso cref="P:&dans;.Character.SRModeID" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.SRModeID">
			<summary>
				<para>
					Specifies the speech recognition engine the character uses.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_SRModeID</keyword> (&amp;<token>SRModeID</token>)</para>
<para><token>character</token>-&gt;<keyword>put_SRModeID</keyword> (<token>SRModeID</token>)</para>
</cpp>
<csharp>
<para>[<token>SRModeID</token> = ]&dacharref_csharp;.<keyword>SRModeID</keyword></para>
<para>&dacharref_csharp;.<keyword>SRModeID</keyword> = "<token>SRModeID</token>"</para>
</csharp>
<vb>
<para>[<token>SRModeID</token> = ]&dacharref_vb;.<keyword>SRModeID</keyword></para>
<para>&dacharref_vb;.<keyword>SRModeID</keyword> = "<token>SRModeID</token>"</para>
</vb>
</syntax>
			<value name="SRModeID">
				A <typename>string</typename> value that identifies a speech recognition engine.
			</value>
			<remarks>
				<para>
					This property determines the speech recognition engine used by the character for speech input. The
					<self>SRModeID</self> for a speech recognition engine is a formatted string defined by the vendor that uniquely
					identifies the engine.
				</para>
			</remarks>
			<details>
				<h4 class="details">Details</h4>
				<para>
					If you specify the <self>SRModeID</self> for a speech engine that isn't installed, if the user has
					disabled speech recognition, or if the language of the specified speech engine doesn't match the
					character's <see cref="P:&dans;.Character.LanguageID" /> setting, Double Agent raises an error.
				</para>
				<para>
					If you query this property and haven't already (successfully) set the speech recognition engine, the
					server returns the <self>SRModeID</self> of the engine that SAPI returns based on the character's <see cref="P:&dans;.Character.LanguageID" />
					setting. If you haven't set the character's <see cref="P:&dans;.Character.LanguageID" />, then Double Agent
					returns the <self>SRModeID</self> of the engine that SAPI returns based on the user's default language setting.
					If there is no matching engine, Double Agent returns an empty string ("").
				</para>
				<para>
					Querying this property does not require that <see cref="P:&dans;.Settings.SREnabled" /> be set to
					<keyword>True</keyword>. However, if you query the property when speech input is disabled, Double Agent returns
					an empty string.
				</para>
				<para>
					When speech input is enabled, querying or setting this property will load the associated engine (if
					it is not already loaded), and start speech services. That is, the <glossary>Listening key</glossary>
					is available, and the <a class="see" href="&daltref;">&daltname;</a> is displayable. (The <glossary>Listening key</glossary>
					and <a class="see" href="&daltref;">&daltname;</a> are enabled only if they are also enabled in the <a class="see" href="&dapsref;#SpeechInput">&dapsname;</a>
					window.) However, if you query the property when speech is disabled, Double Agent does not start speech
					services.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='ThisClientOnly']" />
				<include file="&dainclude;" path="/doc/properties/note[@name='UsesSapi']" />
				<include file="&dainclude;" path="/doc/properties/note[@name='NoSoundSupport']" />
				<include file="&dainclude;" path="/doc/properties/note[@name='SlowSoundLoad']" />
			</details>
			<seealso cref="P:&dans;.Character.LanguageID" prefix="The" suffix="Property" />
			<seealso cref="M:&dans;.Character.Listen" prefix="The" suffix="Method" />
			<seealso cref="P:&dans;.Character.SREngine" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.SRStatus">
			<summary>
				<para>
					deprecated
				</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:&dans;.Character.ListeningStatus" /> property, but
					is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.States">
			<summary>
				<para>
					Returns the names of the character's <glossary>state</glossary> animations.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_States</keyword> (&amp;<token>States</token>)</para>
</cpp>
<csharp>
<para>[<token>States</token> = ]&dacharref_csharp;.<keyword>States</keyword></para>
</csharp>
<vb>
<para>[<token>States</token> = ]&dacharref_vb;.<keyword>States</keyword></para>
</vb>
</syntax>
			<value name="States">
				An array of <typename>string</typename> values that name all of the <glossary>state</glossary>
				animations the character can play.
			</value>
			<remarks>
				<para>
					For <filename>.ACF</filename> characters, the array contains all the states defined for the character, not
					just the ones that have been retrieved with the <see cref="M:&dans;.Character.Prepare" /> method.
				</para>
				<para>
					<em>Most</em> characters include the following states:
				</para>
				<list type="bullet">
					<item>"Gesturing" or "GesturingDown", "GesturingLeft", "GesturingRight" and "GesturingUp"</item>
					<item>"Hiding"</item>
					<item>"Hearing"</item>
					<item>"Idling" or "IdlingLevel1", "IdlingLevel2" and "IdlingLevel3"</item>
					<item>"Listening"</item>
					<item>"Moving" or "MovingDown", "MovingLeft", "MovingRight" and "MovingUp"</item>
					<item>"Showing"</item>
					<item>"Speaking"</item>
				</list>
			</remarks>
			<seealso cref="M:&dans;.Character.Play" suffix="Method" prefix="The" />
			<seealso cref="M:&dans;.Character.Prepare" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.Style">
			<summary>
				<para>
					Specifies a group of settings that affect the character's appearance.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_Style</keyword> (&amp;<token>Style</token>)</para>
<para><token>character</token>-&gt;<keyword>put_Style</keyword> (<token>Style</token>)</para>
</cpp>
<csharp>
<para>[<token>Style</token> = ]&dacharref_csharp;.<keyword>Style</keyword></para>
<para>&dacharref_csharp;.<keyword>Style</keyword> = <token>Style</token></para>
</csharp>
<vb>
<para>[<token>Style</token> = ]&dacharref_vb;.<keyword>Style</keyword></para>
<para>&dacharref_vb;.<keyword>Style</keyword> = <token>Style</token></para>
</vb>
</syntax>
			<value name="Style">
				A <typename>numeric</typename> bit-field value that has one or more of the following:<include path="/doc/members/member[@name='T:&dans;.CharacterStyleFlags']/syntax/list" />
			</value>
			<remarks>
				<para>
					Each style bit corresponds to a specific <see cref="T:&dans;.Character" suffix="Object" /> property. You
					can use this property to query or modify all of the style settings at once.
				</para>
				<para name="LoadStyle">
					The <see cref="F:&dans;.CharacterStyleFlags.Smoothed" /> and <see cref="F:&dans;.CharacterStyleFlags.SmoothEdges" />
					bits are read-only. They can only be set in the <see cref="T:&darootobj;" />.<see cref="P:&darootobj;.CharacterStyle" />
					property before the <see cref="T:&dans;.Character" /> is loaded.
				</para>
			</remarks>
			<seealso cref="P:&dans;.Character.AutoPopupMenu" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.Character.IconShown" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.Character.IdleEnabled" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.Character.Smoothed" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.Character.SmoothEdges" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.Character.SoundEffectsEnabled" suffix="Property" prefix="The" />
			<seealso cref="P:&darootobj;.CharacterStyle" suffix="Property" prefix="The" />
			<seealso cref="T:&dans;.CharacterStyleFlags" suffix="Enumeration" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.Top">
			<summary>
				<para>
					Specifies the top edge of the character's image.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_Top</keyword> (&amp;<token>Top</token>)</para>
<para><token>character</token>-&gt;<keyword>put_Top</keyword> (<token>Top</token>)</para>
</cpp>
<csharp>
<para>[<token>Top</token> = ]&dacharref_csharp;.<keyword>Top</keyword></para>
<para>&dacharref_csharp;.<keyword>Top</keyword> = <token>Top</token></para>
</csharp>
<vb>
<para>[<token>Top</token> = ]&dacharref_vb;.<keyword>Top</keyword></para>
<para>&dacharref_vb;.<keyword>Top</keyword> = <token>Top</token></para>
</vb>
</syntax>
			<value name="Top">
				A <typename>numeric</typename> value that specifies the top left edge of the character's image.
			</value>
			<remarks>
				<para>
					The <self>Top</self> property is always expressed in pixels, relative to screen origin (upper left).
				</para>
				<para>
					Even though the character appears in an irregularly shaped region window, the location of the character is
					based on the external dimensions of the rectangular animation frame used when the character was
					compiled with the Microsoft<sup>®</sup> Agent Character Editor.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='AllClients']" />
			</remarks>
			<seealso cref="P:&dans;.Character.Left" prefix="The" suffix="Property" />
			<seealso cref="M:&dans;.Character.MoveTo" prefix="The" suffix="Method" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.TTSEngine">
			<summary>
				<para>
					Returns the character's current or default <see cref="T:&dans;.TTSEngine" text="Text-To-Speech Engine" suffix="Object" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_TTSEngine</keyword> (<token>GetDefault</token>, &amp;<token>TTSEngine</token>)</para>
</cpp>
<csharp>
<para>[<token>TTSEngine</token> = ]&dacharref_csharp;.<keyword>get_TTSEngine</keyword> (<token>GetDefault</token>)</para>
</csharp>
<vbnet>
<para>[<token>TTSEngine</token> = ]&dacharref_vb;.<keyword>TTSEngine</keyword>[ [<token>GetDefault</token>]]</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>TTSEngine</token> = ]&dacharref_vb;.<keyword>TTSEngine</keyword>[ [<token>GetDefault</token>]]</para>
</vb>
</syntax>
			<param name="GetDefault">
				An optional <typename>boolean</typename> value that indicates if you want the
				character's current or default text-to-speech engine. The default value is <keyword>False</keyword>.
			</param>
			<value name="TTSEngine">
				A <see class="typename" cref="T:&dans;.TTSEngine" suffix="Object" /> that corresponds
				to the character's current or default <see class="typename" cref="P:&dans;.Character.TTSModeID" />.
			</value>
			<remarks>
				<para>
					If you change the character's <see cref="P:&dans;.Character.TTSModeID" /> you must re-access this property
					to get the correct current <see cref="T:&dans;.TTSEngine" suffix="Object" />.
				</para>
			</remarks>
			<seealso cref="T:&dans;.TTSEngine" suffix="Object" prefix="The" />
			<seealso cref="P:&dans;.Character.TTSModeID" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.TTSModeID">
			<summary>
				<para>
					Specifies the text-to-speech engine used for the character.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_TTSModeID</keyword> (&amp;<token>TTSModeID</token>)</para>
<para><token>character</token>-&gt;<keyword>put_TTSModeID</keyword> (<token>TTSModeID</token>)</para>
</cpp>
<csharp>
<para>[<token>TTSModeID</token> = ]&dacharref_csharp;.<keyword>TTSModeID</keyword></para>
<para>&dacharref_csharp;.<keyword>TTSModeID</keyword> = "<token>TTSModeID</token>"</para>
</csharp>
<vb>
<para>[<token>TTSModeID</token> = ]&dacharref_vb;.<keyword>TTSModeID</keyword></para>
<para>&dacharref_vb;.<keyword>TTSModeID</keyword> = "<token>TTSModeID</token>"</para>
</vb>
</syntax>
			<value name="TTSModeID">
				A <typename>string</typename> value that uniquely identifies a text-to-speech engine
				and synthesis mode.
			</value>
			<remarks>
				<para>
					This property determines the TTS (text-to-speech) engine for a character's spoken output. The <self>TTSModeID</self>
					for a TTS engine is a formatted string defined by the vendor that uniquely identifies the engine and
					it's synthesis mode.
				</para>
			</remarks>
			<details>
				<h4 class="details">Details</h4>
				<para>
					Setting this property overrides Double Agent's attempt to load an engine based on the character's compiled
					TTS setting and the character's current <see cref="P:&dans;.Character.LanguageID" /> setting. However, if
					you specify a mode ID for an engine that isn't installed or if the user has disabled speech output
					in the <a class="see" href="&dapsref;#Output">&dapsname;</a> window, Double Agent raises an error.
				</para>
				<para>
					If you do not (or have not successfully) set the character's <self>TTSModeID</self>, Double Agent checks
					to see if the character's compiled TTS mode setting matches the character's <see cref="P:&dans;.Character.LanguageID" />
					setting, and if the associated TTS engine is installed. If so, the character's <self>TTSModeID</self>
					is initialized accordingly. If not, Double Agent looks for a compatible SAPI speech engine that matches
					the character's <see cref="P:&dans;.Character.LanguageID" /> and gender. If you have not set the character's <see cref="P:&dans;.Character.LanguageID" />,
					the current user language is used. If no matching engine can be found, this property returns an
					empty string. Similarly, if you query this property when the user has disabled speech output in
					the <a class="see" href="&dapsref;#Output">&dapsname;</a> window, the value will be an empty string.
				</para>
				<para>
					Querying or setting this property will load the associated engine (if it is not already loaded). However,
					if the engine specified in the character's compiled TTS setting is installed and matches the
					character's <see cref="P:&dans;.Character.LanguageID" /> setting, the engine will be loaded when the character
					loads.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='ThisClientOnly']" />
				<include file="&dainclude;" path="/doc/properties/note[@name='UsesSapi']" />
				<include file="&dainclude;" path="/doc/properties/note[@name='NoSoundSupport']" />
				<include file="&dainclude;" path="/doc/properties/note[@name='SlowSoundLoad']" />
			</details>
			<seealso cref="P:&dans;.Character.LanguageID" prefix="The" suffix="Property" />
			<seealso cref="M:&dans;.Character.Speak" prefix="The" suffix="Method" />
			<seealso cref="P:&dans;.Character.TTSEngine" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.UniqueID">
			<summary>
				<para>
					Returns the unique identifier given to the character when it was defined.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_UniqueID</keyword> (&amp;<token>CharGUID</token>)</para>
</cpp>
<csharp>
<para>[<token>CharGUID</token> = ]&dacharref_csharp;.<keyword>UniqueID</keyword></para>
</csharp>
<vb>
<para>[<token>CharGUID</token> = ]&dacharref_vb;.<keyword>UniqueID</keyword></para>
</vb>
</syntax>
			<value name="CharGUID">
				A <typename>string</typename> value containing the the character's unique (GUID)
				identifier.
			</value>
			<remarks>
				<para>
					This property returns a string representing the internal identifier that Double Agent uses to uniquely identify
					the character. A character identifier is set when it is compiled with the Microsoft<sup>®</sup> Agent Character
					Editor.
				</para>
				<note>
					This is the value that Double Agent uses to determine if a character has already been loaded. The
					character's file name or location <strong>does not</strong> uniquely identify the character.
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.Version">
			<summary>
				<para>
					Returns the character's version.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_Version</keyword> (&amp;<token>Version</token>)</para>
</cpp>
<csharp>
<para>[<token>Version</token> = ]&dacharref_csharp;.<keyword>Version</keyword></para>
</csharp>
<vb>
<para>[<token>Version</token> = ]&dacharref_vb;.<keyword>Version</keyword></para>
</vb>
</syntax>
			<value name="Version">
				A <typename>string</typename> that identifies the Microsoft<sup>®</sup> Agent version
				for which the character was built.
			</value>
			<remarks>
				<para>
					The <self>Version</self> property returns a string that corresponds to the version of the standard animation
					set definition for which the character was compiled. The character's version number is automatically
					set when you build it with the Microsoft<sup>®</sup> Agent Character Editor.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.VisibilityCause">
			<summary>
				<para>
					Returns a <see cref="T:&dans;.VisibilityCauseType" suffix="Enumeration" /> value that specifies what
					caused the character's visible state to change.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_VisibilityCause</keyword> (&amp;<token>VisibilityCause</token>)</para>
</cpp>
<csharp>
<para>[<token>VisibilityCause</token> = ]&dacharref_csharp;.<keyword>VisibilityCause</keyword></para>
</csharp>
<vb>
<para>[<token>VisibilityCause</token> = ]&dacharref_vb;.<keyword>VisibilityCause</keyword></para>
</vb>
</syntax>
			<value name="VisibilityCause">
				A <see class="typename" cref="T:&dans;.VisibilityCauseType" suffix="Enumeration" />
				value: <include path="/doc/members/member[@name='T:&dans;.VisibilityCauseType']/syntax/list" />
			</value>
			<remarks>
				<para>
					You can use this property to determine what caused the character to change visibility when more than
					one application is sharing (has loaded) the same character. These values are the same as those received
					by the <see cref="E:&darootobj;.Show" /> and <see cref="E:&darootobj;.Hide" /> events.
				</para>
			</remarks>
			<seealso cref="P:&dans;.Character.Visible" suffix="Property" prefix="The" />
			<seealso cref="E:&darootobj;.Show" prefix="The" suffix="Event" />
			<seealso cref="E:&darootobj;.Hide" prefix="The" suffix="Event" />
			<seealso cref="M:&dans;.Character.Show" prefix="The" suffix="Method" />
			<seealso cref="M:&dans;.Character.Hide" prefix="The" suffix="Method" />
			<seealso cref="T:&dans;.VisibilityCauseType" prefix="The" suffix="Enumeration" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.Visible">
			<summary>
				<para>
					Returns a boolean indicating whether or not the character is visible.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_Visible</keyword> (&amp;<token>Visible</token>)</para>
</cpp>
<csharp>
<para>[<token>Visible</token> = ]&dacharref_csharp;.<keyword>Visible</keyword></para>
</csharp>
<vb>
<para>[<token>Visible</token> = ]&dacharref_vb;.<keyword>Visible</keyword></para>
</vb>
</syntax>
			<value name="Visible">
				<keyword>True</keyword> if the character is displayed, <keyword>False</keyword>
				if it's hidden
			</value>
			<remarks>
				<para>
					This property indicates whether the character's animations are being displayed. It does not necessarily mean
					that there is an image on the screen. For example, this property returns <keyword>True</keyword> even when
					the character is positioned off the visible display area or when the current character animation contains
					no images.
				</para>
				<para>
					This property is read-only. To change a character's visibility, use the <see cref="M:&dans;.Character.Show" />
					or <see cref="M:&dans;.Character.Hide" /> method.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='AllClients']" />
			</remarks>
			<seealso cref="M:&dans;.Character.Show" prefix="The" suffix="Method" />
			<seealso cref="M:&dans;.Character.Hide" prefix="The" suffix="Method" />
			<seealso cref="P:&dans;.Character.VisibilityCause" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.Width">
			<summary>
				<para>
					Specifies the width of the character's image.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_Width</keyword> (&amp;<token>Width</token>)</para>
<para><token>character</token>-&gt;<keyword>put_Width</keyword> (<token>Width</token>)</para>
</cpp>
<csharp>
<para>[<token>Width</token> = ]&dacharref_csharp;.<keyword>Width</keyword></para>
<para>&dacharref_csharp;.<keyword>Width</keyword> = <token>Width</token></para>
</csharp>
<vb>
<para>[<token>Width</token> = ]&dacharref_vb;.<keyword>Width</keyword></para>
<para>&dacharref_vb;.<keyword>Width</keyword> = <token>Width</token></para>
</vb>
</syntax>
			<value name="Width">
				A <typename>numeric</typename> value that specifies the width of the character's image.
			</value>
			<remarks>
				<para>
					The <self>Width</self> property is always expressed in pixels.
				</para>
				<para>
					Even though the character appears in an irregularly shaped region window, the dimensions of the character
					are based on the external dimensions of the rectangular animation frame used when the character
					was compiled with the Microsoft<sup>®</sup> Agent Character Editor.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='AllClients']" />
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Character.NewFormattedText">
			<summary>
				<para>
					Returns an initialized, empty <see cref="T:&dans;.FormattedText" suffix="Object" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>NewFormattedText</keyword> (&amp;<token>FormattedText</token>)</para>
</cpp>
<csharp>
<para><token>FormattedText</token> = &dacharref_csharp;.<keyword>NewFormattedText</keyword> ()</para>
</csharp>
<vbnet>
<para><token>FormattedText</token> = &dacharref_vb;.<keyword>NewFormattedText</keyword> ()</para>
</vbnet>
<vb>
<para><keyword>Set</keyword> <token>FormattedText</token> = &dacharref_vb;.<keyword>NewFormattedText</keyword> ()</para>
</vb>
</syntax>
			<returns name="FormattedText">
				A <see class="typename" cref="T:&dans;.FormattedText" suffix="Object" />.
			</returns>
			<remarks>
				<para>
					The returned <see cref="T:&dans;.FormattedText" suffix="Object" /> is initialized to handle speech tags
					consistent with the <see cref="T:&dans;.Character" text="Character's" /> current Text-to-Speech engine.
				</para>
				<para>
					Once you have completed the <see cref="T:&dans;.FormattedText" suffix="Object" />, you can pass it
					to either the <see cref="M:&dans;.Character.SpeakFormatted" /> or <see cref="M:&dans;.Character.ThinkFormatted" />
					method. If you plan to use the same text more than once, keep a reference to the <see cref="T:&dans;.FormattedText" suffix="Object" />
					and reuse it. This can improve the performance of your application.
				</para>
			</remarks>
			<seealso cref="T:&dans;.FormattedText" prefix="The" suffix="Object" />
			<seealso cref="M:&dans;.Character.SpeakFormatted" prefix="The" suffix="Method" />
			<seealso cref="M:&dans;.Character.ThinkFormatted" prefix="The" suffix="Method" />
			<seealso cref="P:&dans;.Character.TTSModeID" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Character.TTSEngine" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Character.SpeakFormatted">
			<summary>
				<para>
					Speaks the specified text.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>SpeakFormatted</keyword> (<token>FormattedText</token>, &amp;<token>Request</token>)</para>
</cpp>
<csharp>
<para>[<token>Request</token> = ]&dacharref_csharp;.<keyword>SpeakFormatted</keyword> (<token>FormattedText</token>)</para>
</csharp>
<vbnet>
<para>[<token>Request</token> = ]&dacharref_vb;.<keyword>SpeakFormatted</keyword> (<token>FormattedText</token>)</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>Request</token> = ]&dacharref_vb;.<keyword>SpeakFormatted</keyword> <token>FormattedText</token></para>
</vb>
</syntax>
			<param name="FormattedText">
				A <see class="typename" cref="T:&dans;.FormattedText" suffix="Object" />
				object containing the text to be spoken.
			</param>
			<returns name="Request">
				A <see class="typename" cref="T:&dans;.Request" suffix="Object" /> your application can
				use to track the method's status.
			</returns>
			<remarks>
				<para>
					This method is the same as the <see cref="M:&dans;.Character.Speak" /> method, except that the input
					text is already parsed and formatted, and using this method triggers the <see cref="E:&darootobj;.SpeechStart" />,
					<see cref="E:&darootobj;.SpeechEnd" />, and <see cref="E:&darootobj;.SpeechWord" /> events.
				</para>
				<para>
					Calling the <see cref="M:&dans;.Character.Speak" /> method with a specific text string is equivalent to:

					<list type="number">
						<item>
							calling <see cref="M:&dans;.Character.NewFormattedText" /> to get a <see cref="T:&dans;.FormattedText" />
							object;
						</item>
						<item>
							calling the <see cref="T:&dans;.FormattedText" /> object's <see cref="M:&dans;.FormattedText.Parse" />
							method with the same text string;
						</item>
						<item>
							calling <self>SpeakFormatted</self> with the <see cref="T:&dans;.FormattedText" /> object.
						</item>
					</list>

				</para>
			</remarks>
			<seealso cref="T:&dans;.FormattedText" prefix="The" suffix="Object" />
			<seealso cref="E:&darootobj;.SpeechStart" suffix="Event" prefix="The" />
			<seealso cref="E:&darootobj;.SpeechEnd" suffix="Event" prefix="The" />
			<seealso cref="E:&darootobj;.SpeechWord" suffix="Event" prefix="The" />
			<seealso cref="M:&dans;.Character.Speak" prefix="The" suffix="Method" />
			<seealso cref="M:&dans;.Character.ThinkFormatted" prefix="The" suffix="Method" />
			<seealso cref="M:&dans;.Character.NewFormattedText" prefix="The" suffix="Method" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Character.ThinkFormatted">
			<summary>
				<para>
					Displays the specified text in the character's <glossary>thought</glossary> <a class="see" href="&dawbref;">&dawbname;</a>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>ThinkFormatted</keyword> (<token>FormattedText</token>, &amp;<token>Request</token>)</para>
</cpp>
<csharp>
<para>[<token>Request</token> = ]&dacharref_csharp;.<keyword>ThinkFormatted</keyword> (<token>FormattedText</token>)</para>
</csharp>
<vbnet>
<para>[<token>Request</token> = ]&dacharref_vb;.<keyword>ThinkFormatted</keyword> (<token>FormattedText</token>)</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>Request</token> = ]&dacharref_vb;.<keyword>ThinkFormatted</keyword> <token>FormattedText</token></para>
</vb>
</syntax>
			<param name="FormattedText">
				A <see class="typename" cref="T:&dans;.FormattedText" suffix="Object" />
				object containing the text to be displayed.
			</param>
			<returns name="Request">
				A <see class="typename" cref="T:&dans;.Request" suffix="Object" /> your application can
				use to track the method's status.
			</returns>
			<remarks>
				<para>
					Calling the <see cref="M:&dans;.Character.Think" /> method with a specific text string is equivalent to:

					<list type="number">
						<item>
							calling <see cref="M:&dans;.Character.NewFormattedText" /> to get a <see cref="T:&dans;.FormattedText" />
							object;
						</item>
						<item>
							calling the <see cref="T:&dans;.FormattedText" suffix="" /> object's <see cref="M:&dans;.FormattedText.Parse" />
							method with the same text string;
						</item>
						<item>
							calling <self>ThinkFormatted</self> with the <see cref="T:&dans;.FormattedText" /> object.
						</item>
					</list>

				</para>
				<note>
					This methods <em>does not</em> trigger the <keyword>SpeechStart</keyword>, <keyword>SpeechEnd</keyword>,
					and <keyword>SpeechWord</keyword> events.
				</note>
			</remarks>
			<seealso cref="T:&dans;.FormattedText" prefix="The" suffix="Object" />
			<seealso cref="M:&dans;.Character.Think" prefix="The" suffix="Method" />
			<seealso cref="M:&dans;.Character.SpeakFormatted" prefix="The" suffix="Method" />
			<seealso cref="M:&dans;.Character.NewFormattedText" prefix="The" suffix="Method" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.SuspendPause">
			<summary>
				<para>
					Specifies if all requests are paused when the client is not in the foreground.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_SuspendPause</keyword> (&amp;<token>SuspendPause</token>)</para>
<para><token>character</token>-&gt;<keyword>put_SuspendPause</keyword> (<token>SuspendPause</token>)</para>
</cpp>
<csharp>
<para>[<token>SuspendPause</token> = ]&dacharref_csharp;.<keyword>SuspendPause</keyword></para>
<para>&dacharref_csharp;.<keyword>SuspendPause</keyword> = <token>SuspendPause</token></para>
</csharp>
<vb>
<para>[<token>SuspendPause</token> = ]&dacharref_vb;.<keyword>SuspendPause</keyword></para>
<para>&dacharref_vb;.<keyword>SuspendPause</keyword> = <token>SuspendPause</token></para>
</vb>
</syntax>
			<value name="SuspendPause">
				A <typename>boolean</typename> value specifying if all requests are paused when
				the client is not in the foreground.
			</value>
			<remarks>
				<para>
					When <self>SuspendPause</self> is <keyword>True</keyword> and the user switches away from your application:

					<list type="bullet" class="close">
						<item>the character's request queue is paused;</item>
						<item>the current animation (if any) is paused;</item>
						<item>the current speech output (if any) is paused;</item>
						<item>
							the current <a class="see" href="&dawbref;">&dawbname;</a> output (if any) is paused;
						</item>
						<item>
							<glossary>Listening mode</glossary> is paused (if it's active).
						</item>
					</list>
					<list type="bullet" class="close">
						<item>
							Immediate prepares are <em>not</em> paused.
						</item>
					</list>
					When the user switches back to your application, everything that was paused is resumed.
				</para>
				<note>
					The <self>SuspendPause</self> and <see cref="P:&dans;.Character.SuspendStop" /> properties cannot
					both be <keyword>True</keyword>.
				</note>
				<include file="&dainclude;" path="/doc/properties/note[@name='StandAloneOnly']" />
			</remarks>
			<seealso cref="P:&dans;.Character.SuspendStop" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Character.SuspendHide" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Character.Style" suffix="Property" prefix="The" />
			<seealso cref="F:&dans;.CharacterStyleFlags.SuspendPause" suffix="Member" prefix="The" />
			<seealso cref="P:&dans;.Character.ActiveState" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.SuspendStop">
			<summary>
				<para>
					Specifies if all requests are stopped when the client is not in the foreground.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_SuspendStop</keyword> (&amp;<token>SuspendStop</token>)</para>
<para><token>character</token>-&gt;<keyword>put_SuspendStop</keyword> (<token>SuspendStop</token>)</para>
</cpp>
<csharp>
<para>[<token>SuspendStop</token> = ]&dacharref_csharp;.<keyword>SuspendStop</keyword></para>
<para>&dacharref_csharp;.<keyword>SuspendStop</keyword> = <token>SuspendStop</token></para>
</csharp>
<vb>
<para>[<token>SuspendStop</token> = ]&dacharref_vb;.<keyword>SuspendStop</keyword></para>
<para>&dacharref_vb;.<keyword>SuspendStop</keyword> = <token>SuspendStop</token></para>
</vb>
</syntax>
			<value name="SuspendStop">
				A <typename>boolean</typename> value specifying if all requests are stopped when
				the client is not in the foreground.
			</value>
			<remarks>
				<para>
					When <self>SuspendStop</self> is <keyword>True</keyword> and the user switches away from your application:
					<list type="bullet" class="close">
						<item>the character's request queue is stopped, except for queued prepares;</item>
						<item>the current animation (if any) is stopped;</item>
						<item>the current speech output (if any) is stopped;</item>
						<item>
							the current <a class="see" href="&dawbref;">&dawbname;</a> output (if any) is stopped;
						</item>
						<item>
							<glossary>Listening mode</glossary> is stopped (if it's active).
						</item>
					</list>
					<list type="bullet" class="close">
						<item>
							Queued and immediate prepares are <em>not</em> stopped.
						</item>
					</list>

				</para>
				<note>
					The <self>SuspendStop</self> and <see cref="P:&dans;.Character.SuspendPause" /> properties cannot
					both be <keyword>True</keyword>.
				</note>
				<include file="&dainclude;" path="/doc/properties/note[@name='StandAloneOnly']" />
			</remarks>
			<seealso cref="P:&dans;.Character.SuspendPause" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Character.SuspendHide" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Character.Style" suffix="Property" prefix="The" />
			<seealso cref="F:&dans;.CharacterStyleFlags.SuspendStop" suffix="Member" prefix="The" />
			<seealso cref="P:&dans;.Character.ActiveState" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Character.SuspendHide">
			<summary>
				<para>
					Specifies if all floating windows are hidden when the client is not in the foreground.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>character</token>-&gt;<keyword>get_SuspendHide</keyword> (&amp;<token>SuspendHide</token>)</para>
<para><token>character</token>-&gt;<keyword>put_SuspendHide</keyword> (<token>SuspendHide</token>)</para>
</cpp>
<csharp>
<para>[<token>SuspendHide</token> = ]&dacharref_csharp;.<keyword>SuspendHide</keyword></para>
<para>&dacharref_csharp;.<keyword>SuspendHide</keyword> = <token>SuspendHide</token></para>
</csharp>
<vb>
<para>[<token>SuspendHide</token> = ]&dacharref_vb;.<keyword>SuspendHide</keyword></para>
<para>&dacharref_vb;.<keyword>SuspendHide</keyword> = <token>SuspendHide</token></para>
</vb>
</syntax>
			<value name="SuspendHide">
				A <typename>boolean</typename> value specifying if all floating windows are
				hidden when the client is not in the foreground.
			</value>
			<remarks>
				<para>
					When <self>SuspendHide</self> is <keyword>True</keyword> and the user switches away from your application:
					<list type="bullet" class="close">
						<item>
							the character window is hidden, if it's visible and not <a class="see" href="..\Programming\Ctl_Programming_Modes.htm#contained">contained</a>;
						</item>
						<item>
							the <a class="see" href="&dawbref;">&dawbname;</a> is hidden, if it's visible;
						</item>
						<item>
							the <a class="see" href="&daltref;">&daltname;</a> is hidden, if it's visible;
						</item>
						<item>
							the <a class="see" href="&davcref;">&davcname;</a> window is hidden, if it's visible.
						</item>
					</list>
					When the user switches back to your application, everything that was hidden is shown again.
				</para>
				<note>
					For <self>SuspendHide</self> to be <keyword>True</keyword>, either the <see cref="P:&dans;.Character.SuspendPause" />
					or <see cref="P:&dans;.Character.SuspendStop" /> property must also be <keyword>True</keyword>.
				</note>
				<include file="&dainclude;" path="/doc/properties/note[@name='StandAloneOnly']" />
			</remarks>
			<seealso cref="P:&dans;.Character.SuspendPause" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Character.SuspendStop" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Character.Style" suffix="Property" prefix="The" />
			<seealso cref="F:&dans;.CharacterStyleFlags.SuspendHide" suffix="Member" prefix="The" />
			<seealso cref="P:&dans;.Character.ActiveState" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:&dans;.Character">
			<summary>
				<para>
					The <self>Character Object</self> provides the methods and properties your application will use to
					access the bulk of Double Agent's features.
				</para>
			</summary>
			<syntax>
				<list>
					<item>
						<term>
							<h4>
								<bookmark name="Methods"></bookmark>Methods
							</h4>
						</term>
						<description>
							<list type="&typelisttype;" class="syntax">
								<item>
									<term width="&typelistwidth;">
										<see cref="M:&dans;.Character.Activate" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Character.Activate']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&dans;.Character.FindSREngines" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Character.FindSREngines']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&dans;.Character.FindTTSEngines" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Character.FindTTSEngines']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&dans;.Character.GenerateIcon" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Character.GenerateIcon']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&dans;.Character.GestureAt" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Character.GestureAt']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&dans;.Character.Prepare" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Character.Prepare']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&dans;.Character.Hide" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Character.Hide']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&dans;.Character.Interrupt" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Character.Interrupt']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&dans;.Character.Listen" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Character.Listen']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&dans;.Character.MoveTo" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Character.MoveTo']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&dans;.Character.NewFormattedText" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Character.NewFormattedText']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&dans;.Character.Play" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Character.Play']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&dans;.Character.Show" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Character.Show']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&dans;.Character.ShowPopupMenu" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Character.ShowPopupMenu']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&dans;.Character.Speak" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Character.Speak']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&dans;.Character.SpeakFormatted" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Character.SpeakFormatted']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&dans;.Character.Stop" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Character.Stop']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&dans;.Character.StopAll" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Character.StopAll']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&dans;.Character.Think" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Character.Think']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&dans;.Character.ThinkFormatted" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Character.ThinkFormatted']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&dans;.Character.Wait" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Character.Wait']/summary/para[1]" />
									</description>
								</item>
							</list>
						</description>
					</item>
					<item>
						<term>
							<h4>
								<bookmark name="Properties"></bookmark>Properties
							</h4>
						</term>
						<description>
							<list type="&typelisttype;" class="syntax">
								<item>
									<term width="&typelistwidth;">
										<see cref="P:&dans;.Character.ActiveState" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.ActiveState']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.Animations" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.Animations']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.AutoPopupMenu" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.AutoPopupMenu']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.Balloon" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.Balloon']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.CharacterID" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.CharacterID']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.Commands" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.Commands']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.Connected" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.Connected']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.Description" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.Description']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.ExtraData" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.ExtraData']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.FileName" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.FileName']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.FilePath" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.FilePath']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.HasIcon" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.HasIcon']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.HasOtherClients" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.HasOtherClients']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.Height" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.Height']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.IconIdentity" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.IconIdentity']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.IconShown" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.IconShown']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.IconTip" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.IconTip']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.IconVisible" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.IconVisible']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.IdleEnabled" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.IdleEnabled']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.IdleState" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.IdleState']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.LanguageID" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.LanguageID']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.Left" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.Left']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.ListeningStatus" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.ListeningStatus']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.MoveCause" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.MoveCause']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.Name" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.Name']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.OriginalHeight" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.OriginalHeight']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.OriginalWidth" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.OriginalWidth']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.Pitch" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.Pitch']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.Smoothed" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.Smoothed']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.SmoothEdges" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.SmoothEdges']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.SoundEffectsEnabled" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.SoundEffectsEnabled']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.Speed" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.Speed']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.SREngine" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.SREngine']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.SRModeID" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.SRModeID']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.States" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.States']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.Style" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.Style']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.SuspendHide" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.SuspendHide']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.SuspendPause" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.SuspendPause']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.SuspendStop" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.SuspendStop']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.Top" />,
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.Top']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.TTSEngine" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.TTSEngine']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.TTSModeID" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.TTSModeID']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.UniqueID" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.UniqueID']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.Version" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.Version']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.VisibilityCause" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.VisibilityCause']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.Visible" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.Visible']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Character.Width" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Character.Width']/summary/para[1]" />
									</description>
								</item>
							</list>
							<note>
								The <see cref="P:&dans;.Character.Height" />, <see cref="P:&dans;.Character.Left" />, <see cref="P:&dans;.Character.Top" />,
								and <see cref="P:&dans;.Character.Width" /> properties refer to the position and size of the <em>Character</em>,
								not the location of the Double Agent control.
							</note>
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					Because the server loads an <glossary>HTTP</glossary> character asynchronously, ensure that the character
					has been loaded before querying its properties, for example, using the <see cref="E:&darootobj;.RequestComplete" />
					event. Otherwise, the properties may return incorrect values.
				</para>
			</remarks>
			<details>
				<h4 class="remarks">Referencing the Character Object</h4>
				<list type="bullet">
					<item>
						<term>
							To use a method or property, reference the character in the <see cref="T:&dans;.Characters" suffix="Collection" />.
							In VBScript and Visual Basic, you do this by specifying the unique identifier you assigned when you
							loaded the character:
						</term>
						<description>
							<code xml:space="preserve"><keyword>Sub</keyword> <token>form</token>_<keyword>Load</keyword>
    'Load the genie character into the Characters collection
    &darootref;.<keyword>Characters</keyword>.<keyword>Load</keyword> "Genie", "Genie.acs"

    'Display the character
    &darootref;.<keyword>Characters</keyword>("Genie").<keyword>Show</keyword>
    &darootref;.<keyword>Characters</keyword>("Genie").<keyword>Play</keyword> "Greet"
    &darootref;.<keyword>Characters</keyword>("Genie").<keyword>Speak</keyword> "Hello."
<keyword>End Sub</keyword></code>
						</description>
					</item>
					<item>
						<term>
							To simplify the syntax of your code, you can define an object variable and set it to reference a<self>
								Character
								Object
							</self> in the <see cref="T:&dans;.Characters" suffix="Collection" />. Then you can use your variable to
							reference methods or properties of the character. The following example demonstrates how you can
							do this using the Visual Basic <keyword>Set</keyword> statement:
						</term>
						<description>
							<code xml:space="preserve">'Define a global object variable
<keyword>Dim</keyword> Genie <keyword>as</keyword> <keyword>Object</keyword>

<keyword>Sub</keyword> <token>form</token>_<keyword>Load</keyword>
    'Load the genie character into the Characters collection
    &darootref;.<keyword>Characters</keyword>.<keyword>Load</keyword> "Genie", "Genie.acs"

    'Create a reference to the character
    <keyword>Set</keyword> Genie = &darootref;.<keyword>Characters</keyword>("Genie")

    'Display the character
    Genie.<keyword>Show</keyword>

    'Make the character say Hello
    Genie.<keyword>Speak</keyword> "Hello."
<keyword>End Sub</keyword></code>
						</description>
					</item>
					<item>
						<term>
							In Visual Basic, you can also create your reference by declaring your variable as a<self>
								Character
								Object
							</self>:
						</term>
						<description>
							<code xml:space="preserve"><keyword>Dim</keyword> Genie <keyword>as</keyword> <keyword>DaControl</keyword>.<keyword>DaCtlCharacter</keyword>

<keyword>Sub</keyword> <token>form</token>_<keyword>Load</keyword>
    'Load the genie character into the Characters collection
    &darootref;.<keyword>Characters</keyword>.<keyword>Load</keyword> "Genie", "Genie.acs"

    'Create a reference to the character
    <keyword>Set</keyword> Genie = &darootref;.<keyword>Characters</keyword>("Genie")

    'Display the character
    Genie.<keyword>Show</keyword>
<keyword>End Sub</keyword></code>
							<para>
								Declaring an object of type <keyword>DaCtlCharacter</keyword> enables early binding on the object, which
								allows immediate syntax checking and results in better performance.
							</para>
						</description>
					</item>
					<item>
						<term>
							In VBScript, you cannot declare a reference as a particular type. However, you can simply declare
							the variable reference:
						</term>
						<description>
							<code xml:space="preserve">&lt;SCRIPT LANGUAGE = "VBScript"&gt;
&lt;!--
<keyword>Dim</keyword> Genie

<keyword>Sub</keyword> <token>window</token>_<keyword>OnLoad</keyword>
    'Load the character
    &darootref;.<keyword>Characters</keyword>.<keyword>Load</keyword> "Genie", "http://agent.microsoft.com/characters/v2/genie/genie.acf"

    'Create an object reference to the character in the collection
    <keyword>Set</keyword> Genie= &darootref;.<keyword>Characters</keyword> ("Genie")

    'Prepare the Showing state animation
    Genie.<keyword>Prepare</keyword> "state", "Showing"

    'Display the character
    Genie.<keyword>Show</keyword>
<keyword>End Sub</keyword>
--&gt;
&lt;/SCRIPT&gt;</code>
						</description>
					</item>
					<item>
						<term>
							Some programming languages do not support collections. However, you can access a <self>Character Object</self>'s
							methods with the <see cref="M:&dans;.Characters.Character" /> method:
						</term>
						<description>
							<code xml:space="preserve">
&darootref;.<keyword>Characters</keyword>.<keyword>Character</keyword>("<token>CharacterID</token>").<token>method</token></code>
						</description>
					</item>
					<item>
						<term>
							In addition, you can create a reference to the <self>Character Object</self> to make your script
							code easier to follow:
						</term>
						<description>
							<code xml:space="preserve">&lt;SCRIPT LANGUAGE="JScript" FOR="window" EVENT="onLoad()"&gt;
&lt;!--
//Load the character's data
&darootref;.<keyword>Characters</keyword>.<keyword>Load</keyword> ("Genie", "http://agent.microsoft.com/characters/v2/genie/genie.acf");

//Create a reference to this object
Genie = &darootref;.<keyword>Characters</keyword>.<keyword>Character</keyword>("Genie");

//Prepare the Showing state animation
Genie.<keyword>Prepare</keyword>("state", "Showing");

//Display the character
Genie.<keyword>Show</keyword>();
--&gt;
&lt;/SCRIPT&gt;</code>
						</description>
					</item>
				</list>
			</details>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="M:&dans;.Commands.Add">
			<summary>
				<para>
					Adds a <see cref="T:&dans;.Command" suffix="Object" /> to the <see cref="T:&dans;.Commands" suffix="Collection" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>commands</token>-&gt;<keyword>Add</keyword> (<token>Name</token>, <token>Caption</token>, <token>VoiceGrammar</token>, <token>Enabled</token>, <token>Visible</token>, &amp;<token>Command</token>)</para>
</cpp>
<csharp>
<para>[<token>Command</token> = ]&dacharref_csharp;.<keyword>Commands</keyword><keyword>.Add</keyword> ("<token>Name</token>", <token>Caption</token>, <token>VoiceGrammar</token>, <token>Enabled</token>, <token>Visible</token>)</para>
</csharp>
<vbnet>
<para>[<token>Command</token> = ]&dacharref_vb;.<keyword>Commands</keyword><keyword>.Add</keyword> ("<token>Name</token>", <token>Caption</token>, <token>VoiceGrammar</token>, <token>Enabled</token>, <token>Visible</token>)</para>
</vbnet>
<vb>
<para>[<token>Command</token> = ]&dacharref_vb;.<keyword>Commands</keyword><keyword>.Add</keyword> "<token>Name</token>", <token>Caption</token>, <token>VoiceGrammar</token>, <token>Enabled</token>, <token>Visible</token></para>
</vb>
</syntax>
			<param name="Name">
				A <typename>string</typename> value that uniquely identifies the command.
			</param>
			<param name="Caption">
				A <typename>string</typename> value specifying the name that will appear in the
				character's <a class="see" href="&dacmref;">&dacmname;</a> and in the <a class="see" href="&davcref;">&davcname;</a>
				window when the client application is <glossary>input-active</glossary>. For more information, see the <see cref="T:&dans;.Command" suffix="Object's" /> <see cref="P:&dans;.Command.Caption" />
				property.
			</param>
			<param name="VoiceGrammar">
				A <typename>string</typename> value specifying the words or phrase used by
				the speech engine for recognizing this command. For more information on formatting alternatives for
				the string, see the <see cref="T:&dans;.Command" suffix="Object's" /> <see cref="P:&dans;.Command.VoiceGrammar" />
				property.
			</param>
			<param name="Enabled">
				A <typename>boolean</typename> value indicating whether the command is enabled. The
				default value is <keyword>True</keyword>. For more information, see the <see cref="T:&dans;.Command" suffix="Object's" /> <see cref="P:&dans;.Command.Enabled" />
				property.
			</param>
			<param name="Visible">
				A <typename>boolean</typename> value indicating whether the command is visible in
				the character's <a class="see" href="&dacmref;">&dacmname;</a> when the client application is <glossary>input-active</glossary>.
				The default value is <keyword>True</keyword>. For more information, see the <see cref="T:&dans;.Command" suffix="Object's" />
				<see cref="P:&dans;.Command.Visible" /> property.
			</param>
			<returns name="Command">
				The <see class="typename" cref="T:&dans;.Command" suffix="Object" /> added, if
				successful.
			</returns>
			<remarks>
				<para>
					The value of a <see cref="T:&dans;.Command" suffix="Object's" /> <see cref="P:&dans;.Command.Name" />
					property must be unique within its <see cref="T:&dans;.Commands" suffix="Collection" />. You must remove a
					<see cref="T:&dans;.Command" /> before you can create a new <see cref="T:&dans;.Command" /> with the same
					<see cref="P:&dans;.Command.Name" /> property. Attempting to create a <see cref="T:&dans;.Command" />
					with a <see cref="P:&dans;.Command.Name" /> property that already exists raises an error.
				</para>
				<para>
					This method returns a <see cref="T:&dans;.Command" suffix="Object" />. This allows you to declare an
					object and assign a <see cref="T:&dans;.Command" /> to it when you call the <self>Add</self> method.
				</para>
				<example>
					<code xml:space="preserve"><keyword>Dim</keyword> Command1 <keyword>as</keyword> <keyword>DaControl</keyword>.<keyword>DaCtlCommand</keyword>
<keyword>Set</keyword> Command1 = Genie.<keyword>Commands</keyword>.<keyword>Add</keyword> ("my first command", "Test", "Test", True, True)
Command1.<keyword>VoiceCaption</keyword> = "this is a test"</code>
				</example>
			</remarks>
			<seealso cref="M:&dans;.Commands.Insert" prefix="The" suffix="Method" />
			<seealso cref="M:&dans;.Commands.Remove" prefix="The" suffix="Method" />
			<seealso cref="M:&dans;.Commands.RemoveAll" prefix="The" suffix="Method" />
			<seealso cref="P:&dans;.Commands.Item" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Commands.Command">
			<summary>
				<para>
					Returns a <see cref="T:&dans;.Command" suffix="Object" /> in a <see cref="T:&dans;.Commands" suffix="Collection" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>commands</token>-&gt;<keyword>Command</keyword> (<token>Name</token>, &amp;<token>Command</token>)</para>
</cpp>
<csharp>
<para>[<token>Command</token> = ]&dacharref_csharp;.<keyword>Commands</keyword><keyword>.Command</keyword> ("<token>Name</token>")</para>
</csharp>
<vbnet>
<para>[<token>Command</token> = ]&dacharref_vb;.<keyword>Commands</keyword><keyword>.Command</keyword> ("<token>Name</token>")</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>Command</token> = ]&dacharref_vb;.<keyword>Commands</keyword><keyword>.Command</keyword> "<token>Name</token>"</para>
</vb>
</syntax>
			<param name="Name">
				A <typename>string</typename> value that specifies the name of the <see cref="T:&dans;.Command" suffix="Object" />
				to retrieve.
			</param>
			<returns name="Command">
				The <see class="typename" cref="T:&dans;.Command" suffix="Object" /> with the
				specified <paramref name="Name" />, if successful.
			</returns>
			<remarks>
				<para>
					You can use this method to access a <see cref="T:&dans;.Command" suffix="Object's" /> properties.
				</para>
				<note>
					This method may be required for some programming languages. It is not required for VBScript or
					Visual Basic. For further information on using <see cref="T:&dans;.Command" /> methods, see <see cref="T:&dans;.Command" bookmark="Properties" text="Command Object Properties" />.
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Commands.Insert">
			<summary>
				<para>
					Inserts a <see cref="T:&dans;.Command" suffix="Object" /> into the <see cref="T:&dans;.Commands" suffix="Collection" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>commands</token>-&gt;<keyword>Insert</keyword> (<token>Name</token>, <token>RefName</token>, <token>Before</token>, <token>Caption</token>, <token>VoiceGrammar</token>, <token>Enabled</token>, <token>Visible</token>, &amp;<token>Command</token>)</para>
</cpp>
<csharp>
<para>[<token>Command</token> = ]&dacharref_csharp;.<keyword>Commands</keyword><keyword>.Insert</keyword> ("<token>Name</token>", "<token>RefName</token>", <token>Before</token>, <token>Caption</token>, <token>VoiceGrammar</token>, <token>Enabled</token>, <token>Visible</token>)</para>
</csharp>
<vbnet>
<para>[<token>Command</token> = ]&dacharref_vb;.<keyword>Commands</keyword><keyword>.Insert</keyword> ("<token>Name</token>", "<token>RefName</token>", <token>Before</token>, <token>Caption</token>, <token>VoiceGrammar</token>, <token>Enabled</token>, <token>Visible</token>)</para>
</vbnet>
<vb>
<para>[<token>Command</token> = ]&dacharref_vb;.<keyword>Commands</keyword><keyword>.Insert</keyword> "<token>Name</token>", "<token>RefName</token>", <token>Before</token>, <token>Caption</token>, <token>VoiceGrammar</token>, <token>Enabled</token>, <token>Visible</token></para>
</vb>
</syntax>
			<param name="Name">
				A <typename>string</typename> value that uniquely identifies the command.
			</param>
			<param name="RefName">
				A <typename>string</typename> value that specifies the <see cref="P:&dans;.Command.Name" />
				of the command just above or below where you want to insert the new command.
			</param>
			<param name="Before">
				A <typename>boolean</typename> value indicating whether to insert the new command <strong>before</strong>
				the command specified by <paramref name="RefName" />.
			</param>
			<param name="Caption">
				A <typename>string</typename> value specifying the name that will appear in the
				character's <a class="see" href="&dacmref;">&dacmname;</a> and in the <a class="see" href="&davcref;">&davcname;</a>
				window when the client application is <glossary>input-active</glossary>. For more information, see the <see cref="T:&dans;.Command" suffix="Object's" /> <see cref="P:&dans;.Command.Caption" />
				property.
			</param>
			<param name="VoiceGrammar">
				A <typename>string</typename> value specifying the words or phrase used by
				the speech engine for recognizing this command. For more information on formatting alternatives for
				the string, see the <see cref="T:&dans;.Command" suffix="Object's" /> <see cref="P:&dans;.Command.VoiceGrammar" />
				property.
			</param>
			<param name="Enabled">
				A <typename>boolean</typename> value indicating whether the command is enabled. The
				default value is <keyword>True</keyword>. For more information, see the <see cref="T:&dans;.Command" suffix="Object's" /> <see cref="P:&dans;.Command.Enabled" />
				property.
			</param>
			<param name="Visible">
				A <typename>boolean</typename> value indicating whether the command is visible in
				the character's <a class="see" href="&dacmref;">&dacmname;</a> when the client application is <glossary>input-active</glossary>.
				The default value is <keyword>True</keyword>. For more information, see the <see cref="T:&dans;.Command" suffix="Object's" />
				<see cref="P:&dans;.Command.Visible" /> property.
			</param>
			<returns name="Command">
				The <see class="typename" cref="T:&dans;.Command" suffix="Object" /> inserted, if
				successful.
			</returns>
			<remarks>
				<para>
					The value of a <see cref="T:&dans;.Command" suffix="Object's" /> <see cref="P:&dans;.Command.Name" />
					property must be unique within its <see cref="T:&dans;.Commands" suffix="Collection" />. You must remove a
					<see cref="T:&dans;.Command" /> before you can create a new <see cref="T:&dans;.Command" /> with the same
					<see cref="P:&dans;.Command.Name" /> property setting. Attempting to create a <see cref="T:&dans;.Command" />
					with a <see cref="P:&dans;.Command.Name" /> property that already exists raises an error.
				</para>
				<para>
					This method returns a <see cref="T:&dans;.Command" suffix="Object" />. This allows you to declare an
					object and assign a <see cref="T:&dans;.Command" /> to it when you call the <self>Insert</self> method.
				</para>
				<example>
					<code xml:space="preserve"><keyword>Dim</keyword> Command2 <keyword>as</keyword> <keyword>DaControl</keyword>.<keyword>DaCtlCommand</keyword>
<keyword>Set</keyword> Command2 = Genie.<keyword>Commands</keyword>.<keyword>Insert</keyword> ("my second command", "my first command", True, "Test", "Test", True, True)
Command2.<keyword>VoiceCaption</keyword> = "this is a test"</code>
				</example>
			</remarks>
			<seealso cref="M:&dans;.Commands.Add" prefix="The" suffix="Method" />
			<seealso cref="M:&dans;.Commands.Remove" prefix="The" suffix="Method" />
			<seealso cref="M:&dans;.Commands.RemoveAll" prefix="The" suffix="Method" />
			<seealso cref="P:&dans;.Commands.Item" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Commands.Remove">
			<summary>
				<para>
					Removes a <see cref="T:&dans;.Command" suffix="Object" /> from the <see cref="T:&dans;.Commands" suffix="Collection" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>commands</token>-&gt;<keyword>Remove</keyword> (<token>Name</token>)</para>
</cpp>
<csharp>
<para>&dacharref_csharp;.<keyword>Commands</keyword><keyword>.Remove</keyword> ("<token>Name</token>")</para>
</csharp>
<vbnet>
<para>&dacharref_vb;.<keyword>Commands</keyword><keyword>.Remove</keyword> ("<token>Name</token>")</para>
</vbnet>
<vb>
<para>&dacharref_vb;.<keyword>Commands</keyword><keyword>.Remove</keyword> "<token>Name</token>"</para>
</vb>
</syntax>
			<param name="Name">
				The <see cref="P:&dans;.Command.Name" /> of the <see cref="T:&dans;.Command" suffix="Object" />
				to remove.
			</param>
			<remarks>
				<para>
					When a <see cref="T:&dans;.Command" suffix="Object" /> is removed from the collection, it no longer appears
					when the character's <a class="see" href="&dacmref;">&dacmname;</a> is displayed, nor in the <a class="see" href="&davcref;">&davcname;</a>
					window when your client application is <glossary>input-active</glossary>.
				</para>
			</remarks>
			<seealso cref="M:&dans;.Commands.RemoveAll" prefix="The" suffix="Method" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Commands.RemoveAll">
			<summary>
				<para>
					Removes all <see cref="T:&dans;.Command" suffix="Objects" /> from the <see cref="T:&dans;.Commands" suffix="Collection" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>commands</token>-&gt;<keyword>RemoveAll</keyword> ()</para>
</cpp>
<csharp>
<para>&dacharref_csharp;.<keyword>Commands</keyword><keyword>.RemoveAll</keyword> ()</para>
</csharp>
<vbnet>
<para>&dacharref_vb;.<keyword>Commands</keyword><keyword>.RemoveAll</keyword> ()</para>
</vbnet>
<vb>
<para>&dacharref_vb;.<keyword>Commands</keyword><keyword>.RemoveAll</keyword></para>
</vb>
</syntax>
			<remarks>
				<para>
					An empty <see cref="T:&dans;.Commands" suffix="Collection" /> no longer appears when the character's <a class="see" href="&dacmref;">&dacmname;</a>
					is displayed, nor in the <a class="see" href="&davcref;">&davcname;</a> window when your client application is
					<glossary>input-active</glossary>.
				</para>
			</remarks>
			<seealso cref="M:&dans;.Commands.Remove" prefix="The" suffix="Method" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.Commands.GetEnumerator">
			<inheritdoc/>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="P:&dans;.Commands.Caption">
			<summary>
				<para>
					Specifies the text displayed for the <see cref="T:&dans;.Commands" suffix="Collection" /> in the character's
					<a class="see" href="&dacmref;">&dacmname;</a>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>commands</token>-&gt;<keyword>get_Caption</keyword> (&amp;<token>Caption</token>)</para>
<para><token>commands</token>-&gt;<keyword>put_Caption</keyword> (<token>Caption</token>)</para>
</cpp>
<csharp>
<para><token>[Caption</token> = ]&dacharref_csharp;.<keyword>Commands</keyword>.<keyword>Caption</keyword></para>
<para>&dacharref_csharp;.<keyword>Commands</keyword>.<keyword>Caption</keyword> = <token>Caption</token></para>
</csharp>
<vb>
<para><token>[Caption</token> = ]&dacharref_vb;.<keyword>Commands</keyword>.<keyword>Caption</keyword></para>
<para>&dacharref_vb;.<keyword>Commands</keyword>.<keyword>Caption</keyword> = <token>Caption</token></para>
</vb>
</syntax>
			<value name="Caption">
				A <typename>string</typename> value that specifies the text displayed in the menu.
			</value>
			<remarks>
				<para>
					Setting the <self>Caption</self> property for your <see cref="T:&dans;.Commands" suffix="Collection" />
					defines how it will appear on the character's <a class="see" href="&dacmref;">&dacmname;</a> when its <see cref="P:&dans;.Commands.Visible" />
					property is set to <keyword>True</keyword> and your application is <em>not</em> the <glossary>input-active</glossary>
					client. To specify an access key (underlined mnemonic) for your <self>Caption</self>, include an ampersand (&amp;)
					before the mnemonic character.
				</para>
				<para>
					If you define <see cref="T:&dans;.Command" suffix="Objects" /> for a <see cref="T:&dans;.Commands" suffix="Collection" />,
					you typically also define a <self>Caption</self> for the <see cref="T:&dans;.Commands" suffix="Collection" />.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Commands.Count">
			<summary>
				<para>
					Returns the count of <see cref="T:&dans;.Command" suffix="Objects" /> in the <see cref="T:&dans;.Commands" suffix="Collection" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>command</token>-&gt;<keyword>get_Count</keyword> (&amp;<token>Count</token>)</para>
</cpp>
<csharp>
<para>[<token>Count</token> = ]&dacharref_csharp;.<keyword>Commands</keyword>.<keyword>Count</keyword></para>
</csharp>
<vb>
<para>[<token>Count</token> = ]&dacharref_vb;.<keyword>Commands</keyword>.<keyword>Count</keyword></para>
</vb>
</syntax>
			<value name="Count">
				A <typename>numeric</typename> value that indicates the number of <see cref="T:&dans;.Command" suffix="Objects" />
				in the collection.
			</value>
			<remarks>
				<para>
					<self>Count</self> includes only the number of <see cref="T:&dans;.Command" suffix="Objects" />
					you define in <em>your</em> <see cref="T:&dans;.Commands" suffix="Collection" />. Pre-defined entries or
					entries defined by other clients are not included.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Commands.DefaultCommand">
			<summary>
				<para>
					Specifies the default command of the <see cref="T:&dans;.Commands" suffix="Collection" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>commands</token>-&gt;<keyword>get_DefaultCommand</keyword> (&amp;<token>DefaultCommand</token>)</para>
<para><token>commands</token>-&gt;<keyword>put_DefaultCommand</keyword> (<token>DefaultCommand</token>)</para>
</cpp>
<csharp>
<para>[<token>DefaultCommand</token> = ]&dacharref_csharp;.<keyword>Commands</keyword>.<keyword>DefaultCommand</keyword></para>
<para>&dacharref_csharp;.<keyword>Commands</keyword>.<keyword>DefaultCommand</keyword> = <token>DefaultCommand</token></para>
</csharp>
<vb>
<para>[<token>DefaultCommand</token> = ]&dacharref_vb;.<keyword>Commands</keyword>.<keyword>DefaultCommand</keyword></para>
<para>&dacharref_vb;.<keyword>Commands</keyword>.<keyword>DefaultCommand</keyword> = <token>DefaultCommand</token></para>
</vb>
</syntax>
			<value name="DefaultCommand">
				The <see cref="P:&dans;.Command.Name" /> of the <see cref="T:&dans;.Command" />
				that's shown bold in the <a class="see" href="&dacmref;">&dacmname;</a> (or an empty string if none).
			</value>
			<remarks>
				<para>
					This property allows you to set a <see cref="T:&dans;.Command" /> in your <see cref="T:&dans;.Commands" suffix="Collection" />
					as the default command, rendering it bold. This does not actually change command handling or double-click events.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='ThisClientOnly']" />
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Commands.FontName">
			<summary>
				<para>
					Specifies the font used in the <a class="see" href="&davcref;">&davcname;</a> window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>commands</token>-&gt;<keyword>get_FontName</keyword> (<token>&amp;FontName</token>)</para>
<para><token>commands</token>-&gt;<keyword>put_FontName</keyword> (<token>FontName</token>)</para>
</cpp>
<csharp>
<para>[<token>FontName</token> = ]&dacharref_csharp;.<keyword>Commands.FontName</keyword></para>
<para>&dacharref_csharp;.<keyword>Commands.FontName</keyword> = <token>FontName</token></para>
</csharp>
<vb>
<para>[<token>FontName</token> = ]&dacharref_vb;.<keyword>Commands.FontName</keyword></para>
<para>&dacharref_vb;.<keyword>Commands.FontName</keyword> = <token>FontName</token></para>
</vb>
</syntax>
			<value name="FontName">
				A <typename>string</typename> value specifying the font name.
			</value>
			<remarks>
				<para>
					The <self>FontName</self> property defines the font used to display text in the <a class="see" href="&davcref;">&davcname;</a>
					window. The default value for the font setting is based on the <em>menu font</em> for the character's <see cref="P:&dans;.Character.LanguageID" />
					or, if that's not set, the user default language.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='ThisClientOnly']" />
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Commands.FontSize">
			<summary>
				<para>
					Specifies the font size used in the <a class="see" href="&davcref;">&davcname;</a> window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>commands</token>-&gt;<keyword>get_FontSize</keyword> (<token>&amp;FontSize</token>)</para>
<para><token>commands</token>-&gt;<keyword>put_FontSize</keyword> (<token>FontSize</token>)</para>
</cpp>
<csharp>
<para>[<token>FontSize</token> = ]&dacharref_csharp;.<keyword>Commands.FontSize</keyword></para>
<para>&dacharref_csharp;.<keyword>Commands.FontSize</keyword> = <token>FontSize</token></para>
</csharp>
<vb>
<para>[<token>FontSize</token> = ]&dacharref_vb;.<keyword>Commands.FontSize</keyword></para>
<para>&dacharref_vb;.<keyword>Commands.FontSize</keyword> = <token>FontSize</token></para>
</vb>
</syntax>
			<value name="FontName">
				A <typename>numeric</typename> value specifying the font size (in points).
			</value>
			<remarks>
				<para>
					The <self>FontSize</self> property defines the point size of the font used to display text in the <a class="see" href="&davcref;">&davcname;</a>
					window. The default value for the font setting is based on the <em>menu font</em> for the character's <see cref="P:&dans;.Character.LanguageID" />
					or, if that's not set, the user default language.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='ThisClientOnly']" />
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Commands.GlobalVoiceCommandsEnabled">
			<summary>
				<para>
					Specifies if pre-defined commands appear in the <a class="see" href="&davcref;">&davcname;</a> window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>commands</token>-&gt;<keyword>get_GlobalVoiceCommandsEnabled</keyword> (&amp;<token>Enabled</token>)</para>
<para><token>commands</token>-&gt;<keyword>put_GlobalVoiceCommandsEnabled</keyword> (<token>Enabled</token>)</para>
</cpp>
<csharp>
<para>[<token>Enabled</token> = ]&dacharref_csharp;.<keyword>Commands</keyword>.<keyword>GlobalVoiceCommandsEnabled</keyword></para>
<para>&dacharref_csharp;.<keyword>Commands</keyword>.<keyword>GlobalVoiceCommandsEnabled</keyword> = <token>Enabled</token></para>
</csharp>
<vb>
<para>[<token>Enabled</token> = ]&dacharref_vb;.<keyword>Commands</keyword>.<keyword>GlobalVoiceCommandsEnabled</keyword></para>
<para>&dacharref_vb;.<keyword>Commands</keyword>.<keyword>GlobalVoiceCommandsEnabled</keyword> = <token>Enabled</token></para>
</vb>
</syntax>
			<value name="Enabled">
				A <typename>boolean</typename> value that indicates if global voice commands are
				enabled.
			</value>
			<remarks>
				<para>
					Double Agent automatically adds voice commands (grammar) for opening and closing the <a class="see" href="&davcref;">&davcname;</a>
					window and for showing and hiding the character. If you set <self>GlobalVoiceCommandsEnabled</self> to
					<keyword>False</keyword>, Agent disables any voice parameters for these voice commands as well as the voice
					commands for the <see cref="P:&dans;.Commands.Caption" /> of other clients' <see cref="T:&dans;.Commands" suffix="Collection" />.
					This allows you to eliminate these from your client's current active grammar. However, because this
					potentially blocks voice access to other clients, reset this property to <keyword>True</keyword> after processing
					the user's voice input.
				</para>
				<para>
					Disabling the property does not affect the character's <a class="see" href="&dacmref;">&dacmname;</a>.
					The global commands added by Double Agent will still appear; you cannot remove them from the <a class="see" href="&dacmref;">&dacmname;</a>.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Commands.HelpContextID">
			<summary>Not Implemented</summary>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Commands.Index">
			<summary>
				<para>
					Returns a <see cref="T:&dans;.Command" suffix="Object" /> in the collection.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>commands</token>-&gt;<keyword>get_Index</keyword> (<token>Index</token>, &amp;<token>Command</token>)</para>
</cpp>
<csharp>
<para>[<token>Command</token> = ]&dacharref_csharp;.<keyword>Commands</keyword>.get_Index (<token>Index</token>)</para>
</csharp>
<vbnet>
<para>[<token>Command</token> = ]&dacharref_vb;.<keyword>Commands</keyword>.Index (<token>Index</token>)</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>Command</token> = ]&dacharref_vb;.<keyword>Commands</keyword>.Index (<token>Index</token>)</para>
</vb>
</syntax>
			<param name="Index">
				A <typename>numeric</typename> value that specifies the zero-based index of the item
				to retrieve.
			</param>
			<value name="Command">
				The <see class="typename" cref="T:&dans;.Command" suffix="Object" /> at the specified
				<paramref name="Index" />.
			</value>
			<remarks>
				<para>
					When you want to use the <see cref="T:&dans;.Commands" suffix="Collection" /> as an <em>ordered</em>
					collection, you can use the <self>Index</self> property instead of the <see cref="P:&dans;.Commands.Item" />
					property.
				</para>
			</remarks>
			<seealso cref="P:&dans;.Commands.Count" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.Commands.Item" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Commands.Item">
			<summary>
				<para>
					Returns a <see cref="T:&dans;.Command" suffix="Object" /> in the collection.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>commands</token>-&gt;<keyword>get_Item</keyword> (<token>Name</token>, &amp;<token>Command</token>)</para>
</cpp>
<csharp>
<para>[<token>Command</token> = ]&dacharref_csharp;.<keyword>Commands</keyword>.this [<token>Name</token>]</para>
</csharp>
<vbnet>
<para>[<token>Command</token> = ]&dacharref_vb;.<keyword>Commands</keyword> (<token>Name</token>)</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>Command</token> = ]&dacharref_vb;.<keyword>Commands</keyword> (<token>Name</token>)</para>
</vb>
</syntax>
			<param name="Name">
				A <typename>string</typename> value that specifies the <see cref="P:&dans;.Command.Name" />
				given to the command when it was defined.
			</param>
			<value name="Command">
				The <see class="typename" cref="T:&dans;.Command" suffix="Object" /> with the
				specified <paramref name="Name" />.
			</value>
			<seealso cref="P:&dans;.Command.Name" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.Commands.Index" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Commands.Visible">
			<summary>
				<para>
					Specifies if the <see cref="T:&dans;.Commands" suffix="Collection" /> appears in the character's <a class="see" href="&dacmref;">&dacmname;</a>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>commands</token>-&gt;<keyword>get_Visible</keyword> (&amp;<token>Visible</token>)</para>
<para><token>commands</token>-&gt;<keyword>put_Visible</keyword> (<token>Visible</token>)</para>
</cpp>
<csharp>
<para>[<token>Visible</token> = ]&dacharref_csharp;.<keyword>Commands</keyword>.<keyword>Visible</keyword></para>
<para>&dacharref_csharp;.<keyword>Commands</keyword>.<keyword>Visible</keyword> = <token>Visible</token></para>
</csharp>
<vb>
<para>[<token>Visible</token> = ]&dacharref_vb;.<keyword>Commands</keyword>.<keyword>Visible</keyword></para>
<para>&dacharref_vb;.<keyword>Commands</keyword>.<keyword>Visible</keyword> = <token>Visible</token></para>
</vb>
</syntax>
			<value name="Visible">
				A <typename>boolean</typename> value that indiciates if the <see cref="T:&dans;.Commands" /> <see cref="P:&dans;.Commands.Caption" />
				is visible.
			</value>
			<remarks>
				<para>
					For the caption to appear in the character's <a class="see" href="&dacmref;">&dacmname;</a> when your
					application is not the <glossary>input-active</glossary> client, this property must be set to <keyword>True</keyword>
					and the <see cref="P:&dans;.Commands.Caption" /> property set for your <see cref="T:&dans;.Commands" suffix="Collection" />.
					In addition, this property must be set to <keyword>True</keyword> for commands in your collection to appear
					in the <a class="see" href="&dacmref;">&dacmname;</a> when your application is <glossary>input-active</glossary>.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Commands.Voice">
			<summary>
				<para>
					deprecated
				</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:&dans;.Commands.VoiceGrammar" /> property, but
					is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Commands.VoiceCaption">
			<summary>
				<para>
					Specifies the text displayed for the <see cref="T:&dans;.Commands" suffix="Collection" /> in the <a class="see" href="&davcref;">&davcname;</a>
					window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>commands</token>-&gt;<keyword>get_VoiceCaption</keyword> (&amp;<token>VoiceCaption</token>)</para>
<para><token>commands</token>-&gt;<keyword>put_VoiceCaption</keyword> (<token>VoiceCaption</token>)</para>
</cpp>
<csharp>
<para>[<token>VoiceCaption</token> = ]&dacharref_csharp;.<keyword>Commands</keyword>.<keyword>VoiceCaption</keyword></para>
<para>&dacharref_csharp;.<keyword>Commands</keyword>.<keyword>VoiceCaption</keyword> = <token>VoiceCaption</token></para>
</csharp>
<vb>
<para>[<token>VoiceCaption</token> = ]&dacharref_vb;.<keyword>Commands</keyword>.<keyword>VoiceCaption</keyword></para>
<para>&dacharref_vb;.<keyword>Commands</keyword>.<keyword>VoiceCaption</keyword> = <token>VoiceCaption</token></para>
</vb>
</syntax>
			<value name="VoiceCaption">
				A <typename>string</typename> value that specifies the caption text.
			</value>
			<remarks>
				<para>
					The <self>VoiceCaption</self> text appears in the <a class="see" href="&davcref;">&davcname;</a>
					window when your client application is <glossary>input-active</glossary> and the character is visible. If
					this property is not set, the <see cref="P:&dans;.Commands.Caption" /> property is used instead. When neither
					the <self>VoiceCaption</self> nor <see cref="P:&dans;.Commands.Caption" /> property is set, then commands in
					the collection appear in the <a class="see" href="&davcref;">&davcname;</a> window under an <em>(undefined command)</em>
					title when your client application becomes <glossary>input-active</glossary>.
				</para>
				<para>
					The <self>VoiceCaption</self> setting also determines the text displayed in the <a class="see" href="&daltref;">&daltname;</a>
					to indicate the commands for which the character listens.
				</para>
				<para>
					If you set the <see cref="P:&dans;.Commands.VoiceGrammar" /> property of your <see cref="T:&dans;.Commands" suffix="Collection" />,
					you will typically also set its <self>VoiceCaption</self> property.
				</para>
			</remarks>
			<seealso cref="P:&dans;.Commands.Caption" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Commands.VoiceGrammar">
			<summary>
				<para>
					Specifies the text that is passed to the speech engine for recognition.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>commands</token>-&gt;<keyword>get_VoiceGrammar</keyword> (&amp;<token>VoiceGrammar</token>)</para>
<para><token>commands</token>-&gt;<keyword>put_VoiceGrammar</keyword> (<token>VoiceGrammar</token>)</para>
</cpp>
<csharp>
<para>[<token>VoiceGrammar</token> = ]&dacharref_csharp;.<keyword>Commands</keyword>.<keyword>VoiceGrammar</keyword></para>
<para>&dacharref_csharp;.<keyword>Commands</keyword>.<keyword>VoiceGrammar</keyword> = <token>VoiceGrammar</token></para>
</csharp>
<vb>
<para>[<token>VoiceGrammar</token> = ]&dacharref_vb;.<keyword>Commands</keyword>.<keyword>VoiceGrammar</keyword></para>
<para>&dacharref_vb;.<keyword>Commands</keyword>.<keyword>VoiceGrammar</keyword> = <token>VoiceGrammar</token></para>
</vb>
</syntax>
			<value name="VoiceGrammar">
				A <typename>string</typename> value that specifies the recognition text.
			</value>
			<remarks>
				<para>
					If you do not supply this parameter, the <see cref="P:&dans;.Commands.VoiceCaption" /> for your <see cref="T:&dans;.Commands" suffix="Collection" />
					will not appear in the <a class="see" href="&davcref;">&davcname;</a> window.
				</para>
			</remarks>
			<include file="&dainclude;" path="/doc/properties/details[@name='VoiceCaption']" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:&dans;.Commands" kind="Collection">
			<summary>
				<para>
					The <self>Commands Collection</self> defines the <see cref="T:&dans;.Command" text="Commands" />
					that the user can apply to a <see cref="T:&dans;.Character" />.
				</para>
			</summary>
			<syntax>
				<list>
					<item>
						<term>
							<h4>
								<bookmark name="Methods"></bookmark>Methods
							</h4>
						</term>
						<description>
							<list type="&typelisttype;" class="syntax">
								<item>
									<term width="&typelistwidth;">
										<see cref="M:&dans;.Commands.Add" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Commands.Add']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&dans;.Commands.Command" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Commands.Command']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&dans;.Commands.Insert" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Commands.Insert']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&dans;.Commands.Remove" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Commands.Remove']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&dans;.Commands.RemoveAll" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.Commands.RemoveAll']/summary/para[1]" />
									</description>
								</item>
							</list>
						</description>
					</item>
					<item>
						<term>
							<h4>
								<bookmark name="Properties"></bookmark>Properties
							</h4>
						</term>
						<description>
							<list type="&typelisttype;" class="syntax">
								<item>
									<term width="&typelistwidth;">
										<see cref="P:&dans;.Commands.Caption" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Commands.Caption']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Commands.Count" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Commands.Count']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Commands.DefaultCommand" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Commands.DefaultCommand']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Commands.FontName" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Commands.FontName']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Commands.FontSize" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Commands.FontSize']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Commands.Index" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Commands.Index']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Commands.Item" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Commands.Item']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Commands.Visible" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Commands.Visible']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Commands.VoiceGrammar" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Commands.VoiceGrammar']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Commands.VoiceCaption" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Commands.VoiceCaption']/summary/para[1]" />
									</description>
								</item>
							</list>
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					The <self>Commands Collection</self> can appear in both the <a class="see" href="&dacmref;">&dacmname;</a>
					and the <a class="see" href="&davcref;">&davcname;</a> window for a character. To include commands in the
					<a class="see" href="&dacmref;">&dacmname;</a>, set its <see cref="P:&dans;.Commands.Caption" /> property. To
					include commands in the <a class="see" href="&davcref;">&davcname;</a> window, set its <see cref="P:&dans;.Commands.VoiceCaption" />
					property (for backward compatibility, if there is no <see cref="P:&dans;.Commands.VoiceCaption" />, the
					<see cref="P:&dans;.Commands.Caption" /> setting is used).
				</para>
				<para>
					This object can be accessed using the <see class="" cref="T:&dans;.Character" text="Character's" /> <see class="" cref="P:&dans;.Character.Commands" />
					property.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="P:&dans;.Command.Caption">
			<summary>
				<para>
					Specifies the text displayed for a <see cref="T:&dans;.Command" /> in the character's <a class="see" href="&dacmref;">&dacmname;</a>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>command</token>-&gt;<keyword>get_Caption</keyword> (&amp;<token>Caption</token>)</para>
<para><token>command</token>-&gt;<keyword>put_Caption</keyword> (<token>Caption</token>)</para>
</cpp>
<csharp>
<para>[<token>Caption</token> = ]&dacmdref_csharp;.<keyword>Caption</keyword></para>
<para>&dacmdref_csharp;.<keyword>Caption</keyword> = <token>Caption</token></para>
</csharp>
<vb>
<para>[<token>Caption</token> = ]&dacmdref_vb;.<keyword>Caption</keyword></para>
<para>&dacmdref_vb;.<keyword>Caption</keyword> = <token>Caption</token></para>
</vb>
</syntax>
			<value name="Caption">
				A <typename>string</typename> value that specifies the text displayed in the menu.
			</value>
			<remarks>
				<para>
					To specify an access key (underlined mnemonic) for your <self>Caption</self>, include an ampersand (&amp;)
					before the mnemonic character.
				</para>
				<para>
					If you don't define a <see cref="P:&dans;.Command.VoiceCaption" /> for your command, the <self>Caption</self>
					property will be used.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Command.Confidence">
			<summary>
				<para>
					deprecated
				</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:&dans;.Command.ConfidenceThreshold" /> property, but
					is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Command.ConfidenceText">
			<summary>
				<para>
					Specifies the text that appears in the <a class="see" href="&daltref;">&daltname;</a>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>command</token>-&gt;<keyword>get_ConfidenceText</keyword> (&amp;<token>ConfidenceText</token>)</para>
<para><token>command</token>-&gt;<keyword>put_ConfidenceText</keyword> (<token>ConfidenceText</token>)</para>
</cpp>
<csharp>
<para>[<token>ConfidenceText</token> = ]&dacmdref_csharp;.<keyword>ConfidenceText</keyword></para>
<para>&dacmdref_csharp;.<keyword>ConfidenceText</keyword> = <token>ConfidenceText</token></para>
</csharp>
<vb>
<para>[<token>ConfidenceText</token> = ]&dacmdref_vb;.<keyword>ConfidenceText</keyword></para>
<para>&dacmdref_vb;.<keyword>ConfidenceText</keyword> = <token>ConfidenceText</token></para>
</vb>
</syntax>
			<value name="ConfidenceText">
				A <typename>string</typename> value that specifies the text displayed in
				the <a class="see" href="&daltref;">&daltname;</a>.
			</value>
			<remarks>
				<para>
					When the <see cref="P:&dans;.UserInput.Confidence" /> value of the best match <em>does not exceed</em>
					the command's <see cref="P:&dans;.Command.ConfidenceThreshold" /> property, Double Agent displays the text
					specified in <self>ConfidenceText</self> in the <a class="see" href="&daltref;">&daltname;</a>.
				</para>
			</remarks>
			<seealso cref="P:&dans;.Command.ConfidenceThreshold" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Command.ConfidenceThreshold">
			<summary>
				<para>
					Specifies if the command's <see cref="P:&dans;.Command.ConfidenceText" /> appears in the <a class="see" href="&daltref;">&daltname;</a>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>command</token>-&gt;<keyword>get_ConfidenceThreshold</keyword> (&amp;<token>ConfidenceThreshold</token>)</para>
<para><token>command</token>-&gt;<keyword>put_ConfidenceThreshold</keyword> (<token>ConfidenceThreshold</token>)</para>
</cpp>
<csharp>
<para>[<token>ConfidenceThreshold</token> = ]&dacmdref_csharp;.<keyword>ConfidenceThreshold</keyword></para>
<para>&dacmdref_csharp;.<keyword>ConfidenceThreshold</keyword> = <token>ConfidenceThreshold</token></para>
</csharp>
<vb>
<para>[<token>ConfidenceThreshold</token> = ]&dacmdref_vb;.<keyword>ConfidenceThreshold</keyword></para>
<para>&dacmdref_vb;.<keyword>ConfidenceThreshold</keyword> = <token>ConfidenceThreshold</token></para>
</vb>
</syntax>
			<value name="ConfidenceThreshold">
				A <typename>numeric</typename> value that specifies the confidence threshold
				for the command.
			</value>
			<remarks>
				<para>
					If the <see cref="P:&dans;.UserInput.Confidence" /> value of the best match <em>does not exceed</em>
					the value you set for the <self>ConfidenceThreshold</self> property, the text supplied in <see cref="P:&dans;.Command.ConfidenceText" />
					is displayed in the <a class="see" href="&daltref;">&daltname;</a>.
				</para>
			</remarks>
			<seealso cref="P:&dans;.Command.ConfidenceText" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Command.Enabled">
			<summary>
				<para>
					Specifies if the <see cref="T:&dans;.Command" /> is enabled in the character's <a class="see" href="&dacmref;">&dacmname;</a>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>command</token>-&gt;<keyword>get_Enabled</keyword> (&amp;<token>Enabled</token>)</para>
<para><token>command</token>-&gt;<keyword>put_Enabled</keyword> (<token>Enabled</token>)</para>
</cpp>
<csharp>
<para>[<token>Enabled</token> = ]&dacmdref_csharp;.<keyword>Enabled</keyword></para>
<para>&dacmdref_csharp;.<keyword>Enabled</keyword> = <token>Enabled</token></para>
</csharp>
<vb>
<para>[<token>Enabled</token> = ]&dacmdref_vb;.<keyword>Enabled</keyword></para>
<para>&dacmdref_vb;.<keyword>Enabled</keyword> = <token>Enabled</token></para>
</vb>
</syntax>
			<value name="Enabled">
				A <typename>boolean</typename> value that indicates if the command is enabled.
			</value>
			<remarks>
				<para>
					If the <self>Enabled</self> property is set to <keyword>True</keyword>, the <see cref="T:&dans;.Command" suffix="Object's" /> <see cref="P:&dans;.Command.Caption" />
					appears as normal text in the character's <a class="see" href="&dacmref;">&dacmname;</a> when the client application
					is <glossary>input-active</glossary>. If the <self>Enabled</self> property is <keyword>False</keyword>,
					the <see cref="P:&dans;.Command.Caption" /> appears as unavailable (disabled) text. A disabled <see cref="T:&dans;.Command" />
					is also not accessible for voice input.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Command.HelpContextID">
			<summary>Not Implemented</summary>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Command.Name">
			<summary>
				<para>
					The unique name that identifies the <see cref="T:&dans;.Command" suffix="Object" /> in the <see cref="T:&dans;.Commands" suffix="Collection" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>command</token>-&gt;<keyword>get_Name</keyword> (&amp;<token>Name</token>)</para>
</cpp>
<csharp>
<para>[<token>Name</token> = ]<token>command</token>.<keyword>Name</keyword></para>
</csharp>
<vb>
<para>[<token>Name</token> = ]<token>command</token>.<keyword>Name</keyword></para>
</vb>
</syntax>
			<value name="Name">
				A <typename>string</typename> value that identifies the <see cref="T:&dans;.Command" suffix="Object" />.
			</value>
			<remarks>
				<para>
					When you keep a reference to a <see cref="T:&dans;.Command" suffix="Object" />, you can use this property
					to relate it back to it's owner <see cref="T:&dans;.Commands" suffix="Collection" />.
				</para>
			</remarks>
			<seealso cref="M:&dans;.Commands.Add" suffix="Method" prefix="The" />
			<seealso cref="M:&dans;.Commands.Insert" suffix="Method" prefix="The" />
			<seealso cref="P:&dans;.Commands.Item" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Command.Visible">
			<summary>
				<para>
					Specifies if the <see cref="T:&dans;.Command" /> is visible in the character's <a class="see" href="&dacmref;">&dacmname;</a>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>command</token>-&gt;<keyword>get_Visible</keyword> (&amp;<token>Visible</token>)</para>
<para><token>command</token>-&gt;<keyword>put_Visible</keyword> (<token>Visible</token>)</para>
</cpp>
<csharp>
<para>[<token>Visible</token>] = &dacmdref_csharp;.<keyword>Visible</keyword></para>
<para>&dacmdref_csharp;.<keyword>Visible</keyword>[ = <token>Visible</token>]</para>
</csharp>
<vb>
<para>[<token>Visible</token>] = &dacmdref_vb;.<keyword>Visible</keyword></para>
<para>&dacmdref_vb;.<keyword>Visible</keyword>[ = <token>Visible</token>]</para>
</vb>
</syntax>
			<value name="Visible">
				A <typename>boolean</typename> value that indicates if the command is visible.
			</value>
			<remarks>
				<para>
					Set this property to <keyword>False</keyword> when you want to include voice input for your command without
					having it appear in the <a class="see" href="&dacmref;">&dacmname;</a> for the character. If you set a
					<see cref="T:&dans;.Command" suffix="Object's" /> <see cref="P:&dans;.Command.Caption" /> property to the
					empty string (""), the caption text will not appear in the <a class="see" href="&dacmref;">&dacmname;</a>
					(for example, as a blank line), regardless of its <self>Visible</self> property setting.
				</para>
				<para>
					The <self>Visible</self> property of a <see cref="T:&dans;.Command" suffix="Object's" /> parent <see cref="T:&dans;.Commands" suffix="Collection" />
					does not affect the <self>Visible</self> property of the <see cref="T:&dans;.Command" />.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Command.Voice">
			<summary>
				<para>
					deprecated
				</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:&dans;.Command.VoiceGrammar" /> property, but is
					still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Command.VoiceCaption">
			<summary>
				<para>
					Specifies the text displayed for the <see cref="T:&dans;.Command" suffix="Object" /> in the <a class="see" href="&davcref;">&davcname;</a>
					window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>command</token>-&gt;<keyword>get_VoiceCaption</keyword> (&amp;<token>VoiceCaption</token>)</para>
<para><token>command</token>-&gt;<keyword>put_VoiceCaption</keyword> (<token>VoiceCaption</token>)</para>
</cpp>
<csharp>
<para>[<token>VoiceCaption</token> = ]&dacmdref_csharp;.<keyword>VoiceCaption</keyword></para>
<para>&dacmdref_csharp;.<keyword>VoiceCaption</keyword> = <token>VoiceCaption</token></para>
</csharp>
<vb>
<para>[<token>VoiceCaption</token> = ]&dacmdref_vb;.<keyword>VoiceCaption</keyword></para>
<para>&dacmdref_vb;.<keyword>VoiceCaption</keyword> = <token>VoiceCaption</token></para>
</vb>
</syntax>
			<value name="VoiceCaption">
				A <typename>string</typename> value that specifies the <a class="see" href="&davcref;">&davcname;</a> window text.
			</value>
			<remarks>
				<para>
					This text will appear in the <a class="see" href="&davcref;">&davcname;</a> window when your client application
					is <glossary>input-active</glossary> and the character is visible. If this property is not set, the <see cref="P:&dans;.Command.Caption" />
					property is used instead. When neither the <self>VoiceCaption</self> nor <see cref="P:&dans;.Command.Caption" />
					property is set, the command does not appear in the <a class="see" href="&davcref;">&davcname;</a> window.
				</para>
				<para>
					If you define a <see cref="T:&dans;.Command" suffix="Object" /> in a <see cref="T:&dans;.Commands" suffix="Collection" />
					with a non-blank <see cref="P:&dans;.Commands.VoiceCaption" /> property, you will typically also set the
					<see cref="T:&dans;.Command" suffix="Object's" /> <self>VoiceCaption</self> property.
				</para>
			</remarks>
			<seealso cref="P:&dans;.Command.Caption" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Command.VoiceGrammar">
			<summary>
				<para>
					Specifies the grammar text that is passed to the speech recognition engine for matching this <see cref="T:&dans;.Command" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>command</token>-&gt;<keyword>get_VoiceGrammar</keyword> (&amp;<token>VoiceGrammar</token>)</para>
<para><token>command</token>-&gt;<keyword>put_VoiceGrammar</keyword> (<token>VoiceGrammar</token>)</para>
</cpp>
<csharp>
<para>[<token>VoiceGrammar</token> = ]&dacmdref_csharp;.<keyword>VoiceGrammar</keyword></para>
<para>&dacmdref_csharp;.<keyword>VoiceGrammar</keyword> = <token>VoiceGrammar</token></para>
</csharp>
<vb>
<para>[<token>VoiceGrammar</token> = ]&dacmdref_vb;.<keyword>VoiceGrammar</keyword></para>
<para>&dacmdref_vb;.<keyword>VoiceGrammar</keyword> = <token>VoiceGrammar</token></para>
</vb>
</syntax>
			<value name="VoiceGrammar">
				A <typename>string</typename> value that specifies the recognition text.
			</value>
			<remarks>
				<para>
					If you do not supply this parameter, the <see cref="P:&dans;.Command.VoiceCaption" /> for your <see cref="T:&dans;.Command" suffix="Object" />
					will not appear in the <a class="see" href="&davcref;">&davcname;</a> window. If you specify a <self>VoiceGrammar</self>
					parameter but not a <see cref="P:&dans;.Command.VoiceCaption" /> (or <see cref="P:&dans;.Command.Caption" />),
					the command will not appear in the <a class="see" href="&davcref;">&davcname;</a> window, but it will be
					voice-accessible when the client application becomes <glossary>input-active</glossary>.
				</para>
			</remarks>
			<include file="&dainclude;" path="/doc/properties/details[@name='VoiceCaption']" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:&dans;.Command">
			<summary>
				<para>
					A <self>Command Object</self> is an item in a <see cref="T:&dans;.Commands" suffix="Collection" />.
					Double Agent provides the user access to your <self>Command Objects</self> when your client application becomes
					<glossary>input-active</glossary>.
				</para>
			</summary>
			<syntax>
				<list>
					<item>
						<term>
							<h4>
								<bookmark name="Properties"></bookmark>Properties
							</h4>
						</term>
						<description>
							<list type="&typelisttype;" class="syntax">
								<item>
									<term width="&typelistwidth;">
										<see cref="P:&dans;.Command.Caption" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Command.Caption']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Command.ConfidenceText" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Command.ConfidenceText']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Command.ConfidenceThreshold" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Command.ConfidenceThreshold']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Command.Enabled" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Command.Enabled']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Command.Name" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Command.Name']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Command.Visible" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Command.Visible']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Command.VoiceCaption" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Command.VoiceCaption']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Command.VoiceGrammar" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Command.VoiceGrammar']/summary/para[1]" />
									</description>
								</item>
							</list>
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					A command may appear in either the character's <a class="see" href="&dacmref;">&dacmname;</a> and the
					<a class="see" href="&davcref;">&davcname;</a> window, or in both. To appear in the <a class="see" href="&dacmref;">&dacmname;</a>
					it must have a <see cref="P:&dans;.Command.Caption" /> and have the <see cref="P:&dans;.Command.Visible" />
					property set to <keyword>True</keyword>. In addition, its <see cref="T:&dans;.Commands" suffix="Collection's" />
					<see cref="P:&dans;.Command.Visible" /> property must also be set to <keyword>True</keyword>. To appear in
					the <a class="see" href="&davcref;">&davcname;</a> window, a <self>Command</self> must have its <see cref="P:&dans;.Command.Caption" />
					and <see cref="P:&dans;.Command.VoiceGrammar" /> properties set.
				</para>
				<para>
					When Double Agent receives input for one of your commands, it sends a <see cref="E:&darootobj;.Command" />
					event, and passes back the name of the <self>Command</self> as an attribute of the <see cref="T:&dans;.UserInput" suffix="Object" />.
					You can then use conditional statements to match and process the <self>Command</self>.
				</para>
				<para>
					Note that a character's <a class="see" href="&dacmref;">&dacmname;</a> entries do not change while the
					menu is displayed. If you add or remove commands or change their properties while the character's <a class="see" href="&dacmref;">&dacmname;</a>
					is displayed, the menu reflects those changes whenever the user next shows it. However, the <a class="see" href="&davcref;">&davcname;</a>
					window dynamically reflects any changes you make.
				</para>
			</remarks>
			<details name="Referencing">
				<h4 class="remarks">Referencing the Command Object</h4>
				<list type="bullet">
					<item>
						<term>
							To access the properties of a <self>Command Object</self>, you reference it in its collection using
							its <see cref="P:&dans;.Command.Name" /> property. In VBScript and Visual Basic you can use the <see cref="P:&dans;.Command.Name" />
							property directly:
						</term>
						<description>
							<code xml:space="preserve">
&darootref;.<keyword>Characters</keyword>("<token>CharacterID</token>").<keyword>Commands</keyword>("<token>Name</token>&gt;").<token>property</token>[ = <token>value</token>]
</code>
						</description>
					</item>
					<item>
						<term>
							For programming languages that don't support collections, use the <see cref="M:&dans;.Commands.Command" />
							method:
						</term>
						<description>
							<code xml:space="preserve">
&darootref;.<keyword>Characters</keyword>("<token>CharacterID</token>").<keyword>Commands</keyword>.<keyword>Command</keyword>("<token>Name</token>").<token>property</token>[ = <token>value</token>]
</code>
						</description>
					</item>
					<item>
						<term>
							You can also use a <self>Command Object</self> by creating a reference to it. In Visual Basic,
							declare an object variable and use the <keyword>Set</keyword> statement to create the reference:
						</term>
						<description>
							<code xml:space="preserve"><keyword>Dim</keyword> Command1 <keyword>as</keyword> <keyword>Object</keyword>
...
<keyword>Set</keyword> Command1 = &darootref;.<keyword>Characters</keyword>("MyCharacterID").<keyword>Commands</keyword>("SampleCommand")
...
Command1.<keyword>Enabled</keyword> = True</code>
						</description>
					</item>
					<item>
						<term>
							You can also declare the object as type <keyword>DaCtlCommand</keyword> and create the reference. This
							convention enables early syntax checking and binding, which results in better performance:
						</term>
						<description>
							<code xml:space="preserve"><keyword>Dim</keyword> Command1 <keyword>as</keyword> <keyword>DaControl</keyword>.<keyword>DaCtlCommand</keyword>
...
<keyword>Set</keyword> Command1 = &darootref;.<keyword>Characters</keyword>("MyCharacterID").<keyword>Commands</keyword>("SampleCommand")
...
Command1.<keyword>Enabled</keyword> = True</code>
						</description>
					</item>
					<item>
						<term>
							In VBScript, you can't declare a reference as a particular type, but you can still declare the
							variable and set it to the <self>Command</self> in the collection:
						</term>
						<description>
							<code xml:space="preserve"><keyword>Dim</keyword> Command1
...
<keyword>Set</keyword> Command1 = &darootref;.<keyword>Characters</keyword>("MyCharacterID").<keyword>Commands</keyword>("SampleCommand")
...
Command1.<keyword>Enabled</keyword> = True</code>
						</description>
					</item>
				</list>
			</details>
			<details name="Table">
				<h4 class="remarks">Details</h4>
				<para>
					The following table summarizes how the properties of a <self>Command</self> affect its presentation:
				</para>
				<table>
					<tr valign="top">
						<th align="left" valign="top" width="12%">
							Caption<br />Property
						</th>
						<th align="left" valign="top" width="12%">
							Voice
							Caption<br />Property
						</th>
						<th align="left" valign="top" width="13%">
							Voice Grammar<br />Property
						</th>
						<th align="left" valign="top" width="13%">
							Visible<br />Property
						</th>
						<th align="left" valign="top" width="12%">
							Enabled<br />Property
						</th>
						<th align="left" valign="top" width="18%">
							Appears
							in the Character's <a href="&dacmref;">&dacmname;</a>
						</th>
						<th align="left" valign="top" width="20%">
							Appears
							in the <a href="&davcref;">&davcname;</a> window
						</th>
					</tr>
					<tr valign="top">
						<td width="12%">Set</td>
						<td width="12%">Set</td>
						<td width="13%">Set</td>
						<td width="13%">True</td>
						<td width="12%">True</td>
						<td width="18%">
							Normal,
							using <keyword>Caption</keyword>
						</td>
						<td width="20%">
							Yes, using <keyword>VoiceCaption</keyword>
						</td>
					</tr>
					<tr valign="top">
						<td width="12%">Set</td>
						<td width="12%">Set</td>
						<td width="13%">Set</td>
						<td width="13%">True</td>
						<td width="12%">False</td>
						<td width="18%">
							Disabled,
							using <keyword>Caption</keyword>
						</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Set</td>
						<td width="12%">Set</td>
						<td width="13%">Set</td>
						<td width="13%">False</td>
						<td width="12%">True</td>
						<td width="18%">No</td>
						<td width="20%">
							Yes,
							using <keyword>VoiceCaption</keyword>
						</td>
					</tr>
					<tr valign="top">
						<td width="12%">Set</td>
						<td width="12%">Set</td>
						<td width="13%">Set</td>
						<td width="13%">False</td>
						<td width="12%">False</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Set</td>
						<td width="12%">Set</td>
						<td width="13%">Empty</td>
						<td width="13%">True</td>
						<td width="12%">True</td>
						<td width="18%">
							Normal,
							using <keyword>Caption</keyword>
						</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Set</td>
						<td width="12%">Set</td>
						<td width="13%">Empty</td>
						<td width="13%">True</td>
						<td width="12%">False</td>
						<td width="18%">
							Disabled,
							using <keyword>Caption</keyword>
						</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Set</td>
						<td width="12%">Set</td>
						<td width="13%">Empty</td>
						<td width="13%">False</td>
						<td width="12%">True</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Set</td>
						<td width="12%">Set</td>
						<td width="13%">Empty</td>
						<td width="13%">False</td>
						<td width="12%">False</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Empty</td>
						<td width="12%">Set</td>
						<td width="13%">Set</td>
						<td width="13%">True</td>
						<td width="12%">True</td>
						<td width="18%">No</td>
						<td width="20%">
							Yes,
							using <keyword>VoiceCaption</keyword>
						</td>
					</tr>
					<tr valign="top">
						<td width="12%">Empty</td>
						<td width="12%">Set</td>
						<td width="13%">Set</td>
						<td width="13%">True</td>
						<td width="12%">False</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Empty</td>
						<td width="12%">Set</td>
						<td width="13%">Set</td>
						<td width="13%">False</td>
						<td width="12%">True</td>
						<td width="18%">No</td>
						<td width="20%">
							Yes,
							using <keyword>VoiceCaption</keyword>
						</td>
					</tr>
					<tr valign="top">
						<td width="12%">Empty</td>
						<td width="12%">Set</td>
						<td width="13%">Set</td>
						<td width="13%">False</td>
						<td width="12%">False</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Empty</td>
						<td width="12%">Set</td>
						<td width="13%">Empty</td>
						<td width="13%">True</td>
						<td width="12%">True</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Empty</td>
						<td width="12%">Set</td>
						<td width="13%">Empty</td>
						<td width="13%">True</td>
						<td width="12%">False</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Empty</td>
						<td width="12%">Set</td>
						<td width="13%">Empty</td>
						<td width="13%">False</td>
						<td width="12%">True</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Empty</td>
						<td width="12%">Set</td>
						<td width="13%">Empty</td>
						<td width="13%">False</td>
						<td width="12%">False</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Set</td>
						<td width="12%">Empty</td>
						<td width="13%">Set</td>
						<td width="13%">True</td>
						<td width="12%">True</td>
						<td width="18%">
							Normal,
							using <keyword>Caption</keyword>
						</td>
						<td width="20%">
							Yes, using <keyword>Caption</keyword>
						</td>
					</tr>
					<tr valign="top">
						<td width="12%">Set</td>
						<td width="12%">Empty</td>
						<td width="13%">Set</td>
						<td width="13%">True</td>
						<td width="12%">False</td>
						<td width="18%">
							Disabled,
							using <keyword>Caption</keyword>
						</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Set</td>
						<td width="12%">Empty</td>
						<td width="13%">Set</td>
						<td width="13%">False</td>
						<td width="12%">True</td>
						<td width="18%">No</td>
						<td width="20%">
							Yes,
							using <keyword>Caption</keyword>
						</td>
					</tr>
					<tr valign="top">
						<td width="12%">Set</td>
						<td width="12%">Empty</td>
						<td width="13%">Set</td>
						<td width="13%">False</td>
						<td width="12%">False</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Set</td>
						<td width="12%">Empty</td>
						<td width="13%">Empty</td>
						<td width="13%">True</td>
						<td width="12%">True</td>
						<td width="18%">
							Normal,
							using <keyword>Caption</keyword>
						</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Set</td>
						<td width="12%">Empty</td>
						<td width="13%">Empty</td>
						<td width="13%">True</td>
						<td width="12%">False</td>
						<td width="18%">
							Disabled,
							using <keyword>Caption</keyword>
						</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Set</td>
						<td width="12%">Empty</td>
						<td width="13%">Empty</td>
						<td width="13%">False</td>
						<td width="12%">True</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Set</td>
						<td width="12%">Empty</td>
						<td width="13%">Empty</td>
						<td width="13%">False</td>
						<td width="12%">False</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Empty</td>
						<td width="12%">Empty</td>
						<td width="13%">Set</td>
						<td width="13%">True</td>
						<td width="12%">True</td>
						<td width="18%">No</td>
						<td width="20%">
							No<sup>
								<b>*</b>
							</sup>
						</td>
					</tr>
					<tr valign="top">
						<td width="12%">Empty</td>
						<td width="12%">Empty</td>
						<td width="13%">Set</td>
						<td width="13%">True</td>
						<td width="12%">False</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Empty</td>
						<td width="12%">Empty</td>
						<td width="13%">Set</td>
						<td width="13%">False</td>
						<td width="12%">True</td>
						<td width="18%">No</td>
						<td width="20%">
							No<sup>
								<b>*</b>
							</sup>
						</td>
					</tr>
					<tr valign="top">
						<td width="12%">Empty</td>
						<td width="12%">Empty</td>
						<td width="13%">Set</td>
						<td width="13%">False</td>
						<td width="12%">False</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Empty</td>
						<td width="12%">Empty</td>
						<td width="13%">Empty</td>
						<td width="13%">True</td>
						<td width="12%">True</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Empty</td>
						<td width="12%">Empty</td>
						<td width="13%">Empty</td>
						<td width="13%">True</td>
						<td width="12%">False</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Empty</td>
						<td width="12%">Empty</td>
						<td width="13%">Empty</td>
						<td width="13%">False</td>
						<td width="12%">True</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Empty</td>
						<td width="12%">Empty</td>
						<td width="13%">Empty</td>
						<td width="13%">False</td>
						<td width="12%">False</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td colspan="7" width="100%">
							<sup>
								<b>* </b>
							</sup>The command is still voice-accessible.
						</td>
					</tr>
				</table>
			</details>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="P:&dans;.Balloon.BackColor">
			<summary>
				<para>
					Specifies the background color of a character's <a class="see" href="&dawbref;">&dawbname;</a>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>balloon</token>-&gt;<keyword>get_BackColor</keyword> (<token>&amp;BackColor</token>)</para>
<para><token>balloon</token>-&gt;<keyword>put_BackColor</keyword> (<token>BackColor</token>)</para>
</cpp>
<csharp>
<para>[<token>BackColor</token> = ]&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>BackColor</keyword></para>
<para>&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>BackColor</keyword> = <token>BackColor</token></para>
</csharp>
<vb>
<para>[<token>BackColor</token> = ]&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>BackColor</keyword></para>
<para>&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>BackColor</keyword> = <token>BackColor</token></para>
</vb>
</syntax>
			<value name="BackColor">
				A <typename>numeric</typename> value that specifies the background color.
			</value>
			<remarks>
				<include file="&dainclude;" path="/doc/properties/para[@name='Color']" />
				<include file="&dainclude;" path="/doc/properties/note[@name='ThisClientOnly']" />
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Balloon.BorderColor">
			<summary>
				<para>
					Specifies the border color of a character's <a class="see" href="&dawbref;">&dawbname;</a>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>balloon</token>-&gt;<keyword>get_BorderColor</keyword> (<token>&amp;BorderColor</token>)</para>
<para><token>balloon</token>-&gt;<keyword>put_BorderColor</keyword> (<token>BorderColor</token>)</para>
</cpp>
<csharp>
<para>[<token>BorderColor</token> = ]&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>BorderColor</keyword></para>
<para>&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>BorderColor</keyword> = <token>BorderColor</token></para>
</csharp>
<vb>
<para>[<token>BorderColor</token> = ]&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>BorderColor</keyword></para>
<para>&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>BorderColor</keyword> = <token>BorderColor</token></para>
</vb>
</syntax>
			<value name="BorderColor">
				A <typename>numeric</typename> value that specifies the outline color.
			</value>
			<remarks>
				<include file="&dainclude;" path="/doc/properties/para[@name='Color']" />
				<include file="&dainclude;" path="/doc/properties/note[@name='ThisClientOnly']" />
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Balloon.CharsPerLine">
			<summary>
				<para>
					Specifies the characters per line used for a character's <a class="see" href="&dawbref;">&dawbname;</a>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>balloon</token>-&gt;<keyword>get_CharsPerLine</keyword> (<token>&amp;CharsPerLine</token>)</para>
<para><token>balloon</token>-&gt;<keyword>put_CharsPerLine</keyword> (<token>CharsPerLine</token>)</para>
</cpp>
<csharp>
<para>[<token>CharsPerLine</token> = ]&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>CharsPerLine</keyword></para>
<para>&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>CharsPerLine</keyword> = <token>CharsPerLine</token></para>
</csharp>
<vb>
<para>[<token>CharsPerLine</token> = ]&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>CharsPerLine</keyword></para>
<para>&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>CharsPerLine</keyword> = <token>CharsPerLine</token></para>
</vb>
</syntax>
			<value name="CharsPerLine">
				A <typename>numeric</typename> value that specifies the average number of
				characters per line.
			</value>
			<remarks>
				<para>
					The <self>CharsPerLine</self> property is the average number of characters (letters) displayed in
					the <a class="see" href="&dawbref;">&dawbname;</a>. For backward compatibility, you can also set the value
					using the <see cref="P:&dans;.Balloon.Style" /> property.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='ThisClientOnly']" />
			</remarks>
			<seealso cref="P:&dans;.Balloon.Style" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Balloon.Enabled">
			<summary>
				<para>
					Indicates if the <a class="see" href="&dawbref;">&dawbname;</a> is enabled for a character.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>balloon</token>-&gt;<keyword>get_Enabled</keyword> (<token>&amp;Enabled</token>)</para>
</cpp>
<csharp>
<para>[<token>Enabled</token> = ]&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>Enabled</keyword></para>
</csharp>
<vb>
<para>[<token>Enabled</token> = ]&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>Enabled</keyword></para>
</vb>
</syntax>
			<value name="Enabled">
				A <typename>boolean</typename> value that indicates if the <see cref="F:&dans;.BalloonStyleFlags.Enabled" />
				style is set.
			</value>
			<remarks>
				<include path="/doc/members/member[@name='F:&dans;.BalloonStyleFlags.Enabled']/remarks/para" />
				<para>
					The default enabled style is set as part of a character's definition when the character is compiled in
					the Microsoft<sup>®</sup> Agent Character Editor. If a character is defined to not support the <a class="see" href="&dawbref;">&dawbname;</a>,
					this property will always be <keyword>False</keyword> for the character.
				</para>
				<para>
					The user can override the enabled style for <em>all</em> characters in the <a class="see" href="&dapsref;#Output">&dapsname;</a>
					window.
				</para>
			</remarks>
			<seealso cref="P:&dans;.Balloon.Style" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Settings.BalloonEnabled" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Balloon.FontCharSet">
			<summary>
				<para>
					Specifies the character set for the font used in a character's <a class="see" href="&dawbref;">&dawbname;</a>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>balloon</token>-&gt;<keyword>get_FontCharSet</keyword> (<token>&amp;FontCharSet</token>)</para>
<para><token>balloon</token>-&gt;<keyword>put_FontCharSet</keyword> (<token>FontCharSet</token>)</para>
</cpp>
<csharp>
<para>[<token>FontCharSet</token> = ]&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>FontCharSet</keyword></para>
<para>&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>FontCharSet</keyword> = <token>FontCharSet</token></para>
</csharp>
<vb>
<para>[<token>FontCharSet</token> = ]&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>FontCharSet</keyword></para>
<para>&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>FontCharSet</keyword> = <token>FontCharSet</token></para>
</vb>
</syntax>
			<value name="FontCharSet">
				A <typename>numeric</typename> value that specifies one of the character sets
				supported by Windows.
			</value>
			<remarks>
				<include file="&dainclude;" path="/doc/properties/para[@name='DefaultBalloonFont']" />
				<note>
					If you're using a character that you didn't compile, check the <see cref="P:&dans;.Balloon.FontName" />
					and <self>FontCharSet</self> properties for the character to determine whether they are appropriate for
					your locale. You may need to set these values before using the <see cref="M:&dans;.Character.Speak" />
					method to ensure appropriate text display within the <a class="see" href="&dawbref;">&dawbname;</a>.
				</note>
				<include file="&dainclude;" path="/doc/properties/note[@name='ThisClientOnly']" />
			</remarks>
			<seealso cref="P:&dans;.Balloon.FontName" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Settings.BalloonFont" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Balloon.FontName">
			<summary>
				<para>
					Specifies the font used in the <a class="see" href="&dawbref;">&dawbname;</a> for the specified character.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>balloon</token>-&gt;<keyword>get_FontName</keyword> (<token>&amp;FontName</token>)</para>
<para><token>balloon</token>-&gt;<keyword>put_FontName</keyword> (<token>FontName</token>)</para>
</cpp>
<csharp>
<para>[<token>FontName</token> = ]&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>FontName</keyword></para>
<para>&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>FontName</keyword> = <token>FontName</token></para>
</csharp>
<vb>
<para>[<token>FontName</token> = ]&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>FontName</keyword></para>
<para>&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>FontName</keyword> = <token>FontName</token></para>
</vb>
</syntax>
			<value name="FontName">
				A <typename>string</typename> value that specifies the font name.
			</value>
			<remarks>
				<include file="&dainclude;" path="/doc/properties/para[@name='DefaultBalloonFont']" />
				<note>
					If you're using a character that you didn't compile, check the <self>FontName</self> and <see cref="P:&dans;.Balloon.FontCharSet" />
					properties for the character to determine whether they are appropriate for your locale. You may need
					to set these values before using the <see cref="M:&dans;.Character.Speak" /> method to ensure appropriate text
					display within the <a class="see" href="&dawbref;">&dawbname;</a>.
				</note>
				<include file="&dainclude;" path="/doc/properties/note[@name='ThisClientOnly']" />
			</remarks>
			<seealso cref="P:&dans;.Balloon.FontCharSet" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Settings.BalloonFont" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Balloon.FontBold">
			<summary>
				<para>
					Specifies the font style of a character's the <a class="see" href="&dawbref;">&dawbname;</a>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>balloon</token>-&gt;<keyword>get_FontBold</keyword> (<token>&amp;FontBold</token>)</para>
<para><token>balloon</token>-&gt;<keyword>put_FontBold</keyword> (<token>FontBold</token>)</para>
</cpp>
<csharp>
<para>[<token>FontBold</token> = ]&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>FontBold</keyword></para>
<para>&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>FontBold</keyword> = <token>FontBold</token></para>
</csharp>
<vb>
<para>[<token>FontBold</token> = ]&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>FontBold</keyword></para>
<para>&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>FontBold</keyword> = <token>FontBold</token></para>
</vb>
</syntax>
			<value name="FontBold">
				A <typename>boolean</typename> value that indicates if the font is bold.
			</value>
			<remarks>
				<include file="&dainclude;" path="/doc/properties/para[@name='DefaultBalloonFont']" />
				<include file="&dainclude;" path="/doc/properties/note[@name='ThisClientOnly']" />
			</remarks>
			<seealso cref="P:&dans;.Settings.BalloonFont" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Balloon.FontItalic">
			<summary>
				<para>
					Specifies the font style of a character's the <a class="see" href="&dawbref;">&dawbname;</a>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>balloon</token>-&gt;<keyword>get_FontItalic</keyword> (<token>&amp;FontItalic</token>)</para>
<para><token>balloon</token>-&gt;<keyword>put_FontItalic</keyword> (<token>FontItalic</token>)</para>
</cpp>
<csharp>
<para>[<token>FontItalic</token> = ]&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>FontItalic</keyword></para>
<para>&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>FontItalic</keyword> = <token>FontItalic</token></para>
</csharp>
<vb>
<para>[<token>FontItalic</token> = ]&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>FontItalic</keyword></para>
<para>&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>FontItalic</keyword> = <token>FontItalic</token></para>
</vb>
</syntax>
			<value name="FontItalic">
				A <typename>boolean</typename> value that indicates if the font is italic.
			</value>
			<remarks>
				<include file="&dainclude;" path="/doc/properties/para[@name='DefaultBalloonFont']" />
				<include file="&dainclude;" path="/doc/properties/note[@name='ThisClientOnly']" />
			</remarks>
			<seealso cref="P:&dans;.Settings.BalloonFont" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Balloon.FontSize">
			<summary>
				<para>
					Specifies the font size supported for the <a class="see" href="&dawbref;">&dawbname;</a> for the specified
					character.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>balloon</token>-&gt;<keyword>get_FontSize</keyword> (<token>&amp;FontSize</token>)</para>
<para><token>balloon</token>-&gt;<keyword>put_FontSize</keyword> (<token>FontSize</token>)</para>
</cpp>
<csharp>
<para>[<token>FontSize</token> = ]&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>FontSize</keyword></para>
<para>&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>FontSize</keyword> = <token>FontSize</token></para>
</csharp>
<vb>
<para>[<token>FontSize</token> = ]&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>FontSize</keyword></para>
<para>&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>FontSize</keyword> = <token>FontSize</token></para>
</vb>
</syntax>
			<value name="FontSize">
				A <typename>numeric</typename> value that specifies the font size, in points.
			</value>
			<remarks>
				<include file="&dainclude;" path="/doc/properties/para[@name='DefaultBalloonFont']" />
				<include file="&dainclude;" path="/doc/properties/note[@name='ThisClientOnly']" />
			</remarks>
			<seealso cref="P:&dans;.Settings.BalloonFont" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Balloon.FontStrikethru">
			<summary>
				<para>
					Specifies the font style of a character's the <a class="see" href="&dawbref;">&dawbname;</a>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>balloon</token>-&gt;<keyword>get_FontStrikethru</keyword> (<token>&amp;FontStrikethru</token>)</para>
<para><token>balloon</token>-&gt;<keyword>put_FontStrikethru</keyword> (<token>FontStrikethru</token>)</para>
</cpp>
<csharp>
<para>[<token>FontStrikethru</token> = ]&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>FontStrikethru</keyword></para>
<para>&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>FontStrikethru</keyword> = <token>FontStrikethru</token></para>
</csharp>
<vb>
<para>[<token>FontStrikethru</token> = ]&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>FontStrikethru</keyword></para>
<para>&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>FontStrikethru</keyword> = <token>FontStrikethru</token></para>
</vb>
</syntax>
			<value name="FontStrikethru">
				A <typename>boolean</typename> value that indicates if the font has the
				<em>strikethru</em> style.
			</value>
			<remarks>
				<include file="&dainclude;" path="/doc/properties/para[@name='DefaultBalloonFont']" />
				<include file="&dainclude;" path="/doc/properties/note[@name='ThisClientOnly']" />
			</remarks>
			<seealso cref="P:&dans;.Settings.BalloonFont" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Balloon.FontUnderline">
			<summary>
				<para>
					Specifies the font style of a character's <a class="see" href="&dawbref;">&dawbname;</a>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>balloon</token>-&gt;<keyword>get_FontUnderline</keyword> (<token>&amp;FontUnderline</token>)</para>
<para><token>balloon</token>-&gt;<keyword>put_FontUnderline</keyword> (<token>FontUnderline</token>)</para>
</cpp>
<csharp>
<para>[<token>FontUnderline</token> = ]&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>FontUnderline</keyword></para>
<para>&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>FontUnderline</keyword> = <token>FontUnderline</token></para>
</csharp>
<vb>
<para>[<token>FontUnderline</token> = ]&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>FontUnderline</keyword></para>
<para>&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>FontUnderline</keyword> = <token>FontUnderline</token></para>
</vb>
</syntax>
			<value name="FontUnderline">
				A <typename>boolean</typename> value that indicates if the font is underlined.
			</value>
			<remarks>
				<include file="&dainclude;" path="/doc/properties/para[@name='DefaultBalloonFont']" />
				<include file="&dainclude;" path="/doc/properties/note[@name='ThisClientOnly']" />
			</remarks>
			<seealso cref="P:&dans;.Settings.BalloonFont" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Balloon.ForeColor">
			<summary>
				<para>
					deprecated
				</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:&dans;.Balloon.TextColor" /> property, but is
					still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Balloon.TextColor">
			<summary>
				<para>
					Returns the text color displayed in a character's <a class="see" href="&dawbref;">&dawbname;</a>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>balloon</token>-&gt;<keyword>get_TextColor</keyword> (<token>&amp;TextColor</token>)</para>
<para><token>balloon</token>-&gt;<keyword>put_TextColor</keyword> (<token>TextColor</token>)</para>
</cpp>
<csharp>
<para>[<token>TextColor</token> = ]&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>TextColor</keyword></para>
<para>&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>TextColor</keyword> = <token>TextColor</token></para>
</csharp>
<vb>
<para>[<token>TextColor</token> = ]&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>TextColor</keyword></para>
<para>&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>TextColor</keyword> = <token>TextColor</token></para>
</vb>
</syntax>
			<value name="TextColor">
				A <typename>numeric</typename> value that specifies the text color.
			</value>
			<remarks>
				<include file="&dainclude;" path="/doc/properties/para[@name='Color']" />
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Balloon.NumberOfLines">
			<summary>
				<para>
					Specifies the number of lines used for a character's <a class="see" href="&dawbref;">&dawbname;</a>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>balloon</token>-&gt;<keyword>get_NumberOfLines</keyword> (<token>&amp;NumberOfLines</token>)</para>
<para><token>balloon</token>-&gt;<keyword>put_NumberOfLines</keyword> (<token>NumberOfLines</token>)</para>
</cpp>
<csharp>
<para>[<token>NumberOfLines</token> = ]&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>NumberOfLines</keyword></para>
<para>&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>NumberOfLines</keyword> = <token>NumberOfLines</token></para>
</csharp>
<vb>
<para>[<token>NumberOfLines</token> = ]&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>NumberOfLines</keyword></para>
<para>&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>NumberOfLines</keyword> = <token>NumberOfLines</token></para>
</vb>
</syntax>
			<value name="NumberOfLines">
				A <typename>numeric</typename> value that specifies the number of lines in
				a fixed-size <a class="see" href="&dawbref;">&dawbname;</a>.
			</value>
			<remarks>
				<para>
					The <self>NumberOfLines</self> property is only used if the <a class="see" href="&dawbref;">&dawbname;</a>
					doesn't have the <keyword>AutoSize</keyword> style. For backward compatibility, you can also set the value
					using the <see cref="P:&dans;.Balloon.Style" /> property.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='ThisClientOnly']" />
			</remarks>
			<seealso cref="P:&dans;.Balloon.Style" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Balloon.Style">
			<summary>
				<para>
					Specifies the character's <a class="see" href="&dawbref;">&dawbname;</a> output style.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>balloon</token>-&gt;<keyword>get_Style</keyword> (<token>&amp;Style</token>)</para>
<para><token>balloon</token>-&gt;<keyword>put_Style</keyword> (<token>Style</token>)</para>
</cpp>
<csharp>
<para>[<token>Style</token> = ]&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>Style</keyword></para>
<para>&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>Style</keyword> = <token>Style</token></para>
</csharp>
<vb>
<para>[<token>Style</token> = ]&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>Style</keyword></para>
<para>&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>Style</keyword> = <token>Style</token></para>
</vb>
</syntax>
			<value name="Style">
				An <typename>numeric</typename> value that represents the <a class="see" href="&dawbref;">&dawbname;'s</a>
				output style. The style value is a bit field with bits defined as follows:
				<list type="table">
					<item>
						<term>bit 0 (&hexprefix;00000001)</term>
						<description>
							<see cref="P:&dans;.Balloon.Enabled" />
						</description>
					</item>
					<item>
						<term>bit 1 (&hexprefix;00000002)</term>
						<description>
							<see cref="P:&dans;.Balloon.SizeToText" />
						</description>
					</item>
					<item>
						<term>bit 2 (&hexprefix;00000004)</term>
						<description>
							<see cref="P:&dans;.Balloon.AutoHide" />
						</description>
					</item>
					<item>
						<term>bit 3 (&hexprefix;00000008)</term>
						<description>
							<see cref="P:&dans;.Balloon.AutoPace" />
						</description>
					</item>
					<item>
						<term>bit 4 (&hexprefix;00000010)</term>
						<description>
							<see cref="P:&dans;.Balloon.ShowPartialLines" />
						</description>
					</item>
					<item>
						<term>bits 16-23</term>
						<description>
							<see cref="P:&dans;.Balloon.CharsPerLine" />
						</description>
					</item>
					<item>
						<term>bits 24-31</term>
						<description>
							<see cref="P:&dans;.Balloon.NumberOfLines" />
						</description>
					</item>
				</list>
			</value>
			<remarks>
				<para>
					All of the settings included in the <self>Style</self> property can be accessed using specific <see cref="T:&dans;.Balloon" suffix="Object" />
					properties. The <self>Style</self> property lets you retrieve or set all of these settings at once.
				</para>
				<para>
					The defaults for the <self>Style</self> property are set when the character is compiled with the Microsoft<sup>®</sup>
					Agent Character Editor.
				</para>
			</remarks>
			<details>
				<list type="bullet">
					<item>
						<include path="/doc/members/member[@name='F:&dans;.BalloonStyleFlags.Enabled']/remarks/para" />
					</item>
					<item>
						<include path="/doc/members/member[@name='F:&dans;.BalloonStyleFlags.SizeToText']/remarks/para" />
					</item>
					<item>
						<include path="/doc/members/member[@name='F:&dans;.BalloonStyleFlags.AutoHide']/remarks/para" />
					</item>
					<item>
						<include path="/doc/members/member[@name='F:&dans;.BalloonStyleFlags.AutoPace']/remarks/para" />
					</item>
					<item>
						<include path="/doc/members/member[@name='F:&dans;.BalloonStyleFlags.ShowPartialLines']/remarks/para" />
					</item>
					<item>
						<para>
							The <self>Style</self> property also contains the <see cref="P:&dans;.Balloon.CharsPerLine" />
							in the lower byte of the upper word and the <see cref="P:&dans;.Balloon.NumberOfLines" /> in the high byte
							of the upper word. The value for the <see cref="P:&dans;.Balloon.CharsPerLine" /> must be between 8 and
							255, and the <see cref="P:&dans;.Balloon.NumberOfLines" /> must be between 1 and 128. If you provide an
							invalid value for the <self>Style</self> property, Double Agent will raise an error.
						</para>
					</item>
				</list>
				<note>
					The <self>Style</self> property can be set even if the user has disabled <a class="see" href="&dawbref;">&dawbname;s</a>
					in the <a class="see" href="&dapsref;#Output">&dapsname;</a> window.
				</note>
				<include file="&dainclude;" path="/doc/properties/note[@name='ThisClientOnly']" />
			</details>
			<seealso cref="P:&dans;.Balloon.AutoHide" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Balloon.AutoPace" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Balloon.CharsPerLine" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Balloon.NumberOfLines" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Balloon.Enabled" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Balloon.SizeToText" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Balloon.ShowPartialLines" prefix="The" suffix="Property" />
			<seealso cref="T:&dans;.BalloonStyleFlags" suffix="Enumeration" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Balloon.Visible">
			<summary>
				<para>
					Specifies the visibility of a character's <a class="see" href="&dawbref;">&dawbname;</a>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>balloon</token>-&gt;<keyword>get_Visible</keyword> (<token>&amp;Visible</token>)</para>
<para><token>balloon</token>-&gt;<keyword>put_Visible</keyword> (<token>Visible</token>)</para>
</cpp>
<csharp>
<para>[<token>Visible</token> = ]&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>Visible</keyword></para>
<para>&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>Visible</keyword> = <token>Visible</token></para>
</csharp>
<vb>
<para>[<token>Visible</token> = ]&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>Visible</keyword></para>
<para>&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>Visible</keyword> = <token>Visible</token></para>
</vb>
</syntax>
			<value name="Visible">
				A <typename>boolean</typename> value that indicates if the <a class="see" href="&dawbref;">&dawbname;</a>
				is visible.
			</value>
			<remarks>
				<para>
					If you follow a <see cref="M:&dans;.Character.Speak" /> or <see cref="M:&dans;.Character.Think" />
					call with a statement that changes this property, it may not affect the  <self>Visible</self> state because
					the <see cref="M:&dans;.Character.Speak" /> or <see cref="M:&dans;.Character.Think" /> call gets queued, but
					the call to set this property does not. Therefore, only set this value when no <see cref="M:&dans;.Character.Speak" />
					or <see cref="M:&dans;.Character.Think" /> calls are in the character's request queue.
				</para>
				<para>
					If you attempt to set this property while the character is speaking, moving, or being dragged, the
					property setting does not take effect until the preceding operation is completed.
				</para>
				<para>
					Calling the <see cref="M:&dans;.Character.Speak" /> and <see cref="M:&dans;.Character.Think" />
					methods automatically makes the <a class="see" href="&dawbref;">&dawbname;</a> visible, setting the <self>Visible</self>
					property to <keyword>True</keyword>. If the <see cref="T:&dans;.Balloon" text="Balloon's" /> <see cref="P:&dans;.Balloon.AutoHide" />
					property is enabled, the <a class="see" href="&dawbref;">&dawbname;</a> is automatically hidden after the
					text output is complete. Clicking or dragging a character that is not currently speaking also automatically
					hides the <a class="see" href="&dawbref;">&dawbname;</a>, even if its <see cref="P:&dans;.Balloon.AutoHide" />
					setting is disabled.
				</para>
			</remarks>
			<seealso cref="P:&dans;.Balloon.AutoHide" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Balloon.Style" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Balloon.AutoHide">
			<summary>
				<para>
					Indicates if the <a class="see" href="&dawbref;">&dawbname;</a> will be automatically hidden after all
					of its text has been shown.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>balloon</token>-&gt;<keyword>get_AutoHide</keyword> (<token>&amp;AutoHide</token>)</para>
<para><token>balloon</token>-&gt;<keyword>put_AutoHide</keyword> (<token>AutoHide</token>)</para>
</cpp>
<csharp>
<para>[<token>AutoHide</token> = ]&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>AutoHide</keyword></para>
<para>&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>AutoHide</keyword> = <token>AutoHide</token></para>
</csharp>
<vb>
<para>[<token>AutoHide</token> = ]&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>AutoHide</keyword></para>
<para>&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>AutoHide</keyword> = <token>AutoHide</token></para>
</vb>
</syntax>
			<value name="AutoHide">
				A <typename>boolean</typename> value that indicates if the <see cref="F:&dans;.BalloonStyleFlags.AutoHide" />
				style is enabled.
			</value>
			<remarks>
				<include path="/doc/members/member[@name='F:&dans;.BalloonStyleFlags.AutoHide']/remarks/para" />
			</remarks>
			<seealso cref="P:&dans;.Balloon.Style" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Balloon.AutoPace">
			<summary>
				<para>
					Indicates if the <a class="see" href="&dawbref;">&dawbname;</a> paces its text display to the speech output.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>balloon</token>-&gt;<keyword>get_AutoPace</keyword> (<token>&amp;AutoPace</token>)</para>
<para><token>balloon</token>-&gt;<keyword>put_AutoPace</keyword> (<token>AutoPace</token>)</para>
</cpp>
<csharp>
<para>[<token>AutoPace</token> = ]&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>AutoPace</keyword></para>
<para>&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>AutoPace</keyword> = <token>AutoPace</token></para>
</csharp>
<vb>
<para>[<token>AutoPace</token> = ]&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>AutoPace</keyword></para>
<para>&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>AutoPace</keyword> = <token>AutoPace</token></para>
</vb>
</syntax>
			<value name="AutoPace">
				A <typename>boolean</typename> value that indicates if the <see cref="F:&dans;.BalloonStyleFlags.AutoPace" />
				style is enabled.
			</value>
			<remarks>
				<include path="/doc/members/member[@name='F:&dans;.BalloonStyleFlags.AutoPace']/remarks/para" />
			</remarks>
			<seealso cref="P:&dans;.Balloon.Style" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Balloon.ShowPartialLines">
			<summary>
				<para>
					Indicates if the <a class="see" href="&dawbref;">&dawbname;</a> shows partial lines when it scrolls.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>balloon</token>-&gt;<keyword>get_ShowPartialLines</keyword> (<token>&amp;ShowPartialLines</token>)</para>
<para><token>balloon</token>-&gt;<keyword>put_ShowPartialLines</keyword> (<token>ShowPartialLines</token>)</para>
</cpp>
<csharp>
<para>[<token>ShowPartialLines</token> = ]&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>ShowPartialLines</keyword></para>
<para>&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>ShowPartialLines</keyword> = <token>ShowPartialLines</token></para>
</csharp>
<vb>
<para>[<token>ShowPartialLines</token> = ]&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>ShowPartialLines</keyword></para>
<para>&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>ShowPartialLines</keyword> = <token>ShowPartialLines</token></para>
</vb>
</syntax>
			<value name="ShowPartialLines">
				A <typename>boolean</typename> value that indicates if the <see cref="F:&dans;.BalloonStyleFlags.ShowPartialLines" />
				style is enabled.
			</value>
			<remarks>
				<include path="/doc/members/member[@name='F:&dans;.BalloonStyleFlags.ShowPartialLines']/remarks/para" />
			</remarks>
			<seealso cref="P:&dans;.Balloon.Style" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Balloon.SizeToText">
			<summary>
				<para>
					Indicates if the <a class="see" href="&dawbref;">&dawbname;</a> is automatically resized to fit it's
					contents.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>balloon</token>-&gt;<keyword>get_SizeToText</keyword> (<token>&amp;SizeToText</token>)</para>
<para><token>balloon</token>-&gt;<keyword>put_SizeToText</keyword> (<token>SizeToText</token>)</para>
</cpp>
<csharp>
<para>[<token>SizeToText</token> = ]&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>SizeToText</keyword></para>
<para>&dacharref_csharp;.<keyword>Balloon</keyword>.<keyword>SizeToText</keyword> = <token>SizeToText</token></para>
</csharp>
<vb>
<para>[<token>SizeToText</token> = ]&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>SizeToText</keyword></para>
<para>&dacharref_vb;.<keyword>Balloon</keyword>.<keyword>SizeToText</keyword> = <token>SizeToText</token></para>
</vb>
</syntax>
			<value name="SizeToText">
				A <typename>boolean</typename> value that indicates if the <see cref="F:&dans;.BalloonStyleFlags.SizeToText" />
				style is enabled.
			</value>
			<remarks>
				<include path="/doc/members/member[@name='F:&dans;.BalloonStyleFlags.SizeToText']/remarks/para" />
			</remarks>
			<seealso cref="P:&dans;.Balloon.Style" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:&dans;.Balloon">
			<summary>
				<para>
					Double Agent supports textual captioning of the <see cref="M:&dans;.Character.Speak" /> method using
					a cartoon <a class="see" href="&dawbref;">&dawbname;</a>. The <see cref="M:&dans;.Character.Think" />
					method lets you display text without audio output in a <glossary>thought</glossary> <a class="see" href="&dawbref;">&dawbname;</a>.
				</para>
				<para>
					The <self>Balloon Object</self> allows you to customize the appearance and behaviour of a character's <a class="see" href="&dawbref;">&dawbname;</a>.
				</para>
			</summary>
			<syntax>
				<list>
					<item>
						<term>
							<h4>
								<bookmark name="Properties"></bookmark>Properties
							</h4>
						</term>
						<description>
							<list type="&typelisttype;" class="syntax">
								<item>
									<term width="&typelistwidth;">
										<see cref="P:&dans;.Balloon.AutoHide" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Balloon.AutoHide']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Balloon.AutoPace" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Balloon.AutoPace']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Balloon.BackColor" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Balloon.BackColor']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Balloon.BorderColor" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Balloon.BorderColor']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Balloon.CharsPerLine" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Balloon.CharsPerLine']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Balloon.Enabled" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Balloon.Enabled']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Balloon.FontBold" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Balloon.FontBold']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Balloon.FontCharSet" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Balloon.FontCharSet']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Balloon.FontItalic" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Balloon.FontItalic']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Balloon.FontName" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Balloon.FontName']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Balloon.FontSize" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Balloon.FontSize']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Balloon.FontStrikethru" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Balloon.FontStrikethru']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Balloon.FontUnderline" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Balloon.FontUnderline']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Balloon.NumberOfLines" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Balloon.NumberOfLines']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Balloon.ShowPartialLines" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Balloon.ShowPartialLines']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Balloon.SizeToText" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Balloon.SizeToText']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Balloon.Style" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Balloon.Style']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Balloon.TextColor" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Balloon.TextColor']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Balloon.Visible" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Balloon.Visible']/summary/para[1]" />
									</description>
								</item>
							</list>
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					A character's initial <a class="see" href="&dawbref;">&dawbname;</a> defaults are defined and compiled in
					the Microsoft<sup>®</sup> Agent Character Editor. Once running, the <self>Balloon Object's</self> <keyword>Enabled</keyword>
					and <keyword>Font</keyword> properties may be overridden by the user. If a user changes the balloon's
					properties, they affect all characters. Both the <see cref="M:&dans;.Character.Speak" /> and <see cref="M:&dans;.Character.Think" /> balloons
					use the same property settings for size. You can access the properties for a character's <a class="see" href="&dawbref;">&dawbname;</a>
					through the <self>Balloon Object</self>, which is a child of the <see cref="T:&dans;.Character" suffix="Object" />.
				</para>
				<para>
					This object can be accessed using the <see class="" cref="T:&dans;.Character" suffix="Object's" /> <see class="" cref="P:&dans;.Character.Balloon" />
					property.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="P:&dans;.Request.Description">
			<summary>
				<para>
					Returns a description of a request error <see cref="P:&dans;.Request.Number" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>request</token>-&gt;<keyword>get_Description</keyword> (<token>&amp;Description</token>)</para>
</cpp>
<csharp>
<para>[<token>Description</token> = ]<token>request</token>.<keyword>Description</keyword></para>
</csharp>
<vb>
<para>[<token>Description</token> = ]<token>request</token>.<keyword>Description</keyword></para>
</vb>
</syntax>
			<value name="Description">
				A string value that corresponds to the error <keyword>Number</keyword>. If
				no description is found for an error, <self>Description</self> contains <em>"Application-defined or object-defined error"</em>.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Request.Number">
			<summary>
				<para>
					Returns the error or cause of the <see cref="P:&dans;.Request.Status" /> code.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>request</token>-&gt;<keyword>get_Number</keyword> (<token>&amp;Number</token>)</para>
</cpp>
<csharp>
<para>[<token>Number</token> = ]<token>request</token>.<keyword>Number</keyword></para>
</csharp>
<vb>
<para>[<token>Number</token> = ]<token>request</token>.<keyword>Number</keyword></para>
</vb>
</syntax>
			<value name="Number">
				The error or cause of the <keyword>Status</keyword> code. If there is no error, this
				value is zero.
			</value>
			<remarks>
				<para>
					For the values and meanings of the <self>Number</self> property, see <a href="../Reference/Ref_Errors.htm">Double Agent Error Codes</a>.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Request.Status">
			<summary>
				<para>
					You can use the <self>Status</self> property to check the status of your request.
				</para>
			</summary>
			<details>
				<h4 class="details">Example</h4>
				<code xml:space="preserve"><keyword>Dim</keyword> MyRequest

<keyword>Set</keyword> MyRequest = &darootref;.<keyword>Characters</keyword>("Genie").<keyword>Play</keyword> ("GetAttention")

<keyword>If</keyword> (MyRequest.<keyword>Status</keyword> = 2) <keyword>Then</keyword>
    'do something
<keyword>Else If</keyword> (MyRequest.<keyword>Status</keyword> = 0) <keyword>Then</keyword>
    'do something right away
<keyword>End If</keyword></code>
			</details>
			<syntax xml:space="preserve">
<cpp>
<para><token>request</token>-&gt;<keyword>get_Status</keyword> (<token>&amp;Status</token>)</para>
</cpp>
<csharp>
<para>[<token>Status</token> = ]<token>request</token>.<keyword>Status</keyword></para>
</csharp>
<vb>
<para>[<token>Status</token> = ]<token>request</token>.<keyword>Status</keyword></para>
</vb>
</syntax>
			<value name="Status">
				The current status of the request:<include path="/doc/members/member[@name='T:&dans;.RequestStatus']/syntax/list" />
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Request.ID">
			<summary>
				<para>
					Returns the server's unique identifier for the request.
				</para>
			</summary>
			<value name="ID">
				A <typename>numeric</typename> value used by the server to uniquely identify the request.
			</value>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:&dans;.Request">
			<summary>
				<para>
					Double Agent processes some methods, such as <see cref="M:&dans;.Characters.Load" />, <see cref="M:&dans;.Character.Play" />,
					and <see cref="M:&dans;.Character.Speak" />, asynchronously. This allows your application code to continue while
					the method is completing. When a client application calls one of these methods, the control queues
					the request and returns a <self>Request Object</self>. The <self>Request Object</self> allows you to check
					the status of your request by keeping a reference to the object.
				</para>
			</summary>
			<syntax>
				<list>
					<item>
						<term>
							<h4>
								<bookmark name="Properties"></bookmark>Properties
							</h4>
						</term>
						<description>
							<list type="&typelisttype;" class="syntax">
								<item>
									<term width="&typelistwidth;">
										<see cref="P:&dans;.Request.Number" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Request.Number']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Request.Description" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Request.Description']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Request.Status" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Request.Status']/summary/para[1]" />
									</description>
								</item>
							</list>
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					If you create a <self class="">Request Object</self> reference, Double Agent automatically notifies you
					when an animation request has started or completed through the <see cref="E:&darootobj;.RequestStart" />
					and <see cref="E:&darootobj;.RequestComplete" /> events. Because methods that return <self class="">Request Objects</self>
					are asynchronous and may not complete during the scope of the calling function, declare your reference to
					the <self class="">Request Object</self> globally.
				</para>
				<para>
					The following methods can return a <self class="">Request Object</self>: <see class="" cref="M:&dans;.Character.GestureAt" />,
					<see class="" cref="M:&dans;.Character.Hide" />, <see class="" cref="M:&dans;.Character.Interrupt" />,
					<see class="" cref="M:&dans;.Characters.Load" />, <see class="" cref="M:&dans;.Character.MoveTo" />, <see class="" cref="M:&dans;.Character.Play" />,
					<see class="" cref="M:&dans;.Character.Prepare" />, <see class="" cref="M:&dans;.Character.Show" />, <see class="" cref="M:&dans;.Character.Speak" />,
					<see class="" cref="M:&dans;.Character.Think" />, and <see class="" cref="M:&dans;.Character.Wait" />.
				</para>
			</remarks>
			<details>
				<h4 class="details">Examples</h4>
				<example>
					<para>
						In Visual Basic, first declare an object variable:
					</para>
					<code xml:space="preserve"><keyword>Dim</keyword> MyRequest <keyword>as</keyword> <keyword>Object</keyword></code>
					<para>
						In VBScript, you don't include the variable type in your declaration:
					</para>
					<code xml:space="preserve"><keyword>Dim</keyword> MyRequest</code>
					<para>
						And use Visual Basic's <keyword>Set</keyword> statement to assign the variable to the return value of
						the method call:
					</para>
					<code xml:space="preserve"><keyword>Set</keyword> MyRequest = &darootref;.<keyword>Characters</keyword>("<token>CharacterID</token>").<token>method</token> (<token>parameter[s]</token>)</code>
					<para>
						This adds a reference to the <self class="">Request Object</self>. The <self class="">Request Object</self>
						will be destroyed when there are no more references to it. Where you declare the <self class="">Request Object</self>
						and how you use it determines its lifetime. If the object is declared local to a subroutine or function,
						it will be destroyed when it goes out of scope; that is, when the subroutine or function ends.
						If the object is declared globally, it will not be destroyed until either the program terminates or
						a new value (or a value set to "empty") is assigned to the object.
					</para>
				</example>
			</details>
			<seealso cref="E:&darootobj;.RequestStart" prefix="The" suffix="Event" />
			<seealso cref="E:&darootobj;.RequestComplete" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:&dans;.AnimationNames" kind="Collection">
			<summary>
				<para>
					deprecated
				</para>
			</summary>
			<remarks>
				<para>
					This object has been replaced by the <see cref="P:&dans;.Character.Animations" /> property, but is
					still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="P:&dans;.UserInput.Alt1Confidence">
			<summary>
				<para>
					Returns the speech recognition confidence scoring for the second-best matching <see cref="T:&dans;.Command" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>userinput</token>-&gt;<keyword>get_Alt1Confidence</keyword> (<token>&amp;Alt1Confidence</token>)</para>
</cpp>
<csharp>
<para>[<token>Alt1Confidence</token> = ]<token>userinput</token>.<keyword>Alt1Confidence</keyword></para>
</csharp>
<vb>
<para>[<token>Alt1Confidence</token> = ]<token>userinput</token>.<keyword>Alt1Confidence</keyword></para>
</vb>
</syntax>
			<value name="Alt1Confidence">
				The relative confidence scoring of second-best match, from -100 to 100 (0
				if the <see cref="T:&dans;.Command" /> was chosen from the <a class="see" href="&dacmref;">&dacmname;</a>)
			</value>
			<seealso cref="E:&darootobj;.Command" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.UserInput.Alt1Name">
			<summary>
				<para>
					Returns the name of the second-best matching <see cref="T:&dans;.Command" />
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>userinput</token>-&gt;<keyword>get_Alt1Name</keyword> (<token>&amp;Alt1Name</token>)</para>
</cpp>
<csharp>
<para>[<token>Alt1Name</token> = ]<token>userinput</token>.<keyword>Alt1Name</keyword></para>
</csharp>
<vb>
<para>[<token>Alt1Name</token> = ]<token>userinput</token>.<keyword>Alt1Name</keyword></para>
</vb>
</syntax>
			<value name="Alt1Name">
				The <see cref="P:&dans;.Command.Name" /> of the second-best matching <see cref="T:&dans;.Command" />.
			</value>
			<seealso cref="E:&darootobj;.Command" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.UserInput.Alt1Voice">
			<summary>
				<para>
					Returns the voice text the speech recognition engine matched for the second-best matching <see cref="T:&dans;.Command" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>userinput</token>-&gt;<keyword>get_Alt1Voice</keyword> (<token>&amp;Alt1Voice</token>)</para>
</cpp>
<csharp>
<para>[<token>Alt1Voice</token> = ]<token>userinput</token>.<keyword>Alt1Voice</keyword></para>
</csharp>
<vb>
<para>[<token>Alt1Voice</token> = ]<token>userinput</token>.<keyword>Alt1Voice</keyword></para>
</vb>
</syntax>
			<value name="Alt1Voice">The second-best matching voice text</value>
			<seealso cref="E:&darootobj;.Command" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.UserInput.Alt2Confidence">
			<summary>
				<para>
					Returns the speech recognition confidence scoring for the third-best matching <see cref="T:&dans;.Command" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>userinput</token>-&gt;<keyword>get_Alt2Confidence</keyword> (<token>&amp;Alt2Confidence</token>)</para>
</cpp>
<csharp>
<para>[<token>Alt2Confidence</token> = ]<token>userinput</token>.<keyword>Alt2Confidence</keyword></para>
</csharp>
<vb>
<para>[<token>Alt2Confidence</token> = ]<token>userinput</token>.<keyword>Alt2Confidence</keyword></para>
</vb>
</syntax>
			<value name="Alt2Confidence">
				The relative confidence scoring of third-best match, from -100 to 100 (0
				if the <see cref="T:&dans;.Command" /> was chosen from the <a class="see" href="&dacmref;">&dacmname;</a>)
			</value>
			<seealso cref="E:&darootobj;.Command" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.UserInput.Alt2Name">
			<summary>
				<para>
					Returns the name of the third-best matching <see cref="T:&dans;.Command" />
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>userinput</token>-&gt;<keyword>get_Alt2Name</keyword> (<token>&amp;Alt2Name</token>)</para>
</cpp>
<csharp>
<para>[<token>Alt2Name</token> = ]<token>userinput</token>.<keyword>Alt2Name</keyword></para>
</csharp>
<vb>
<para>[<token>Alt2Name</token> = ]<token>userinput</token>.<keyword>Alt2Name</keyword></para>
</vb>
</syntax>
			<value name="Alt2Name">
				The <see cref="P:&dans;.Command.Name" /> of the third-best matching <see cref="T:&dans;.Command" />.
			</value>
			<seealso cref="E:&darootobj;.Command" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.UserInput.Alt2Voice">
			<summary>
				<para>
					Returns the voice text the speech recognition engine matched for the third-best matching <see cref="T:&dans;.Command" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>userinput</token>-&gt;<keyword>get_Alt2Voice</keyword> (<token>&amp;Alt2Voice</token>)</para>
</cpp>
<csharp>
<para>[<token>Alt2Voice</token> = ]<token>userinput</token>.<keyword>Alt2Voice</keyword></para>
</csharp>
<vb>
<para>[<token>Alt2Voice</token> = ]<token>userinput</token>.<keyword>Alt2Voice</keyword></para>
</vb>
</syntax>
			<value name="Alt2Voice">The third-best matching voice text</value>
			<seealso cref="E:&darootobj;.Command" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.UserInput.CharacterID">
			<summary>
				<para>
					Returns the unique identifier of the <see cref="T:&dans;.Character" /> that is the object of the <see cref="E:&darootobj;.Command" />
					event.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>userinput</token>-&gt;<keyword>get_CharacterID</keyword> (<token>&amp;CharacterID</token>)</para>
</cpp>
<csharp>
<para>[<token>CharacterID</token> = ]<token>userinput</token>.<keyword>CharacterID</keyword></para>
</csharp>
<vb>
<para>[<token>CharacterID</token> = ]<token>userinput</token>.<keyword>CharacterID</keyword></para>
</vb>
</syntax>
			<value name="CharacterID">
				Identifies the <see cref="T:&dans;.Character" /> whose <see cref="T:&dans;.Command" />
				was chosen.
			</value>
			<seealso cref="E:&darootobj;.Command" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.UserInput.Confidence">
			<summary>
				<para>
					Returns the speech recognition confidence scoring for the best matching <see cref="T:&dans;.Command" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>userinput</token>-&gt;<keyword>get_Confidence</keyword> (<token>&amp;Confidence</token>)</para>
</cpp>
<csharp>
<para>[<token>Confidence</token> = ]<token>userinput</token>.<keyword>Confidence</keyword></para>
</csharp>
<vb>
<para>[<token>Confidence</token> = ]<token>userinput</token>.<keyword>Confidence</keyword></para>
</vb>
</syntax>
			<value name="Confidence">
				The relative confidence scoring of the best match, from -100 to 100 (100 if
				the <see cref="T:&dans;.Command" /> was chosen from the <a class="see" href="&dacmref;">&dacmname;</a>).
			</value>
			<seealso cref="E:&darootobj;.Command" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.UserInput.Count">
			<summary>
				<para>
					Returns the number of possible matching commands.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>userinput</token>-&gt;<keyword>get_Count</keyword> (<token>&amp;Count</token>)</para>
</cpp>
<csharp>
<para>[<token>Count</token> = ]<token>userinput</token>.<keyword>Count</keyword></para>
</csharp>
<vb>
<para>[<token>Count</token> = ]<token>userinput</token>.<keyword>Count</keyword></para>
</vb>
</syntax>
			<value name="Count">The number of possible matching commands, from 0 to 3.</value>
			<remarks>
				<para>
					A count of zero indicates that the command was chosen from the character's <a class="see" href="&dacmref;">&dacmname;</a>.
					The <see cref="P:&dans;.UserInput.Name" /> property returns the chosen command's <see cref="P:&dans;.Command.Name" />.
				</para>
				<para>
					Even if the <self>Count</self> is zero (no commands were matched), the <see cref="P:&dans;.UserInput.Voice" />
					property will still return the spoken text.
				</para>
			</remarks>
			<seealso cref="E:&darootobj;.Command" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.UserInput.Name">
			<summary>
				<para>
					Identifies the chosen <see cref="T:&dans;.Command" />, if chosen from the <a class="see" href="&dacmref;">&dacmname;</a>,
					or the best matching <see cref="T:&dans;.Command" />, if voice input triggers the <see cref="E:&darootobj;.Command" />
					event.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>userinput</token>-&gt;<keyword>get_Name</keyword> (<token>&amp;Name</token>)</para>
</cpp>
<csharp>
<para>[<token>Name</token> = ]<token>userinput</token>.<keyword>Name</keyword></para>
</csharp>
<vb>
<para>[<token>Name</token> = ]<token>userinput</token>.<keyword>Name</keyword></para>
</vb>
</syntax>
			<value name="Name">
				The <see cref="P:&dans;.Command.Name" /> of the chosen <see cref="T:&dans;.Command" />,
				or an empty string if the chosen command was pre-defined (for example, the <keyword>Hide</keyword> command).
			</value>
			<seealso cref="E:&darootobj;.Command" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.UserInput.Voice">
			<summary>
				<para>
					Returns the voice text that the speech recognition engine matched for the best matching <see cref="T:&dans;.Command" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>userinput</token>-&gt;<keyword>get_Voice</keyword> (<token>&amp;Voice</token>)</para>
</cpp>
<csharp>
<para>[<token>Name</token> = ]<token>userinput</token>.<keyword>Voice</keyword></para>
</csharp>
<vb>
<para>[<token>Name</token> = ]<token>userinput</token>.<keyword>Voice</keyword></para>
</vb>
</syntax>
			<value name="Voice">
				The best matching voice text (or an empty string if the <see cref="T:&dans;.Command" />
				was chosen from the <a class="see" href="&dacmref;">&dacmname;</a>).
			</value>
			<remarks>
				<para>
					Even if no command was matched, the text that the speech engine heard is returned.
				</para>
			</remarks>
			<seealso cref="E:&darootobj;.Command" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:&dans;.UserInput">
			<summary>
				<para>
					Double Agent sends the <see cref="E:&darootobj;.Command" /> event when your application is <glossary>input-active</glossary>
					and the user chooses a command from the character's <a class="see" href="&dacmref;">&dacmname;</a> or by
					spoken input. The event passes a <self>UserInput Object</self> that identifies the number of possible matching
					commands as well as the name, confidence scoring, and voice text for those matches.
				</para>
			</summary>
			<syntax>
				<list>
					<item>
						<term>
							<h4>
								<bookmark name="Properties"></bookmark>Properties
							</h4>
						</term>
						<description>
							<list type="&typelisttype;" class="syntax">
								<item>
									<term width="&typelistwidth;">
										<see cref="P:&dans;.UserInput.Alt1Name" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.UserInput.Alt1Name']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.UserInput.Alt1Confidence" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.UserInput.Alt1Confidence']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.UserInput.Alt1Voice" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.UserInput.Alt1Voice']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.UserInput.Alt2Name" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.UserInput.Alt2Name']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.UserInput.Alt2Confidence" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.UserInput.Alt2Confidence']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.UserInput.Alt2Voice" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.UserInput.Alt2Voice']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.UserInput.CharacterID" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.UserInput.CharacterID']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.UserInput.Count" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.UserInput.Count']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.UserInput.Confidence" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.UserInput.Confidence']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.UserInput.Name" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.UserInput.Name']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.UserInput.Voice" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.UserInput.Voice']/summary/para[1]" />
									</description>
								</item>
							</list>
						</description>
					</item>
				</list>
			</syntax>
			<details>
				<h4 class="details">Details</h4>
				<para>
					If voice input triggers this event, Double Agent returns a string that identifies the best match in
					the <see cref="P:&dans;.UserInput.Name" /> parameter, and the second- and third-best matches in <see cref="P:&dans;.UserInput.Alt1Name" />
					and <see cref="P:&dans;.UserInput.Alt2Name" />. An empty string indicates that the input did not match any
					command your application defined. If, for example, the command was matched to the pre-defined <keyword>Hide</keyword>
					command, an empty string would be returned in the <see cref="P:&dans;.UserInput.Name" /> parameter, but
					you would still receive the text heard in the <see cref="P:&dans;.UserInput.Voice" /> parameter.
				</para>
				<para>
					You may get the same command name returned in more than one entry. <see cref="P:&dans;.UserInput.Confidence" />,
					<see cref="P:&dans;.UserInput.Alt1Confidence" />, and <see cref="P:&dans;.UserInput.Alt2Confidence" />
					parameters return the relative scores, in the range of -100 to 100, that are returned by the speech recognition
					engine for each respective match. <see cref="P:&dans;.UserInput.Voice" />, <see cref="P:&dans;.UserInput.Alt1Voice" />,
					and <see cref="P:&dans;.UserInput.Alt2Voice" /> parameters return the voice text that the speech recognition engine
					matched for each alternative. If <see cref="P:&dans;.UserInput.Count" /> returns zero, Double Agent detected
					spoken input, but determined that there was no matching command.
				</para>
				<para>
					If voice input was <strong>not</strong> the source for the command, for example, if the user selected the
					command from the character's <a class="see" href="&dacmref;">&dacmname;</a>, Double Agent returns the name
					of the selected command in the <see cref="P:&dans;.UserInput.Name" /> property. It also returns the value
					of the <see cref="P:&dans;.UserInput.Confidence" /> parameter as 100, and the value of the <see cref="P:&dans;.UserInput.Voice" />
					parameters as an empty string (""). <see cref="P:&dans;.UserInput.Alt1Name" /> and <see cref="P:&dans;.UserInput.Alt2Name" />
					also return empty strings. <see cref="P:&dans;.UserInput.Alt1Confidence" /> and <see cref="P:&dans;.UserInput.Alt2Confidence" />
					return zero, and <see cref="P:&dans;.UserInput.Alt1Voice" /> and <see cref="P:&dans;.UserInput.Alt2Voice" />
					return empty strings. <see cref="P:&dans;.UserInput.Count" /> returns 1.
				</para>
			</details>
			<remarks>
				<para>
					Not all speech recognition engines may return all the values for all the properties of this object. Check
					with your engine vendor to determine whether the engine supports the Microsoft<sup>®</sup> Speech API interface
					for returning alternatives and confidence scores.
				</para>
			</remarks>
			<seealso cref="E:&darootobj;.Command" prefix="The" suffix="Event" />
			<seealso cref="T:&dans;.Command" prefix="The" suffix="Object" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="P:&dans;.CommandsWindow.Height">
			<summary>
				<para>
					Returns the current height, in pixels, of the <a class="see" href="&davcref;">&davcname;</a> window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>commandswindow</token>-&gt;<keyword>get_Height</keyword> (<token>&hexprefix;eight</token>)</para>
</cpp>
<csharp>
<para>[<token>Height</token> = ]&darootref;.<keyword>CommandsWindow.Height</keyword></para>
</csharp>
<vb>
<para>[<token>Height</token> = ]&darootref;.<keyword>CommandsWindow.Height</keyword></para>
</vb>
</syntax>
			<value name="Height">
				A <typename>numeric</typename> value that indicates the height, in pixels, of the
				<a class="see" href="&davcref;">&davcname;</a> window.
			</value>
			<remarks>
				<para>
					Double Agent remembers and reuses the window size set by the user.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.CommandsWindow.Left">
			<summary>
				<para>
					Returns the horizontal location, in pixels, of the <a class="see" href="&davcref;">&davcname;</a>
					window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>commandswindow</token>-&gt;<keyword>get_Left</keyword> (<token>&amp;Left</token>)</para>
</cpp>
<csharp>
<para>[<token>Left</token> = ]&darootref;.<keyword>CommandsWindow.Left</keyword></para>
</csharp>
<vb>
<para>[<token>Left</token> = ]&darootref;.<keyword>CommandsWindow.Left</keyword></para>
</vb>
</syntax>
			<value name="Left">
				A <typename>numeric</typename> value that specifies the left edge, in pixels, of
				the <a class="see" href="&davcref;">&davcname;</a> window.
			</value>
			<remarks>
				<para>
					Double Agent remembers and reuses the window location set by the user.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.CommandsWindow.Top">
			<summary>
				<para>
					Returns the vertical location, in pixels, of the <a class="see" href="&davcref;">&davcname;</a>
					window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>commandswindow</token>-&gt;<keyword>get_Top</keyword> (<token>&amp;Top</token>)</para>
</cpp>
<csharp>
<para>[<token>Top</token> = ]&darootref;.<keyword>CommandsWindow.Top</keyword></para>
</csharp>
<vb>
<para>[<token>Top</token> = ]&darootref;.<keyword>CommandsWindow.Top</keyword></para>
</vb>
</syntax>
			<value name="Top">
				A <typename>numeric</typename> value that specifies the top edge, in pixels, of the
				<a class="see" href="&davcref;">&davcname;</a> window.
			</value>
			<remarks>
				<para>
					Double Agent remembers and reuses the window location set by the user.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.CommandsWindow.Visible">
			<summary>
				<para>
					Specifies if the <a class="see" href="&davcref;">&davcname;</a> window is visible.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>commandswindow</token>-&gt;<keyword>get_Visible</keyword> (<token>&amp;Visible</token>)</para>
<para><token>commandswindow</token>-&gt;<keyword>put_Visible</keyword> (<token>Visible</token>)</para>
</cpp>
<csharp>
<para>[<token>Visible</token> = ]&darootref;.<keyword>CommandsWindow.Visible</keyword></para>
<para>&darootref;.<keyword>CommandsWindow.Visible</keyword> = <token>Visible</token></para>
</csharp>
<vb>
<para>[<token>Visible</token> = ]&darootref;.<keyword>CommandsWindow.Visible</keyword></para>
<para>&darootref;.<keyword>CommandsWindow.Visible</keyword> = <token>Visible</token></para>
</vb>
</syntax>
			<value name="Visible">
				A <typename>boolean</typename> value indicating whether or not the <a class="see" href="&davcref;">&davcname;</a>
				window is visible.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.CommandsWindow.Width">
			<summary>
				<para>
					Returns current width, in pixels, of the <a class="see" href="&davcref;">&davcname;</a> window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>commandswindow</token>-&gt;<keyword>get_Width</keyword> (<token>&amp;Width</token>)</para>
</cpp>
<csharp>
<para>[<token>Width</token> = ]&darootref;.<keyword>CommandsWindow.Width</keyword></para>
</csharp>
<vb>
<para>[<token>Width</token> = ]&darootref;.<keyword>CommandsWindow.Width</keyword></para>
</vb>
</syntax>
			<value name="Width">
				A <typename>numeric</typename> value that indicates the width, in pixels, of the
				<a class="see" href="&davcref;">&davcname;</a> window.
			</value>
			<remarks>
				<para>
					Double Agent remembers and reuses the window size set by the user.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:&dans;.CommandsWindow">
			<summary>
				<para>
					The <self>CommandsWindow Object</self> provides access to Double Agent's <a class="see" href="&davcref;">&davcname;</a>
					window. It allows you to show and hide the window, and retrieve the window's location and size.
				</para>
			</summary>
			<syntax>
				<list>
					<item>
						<term>
							<h4>
								<bookmark name="Properties"></bookmark>Properties
							</h4>
						</term>
						<description>
							<list type="&typelisttype;" class="syntax">
								<item>
									<term width="&typelistwidth;">
										<see cref="P:&dans;.CommandsWindow.Height" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.CommandsWindow.Height']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.CommandsWindow.Left" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.CommandsWindow.Left']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.CommandsWindow.Top" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.CommandsWindow.Top']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.CommandsWindow.Visible" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.CommandsWindow.Visible']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.CommandsWindow.Width" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.CommandsWindow.Width']/summary/para[1]" />
									</description>
								</item>
							</list>
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					The <a class="see" href="&davcref;">&davcname;</a> window is shared among all Double Agent clients. Changes
					to the window's visibility should be made with this in mind.
				</para>
				<para>
					This object can be accessed using the <see class="" cref="T:&darootobj;" suffix="Object's" /> <see class="" cref="P:&darootobj;.CommandsWindow" />
					property.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="P:&dans;.PropertySheet.Height">
			<summary>
				<para>
					Returns the current height, in pixels, of the <a class="see" href="&dapsref;">&dapsname;</a> window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>propertysheet</token>-&gt;<keyword>get_Height</keyword> (<token>&hexprefix;eight</token>)</para>
</cpp>
<csharp>
<para>[<token>Height</token> = ]&darootref;.<keyword>PropertySheet.Height</keyword></para>
</csharp>
<vb>
<para>[<token>Height</token> = ]&darootref;.<keyword>PropertySheet.Height</keyword></para>
</vb>
</syntax>
			<value name="Height">
				A <typename>numeric</typename> value that indicates the height, in pixels, of the
				<a class="see" href="&dapsref;">&dapsname;</a> window.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.PropertySheet.Left">
			<summary>
				<para>
					Specifies the horizontal location, in pixels, of the <a class="see" href="&dapsref;">&dapsname;</a>
					window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>propertysheet</token>-&gt;<keyword>get_Left</keyword> (<token>&amp;Left</token>)</para>
<para><token>propertysheet</token>-&gt;<keyword>put_Left</keyword> (<token>Left</token>)</para>
</cpp>
<csharp>
<para>[<token>Left</token> = ]&darootref;.<keyword>PropertySheet.Left</keyword></para>
<para>&darootref;.<keyword>PropertySheet.Left</keyword> = <token>Left</token></para>
</csharp>
<vb>
<para>[<token>Left</token> = ]&darootref;.<keyword>PropertySheet.Left</keyword></para>
<para>&darootref;.<keyword>PropertySheet.Left</keyword> = <token>Left</token></para>
</vb>
</syntax>
			<value name="Left">
				A <typename>numeric</typename> value that specifies the left edge, in pixels, of
				the <a class="see" href="&dapsref;">&dapsname;</a> window.
			</value>
			<remarks>
				<para>
					Double Agent remembers and reuses the window location set by the user.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.PropertySheet.Page">
			<summary>
				<para>
					Specifies the page displayed in the <a class="see" href="&dapsref;">&dapsname;</a> window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>propertysheet</token>-&gt;<keyword>get_Page</keyword> (<token>&amp;Page</token>)</para>
<para><token>propertysheet</token>-&gt;<keyword>put_Page</keyword> (<token>Page</token>)</para>
</cpp>
<csharp>
<para>[<token>Page</token> = ]&darootref;.<keyword>PropertySheet.Page</keyword></para>
<para>&darootref;.<keyword>PropertySheet.Page</keyword> = <token>Page</token></para>
</csharp>
<vb>
<para>[<token>Page</token> = ]&darootref;.<keyword>PropertySheet.Page</keyword></para>
<para>&darootref;.<keyword>PropertySheet.Page</keyword> = <token>Page</token></para>
</vb>
</syntax>
			<value name="Page">
				A <typename>string</typename> value indicating the visible page.
				<list type="table">
					<item>
						<term>
							<literal>"Output"</literal>
						</term>
						<description>
							Selects the <a class="see" href="&dapsref;#Output">Output</a> page.
						</description>
					</item>
					<item>
						<term>
							<literal>"Speech"</literal>
						</term>
						<description>
							Selects the <a class="see" href="&dapsref;#SpeechInput">Speech Input</a> page.
						</description>
					</item>
					<item>
						<term>
							<literal>"Character"</literal>
						</term>
						<description>
							Selects the <a class="see" href="&dapsref;#Gallery">Gallery</a> (default character selection)
							page.
						</description>
					</item>
					<item>
						<term>
							<literal>"Copyright"</literal>
						</term>
						<description>
							Selects the <a class="see" href="&dapsref;#Copyright">Copyright</a> page.
						</description>
					</item>
				</list>
			</value>
			<remarks>
				<para>
					If no speech engine is installed, setting <self>Page</self> to <literal>"Speech"</literal> has no
					effect. Also, the window's <see cref="P:&dans;.PropertySheet.Visible" /> property must be set to <keyword>True</keyword>
					for the user to see the page.
				</para>
				<note>When the user closes the window, this property is set to the last page shown.</note>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.PropertySheet.Top">
			<summary>
				<para>
					Specifies the vertical location, in pixels, of the <a class="see" href="&dapsref;">&dapsname;</a>
					window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>propertysheet</token>-&gt;<keyword>get_Top</keyword> (<token>&amp;Top</token>)</para>
<para><token>propertysheet</token>-&gt;<keyword>put_Top</keyword> (<token>Top</token>)</para>
</cpp>
<csharp>
<para>[<token>Top</token> = ]&darootref;.<keyword>PropertySheet.Top</keyword></para>
<para>&darootref;.<keyword>PropertySheet.Top</keyword> = <token>Top</token></para>
</csharp>
<vb>
<para>[<token>Top</token> = ]&darootref;.<keyword>PropertySheet.Top</keyword></para>
<para>&darootref;.<keyword>PropertySheet.Top</keyword> = <token>Top</token></para>
</vb>
</syntax>
			<value name="Top">
				A <typename>numeric</typename> value that specifies the top edge, in pixels, of the
				<a class="see" href="&dapsref;">&dapsname;</a> window.
			</value>
			<remarks>
				<para>
					Double Agent remembers and reuses the window location set by the user.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.PropertySheet.Visible">
			<summary>
				<para>
					Specifies if the <a class="see" href="&dapsref;">&dapsname;</a> window is visible (open).
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>propertysheet</token>-&gt;<keyword>get_Visible</keyword> (<token>&amp;Visible</token>)</para>
<para><token>propertysheet</token>-&gt;<keyword>put_Visible</keyword> (<token>Visible</token>)</para>
</cpp>
<csharp>
<para>[<token>Visible</token> = ]&darootref;.<keyword>PropertySheet.Visible</keyword></para>
<para>&darootref;.<keyword>PropertySheet.Visible</keyword> = <token>Visible</token></para>
</csharp>
<vb>
<para>[<token>Visible</token> = ]&darootref;.<keyword>PropertySheet.Visible</keyword></para>
<para>&darootref;.<keyword>PropertySheet.Visible</keyword> = <token>Visible</token></para>
</vb>
</syntax>
			<value name="Visible">
				A <typename>boolean</typename> value indicating whether or not the <a class="see" href="&dapsref;">&dapsname;</a>
				window is visible.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.PropertySheet.Width">
			<summary>
				<para>
					Returns current width, in pixels, of the <a class="see" href="&dapsref;">&dapsname;</a> window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>propertysheet</token>-&gt;<keyword>get_Width</keyword> (<token>&amp;Width</token>)</para>
</cpp>
<csharp>
<para>[<token>Width</token> = ]&darootref;.<keyword>PropertySheet.Width</keyword></para>
</csharp>
<vb>
<para>[<token>Width</token> = ]&darootref;.<keyword>PropertySheet.Width</keyword></para>
</vb>
</syntax>
			<value name="Width">
				A <typename>numeric</typename> value that indicates the width, in pixels, of the
				<a class="see" href="&dapsref;">&dapsname;</a> window.
			</value>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:&dans;.PropertySheet">
			<summary>
				<para>
					The <self>PropertySheet Object</self> provides access to the <a class="see" href="&dapsref;">&dapsname;</a>
					window. It allows you to show and hide the window, and retrieve and update the window's location and
					current page.
				</para>
			</summary>
			<syntax>
				<list>
					<item>
						<term>
							<h4>
								<bookmark name="Properties"></bookmark>Properties
							</h4>
						</term>
						<description>
							<list type="&typelisttype;" class="syntax">
								<item>
									<term width="&typelistwidth;">
										<see cref="P:&dans;.PropertySheet.Height" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.PropertySheet.Height']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.PropertySheet.Left" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.PropertySheet.Left']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.PropertySheet.Page" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.PropertySheet.Page']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.PropertySheet.Top" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.PropertySheet.Top']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.PropertySheet.Visible" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.PropertySheet.Visible']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.PropertySheet.Width" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.PropertySheet.Width']/summary/para[1]" />
									</description>
								</item>
							</list>
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					The <a class="see" href="&dapsref;">&dapsname;</a> window is shared among all Double Agent clients. Changes
					to the window's location and visibility should be made with this in mind.
				</para>
				<para>
					This object can be accessed using the <see class="" cref="T:&darootobj;" suffix="Object's" /> <see class="" cref="P:&darootobj;.PropertySheet" />
					property.
				</para>
				<note>
					The <a class="see" href="&dapsref;">&dapsname;</a> window combines the Microsoft<sup>®</sup>
					Agent <glossary>Advanced Character Options</glossary> and <glossary>Default Character Properties</glossary>
					windows.
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="P:&dans;.Settings.AudioStatus">
			<summary>
				<para>
					Returns the status of the audio output channel.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>settings</token>-&gt;<keyword>get_AudioStatus</keyword> (<token>&amp;AudioStatus</token>)</para>
</cpp>
<csharp>
<para>[<token>AudioStatus</token> = ]&darootref;.<keyword>Settings.AudioStatus</keyword></para>
</csharp>
<vb>
<para>[<token>AudioStatus</token> = ]&darootref;.<keyword>Settings.AudioStatus</keyword></para>
</vb>
</syntax>
			<value name="AudioStatus">
				A member of the <see class="typename" cref="T:&dans;.AudioStatusType" suffix="Enumeration" />
				that indicates the current audio output status: <include path="/doc/members/member[@name='T:&dans;.AudioStatusType']/syntax/list" />
			</value>
			<remarks>
				<para>
					Your client application can use this property to determine whether it is appropriate to have your character
					speak or whether it is appropriate to try to turn on <glossary>Listening mode</glossary> (using the <see cref="M:&dans;.Character.Listen" />
					method).
				</para>
			</remarks>
			<seealso cref="T:&dans;.AudioStatusType" suffix="Enumeration" prefix="The" />
			<seealso cref="M:&dans;.Character.Listen" prefix="The" suffix="Method" />
			<seealso cref="E:&darootobj;.ListenStart" prefix="The" suffix="Event" />
			<seealso cref="E:&darootobj;.ListenComplete" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Settings.BalloonEnabled">
			<summary>
				<para>
					Indicates if the <a class="see" href="&dawbref;">&dawbname;</a> for the <see cref="M:&dans;.Character.Speak" />
					and <see cref="M:&dans;.Character.Think" /> methods is enabled.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>settings</token>-&gt;<keyword>get_BalloonEnabled</keyword> (<token>&amp;BalloonEnabled</token>)</para>
</cpp>
<csharp>
<para>[<token>BalloonEnabled</token> = ]&darootref;.<keyword>Settings.BalloonEnabled</keyword></para>
</csharp>
<vb>
<para>[<token>BalloonEnabled</token> = ]&darootref;.<keyword>Settings.BalloonEnabled</keyword></para>
</vb>
</syntax>
			<value name="BalloonEnabled">
				A <typename>boolean</typename> value that indicates if the <a class="see" href="&dawbref;">&dawbname;</a>
				is enabled.
			</value>
			<remarks>
				<para>
					This property reflects the <literal>"Display spoken output in word balloon …"</literal> option on
					the <a class="see" href="&dapsref;#Output">Output</a> page of the <a class="see" href="&dapsref;">&dapsname;</a>
					window.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='ReadOnlySetting']" />
			</remarks>
			<seealso cref="M:&dans;.Character.Speak" suffix="Method" prefix="The" />
			<seealso cref="M:&dans;.Character.Think" suffix="Method" prefix="The" />
			<seealso cref="E:&darootobj;.AgentPropertyChange" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Settings.BalloonFont">
			<summary>
				<para>
					Returns the font that will be used for all <a class="see" href="&dawbref;">&dawbname;s</a>, if any.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>settings</token>-&gt;<keyword>get_BalloonFont</keyword> (<token>&amp;BalloonFont</token>)</para>
</cpp>
<csharp>
<para>[<token>BalloonFont</token> = ]&darootref;.<keyword>Settings.BalloonFont</keyword></para>
</csharp>
<vb>
<para>[<token>BalloonFont</token> = ]&darootref;.<keyword>Settings.BalloonFont</keyword></para>
</vb>
</syntax>
			<value name="BalloonFont">
				An optional <typename>font</typename> object that specifies the font the user
				has chosen to override all <a class="see" href="&dawbref;">&dawbname;</a> fonts.
			</value>
			<remarks>
				<para>
					This property reflects the <literal>"A single font for all characters"</literal> option on the <a class="see" href="&dapsref;#Output">Output</a>
					page of the <a class="see" href="&dapsref;">&dapsname;</a> window.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='ReadOnlySetting']" />
			</remarks>
			<seealso cref="E:&darootobj;.AgentPropertyChange" prefix="The" suffix="Event" />
			<seealso cref="P:&dans;.Balloon.FontName" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Balloon.FontSize" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Balloon.FontBold" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Balloon.FontItalic" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Balloon.FontUnderline" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Balloon.FontStrikethru" prefix="The" suffix="Property" />
			<seealso cref="P:&dans;.Balloon.FontCharSet" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Settings.SoundEffectsEnabled">
			<summary>
				<para>
					Indicates if sound effects associated with a character's animations will play.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>settings</token>-&gt;<keyword>get_SoundEffectsEnabled</keyword> (<token>&amp;SoundEffectsEnabled</token>)</para>
</cpp>
<csharp>
<para>[<token>SoundEffectsEnabled</token> = ]&darootref;.<keyword>Settings.SoundEffectsEnabled</keyword></para>
</csharp>
<vb>
<para>[<token>SoundEffectsEnabled</token> = ]&darootref;.<keyword>Settings.SoundEffectsEnabled</keyword></para>
</vb>
</syntax>
			<value name="SoundEffectsEnabled">
				A <typename>boolean</typename> value that indicates if sound effects are
				enabled.
			</value>
			<remarks>
				<para>
					This property reflects the <literal>"Play character sound effects"</literal> option on the <a class="see" href="&dapsref;#Output">Output</a>
					page of the <a class="see" href="&dapsref;">&dapsname;</a> window.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='ReadOnlySetting']" />
			</remarks>
			<seealso cref="P:&dans;.Character.SoundEffectsEnabled" suffix="Property" prefix="The" />
			<seealso cref="E:&darootobj;.AgentPropertyChange" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Settings.SREnabled">
			<summary>
				<para>
					Indicates if speech input is enabled.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>settings</token>-&gt;<keyword>get_SREnabled</keyword> (<token>&amp;SREnabled</token>)</para>
</cpp>
<csharp>
<para>[<token>SREnabled</token> = ]&darootref;.<keyword>Settings.SREnabled</keyword></para>
</csharp>
<vb>
<para>[<token>SREnabled</token> = ]&darootref;.<keyword>Settings.SREnabled</keyword></para>
</vb>
</syntax>
			<value name="SREnabled">
				A <typename>boolean</typename> value that indicates if speech input is enabled.
			</value>
			<remarks>
				<para>
					This property reflects the <literal>"Characters listen for input"</literal> option on the <a class="see" href="&dapsref;#SpeechInput">Speech Input</a>
					page of the <a class="see" href="&dapsref;">&dapsname;</a> window.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='ReadOnlySetting']" />
			</remarks>
			<seealso cref="M:&dans;.Character.Listen" suffix="Method" prefix="The" />
			<seealso cref="E:&darootobj;.AgentPropertyChange" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Settings.SRHotKey">
			<summary>
				<para>
					Returns the user's current setting for the <glossary>Listening key</glossary>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>settings</token>-&gt;<keyword>get_SRHotKey</keyword> (<token>&amp;SRHotKey</token>)</para>
</cpp>
<csharp>
<para>[<token>SRHotKey</token> = ]&darootref;.<keyword>Settings.SRHotKey</keyword></para>
</csharp>
<vb>
<para>[<token>SRHotKey</token> = ]&darootref;.<keyword>Settings.SRHotKey</keyword></para>
</vb>
</syntax>
			<value name="SRHotKey">
				A <typename>string</typename> value that describes the current <glossary>Listening key</glossary>.
			</value>
			<remarks>
				<para>
					This property reflects the <literal>"When you press the … key"</literal> option on the <a class="see" href="&dapsref;#SpeechInput">Speech Input</a>
					page of the <a class="see" href="&dapsref;">&dapsname;</a> window.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='ReadOnlySetting']" />
			</remarks>
			<seealso cref="M:&dans;.Character.Listen" suffix="Method" prefix="The" />
			<seealso cref="E:&darootobj;.AgentPropertyChange" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Settings.SRHotKeyTime">
			<summary>
				<para>
					Returns the current timeout delay for the <glossary>Listening key</glossary>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>settings</token>-&gt;<keyword>get_SRHotKeyTime</keyword> (<token>&amp;SRHotKeyTime</token>)</para>
</cpp>
<csharp>
<para>[<token>SRHotKeyTime</token> = ]&darootref;.<keyword>Settings.SRHotKeyTime</keyword></para>
</csharp>
<vb>
<para>[<token>SRHotKeyTime</token> = ]&darootref;.<keyword>Settings.SRHotKeyTime</keyword></para>
</vb>
</syntax>
			<value name="SRHotKeyTime">
				A <typename>numeric</typename> value that indicates the <glossary>Listening key</glossary>
				timeout, in seconds.
			</value>
			<remarks>
				<para>
					This property reflects the <literal>"And continue for … seconds …"</literal> option on the <a class="see" href="&dapsref;#SpeechInput">Speech Input</a>
					page of the <a class="see" href="&dapsref;">&dapsname;</a> window.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='ReadOnlySetting']" />
			</remarks>
			<seealso cref="M:&dans;.Character.Listen" suffix="Method" prefix="The" />
			<seealso cref="E:&darootobj;.AgentPropertyChange" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Settings.SRListeningPrompt">
			<summary>
				<para>
					Indicates if a sound is played when <glossary>Listening mode</glossary> is activated or deactivated.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>settings</token>-&gt;<keyword>get_SRListeningPrompt</keyword> (<token>&amp;SRListeningPrompt</token>)</para>
</cpp>
<csharp>
<para>[<token>SRListeningPrompt</token> = ]&darootref;.<keyword>Settings.SRListeningPrompt</keyword></para>
</csharp>
<vb>
<para>[<token>SRListeningPrompt</token> = ]&darootref;.<keyword>Settings.SRListeningPrompt</keyword></para>
</vb>
</syntax>
			<value name="SRListeningPrompt">
				A <typename>boolean</typename> value that indicates if the <glossary>Listening prompt</glossary>
				is enabled.
			</value>
			<remarks>
				<para>
					This property reflects the <literal>"Play tone when you can speak"</literal> option on the <a class="see" href="&dapsref;#SpeechInput">Speech Input</a>
					page of the <a class="see" href="&dapsref;">&dapsname;</a> window.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='ReadOnlySetting']" />
			</remarks>
			<seealso cref="M:&dans;.Character.Listen" suffix="Method" prefix="The" />
			<seealso cref="E:&darootobj;.AgentPropertyChange" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Settings.SRListeningTip">
			<summary>
				<para>
					Indicates if the <a class="see" href="&daltref;">&daltname;</a> is shown when <glossary>Listening mode</glossary>
					is active.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>settings</token>-&gt;<keyword>get_SRListeningTip</keyword> (<token>&amp;SRListeningTip</token>)</para>
</cpp>
<csharp>
<para>[<token>SRListeningTip</token> = ]&darootref;.<keyword>Settings.SRListeningTip</keyword></para>
</csharp>
<vb>
<para>[<token>SRListeningTip</token> = ]&darootref;.<keyword>Settings.SRListeningTip</keyword></para>
</vb>
</syntax>
			<value name="SRListeningTip">
				A <typename>boolean</typename> value that indicates if the <a class="see" href="&daltref;">&daltname;</a>
				is enabled.
			</value>
			<remarks>
				<para>
					This property reflects the <literal>"Display listening tips"</literal> option on the <a class="see" href="&dapsref;#SpeechInput">Speech Input</a>
					page of the <a class="see" href="&dapsref;">&dapsname;</a> window.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='ReadOnlySetting']" />
			</remarks>
			<seealso cref="M:&dans;.Character.Listen" suffix="Method" prefix="The" />
			<seealso cref="E:&darootobj;.AgentPropertyChange" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Settings.TTSEnabled">
			<summary>
				<para>
					Indicates if spoken audio output is enabled.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>settings</token>-&gt;<keyword>get_TTSEnabled</keyword> (<token>&amp;TTSEnabled</token>)</para>
</cpp>
<csharp>
<para>[<token>TTSEnabled</token> = ]&darootref;.<keyword>Settings.TTSEnabled</keyword></para>
</csharp>
<vb>
<para>[<token>TTSEnabled</token> = ]&darootref;.<keyword>Settings.TTSEnabled</keyword></para>
</vb>
</syntax>
			<value name="TTSEnabled">
				A <typename>boolean</typename> value indicating if spoken output is enabled.
			</value>
			<remarks>
				<para>
					This property reflects the <literal>"Play spoken audio"</literal> option on the <a class="see" href="&dapsref;#Output">Output</a>
					page of the <a class="see" href="&dapsref;">&dapsname;</a> window.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='ReadOnlySetting']" />
			</remarks>
			<seealso cref="E:&darootobj;.AgentPropertyChange" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.Settings.TTSSpeed">
			<summary>
				<para>
					Returns the text-to-speech rate configured by the user.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>settings</token>-&gt;<keyword>get_TTSSpeed</keyword> (<token>&amp;TTSSpeed</token>)</para>
</cpp>
<csharp>
<para>[<token>TTSSpeed</token> = ]&darootref;.<keyword>Settings.TTSSpeed</keyword></para>
</csharp>
<vb>
<para>[<token>TTSSpeed</token> = ]&darootref;.<keyword>Settings.TTSSpeed</keyword></para>
</vb>
</syntax>
			<value name="TTSSpeed">
				A <typename>numeric</typename> value that indicates the relative rate applied to
				text-to-speech. It ranges from 0 (slow) to 10 (fast). A value of 5 indicates no change to the speech
				engine's normal speaking speed.
			</value>
			<remarks>
				<para>
					This property reflects the <literal>"Speaking speed"</literal> option on the <a class="see" href="&dapsref;#Output">Output</a>
					page of the <a class="see" href="&dapsref;">&dapsname;</a> window.
				</para>
				<include file="&dainclude;" path="/doc/properties/note[@name='ReadOnlySetting']" />
			</remarks>
			<seealso cref="M:&dans;.Character.Speak" suffix="Method" prefix="The" />
			<seealso cref="E:&darootobj;.AgentPropertyChange" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:&dans;.Settings">
			<summary>
				<para>
					The <self>Settings Object</self> provides access to various settings maintained by Double Agent. The
					properties are read-only for client applications, but the user can change them in the <a class="see" href="&dapsref;">&dapsname;</a>
					window.
				</para>
			</summary>
			<syntax>
				<list>
					<item>
						<term>
							<h4>
								<bookmark name="Properties"></bookmark>Properties
							</h4>
						</term>
						<description>
							<list type="&typelisttype;" class="syntax">
								<item>
									<term width="&typelistwidth;">
										<see cref="P:&dans;.Settings.AudioStatus" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Settings.AudioStatus']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Settings.BalloonEnabled" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Settings.BalloonEnabled']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Settings.BalloonFont" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Settings.BalloonFont']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Settings.SoundEffectsEnabled" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Settings.SoundEffectsEnabled']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Settings.SREnabled" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Settings.SREnabled']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Settings.SRHotKey" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Settings.SRHotKey']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Settings.SRHotKeyTime" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Settings.SRHotKeyTime']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Settings.SRListeningPrompt" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Settings.SRListeningPrompt']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Settings.SRListeningTip" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Settings.SRListeningTip']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Settings.TTSEnabled" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Settings.TTSEnabled']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.Settings.TTSSpeed" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.Settings.TTSSpeed']/summary/para[1]" />
									</description>
								</item>
							</list>
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					The <self>Settings Object</self> replaces and extends the <see cref="T:&dans;.AudioOutput" /> and <see cref="T:&dans;.SpeechInput" suffix="Objects" />.
				</para>
				<para>
					This object can be accessed using the <see class="" cref="T:&darootobj;" suffix="Object's" /> <see class="" cref="P:&darootobj;.Settings" />
					property.
				</para>
				<note>
					For some properties, Double Agent returns a relevant value only if a compatible speech engine has
					been installed and is enabled.
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="P:&dans;.AudioOutput.Enabled">
			<summary>
				<para>
					deprecated
				</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:&dans;.Settings.TTSEnabled" text="Settings.TTSEnabled" />
					property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<member name="P:&dans;.AudioOutput.SoundEffects">
			<summary>
				<para>
					deprecated
				</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:&dans;.Settings.SoundEffectsEnabled" text="Settings.SoundEffectsEnabled" />
					property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<member name="P:&dans;.AudioOutput.Status">
			<summary>
				<para>
					deprecated
				</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:&dans;.Settings.AudioStatus" text="Settings.AudioStatus" />
					property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<member name="T:&dans;.AudioOutput">
			<summary>
				<para>
					deprecated
				</para>
			</summary>
			<remarks>
				<para>
					This object has been replaced by the <see cref="T:&dans;.Settings" suffix="Object" />, but is still supported
					for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="P:&dans;.SpeechInput.Enabled">
			<summary>
				<para>
					deprecated
				</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:&dans;.Settings.SREnabled" text="Settings.SREnabled" />
					property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<member name="P:&dans;.SpeechInput.Engine">
			<summary>obsolete</summary>
		</member>

		<member name="P:&dans;.SpeechInput.HotKey">
			<summary>
				<para>
					deprecated
				</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:&dans;.Settings.SRHotKey" text="Settings.SRHotKey" />
					property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<member name="P:&dans;.SpeechInput.Installed">
			<summary>obsolete</summary>
		</member>

		<member name="P:&dans;.SpeechInput.Language">
			<summary>obsolete</summary>
		</member>

		<member name="P:&dans;.SpeechInput.ListeningTip">
			<summary>
				<para>
					deprecated
				</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:&dans;.Settings.SRListeningTip" text="Settings.SRListeningTip" />
					property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<member name="T:&dans;.SpeechInput">
			<summary>
				<para>
					deprecated
				</para>
			</summary>
			<remarks>
				<para>
					This object has been replaced by the <see cref="T:&dans;.Settings" suffix="Object" />, but is still supported
					for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="M:&dans;.FormattedText.Append">
			<summary>
				<para>
					Appends one <see cref="T:&dans;.FormattedText" suffix=" Object" /> to another <see cref="T:&dans;.FormattedText" suffix=" Object" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>formattedtext</token>-&gt;<keyword>Append</keyword> (<token>FormattedText</token>)</para>
</cpp>
<csharp>
<para><token>formattedtext</token>.<keyword>Append</keyword> (<token>FormattedText</token>)</para>
</csharp>
<vbnet>
<para><token>formattedtext</token>.<keyword>Append</keyword> <token>FormattedText</token></para>
</vbnet>
<vb>
<para><token>formattedtext</token>.<keyword>Append</keyword> <token>FormattedText</token></para>
</vb>
</syntax>
			<param name="FormattedText">
				The <see class="typename" cref="T:&dans;.FormattedText" suffix=" Object" />
				to append.
			</param>
			<remarks>
				<para>
					The appended text starts a new paragraph; a <glossary>new-line</glossary> character separates the existing
					and appended text.
				</para>
				<note>
					This method will fail if the <see cref="T:&dans;.FormattedText" suffix=" Object" /> is currently being
					used by a queued speech or thought action.
				</note>
			</remarks>
			<seealso cref="M:&dans;.Character.SpeakFormatted" suffix="Method" prefix="The" />
			<seealso cref="M:&dans;.Character.ThinkFormatted" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.FormattedText.Parse">
			<summary>
				<para>
					Parses text containing speech tags.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>formattedtext</token>-&gt;<keyword>Parse</keyword> (<token>RawText</token>)</para>
</cpp>
<csharp>
<para><token>formattedtext</token>.<keyword>Parse</keyword> (<token>RawText</token>)</para>
</csharp>
<vbnet>
<para><token>formattedtext</token>.<keyword>Parse</keyword> <token>RawText</token></para>
</vbnet>
<vb>
<para><token>formattedtext</token>.<keyword>Parse</keyword> <token>RawText</token></para>
</vb>
</syntax>
			<param name="RawText">
				A <typename>string</typename> value containing text with optional speech output tags.
			</param>
			<remarks>
				<para>
					The kind of speech tags accepted depends on the Text-to-Speech engine selected for the <see cref="T:&dans;.Character" />
					when the <see cref="T:&dans;.FormattedText" suffix=" Object" /> was created. If the <see cref="T:&dans;.Character" />
					is using a SAPI4 speech engine, then SAPI4 speech tags are accepted. If the <see cref="T:&dans;.Character" />
					is using a SAPI5 speech engine, then SAPI5 speech tags and <em>supported</em> SAPI4 speech tags are accepted.
					Any supported SAPI4 tags are converted to SAPI5 tags.
				</para>
				<para>
					For more information about speech tags, see <a href="../Reference/Ref_SpeechTags.htm">Speech Output Tags</a>.
				</para>
				<note>
					This method will fail if the <see cref="T:&dans;.FormattedText" suffix=" Object" /> is currently being
					used by a queued speech or thought action.
				</note>
			</remarks>
			<seealso cref="M:&dans;.Character.SpeakFormatted" suffix="Method" prefix="The" />
			<seealso cref="M:&dans;.Character.ThinkFormatted" suffix="Method" prefix="The" />
			<seealso cref="M:&dans;.Character.NewFormattedText" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.FormattedText.DisplayText">
			<summary>
				<para>
					Returns the text displayed in the <a class="see" href="&dawbref;">&dawbname;</a>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>formattedtext</token>-&gt;<keyword>get_DisplayText</keyword> (&amp;<token>DisplayText</token>)</para>
</cpp>
<csharp>
<para>[<token>DisplayText</token> = ]<token>formattedtext</token>.<keyword>DisplayText</keyword></para>
</csharp>
<vb>
<para>[<token>DisplayText</token> = ]<token>formattedtext</token>.<keyword>DisplayText</keyword></para>
</vb>
</syntax>
			<value name="DisplayText">
				A <typename>string</typename> value that contains the <see cref="P:&dans;.FormattedText.ParsedText" />
				up to and including the current <see cref="P:&dans;.FormattedText.WordIndex" />.
			</value>
			<remarks>
				<para>
					The value of this property does <em>not</em> depend on the <see cref="T:&dans;.Balloon" text="Balloon's" /> <see cref="P:&dans;.Balloon.Style" />,
					or even if a <a class="see" href="&dawbref;">&dawbname;</a> is shown. It reflects what <em>would</em>
					be displayed in a <a class="see" href="&dawbref;">&dawbname;</a> with the <see cref="F:&dans;.BalloonStyleFlags.SizeToText" />
					and <see cref="F:&dans;.BalloonStyleFlags.AutoPace" /> styles.
				</para>
			</remarks>
			<seealso cref="P:&dans;.FormattedText.ParsedText" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.FormattedText.WordIndex" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.FormattedText.DisplayWord">
			<summary>
				<para>
					Returns the <see cref="P:&dans;.FormattedText.ParsedText" /> for a specific <see cref="P:&dans;.FormattedText.WordIndex" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>formattedtext</token>-&gt;<keyword>get_DisplayWord</keyword> (<token>WordIndex</token>, &amp;<token>DisplayWord</token>)</para>
</cpp>
<csharp>
<para>[<token>DisplayWord</token> = ]<token>formattedtext</token>.<keyword>DisplayWord</keyword> [<token>WordIndex</token>]</para>
</csharp>
<vb>
<para>[<token>DisplayWord</token> = ]<token>formattedtext</token>.<keyword>DisplayWord</keyword> (<token>WordIndex</token>)</para>
</vb>
</syntax>
			<param name="WordIndex">
				A <typename>numeric</typename> value specifying the zero-based index of the word
				to return. Must be less than <see cref="P:&dans;.FormattedText.WordCount" />.
			</param>
			<value name="DisplayWord">
				A <typename>string</typename> value that contains the <see cref="P:&dans;.FormattedText.ParsedText" />
				at the specified <paramref name="WordIndex" />.
			</value>
			<remarks>
				<para>
					The returned string includes trailing <glossary>white-space</glossary>, but <em>not</em> leading <glossary>white-space</glossary>.
				</para>
			</remarks>
			<seealso cref="P:&dans;.FormattedText.ParsedText" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.FormattedText.WordIndex" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.FormattedText.WordCount" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.FormattedText.ParsedText">
			<summary>
				<para>
					Returns the text formatted for display.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>formattedtext</token>-&gt;<keyword>get_ParsedText</keyword> (&amp;<token>ParsedText</token>)</para>
</cpp>
<csharp>
<para>[<token>ParsedText</token> = ]<token>formattedtext</token>.<keyword>ParsedText</keyword></para>
</csharp>
<vb>
<para>[<token>ParsedText</token> = ]<token>formattedtext</token>.<keyword>ParsedText</keyword></para>
</vb>
</syntax>
			<value name="ParsedText">
				A <typename>string</typename> value containing the text formatted for displaying in
				a <a class="see" href="&dawbref;">&dawbname;</a>.
			</value>
			<seealso cref="P:&dans;.FormattedText.RawText" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.FormattedText.SpeechText" suffix="Property" prefix="The" />
			<seealso cref="M:&dans;.FormattedText.Parse" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.FormattedText.RawText">
			<summary>
				<para>
					Returns the unformatted text.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>formattedtext</token>-&gt;<keyword>get_RawText</keyword> (&amp;<token>RawText</token>)</para>
</cpp>
<csharp>
<para>[<token>RawText</token> = ]<token>formattedtext</token>.<keyword>RawText</keyword></para>
</csharp>
<vb>
<para>[<token>RawText</token> = ]<token>formattedtext</token>.<keyword>RawText</keyword></para>
</vb>
</syntax>
			<value name="RawText">
				A <typename>string</typename> value containing the unformatted text.
			</value>
			<remarks>
				<para>
					After you use the <see cref="M:&dans;.FormattedText.Parse" suffix="Method" />, this property will return
					the text passed in the <token>RawText</token> parameter.
				</para>
				<para>
					If you use this property to set the <self>RawText</self> value, it does not get parsed. The <self>RawText</self>
					value will be used for both the <see cref="P:&dans;.FormattedText.ParsedText" /> and the <see cref="P:&dans;.FormattedText.SpeechText" />.
				</para>
			</remarks>
			<seealso cref="P:&dans;.FormattedText.ParsedText" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.FormattedText.SpeechText" suffix="Property" prefix="The" />
			<seealso cref="M:&dans;.FormattedText.Parse" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.FormattedText.SpeechText">
			<summary>
				<para>
					Returns the text formatted for the Text-to-Speech engine.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>formattedtext</token>-&gt;<keyword>get_SpeechText</keyword> (&amp;<token>SpeechText</token>)</para>
</cpp>
<csharp>
<para>[<token>SpeechText</token> = ]<token>formattedtext</token>.<keyword>SpeechText</keyword></para>
</csharp>
<vb>
<para>[<token>SpeechText</token> = ]<token>formattedtext</token>.<keyword>SpeechText</keyword></para>
</vb>
</syntax>
			<value name="SpeechText">
				A <typename>string</typename> value containing the text formatted for sending to
				the Text-to-Speech engine.
			</value>
			<remarks>
				<para>
					This property contains speech tags formatted for the Text-to-Speech engine selected for the <see cref="T:&dans;.Character" />
					when the <see cref="T:&dans;.FormattedText" suffix=" Object" /> was created.
				</para>
				<para>
					For more information about speech tags, see <a href="../Reference/Ref_SpeechTags.htm">Speech Output Tags</a>.
				</para>
			</remarks>
			<seealso cref="P:&dans;.FormattedText.RawText" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.FormattedText.ParsedText" suffix="Property" prefix="The" />
			<seealso cref="M:&dans;.FormattedText.Parse" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.FormattedText.WordCount">
			<summary>
				<para>
					Returns the number of words in the <see cref="P:&dans;.FormattedText.ParsedText" /> and <see cref="P:&dans;.FormattedText.SpeechText" />
					properties.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>formattedtext</token>-&gt;<keyword>get_WordCount</keyword> (&amp;<token>WordCount</token>)</para>
</cpp>
<csharp>
<para>[<token>WordCount</token> = ]<token>formattedtext</token>.<keyword>WordCount</keyword></para>
</csharp>
<vb>
<para>[<token>WordCount</token> = ]<token>formattedtext</token>.<keyword>WordCount</keyword></para>
</vb>
</syntax>
			<value name="WordCount">
				A <typename>numeric</typename> value that indicates how many words are in the
				parsed text.
			</value>
			<remarks>
				<para>
					The <self>WordCount</self> reflects how text is displayed in the <a class="see" href="&dawbref;">&dawbname;</a>
					and how the <see cref="P:&dans;.FormattedText.DisplayText" /> is synchronized with the speech output.
				</para>
			</remarks>
			<seealso cref="P:&dans;.FormattedText.WordIndex" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.FormattedText.DisplayText" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.FormattedText.WordIndex">
			<summary>
				<para>
					Returns the index of the word currently being spoken and/or displayed.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>formattedtext</token>-&gt;<keyword>get_WordIndex</keyword> (&amp;<token>WordIndex</token>)</para>
</cpp>
<csharp>
<para>[<token>WordIndex</token> = ]<token>formattedtext</token>.<keyword>WordIndex</keyword></para>
</csharp>
<vb>
<para>[<token>WordIndex</token> = ]<token>formattedtext</token>.<keyword>WordIndex</keyword></para>
</vb>
</syntax>
			<value name="WordCount">
				A <typename>numeric</typename> value that indicates the zero-based index of
				the current word.
			</value>
			<remarks>
				<note>
					If speech or thought output has not yet begun, this property's value will be <keyword>-1</keyword>.
				</note>
			</remarks>
			<seealso cref="P:&dans;.FormattedText.WordCount" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.FormattedText.DisplayText" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.FormattedText.DisplayWord" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:&dans;.FormattedText">
			<summary>
				<para>
					The <self>FormattedText</self> object is used to pre-format text that is to be spoken, or shown in
					a <glossary>thought</glossary> <a class="see" href="&dawbref;">&dawbname;</a>.
				</para>
			</summary>
			<syntax>
				<list>
					<item>
						<term>
							<h4>
								<bookmark name="Methods"></bookmark>Methods
							</h4>
						</term>
						<description>
							<list type="&typelisttype;" class="syntax">
								<item>
									<term width="&typelistwidth;">
										<see cref="M:&dans;.FormattedText.Append" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.FormattedText.Append']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="M:&dans;.FormattedText.Parse" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.FormattedText.Parse']/summary/para[1]" />
									</description>
								</item>
							</list>
						</description>
					</item>
					<item>
						<term>
							<h4>
								<bookmark name="Properties"></bookmark>Properties
							</h4>
						</term>
						<description>
							<list type="&typelisttype;" class="syntax">
								<item>
									<term width="&typelistwidth;">
										<see cref="P:&dans;.FormattedText.DisplayText" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.FormattedText.DisplayText']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.FormattedText.DisplayWord" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.FormattedText.DisplayWord']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.FormattedText.ParsedText" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.FormattedText.ParsedText']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.FormattedText.RawText" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.FormattedText.RawText']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.FormattedText.SpeechText" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.FormattedText.SpeechText']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.FormattedText.WordCount" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.FormattedText.WordCount']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.FormattedText.WordIndex" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.FormattedText.WordIndex']/summary/para[1]" />
									</description>
								</item>
							</list>
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					If your application uses the same text for multiple calls to the <see cref="M:&dans;.Character.Speak" />
					or <see cref="M:&dans;.Character.Think" /> method, it can be more efficient to pre-format the text in a
					<self>FormattedText</self> object and use the <see cref="M:&dans;.Character.SpeakFormatted" /> or <see cref="M:&dans;.Character.ThinkFormatted" />
					method instead.
				</para>
				<para>
					Also, if you want to receive the <see cref="E:&darootobj;.SpeechStart" />, <see cref="E:&darootobj;.SpeechEnd" />,
					and <see cref="E:&darootobj;.SpeechWord" /> events, you must use the <see cref="M:&dans;.Character.SpeakFormatted" />
					method.
				</para>
			</remarks>
			<seealso cref="M:&dans;.Character.SpeakFormatted" suffix="Method" prefix="The" />
			<seealso cref="M:&dans;.Character.ThinkFormatted" suffix="Method" prefix="The" />
			<seealso cref="M:&dans;.Character.NewFormattedText" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="P:&dans;.CharacterFiles.CompliantCharacters">
			<summary>
				<para>
					Indicates if the <see cref="P:&dans;.CharacterFiles.FilePaths" /> property should include characters that
					conform to Microsoft<sup>®</sup> Agent design guidelines.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>characterfiles</token>-&gt;<keyword>get_CompliantCharacters</keyword> (&amp;<token>CompliantCharacters</token>)</para>
<para><token>characterfiles</token>-&gt;<keyword>put_CompliantCharacters</keyword> (<token>CompliantCharacters</token>)</para>
</cpp>
<csharp>
<para>[<token>CompliantCharacters</token> = ]&darootref;.<keyword>CharacterFiles</keyword>.<keyword>CompliantCharacters</keyword></para>
<para>&darootref;.<keyword>CharacterFiles</keyword>.<keyword>CompliantCharacters</keyword> = <token>CompliantCharacters</token></para>
</csharp>
<vb>
<para>[<token>CompliantCharacters</token> = ]&darootref;.<keyword>CharacterFiles</keyword>.<keyword>CompliantCharacters</keyword></para>
<para>&darootref;.<keyword>CharacterFiles</keyword>.<keyword>CompliantCharacters</keyword> = <token>CompliantCharacters</token></para>
</vb>
</syntax>
			<value name="CompliantCharacters">
				A <typename>boolean</typename> value that indicates if compliant characters
				should be included.
			</value>
			<remarks>
				<para>
					A character that supports the <glossary>standard animation set</glossary> is marked as <self>compliant</self>
					when it's compiled with the Microsoft<sup>®</sup> Agent Character Editor.
				</para>
			</remarks>
			<seealso cref="P:&dans;.CharacterFiles.NonCompliantCharacters" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.CharacterFiles.FilePaths" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.CharacterFiles.DefaultFileName">
			<summary>
				<para>
					Returns the name of the <em>default</em> character's definition file.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>characterfiles</token>-&gt;<keyword>get_DefaultFileName</keyword> (&amp;<token>DefaultFileName</token>)</para>
</cpp>
<csharp>
<para>[<token>DefaultFileName</token> = ]&darootref;.<keyword>CharacterFiles</keyword>.<keyword>DefaultFileName</keyword></para>
</csharp>
<vb>
<para>[<token>DefaultFileName</token> = ]&darootref;.<keyword>CharacterFiles</keyword>.<keyword>DefaultFileName</keyword></para>
</vb>
</syntax>
			<value name="DefaultFileName">
				A <typename>string</typename> value that contains the name of the <em>default</em>
				character's definition file.
			</value>
			<remarks>
				<para>
					The <em>default</em> character is specified by the user in the <a class="see" href="&dapsref;">&dapsname;</a>
					window.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.CharacterFiles.DefaultFilePath">
			<summary>
				<para>
					Returns the full path of the <em>default</em> character's definition file.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>characterfiles</token>-&gt;<keyword>get_DefaultFilePath</keyword> (&amp;<token>DefaultFilePath</token>)</para>
</cpp>
<csharp>
<para>[<token>DefaultFilePath</token> = ]&darootref;.<keyword>CharacterFiles</keyword>.<keyword>DefaultFilePath</keyword></para>
</csharp>
<vb>
<para>[<token>DefaultFilePath</token> = ]&darootref;.<keyword>CharacterFiles</keyword>.<keyword>DefaultFilePath</keyword></para>
</vb>
</syntax>
			<value name="DefaultFilePath">
				A <typename>string</typename> value that contains the <glossary>UNC</glossary>
				path of the <em>default</em> character's definition file.
			</value>
			<remarks>
				<para>
					The <em>default</em> character is specified by the user in the <a class="see" href="&dapsref;">&dapsname;</a>
					window.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.CharacterFiles.DefaultSearchPath">
			<summary>
				<para>
					Identifies the <em>default</em> search path used to fill the <see cref="P:&dans;.CharacterFiles.FilePaths" />
					property.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>characterfiles</token>-&gt;<keyword>get_DefaultSearchPath</keyword> (&amp;<token>DefaultSearchPath</token>)</para>
</cpp>
<csharp>
<para>[<token>DefaultSearchPath</token> = ]&darootref;.<keyword>CharacterFiles</keyword>.<keyword>DefaultSearchPath</keyword></para>
</csharp>
<vb>
<para>[<token>DefaultSearchPath</token> = ]&darootref;.<keyword>CharacterFiles</keyword>.<keyword>DefaultSearchPath</keyword></para>
</vb>
</syntax>
			<value name="DefaultSearchPath">
				A <typename>string</typename> value that identifies one or more <glossary>UNC</glossary>
				paths, separated by semicolons.
			</value>
			<remarks>
				<para>
					This property returns the <em>default</em> search path, based on the selection criteria specified by
					the <see cref="P:&dans;.CharacterFiles.DoubleAgentFiles" />, <see cref="P:&dans;.CharacterFiles.MsAgentFiles" />
					and <see cref="P:&dans;.CharacterFiles.MsOfficeFiles" /> properties. The <em>actual</em> search path can
					be set with the <see cref="P:&dans;.CharacterFiles.SearchPath" /> property.
				</para>
			</remarks>
			<seealso cref="P:&dans;.CharacterFiles.SearchPath" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.CharacterFiles.FilePaths" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.CharacterFiles.DoubleAgentFiles">
			<summary>
				<para>
					Indicates if the Double Agent install location should be included in the <see cref="P:&dans;.CharacterFiles.DefaultSearchPath" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>characterfiles</token>-&gt;<keyword>get_DoubleAgentFiles</keyword> (&amp;<token>DoubleAgentFiles</token>)</para>
<para><token>characterfiles</token>-&gt;<keyword>put_DoubleAgentFiles</keyword> (<token>DoubleAgentFiles</token>)</para>
</cpp>
<csharp>
<para>[<token>DoubleAgentFiles</token> = ]&darootref;.<keyword>CharacterFiles</keyword>.<keyword>DoubleAgentFiles</keyword></para>
<para>&darootref;.<keyword>CharacterFiles</keyword>.<keyword>DoubleAgentFiles</keyword> = <token>DoubleAgentFiles</token></para>
</csharp>
<vb>
<para>[<token>DoubleAgentFiles</token> = ]&darootref;.<keyword>CharacterFiles</keyword>.<keyword>DoubleAgentFiles</keyword></para>
<para>&darootref;.<keyword>CharacterFiles</keyword>.<keyword>DoubleAgentFiles</keyword> = <token>DoubleAgentFiles</token></para>
</vb>
</syntax>
			<value name="DoubleAgentFiles">
				A <typename>boolean</typename> value that indicates if the Double Agent
				install location should be included in the search for character files.
			</value>
			<remarks>
				<para>
					The path for Double Agent characters is the <filename>Chars</filename> subdirectory of the Double Agent install location. Typically, this would be <filename xml:space="preserve">C:\Program Files\Double Agent\Chars</filename>.
				</para>
			</remarks>
			<seealso cref="P:&dans;.CharacterFiles.FilePaths" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.CharacterFiles.SearchPath" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.CharacterFiles.DefaultSearchPath" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.CharacterFiles.FilePaths">
			<summary>
				<para>
					Returns a list of character file paths that satisfy the filtering criteria defined by other properties in
					the <see cref="T:&dans;.CharacterFiles" suffix="Object" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>characterfiles</token>-&gt;<keyword>get_FilePaths</keyword> (&amp;<token>FilePaths</token>)</para>
</cpp>
<csharp>
<para>[<token>FilePaths</token> = ]&darootref;.<keyword>CharacterFiles</keyword>.<keyword>FilePaths</keyword></para>
</csharp>
<vb>
<para>[<token>FilePaths</token> = ]&darootref;.<keyword>CharacterFiles</keyword>.<keyword>FilePaths</keyword></para>
</vb>
</syntax>
			<value name="FilePaths">
				An array of <typename>string</typename> values that identify locally available character
				definition files.
			</value>
			<remarks>
				<para>
					This property is the raison d'être of the <see cref="T:&dans;.CharacterFiles" suffix="Object" />.
					As you change the other properties in this object, the contents of this array will change accordingly.
				</para>
			</remarks>
			<seealso cref="P:&dans;.CharacterFiles.DoubleAgentFiles" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.CharacterFiles.MsAgentFiles" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.CharacterFiles.MsOfficeFiles" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.CharacterFiles.CompliantCharacters" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.CharacterFiles.NonCompliantCharacters" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.CharacterFiles.SpeakingCharacters" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.CharacterFiles.NonSpeakingCharacters" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.CharacterFiles.VerifyVersion" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.CharacterFiles.SearchPath" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.CharacterFiles.DefaultSearchPath" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.CharacterFiles.MsAgentFiles">
			<summary>
				<para>
					Indicates if the Microsoft<sup>®</sup> Agent install location should be included in the <see cref="P:&dans;.CharacterFiles.DefaultSearchPath" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>characterfiles</token>-&gt;<keyword>get_MsAgentFiles</keyword> (&amp;<token>MsAgentFiles</token>)</para>
<para><token>characterfiles</token>-&gt;<keyword>put_MsAgentFiles</keyword> (<token>MsAgentFiles</token>)</para>
</cpp>
<csharp>
<para>[<token>MsAgentFiles</token> = ]&darootref;.<keyword>CharacterFiles</keyword>.<keyword>MsAgentFiles</keyword></para>
<para>&darootref;.<keyword>CharacterFiles</keyword>.<keyword>MsAgentFiles</keyword> = <token>MsAgentFiles</token></para>
</csharp>
<vb>
<para>[<token>MsAgentFiles</token> = ]&darootref;.<keyword>CharacterFiles</keyword>.<keyword>MsAgentFiles</keyword></para>
<para>&darootref;.<keyword>CharacterFiles</keyword>.<keyword>MsAgentFiles</keyword> = <token>MsAgentFiles</token></para>
</vb>
</syntax>
			<value name="MsAgentFiles">
				A <typename>boolean</typename> value that indicates if the Microsoft<sup>®</sup>
				Agent install location should be included in the search for character files.
			</value>
			<remarks>
				<para>
					The path for Microsoft<sup>®</sup> Agent characters is the <filename>Chars</filename> subdirectory of
					the Microsoft<sup>®</sup> Agent install location. Typically, this would be <filename xml:space="preserve">C:\Windows\MsAgent\Chars</filename>.
				</para>
			</remarks>
			<seealso cref="P:&dans;.CharacterFiles.FilePaths" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.CharacterFiles.SearchPath" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.CharacterFiles.DefaultSearchPath" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.CharacterFiles.MsOfficeFiles">
			<summary>
				<para>
					Indicates if the Microsoft<sup>®</sup> Office install location should be included in the <see cref="P:&dans;.CharacterFiles.DefaultSearchPath" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>characterfiles</token>-&gt;<keyword>get_MsOfficeFiles</keyword> (&amp;<token>MsOfficeFiles</token>)</para>
<para><token>characterfiles</token>-&gt;<keyword>put_MsOfficeFiles</keyword> (<token>MsOfficeFiles</token>)</para>
</cpp>
<csharp>
<para>[<token>MsOfficeFiles</token> = ]&darootref;.<keyword>CharacterFiles</keyword>.<keyword>MsOfficeFiles</keyword></para>
<para>&darootref;.<keyword>CharacterFiles</keyword>.<keyword>MsOfficeFiles</keyword> = <token>MsOfficeFiles</token></para>
</csharp>
<vb>
<para>[<token>MsOfficeFiles</token> = ]&darootref;.<keyword>CharacterFiles</keyword>.<keyword>MsOfficeFiles</keyword></para>
<para>&darootref;.<keyword>CharacterFiles</keyword>.<keyword>MsOfficeFiles</keyword> = <token>MsOfficeFiles</token></para>
</vb>
</syntax>
			<value name="MsOfficeFiles">
				A <typename>boolean</typename> value that indicates if the Microsoft<sup>®</sup>
				Office install location should be included in the search for character files.
			</value>
			<remarks>
				<para>
					Typically, Microsoft<sup>®</sup> Office characters would be in <filename xml:space="preserve">C:\Program Files\Microsoft Office\Office10</filename>.
				</para>
				<note>Only older versions of Microsoft Office include Agent character files.</note>
			</remarks>
			<seealso cref="P:&dans;.CharacterFiles.FilePaths" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.CharacterFiles.SearchPath" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.CharacterFiles.DefaultSearchPath" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.CharacterFiles.NonCompliantCharacters">
			<summary>
				<para>
					Indicates if the <see cref="P:&dans;.CharacterFiles.FilePaths" /> property should include characters that
					<em>do not</em> conform to Microsoft<sup>®</sup> Agent design guidelines.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>characterfiles</token>-&gt;<keyword>get_NonCompliantCharacters</keyword> (&amp;<token>NonCompliantCharacters</token>)</para>
<para><token>characterfiles</token>-&gt;<keyword>put_NonCompliantCharacters</keyword> (<token>NonCompliantCharacters</token>)</para>
</cpp>
<csharp>
<para>[<token>NonCompliantCharacters</token> = ]&darootref;.<keyword>CharacterFiles</keyword>.<keyword>NonCompliantCharacters</keyword></para>
<para>&darootref;.<keyword>CharacterFiles</keyword>.<keyword>NonCompliantCharacters</keyword> = <token>NonCompliantCharacters</token></para>
</csharp>
<vb>
<para>[<token>NonCompliantCharacters</token> = ]&darootref;.<keyword>CharacterFiles</keyword>.<keyword>NonCompliantCharacters</keyword></para>
<para>&darootref;.<keyword>CharacterFiles</keyword>.<keyword>NonCompliantCharacters</keyword> = <token>NonCompliantCharacters</token></para>
</vb>
</syntax>
			<value name="NonCompliantCharacters">
				A <typename>boolean</typename> value that indicates if non-compliant characters
				should be included.
			</value>
			<remarks>
				<para>
					A character that supports the <glossary>standard animation set</glossary> is marked as <self>compliant</self>
					when it's compiled with the Microsoft<sup>®</sup> Agent Character Editor.
				</para>
			</remarks>
			<seealso cref="P:&dans;.CharacterFiles.CompliantCharacters" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.CharacterFiles.FilePaths" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.CharacterFiles.NonSpeakingCharacters">
			<summary>
				<para>
					Indicates if the <see cref="P:&dans;.CharacterFiles.FilePaths" /> property should include characters that
					are <em>not</em> designed to speak.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>characterfiles</token>-&gt;<keyword>get_NonSpeakingCharacters</keyword> (&amp;<token>NonSpeakingCharacters</token>)</para>
<para><token>characterfiles</token>-&gt;<keyword>put_NonSpeakingCharacters</keyword> (<token>NonSpeakingCharacters</token>)</para>
</cpp>
<csharp>
<para>[<token>NonSpeakingCharacters</token> = ]&darootref;.<keyword>CharacterFiles</keyword>.<keyword>NonSpeakingCharacters</keyword></para>
<para>&darootref;.<keyword>CharacterFiles</keyword>.<keyword>NonSpeakingCharacters</keyword> = <token>NonSpeakingCharacters</token></para>
</csharp>
<vb>
<para>[<token>NonSpeakingCharacters</token> = ]&darootref;.<keyword>CharacterFiles</keyword>.<keyword>NonSpeakingCharacters</keyword></para>
<para>&darootref;.<keyword>CharacterFiles</keyword>.<keyword>NonSpeakingCharacters</keyword> = <token>NonSpeakingCharacters</token></para>
</vb>
</syntax>
			<value name="NonSpeakingCharacters">
				A <typename>boolean</typename> value that indicates if non-speaking characters
				should be included.
			</value>
			<remarks>
				<para>
					Unlike Microsoft<sup>®</sup> Agent, Double Agents supports the <see cref="M:&dans;.Character.Speak" />
					method for characters that are not designed to speak. However, there won't be any mouth animations because
					they aren't included in the character design.
				</para>
			</remarks>
			<seealso cref="P:&dans;.CharacterFiles.SpeakingCharacters" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.CharacterFiles.FilePaths" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.CharacterFiles.SearchPath">
			<summary>
				<para>
					Identifies the <em>actual</em> search path used to fill the <see cref="P:&dans;.CharacterFiles.FilePaths" />
					property. Unless you have special requirements, this is usually the same as the <see cref="P:&dans;.CharacterFiles.DefaultSearchPath" />
					property.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>characterfiles</token>-&gt;<keyword>get_SearchPath</keyword> (&amp;<token>SearchPath</token>)</para>
<para><token>characterfiles</token>-&gt;<keyword>put_SearchPath</keyword> (<token>SearchPath</token>)</para>
</cpp>
<csharp>
<para>[<token>SearchPath</token> = ]&darootref;.<keyword>CharacterFiles</keyword>.<keyword>SearchPath</keyword></para>
<para>&darootref;.<keyword>CharacterFiles</keyword>.<keyword>SearchPath</keyword> = <token>SearchPath</token></para>
</csharp>
<vb>
<para>[<token>SearchPath</token> = ]&darootref;.<keyword>CharacterFiles</keyword>.<keyword>SearchPath</keyword></para>
<para>&darootref;.<keyword>CharacterFiles</keyword>.<keyword>SearchPath</keyword> = <token>SearchPath</token></para>
</vb>
</syntax>
			<value name="SearchPath">
				A <typename>string</typename> value that identifies one or more <glossary>UNC</glossary>
				paths, separated by semicolons.
			</value>
			<remarks>
				<para>
					When this property is set to an <keyword>empty string</keyword>, it returns the <see cref="P:&dans;.CharacterFiles.DefaultSearchPath" />.
				</para>
				<para>
					Normally, you would leave this property alone and allow the <see cref="P:&dans;.CharacterFiles.DefaultSearchPath" />
					to be used. You would only set this property if you wanted to search for character files in non-default locations.
				</para>
			</remarks>
			<seealso cref="P:&dans;.CharacterFiles.DefaultSearchPath" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.CharacterFiles.FilePaths" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.CharacterFiles.SpeakingCharacters">
			<summary>
				<para>
					Indicates if the <see cref="P:&dans;.CharacterFiles.FilePaths" /> property should include characters that
					are designed to speak.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>characterfiles</token>-&gt;<keyword>get_SpeakingCharacters</keyword> (&amp;<token>SpeakingCharacters</token>)</para>
<para><token>characterfiles</token>-&gt;<keyword>put_SpeakingCharacters</keyword> (<token>SpeakingCharacters</token>)</para>
</cpp>
<csharp>
<para>[<token>SpeakingCharacters</token> = ]&darootref;.<keyword>CharacterFiles</keyword>.<keyword>SpeakingCharacters</keyword></para>
<para>&darootref;.<keyword>CharacterFiles</keyword>.<keyword>SpeakingCharacters</keyword> = <token>SpeakingCharacters</token></para>
</csharp>
<vb>
<para>[<token>SpeakingCharacters</token> = ]&darootref;.<keyword>CharacterFiles</keyword>.<keyword>SpeakingCharacters</keyword></para>
<para>&darootref;.<keyword>CharacterFiles</keyword>.<keyword>SpeakingCharacters</keyword> = <token>SpeakingCharacters</token></para>
</vb>
</syntax>
			<value name="SpeakingCharacters">
				A <typename>boolean</typename> value that indicates if speaking characters
				should be included.
			</value>
			<seealso cref="P:&dans;.CharacterFiles.NonSpeakingCharacters" suffix="Property" prefix="The" />
			<seealso cref="P:&dans;.CharacterFiles.FilePaths" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.CharacterFiles.VerifyVersion">
			<summary>
				<para>
					Indicates if the the <see cref="P:&dans;.CharacterFiles.FilePaths" /> property should be limited to
					version 2.x characters.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>characterfiles</token>-&gt;<keyword>get_VerifyVersion</keyword> (&amp;<token>VerifyVersion</token>)</para>
<para><token>characterfiles</token>-&gt;<keyword>put_VerifyVersion</keyword> (<token>VerifyVersion</token>)</para>
</cpp>
<csharp>
<para>[<token>VerifyVersion</token> = ]&darootref;.<keyword>CharacterFiles</keyword>.<keyword>VerifyVersion</keyword></para>
<para>&darootref;.<keyword>CharacterFiles</keyword>.<keyword>VerifyVersion</keyword> = <token>VerifyVersion</token></para>
</csharp>
<vb>
<para>[<token>VerifyVersion</token> = ]&darootref;.<keyword>CharacterFiles</keyword>.<keyword>VerifyVersion</keyword></para>
<para>&darootref;.<keyword>CharacterFiles</keyword>.<keyword>VerifyVersion</keyword> = <token>VerifyVersion</token></para>
</vb>
</syntax>
			<value name="VerifyVersion">
				A <typename>boolean</typename> value that indicates if the character files'
				version should be verified.
			</value>
			<remarks>
				<para>
					Double Agent can only use version 2.x characters.
				</para>
				<note>
					Setting the <see cref="P:&dans;.CharacterFiles.CompliantCharacters" />, <see cref="P:&dans;.CharacterFiles.NonCompliantCharacters" />,
					<see cref="P:&dans;.CharacterFiles.SpeakingCharacters" /> or <see cref="P:&dans;.CharacterFiles.NonSpeakingCharacters" />
					filters will automatically set this property to <keyword>True</keyword>.
				</note>
			</remarks>
			<seealso cref="P:&dans;.CharacterFiles.FilePaths" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:&dans;.CharacterFiles">
			<summary>
				<para>
					The <self>CharacterFiles Object</self> provides information that allows you to locate locally installed character
					definition files. It includes a number of filtering properties that specify where to look
					for character files, and what kind of files to find. The results are returned in its <see cref="P:&dans;.CharacterFiles.FilePaths" />
					property.
				</para>
			</summary>
			<syntax>
				<list>
					<item>
						<term>
							<h4>
								<bookmark name="Properties"></bookmark>Properties
							</h4>
						</term>
						<description>
							<list type="&typelisttype;" class="syntax">
								<item>
									<term>
										<see cref="P:&dans;.CharacterFiles.CompliantCharacters" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.CharacterFiles.CompliantCharacters']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term width="&typelistwidth;">
										<see cref="P:&dans;.CharacterFiles.DefaultFileName" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.CharacterFiles.DefaultFileName']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.CharacterFiles.DefaultFilePath" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.CharacterFiles.DefaultFilePath']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.CharacterFiles.DefaultSearchPath" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.CharacterFiles.DefaultSearchPath']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.CharacterFiles.DoubleAgentFiles" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.CharacterFiles.DoubleAgentFiles']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.CharacterFiles.FilePaths" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.CharacterFiles.FilePaths']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.CharacterFiles.MsAgentFiles" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.CharacterFiles.MsAgentFiles']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.CharacterFiles.MsOfficeFiles" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.CharacterFiles.MsOfficeFiles']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.CharacterFiles.NonCompliantCharacters" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.CharacterFiles.NonCompliantCharacters']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.CharacterFiles.NonSpeakingCharacters" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.CharacterFiles.NonSpeakingCharacters']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.CharacterFiles.SearchPath" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.CharacterFiles.SearchPath']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.CharacterFiles.SpeakingCharacters" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.CharacterFiles.SpeakingCharacters']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.CharacterFiles.VerifyVersion" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.CharacterFiles.VerifyVersion']/summary/para[1]" />
									</description>
								</item>
							</list>
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					This object can be accessed using the <see class="" cref="T:&darootobj;" suffix="Object's" /> <see class="" cref="P:&darootobj;.CharacterFiles" />
					property.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="M:&dans;.SREngine.GetVersion">
			<summary>
				<para>
					Returns the speech recognition engine's version.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>srengine</token>-&gt;<keyword>GetVersion</keyword> (&amp;<token>MajorVersion</token>, &amp;<token>MinorVersion</token>)</para>
</cpp>
<csharp>
<para><token>srengine</token>.<keyword>GetVersion</keyword> (<keyword>out</keyword> <token>MajorVersion</token>, <keyword>out</keyword> <token>MinorVersion</token>)</para>
</csharp>
<vbnet>
<para><token>srengine</token>.<keyword>GetVersion</keyword> (<token>MajorVersion</token>, <token>MinorVersion</token>)</para>
</vbnet>
<vb>
<para><keyword>Call</keyword> <token>srengine</token>.<keyword>GetVersion</keyword> (<token>MajorVersion</token>, <token>MinorVersion</token>)</para>
</vb>
</syntax>
			<param name="MajorVersion">
				A <typename>numeric</typename> values that identifies the engine's major version
				(always 5 at this time).
			</param>
			<param name="MinorVersion">
				A <typename>numeric</typename> values that identifies the engine's minor version
				(always 0 at this time).
			</param>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.SREngine.DisplayName">
			<summary>
				<para>
					Returns the speech recognition engine's human-readable name.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>srengine</token>-&gt;<keyword>get_DisplayName</keyword> (&amp;<token>DisplayName</token>)</para>
</cpp>
<csharp>
<para>[<token>DisplayName</token> = ]<token>srengine</token>.<keyword>DisplayName</keyword></para>
</csharp>
<vb>
<para>[<token>DisplayName</token> = ]<token>srengine</token>.<keyword>DisplayName</keyword></para>
</vb>
</syntax>
			<value name="DisplayName">
				A <typename>string</typename> value gives the engine's name in a form suitable for
				the user.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.SREngine.LanguageID">
			<summary>
				<para>
					Returns the speech recognition engine's primary language identifier.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>srengine</token>-&gt;<keyword>get_LanguageID</keyword> (&amp;<token>LanguageID</token>)</para>
</cpp>
<csharp>
<para>[<token>LanguageID</token> = ]<token>srengine</token>.<keyword>LanguageID</keyword></para>
</csharp>
<vb>
<para>[<token>LanguageID</token> = ]<token>srengine</token>.<keyword>LanguageID</keyword></para>
</vb>
</syntax>
			<value name="LanguageID">
				A <typename>numeric</typename> value that identifies the primary language supported
				by the engine.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.SREngine.LanguageIDs">
			<summary>
				<para>
					Returns the speech recognition engine's supported language identifiers.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>srengine</token>-&gt;<keyword>get_LanguageIDs</keyword> (&amp;<token>LanguageIDs</token>)</para>
</cpp>
<csharp>
<para>[<token>LanguageIDs</token> = ]<token>srengine</token>.<keyword>LanguageIDs</keyword></para>
</csharp>
<vb>
<para>[<token>LanguageIDs</token> = ]<token>srengine</token>.<keyword>LanguageIDs</keyword></para>
</vb>
</syntax>
			<value name="LanguageIDs">
				An array of <typename>numeric</typename> values that identify <em>all</em>
				languages supported by the engine.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.SREngine.LanguageName">
			<summary>
				<para>
					Returns the speech recognition engine's human-readable primary language name.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>srengine</token>-&gt;<keyword>get_LanguageName</keyword> (<token>EnglishName</token>, &amp;<token>LanguageName</token>)</para>
</cpp>
<csharp>
<para>[<token>LanguageName</token> = ]<token>srengine</token>.<keyword>get_LanguageName</keyword> (<token>EnglishName</token>)</para>
</csharp>
<vb>
<para>[<token>LanguageName</token> = ]<token>srengine</token>.<keyword>LanguageName</keyword>[ [<token>EnglishName</token>]]</para>
</vb>
</syntax>
			<value name="LanguageName">
				A <typename>string</typename> value that identifies the engine's primary language
				in a form suitable for the user.
			</value>
			<param name="EnglishName">
				An optional <typename>boolean</typename> value that specifies if the language name
				should be in English, or in the user's language. The default value is <keyword>True</keyword>.
			</param>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.SREngine.LanguageNames">
			<summary>
				<para>
					Returns the speech recognition engine's human-readable supported language names.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>srengine</token>-&gt;<keyword>get_LanguageNames</keyword> (<token>EnglishNames</token>, &amp;<token>LanguageNames</token>)</para>
</cpp>
<csharp>
<para>[<token>LanguageNames</token> = ]<token>srengine</token>.<keyword>get_LanguageNames</keyword> (<token>EnglishNames</token>)</para>
</csharp>
<vb>
<para>[<token>LanguageNames</token> = ]<token>srengine</token>.<keyword>LanguageNames</keyword>[ [<token>EnglishNames</token>]]</para>
</vb>
</syntax>
			<value name="LanguageNames">
				An array of <typename>string</typename> values that identify <em>all</em>
				of the engine's supported languages in a form suitable for the user.
			</value>
			<param name="EnglishNames">
				An optional <typename>boolean</typename> value that specifies if the language names
				should be in English, or in the user's language. The default value is <keyword>True</keyword>.
			</param>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.SREngine.Manufacturer">
			<summary>
				<para>
					Returns the speech recognition engine's manufacturer's name.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>srengine</token>-&gt;<keyword>get_Manufacturer</keyword> (&amp;<token>Manufacturer</token>)</para>
</cpp>
<csharp>
<para>[<token>Manufacturer</token> = ]<token>srengine</token>.<keyword>Manufacturer</keyword></para>
</csharp>
<vb>
<para>[<token>Manufacturer</token> = ]<token>srengine</token>.<keyword>Manufacturer</keyword></para>
</vb>
</syntax>
			<value name="Manufacturer">
				A <typename>string</typename> value that supplies the name of the engine's manufacturer.
			</value>
			<remarks>
				<para>
					Some speech recognition engines may not supply this property.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.SREngine.SRModeID">
			<summary>
				<para>
					Returns the unique identifier used to select this speech recognition engine.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>srengine</token>-&gt;<keyword>get_SRModeID</keyword> (&amp;<token>SRModeID</token>)</para>
</cpp>
<csharp>
<para>[<token>Count</token> = ]<token>srengine</token>.<keyword>SRModeID</keyword></para>
</csharp>
<vb>
<para>[<token>Count</token> = ]<token>srengine</token>.<keyword>SRModeID</keyword></para>
</vb>
</syntax>
			<value name="SRModeID">
				A <typename>string</typename> value that uniquely identifies the speech recognition engine.
			</value>
			<remarks>
				<para>
					This property corresponds to the <see cref="T:&dans;.Character" />.<see cref="P:&dans;.Character.SRModeID" />
					property. To use <em>this</em> <see cref="T:&dans;.SREngine" suffix="Object" />, set the character's <see cref="P:&dans;.Character.SRModeID" />
					property to <em>this</em> value.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:&dans;.SREngine">
			<summary>
				<para>
					The <self>SREngine Object</self> provides information about an installed speech recognition engine. You
					can use it to help choose a character's speech recognition engine.
				</para>
			</summary>
			<syntax>
				<list>
					<item>
						<term>
							<h4>
								<bookmark name="Methods"></bookmark>Methods
							</h4>
						</term>
						<description>
							<list type="&typelisttype;" class="syntax">
								<item>
									<term width="&typelistwidth;">
										<see cref="M:&dans;.SREngine.GetVersion" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.SREngine.GetVersion']/summary/para[1]" />
									</description>
								</item>
							</list>
						</description>
					</item>
					<item>
						<term>
							<h4>
								<bookmark name="Properties"></bookmark>Properties
							</h4>
						</term>
						<description>
							<list type="&typelisttype;" class="syntax">
								<item>
									<term width="&typelistwidth;">
										<see cref="P:&dans;.SREngine.DisplayName" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.SREngine.DisplayName']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.SREngine.LanguageID" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.SREngine.LanguageID']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.SREngine.LanguageIDs" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.SREngine.LanguageIDs']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.SREngine.LanguageName" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.SREngine.LanguageName']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.SREngine.LanguageNames" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.SREngine.LanguageNames']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.SREngine.Manufacturer" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.SREngine.Manufacturer']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.SREngine.SRModeID" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.SREngine.SRModeID']/summary/para[1]" />
									</description>
								</item>
							</list>
						</description>
					</item>
				</list>
			</syntax>
			<seealso cref="M:&darootobj;.GetCharacterSREngine" suffix="Method" prefix="The" />
			<seealso cref="P:&dans;.Character.SREngine" suffix="Property" prefix="The" />
			<seealso cref="T:&dans;.SREngines" suffix="Collection" prefix="The" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="P:&dans;.SREngines.Count">
			<summary>
				<para>
					Returns the count of <see cref="T:&dans;.SREngine" suffix="Objects" /> in the <see cref="T:&dans;.SREngines" suffix="Collection" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>srengines</token>-&gt;<keyword>get_Count</keyword> (&amp;<token>Count</token>)</para>
</cpp>
<csharp>
<para>[<token>Count</token> = ]<token>srengines</token>.<keyword>Count</keyword></para>
</csharp>
<vb>
<para>[<token>Count</token> = ]<token>srengines</token>.<keyword>Count</keyword></para>
</vb>
</syntax>
			<value name="Count">
				A <typename>numeric</typename> value that indicates the number of <see cref="T:&dans;.SREngine" suffix="Objects" />
				in the collection.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.SREngines.Item">
			<summary>
				<para>
					Returns a <see cref="T:&dans;.SREngine" suffix="Object" /> in the collection.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>srengines</token>-&gt;<keyword>get_Item</keyword> (<token>Index</token>, &amp;<token>SREngine</token>)</para>
</cpp>
<csharp>
<para>[<token>SREngine</token> = ]<token>srengines</token>.this [<token>Index</token>]</para>
</csharp>
<vbnet>
<para>[<token>SREngine</token> = ]<token>srengines</token> (<token>Index</token>)</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>SREngine</token> = ]<token>srengines</token> (<token>Index</token>)</para>
</vb>
</syntax>
			<param name="Index">
				A <typename>numeric</typename> value that specifies the zero-based index of the item
				to retrieve,
				<para />
				or a <typename>string</typename> value that specifies the <see cref="P:&dans;.SREngine.SRModeID" />
				of the item to retrieve.
			</param>
			<value name="SREngine">
				The <see cref="T:&dans;.SREngine" suffix="Object" /> identified by <paramref name="Index" />.
			</value>
			<remarks>
				<para name="Ordering">
					When the <see cref="T:&dans;.SREngines" suffix="Collection" /> is retrieved using <strong>matching criteria</strong>
					(for example using the <see cref="M:&dans;.Character.FindSREngines" /> method), it is an <em>ordered</em>
					collection. It's items are in order from best to worst match.
				</para>
			</remarks>
			<seealso cref="P:&dans;.SREngines.Count" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.SREngines.GetEnumerator">
			<inheritdoc/>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:&dans;.SREngines" kind="Collection">
			<summary>
				<para>
					The <self>SREngines Collection</self> contains a selected set of <see cref="T:&dans;.SREngine" suffix="Objects" />.
					You can use it to help choose a character's speech recognition engine.
				</para>
			</summary>
			<syntax>
				<list>
					<item>
						<term>
							<h4>
								<bookmark name="Properties"></bookmark>Properties
							</h4>
						</term>
						<description>
							<list type="&typelisttype;" class="syntax">
								<item>
									<term width="&typelistwidth;">
										<see cref="P:&dans;.SREngines.Count" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.SREngines.Count']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.SREngines.Item" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.SREngines.Item']/summary/para[1]" />
									</description>
								</item>
							</list>
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					The contents of the collection depends on how it was retrieved.
				</para>
				<include path="/doc/members/member[@name='P:&dans;.SREngines.Item']/remarks/para[@name='Ordering']" />
			</remarks>
			<seealso cref="M:&darootobj;.FindCharacterSREngines" suffix="Method" prefix="The" />
			<seealso cref="M:&darootobj;.FindSREngines" suffix="Method" prefix="The" />
			<seealso cref="P:&darootobj;.SREngines" suffix="Property" prefix="The" />
			<seealso cref="M:&dans;.Character.FindSREngines" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="M:&dans;.TTSEngine.GetVersion">
			<summary>
				<para>
					Returns the text-to-speech engine's version.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>ttsengine</token>-&gt;<keyword>GetVersion</keyword> (&amp;<token>MajorVersion</token>, &amp;<token>MinorVersion</token>)</para>
</cpp>
<csharp>
<para><token>ttsengine</token>.<keyword>GetVersion</keyword> (<keyword>out</keyword> <token>MajorVersion</token>, <keyword>out</keyword> <token>MinorVersion</token>)</para>
</csharp>
<vbnet>
<para><token>ttsengine</token>.<keyword>GetVersion</keyword> (<token>MajorVersion</token>, <token>MinorVersion</token>)</para>
</vbnet>
<vb>
<para><keyword>Call</keyword> <token>ttsengine</token>.<keyword>GetVersion</keyword> (<token>MajorVersion</token>, <token>MinorVersion</token>)</para>
</vb>
</syntax>
			<param name="MajorVersion">
				A <typename>numeric</typename> values that identifies the engine's major version
				(always 4 or 5 at this time).
			</param>
			<param name="MinorVersion">
				A <typename>numeric</typename> values that identifies the engine's minor version
				(always 0 at this time).
			</param>
			<remarks>
				<para>
					You can use this property to determine if the text-to-speech engine is a SAPI4 or SAPI5 engine.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.TTSEngine.DisplayName">
			<summary>
				<para>
					Returns the text-to-speech engine's human-readable name.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>ttsengine</token>-&gt;<keyword>get_DisplayName</keyword> (&amp;<token>DisplayName</token>)</para>
</cpp>
<csharp>
<para>[<token>DisplayName</token> = ]<token>ttsengine</token>.<keyword>DisplayName</keyword></para>
</csharp>
<vb>
<para>[<token>DisplayName</token> = ]<token>ttsengine</token>.<keyword>DisplayName</keyword></para>
</vb>
</syntax>
			<value name="DisplayName">
				A <typename>string</typename> value gives the engine's name in a form suitable for
				the user.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.TTSEngine.Gender">
			<summary>
				<para>
					Returns the text-to-speech engine's gender.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>ttsengine</token>-&gt;<keyword>get_Gender</keyword> (&amp;<token>Gender</token>)</para>
</cpp>
<csharp>
<para>[<token>Gender</token> = ]<token>ttsengine</token>.<keyword>Gender</keyword></para>
</csharp>
<vb>
<para>[<token>Gender</token> = ]<token>ttsengine</token>.<keyword>Gender</keyword></para>
</vb>
</syntax>
			<value name="Gender">
				A <typename>numeric</typename> value that identifies the speech engine's gender:
				<list type="table">
					<include path="/doc/members/member[@name='T:&dans;.SpeechGenderType']/syntax/list/item[@name='Female']" />
					<include path="/doc/members/member[@name='T:&dans;.SpeechGenderType']/syntax/list/item[@name='Male']" />
				</list>
			</value>
			<seealso cref="T:&dans;.SpeechGenderType" suffix="Enumeration" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.TTSEngine.LanguageID">
			<summary>
				<para>
					Returns the text-to-speech engine's language identifier.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>ttsengine</token>-&gt;<keyword>get_LanguageID</keyword> (&amp;<token>LanguageID</token>)</para>
</cpp>
<csharp>
<para>[<token>LanguageID</token> = ]<token>ttsengine</token>.<keyword>LanguageID</keyword></para>
</csharp>
<vb>
<para>[<token>LanguageID</token> = ]<token>ttsengine</token>.<keyword>LanguageID</keyword></para>
</vb>
</syntax>
			<value name="LanguageID">
				A <typename>numeric</typename> value that identifies the language supported by
				the engine.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.TTSEngine.LanguageName">
			<summary>
				<para>
					Returns the text-to-speech engine's human-readable language name.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>ttsengine</token>-&gt;<keyword>get_LanguageName</keyword> (<token>EnglishName</token>, &amp;<token>LanguageName</token>)</para>
</cpp>
<csharp>
<para>[<token>LanguageName</token> = ]<token>ttsengine</token>.<keyword>get_LanguageName</keyword> (<token>EnglishName</token>)</para>
</csharp>
<vb>
<para>[<token>LanguageName</token> = ]<token>ttsengine</token>.<keyword>LanguageName</keyword>[ [<token>EnglishName</token>]]</para>
</vb>
</syntax>
			<value name="LanguageName">
				A <typename>string</typename> value that identifies the engine's language in
				a form suitable for the user.
			</value>
			<param name="EnglishName">
				An optional <typename>boolean</typename> value that specifies if the language name
				should be in English, or in the user's language. The default value is <keyword>True</keyword>.
			</param>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.TTSEngine.Manufacturer">
			<summary>
				<para>
					Returns the text-to-speech engine's manufacturer's name.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>ttsengine</token>-&gt;<keyword>get_Manufacturer</keyword> (&amp;<token>Manufacturer</token>)</para>
</cpp>
<csharp>
<para>[<token>Manufacturer</token> = ]<token>ttsengine</token>.<keyword>Manufacturer</keyword></para>
</csharp>
<vb>
<para>[<token>Manufacturer</token> = ]<token>ttsengine</token>.<keyword>Manufacturer</keyword></para>
</vb>
</syntax>
			<value name="Manufacturer">
				A <typename>string</typename> value that supplies the name of the engine's manufacturer.
			</value>
			<remarks>
				<para>
					Some text-to-speech engine engines may not supply this property.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.TTSEngine.TTSModeID">
			<summary>
				<para>
					Returns the unique identifier used to select this text-to-speech engine.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>ttsengine</token>-&gt;<keyword>get_TTSModeID</keyword> (&amp;<token>TTSModeID</token>)</para>
</cpp>
<csharp>
<para>[<token>TTSModeID</token> = ]<token>ttsengine</token>.<keyword>TTSModeID</keyword></para>
</csharp>
<vb>
<para>[<token>TTSModeID</token> = ]<token>ttsengine</token>.<keyword>TTSModeID</keyword></para>
</vb>
</syntax>
			<value name="TTSModeID">
				A <typename>string</typename> value that uniquely identifies a specific speech mode
				of a specific text-to-speech engine.
			</value>
			<remarks>
				<para>
					This property corresponds to the <see cref="T:&dans;.Character" />.<see cref="P:&dans;.Character.TTSModeID" />
					property. To use <em>this</em> <see cref="T:&dans;.TTSEngine" suffix="Object" />, set the character's <see cref="P:&dans;.Character.TTSModeID" />
					property to <em>this</em> value.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:&dans;.TTSEngine">
			<summary>
				<para>
					The <self>TTSEngine Object</self> provides information about an installed text-to-speech engine. You
					can use it to help choose a character's text-to-speech engine.
				</para>
			</summary>
			<syntax>
				<list>
					<item>
						<term>
							<h4>
								<bookmark name="Methods"></bookmark>Methods
							</h4>
						</term>
						<description>
							<list type="&typelisttype;" class="syntax">
								<item>
									<term width="&typelistwidth;">
										<see cref="M:&dans;.TTSEngine.GetVersion" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='M:&dans;.TTSEngine.GetVersion']/summary/para[1]" />
									</description>
								</item>
							</list>
						</description>
					</item>
					<item>
						<term>
							<h4>
								<bookmark name="Properties"></bookmark>Properties
							</h4>
						</term>
						<description>
							<list type="&typelisttype;" class="syntax">
								<item>
									<term width="&typelistwidth;">
										<see cref="P:&dans;.TTSEngine.DisplayName" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.TTSEngine.DisplayName']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.TTSEngine.Gender" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.TTSEngine.Gender']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.TTSEngine.LanguageID" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.TTSEngine.LanguageID']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.TTSEngine.LanguageName" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.TTSEngine.LanguageName']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.TTSEngine.Manufacturer" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.TTSEngine.Manufacturer']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.TTSEngine.TTSModeID" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.TTSEngine.TTSModeID']/summary/para[1]" />
									</description>
								</item>
							</list>
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					Some text-to-speech engines support several <em>modes</em>, generally one for each supported language or
					language variant. In that case, this object represents only one <em>mode</em>, and there will one <self>
						TTSEngine
						Object
					</self> for each <em>mode</em> supported by the speech engine, each with a unique <see cref="P:&dans;.TTSEngine.TTSModeID" />
					property.
				</para>
			</remarks>
			<seealso cref="M:&darootobj;.GetCharacterTTSEngine" suffix="Method" prefix="The" />
			<seealso cref="P:&dans;.Character.TTSEngine" suffix="Property" prefix="The" />
			<seealso cref="T:&dans;.TTSEngines" suffix="Collection" prefix="The" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="P:&dans;.TTSEngines.Count">
			<summary>
				<para>
					Returns the count of <see cref="T:&dans;.TTSEngine" suffix="Objects" /> in the <see cref="T:&dans;.TTSEngines" suffix="Collection" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>ttsengines</token>-&gt;<keyword>get_Count</keyword> (&amp;<token>Count</token>)</para>
</cpp>
<csharp>
<para>[<token>Count</token> = ]<token>ttsengines</token>.<keyword>Count</keyword></para>
</csharp>
<vb>
<para>[<token>Count</token> = ]<token>ttsengines</token>.<keyword>Count</keyword></para>
</vb>
</syntax>
			<value name="Count">
				A <typename>numeric</typename> value that indicates the number of <see cref="T:&dans;.TTSEngine" suffix="Objects" />
				in the collection.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:&dans;.TTSEngines.Item">
			<summary>
				<para>
					Returns a <see cref="T:&dans;.TTSEngine" suffix="Object" /> in the collection.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><token>ttsengines</token>-&gt;<keyword>get_Item</keyword> (<token>Index</token>, &amp;<token>TTSEngine</token>)</para>
</cpp>
<csharp>
<para>[<token>TTSEngine</token> = ]<token>ttsengines</token>.this [<token>Index</token>]</para>
</csharp>
<vbnet>
<para>[<token>TTSEngine</token> = ]<token>ttsengines</token> (<token>Index</token>)</para>
</vbnet>
<vb>
<para>[<keyword>Set</keyword> <token>TTSEngine</token> = ]<token>ttsengines</token> (<token>Index</token>)</para>
</vb>
</syntax>
			<param name="Index">
				A <typename>numeric</typename> value that specifies the zero-based index of the item
				to retrieve,
				<para />
				or a <typename>string</typename> value that specifies the <see cref="P:&dans;.TTSEngine.TTSModeID" />
				of the item to retrieve.
			</param>
			<value name="TTSEngine">
				The <see cref="T:&dans;.TTSEngine" suffix="Object" /> identified by <paramref name="Index" />.
			</value>
			<remarks>
				<para name="Ordering">
					When the <see cref="T:&dans;.TTSEngines" suffix="Collection" /> is retrieved using <strong>matching criteria</strong>
					(for example using the <see cref="M:&dans;.Character.FindTTSEngines" /> method), it is an <em>ordered</em>
					collection. It's items are in order from best to worst match.
				</para>
			</remarks>
			<seealso cref="P:&dans;.TTSEngines.Count" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="M:&dans;.TTSEngines.GetEnumerator">
			<inheritdoc/>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:&dans;.TTSEngines" kind="Collection">
			<summary>
				<para>
					The <self>TTSEngines Collection</self> contains a selected set of <see cref="T:&dans;.TTSEngine" suffix="Objects" />.
					You can use it to help choose a character's text-to-speech engine.
				</para>
			</summary>
			<syntax>
				<list>
					<item>
						<term>
							<h4>
								<bookmark name="Properties"></bookmark>Properties
							</h4>
						</term>
						<description>
							<list type="&typelisttype;" class="syntax">
								<item>
									<term width="&typelistwidth;">
										<see cref="P:&dans;.TTSEngines.Count" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.TTSEngines.Count']/summary/para[1]" />
									</description>
								</item>
								<item>
									<term>
										<see cref="P:&dans;.TTSEngines.Item" />
									</term>
									<description>
										<copy path="/doc/members/member[@name='P:&dans;.TTSEngines.Item']/summary/para[1]" />
									</description>
								</item>
							</list>
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					The contents of the collection depends on how it was retrieved.
				</para>
				<include path="/doc/members/member[@name='P:&dans;.TTSEngines.Item']/remarks/para[@name='Ordering']" />
			</remarks>
			<seealso cref="M:&darootobj;.FindCharacterTTSEngines" suffix="Method" prefix="The" />
			<seealso cref="M:&darootobj;.FindTTSEngines" suffix="Method" prefix="The" />
			<seealso cref="P:&darootobj;.TTSEngines" suffix="Property" prefix="The" />
			<seealso cref="M:&dans;.Character.FindTTSEngines" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->
	</members>
</doc>
