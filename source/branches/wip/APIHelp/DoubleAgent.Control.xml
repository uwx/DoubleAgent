<?xml version="1.0" encoding="utf-8"?>
<doc>
	<assembly>
		<name>Double Agent Control</name>
	</assembly>
	<members>

		<member name="T:DoubleAgent.Control.Control">
			<summary>
				<para>
					The Double Agent control has its own methods, properties and events, and provides access to
					most other objects supported by Double Agent.
				</para>
			</summary>
			<syntax>
				<list type="bullet">
					<item>
						<term>
							<bookmark name="Methods"></bookmark>
							The <c>Control </c>object has the following <c>methods</c>:
						</term>
						<description>
							<see cref="M:DoubleAgent.Control.Control.FindCharacterSREngines" />,
							<see cref="M:DoubleAgent.Control.Control.FindCharacterTTSEngines" />,
							<see cref="M:DoubleAgent.Control.Control.FindSREngines" />,
							<see cref="M:DoubleAgent.Control.Control.FindTTSEngines" />,
							<see cref="M:DoubleAgent.Control.Control.GetCharacterSREngine" />,
							<see cref="M:DoubleAgent.Control.Control.GetCharacterTTSEngine" />,
							<see cref="M:DoubleAgent.Control.Control.ShowDefaultCharacterProperties" />
						</description>
					</item>
					<item>
						<term>
							<bookmark name="Properties"></bookmark>
							The <c>Control </c>object has the following <c>properties</c>:
						</term>
						<description>
							<see cref="P:DoubleAgent.Control.Control.AutoConnect" />,
							<see cref="P:DoubleAgent.Control.Control.AutoSize" />,
							<see cref="P:DoubleAgent.Control.Control.CharacterStyle" />,
							<see cref="P:DoubleAgent.Control.Control.Connected" />,
							<see cref="P:DoubleAgent.Control.Control.ControlCharacter" />,
							<see cref="P:DoubleAgent.Control.Control.RaiseRequestErrors" />
						</description>
						<description>It also includes properties to retrieve other Double Agent objects:</description>
						<description>
							<see cref="P:DoubleAgent.Control.Control.CharacterFiles" />,
							<see cref="P:DoubleAgent.Control.Control.Characters" />,
							<see cref="P:DoubleAgent.Control.Control.CommandsWindow" />,
							<see cref="P:DoubleAgent.Control.Control.PropertySheet" />,
							<see cref="P:DoubleAgent.Control.Control.Settings" />,
							<see cref="P:DoubleAgent.Control.Control.SREngines" />,
							<see cref="P:DoubleAgent.Control.Control.TTSEngines" />,
						</description>
					</item>
					<item>
						<term>
							<bookmark name="Events"></bookmark>
							The <c>Control </c>object signals several <c>events </c>that allow your client application to track its state:
						</term>
						<description>
							<see cref="E:DoubleAgent.Control.Control.ActivateInput" />,
							<see cref="E:DoubleAgent.Control.Control.ActiveClientChange" />,
							<see cref="E:DoubleAgent.Control.Control.AgentPropertyChange" />,
							<see cref="E:DoubleAgent.Control.Control.BalloonHide" />,
							<see cref="E:DoubleAgent.Control.Control.BalloonShow" />,
							<see cref="E:DoubleAgent.Control.Control.Bookmark" />,
							<see cref="E:DoubleAgent.Control.Control.Click" />,
							<see cref="E:DoubleAgent.Control.Control.Command" />,
							<see cref="E:DoubleAgent.Control.Control.DblClick" />,
							<see cref="E:DoubleAgent.Control.Control.DeactivateInput" />,
							<see cref="E:DoubleAgent.Control.Control.DefaultCharacterChange" />,
							<see cref="E:DoubleAgent.Control.Control.DragComplete" />,
							<see cref="E:DoubleAgent.Control.Control.DragStart" />,
							<see cref="E:DoubleAgent.Control.Control.Hide" />,
							<see cref="E:DoubleAgent.Control.Control.IdleComplete" />,
							<see cref="E:DoubleAgent.Control.Control.IdleStart" />,
							<see cref="E:DoubleAgent.Control.Control.ListenComplete" />,
							<see cref="E:DoubleAgent.Control.Control.ListenStart" />,
							<see cref="E:DoubleAgent.Control.Control.Move" />,
							<see cref="E:DoubleAgent.Control.Control.RequestComplete" />,
							<see cref="E:DoubleAgent.Control.Control.RequestStart" />,
							<see cref="E:DoubleAgent.Control.Control.Show" />,
							<see cref="E:DoubleAgent.Control.Control.Size" />
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					Some programming environments may assign additional design-time or run-time properties. For
					example, Visual Basic adds a <a href="../Programming/Ctl_Control_Name.htm">Name</a>property that
					identifies the control, and also <c>Left </c>and <c>Top </c>properties that define the location
					of the control on a form, even if the control doesn't appear on the form's page at run time.
				</para>
				<note>
					Double Agent does not support the <c>Restart</c>, <c>Shutdown </c>and <c>HelpComplete </c>events.
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Control.FindCharacterSREngines">
			<summary>
				<para>
					Retrieves a collection of <see cref="T:DoubleAgent.Control.SREngine" text="Speech Recognition Engine" />
					objects that meet a specific character's requirements.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>control</em>-&gt;<c>FindCharacterSREngines</c> (<em>Provider</em>, <em>LanguageID</em>, &amp;<em>SREngines</em>)</para>
</cpp>
<csharp>
<para>[<em>SREngines</em> = ]<em>control</em>.<c>FindCharacterSREngines</c> (<em>Provider</em>, <em>LanguageID</em>)</para>
</csharp>
<vbnet>
<para>[<em>SREngines</em> = ]<em>control</em>.<c>FindCharacterSREngines</c> (<em>Provider</em>, <em>LanguageID</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>SREngines</em> = ]<em>control</em>.<c>FindCharacterSREngines</c> (<em>Provider</em>[, <em>LanguageID</em>])</para>
</vb>
</syntax>
			<param name="Provider">
				A <c>string </c>value that specifies the character file, or an empty string
				for the default character.
			</param>
			<param name="LanguageID">
				An optional <c>numeric </c>value that specifies the language to match, or
				<c>zero </c>to match any language.
			</param>
			<returns name="SREngines">
				A <c>
					<see cref="T:DoubleAgent.Control.SREngines" suffix="Collection" />
				</c> that matches the character's text-to-speech requirements and the specified <em>LanguageID </em>
				(if any).
			</returns>
			<remarks>
				<para>
					This method allows you to choose a speech recognition engine without loading the character.
				</para>
				<para>
					<include file="DoubleAgent.Include.xml" path="/doc/methods/para[@name='Provider']" />
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/methods/note[@name='Provider']" />
				</note>
			</remarks>
			<seealso cref="T:DoubleAgent.Control.SREngines" suffix="Collection" prefix="The" />
			<seealso cref="T:DoubleAgent.Control.SREngine" suffix="Object" prefix="The" />
			<seealso cref="M:DoubleAgent.Control.Characters.Load" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Control.FindCharacterTTSEngines">
			<summary>
				<para>
					Retrieves a collection of <see cref="T:DoubleAgent.Control.TTSEngine" text="Text-To-Speech Engine" />
					objects that meet a specific character's requirements.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>control</em>-&gt;<c>FindCharacterTTSEngines</c> (<em>Provider</em>, <em>LanguageID</em>, &amp;<em>TTSEngines</em>)</para>
</cpp>
<csharp>
<para>[<em>TTSEngines</em> = ]<em>control</em>.<c>FindCharacterTTSEngines</c> (<em>Provider</em>, <em>LanguageID</em>)</para>
</csharp>
<vbnet>
<para>[<em>TTSEngines</em> = ]<em>control</em>.<c>FindCharacterTTSEngines</c> (<em>Provider</em>, <em>LanguageID</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>TTSEngines</em> = ]<em>control</em>.<c>FindCharacterTTSEngines</c> (<em>Provider</em>[, <em>LanguageID</em>])</para>
</vb>
</syntax>
			<param name="Provider">
				A <c>string </c>value that specifies the character file, or an empty string
				for the default character.
			</param>
			<param name="LanguageID">
				An optional <c>numeric </c>value that specifies the language to match, or
				<c>zero </c>to match any language.
			</param>
			<returns name="TTSEngines">
				A <c>
					<see cref="T:DoubleAgent.Control.TTSEngines" suffix="Collection" />
				</c> that matches the character's text-to-speech requirements and the specified <em>LanguageID </em>
				(if any).
			</returns>
			<remarks>
				<para>This method allows you to choose a text-to-speech engine without loading the character.</para>
				<para>
					<include file="DoubleAgent.Include.xml" path="/doc/methods/para[@name='Provider']" />
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/methods/note[@name='Provider']" />
				</note>
			</remarks>
			<seealso cref="T:DoubleAgent.Control.TTSEngines" suffix="Collection" prefix="The" />
			<seealso cref="T:DoubleAgent.Control.TTSEngine" suffix="Object" prefix="The" />
			<seealso cref="M:DoubleAgent.Control.Characters.Load" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Control.FindSREngines">
			<summary>
				<para>
					Retrieves a collection of <see cref="T:DoubleAgent.Control.SREngine" text="Speech Recognition Engine" />
					objects for a specific language.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>control</em>-&gt;<c>FindSREngines</c> (<em>LanguageID</em>, &amp;<em>SREngines</em>)</para>
</cpp>
<csharp>
<para>[<em>SREngines</em> = ]<em>control</em>.<c>FindSREngines</c> (<em>LanguageID</em>)</para>
</csharp>
<vbnet>
<para>[<em>SREngines</em> = ]<em>control</em>.<c>FindSREngines</c> (<em>LanguageID</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>SREngines</em> = ]<em>control</em>.<c>FindSREngines</c> (<em>LanguageID</em>)</para>
</vb>
</syntax>
			<param name="LanguageID">
				A <c>numeric </c>value that specifies the language to match, or <c>zero </c>for any language.
			</param>
			<returns name="SREngines">
				A <c>
					<see cref="T:DoubleAgent.Control.SREngines" suffix="Collection" />
				</c> that matches the the specified <em>LanguageID</em>.
			</returns>
			<remarks>
				<para>
					This method allows you to query available speech recognition engines without loading a character.
				</para>
				<note>
					Using this method with zero for the <em>LanguageID </em>is equivalent to using the <see cref="P:DoubleAgent.Control.Control.SREngines" />
					property.
				</note>
			</remarks>
			<seealso cref="T:DoubleAgent.Control.SREngines" suffix="Collection" prefix="The" />
			<seealso cref="T:DoubleAgent.Control.SREngine" suffix="Object" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Control.FindTTSEngines">
			<summary>
				<para>
					Retrieves a collection of <see cref="T:DoubleAgent.Control.TTSEngine" text="Text-To-Speech Engine" />
					objects for a specific language and gender.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>control</em>-&gt;<c>FindTTSEngines</c> (<em>LanguageID</em>, <em>Gender</em>, &amp;<em>TTSEngines</em>)</para>
</cpp>
<csharp>
<para>[<em>TTSEngines</em> = ]<em>control</em>.<c>FindTTSEngines</c> (<em>LanguageID</em>, <em>Gender</em>)</para>
</csharp>
<vbnet>
<para>[<em>TTSEngines</em> = ]<em>control</em>.<c>FindTTSEngines</c> (<em>LanguageID</em>, <em>Gender</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>TTSEngines</em> = ]<em>control</em>.<c>FindTTSEngines</c> ([<em>LanguageID</em>][, <em>Gender</em>])</para>
</vb>
</syntax>
			<param name="LanguageID">
				A <c>numeric </c>value that specifies the language to match, or <c>zero </c>for any language.
			</param>
			<param name="Gender">
				A <c>numeric </c>value, or a member of the <see cref="T:DoubleAgent.Control.SpeechGenderType" />
				enumeration, that specifies the gender to match:<include path="/doc/members/member[@name='T:DoubleAgent.Control.SpeechGenderType']/syntax" />
			</param>
			<returns name="TTSEngines">
				A <c>
					<see cref="T:DoubleAgent.Control.TTSEngines" suffix="Collection" />
				</c> that matches the the specified <em>LanguageID </em>and <em>Gender</em>.
			</returns>
			<remarks>
				<para>
					This method allows you to query available text-to-speech engines without loading a character.
				</para>
			</remarks>
			<seealso cref="T:DoubleAgent.Control.SpeechGenderType" suffix="Enumeration" prefix="The" />
			<seealso cref="T:DoubleAgent.Control.TTSEngines" suffix="Collection" prefix="The" />
			<seealso cref="T:DoubleAgent.Control.TTSEngine" suffix="Object" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Control.GetCharacterSREngine">
			<summary>
				<para>
					Retrieves a <see cref="T:DoubleAgent.Control.SREngine" text="Speech Recognition Engine" />
					object thats meet a specific character's requirements.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>control</em>-&gt;<c>GetCharacterSREngine</c> (<em>Provider</em>, &amp;<em>SREngine</em>)</para>
</cpp>
<csharp>
<para>[<em>SREngine</em> = ]<em>control</em>.<c>GetCharacterSREngine</c> (<em>Provider</em>)</para>
</csharp>
<vbnet>
<para>[<em>SREngine</em> = ]<em>control</em>.<c>GetCharacterSREngine</c> (<em>Provider</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>SREngine</em> = ]<em>control</em>.<c>GetCharacterSREngine</c> (<em>Provider</em>)</para>
</vb>
</syntax>
			<param name="Provider">
				A <c>string </c>value that specifies the character file, or an empty string
				for the default character.
			</param>
			<returns name="SREngine">
				The <c>
					<see cref="T:DoubleAgent.Control.SREngine" suffix="Object" />
				</c> that matches the character's speech recognition requirements (if any).
			</returns>
			<remarks>
				<para>
					This method allows you to query a character's <em>default </em>speech recognition engine without
					loading the character.
				</para>
				<para>
					<include file="DoubleAgent.Include.xml" path="/doc/methods/para[@name='Provider']" />
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/methods/note[@name='Provider']" />
				</note>
			</remarks>
			<seealso cref="T:DoubleAgent.Control.SREngine" suffix="Object" prefix="The" />
			<seealso cref="M:DoubleAgent.Control.Characters.Load" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Control.GetCharacterTTSEngine">
			<summary>
				<para>
					Retrieves a <see cref="T:DoubleAgent.Control.TTSEngine" text="Text-To-Speech Engine" /> object
					that meets a specific character's requirements.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>control</em>-&gt;<c>GetCharacterTTSEngine</c> (<em>Provider</em>, &amp;<em>TTSEngine</em>)</para>
</cpp>
<csharp>
<para>[<em>TTSEngine</em> = ]<em>control</em>.<c>GetCharacterTTSEngine</c> (<em>Provider</em>)</para>
</csharp>
<vbnet>
<para>[<em>TTSEngine</em> = ]<em>control</em>.<c>GetCharacterTTSEngine</c> (<em>Provider</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>TTSEngine</em> = ]<em>control</em>.<c>GetCharacterTTSEngine</c> (<em>Provider</em>)</para>
</vb>
</syntax>
			<param name="Provider">
				A <c>string </c>value that specifies the character file, or an empty string
				for the default character.
			</param>
			<returns name="TTSEngine">
				The <c>
					<see cref="T:DoubleAgent.Control.TTSEngine" suffix="Object" />
				</c> that matches the character's text-to-speech requirements (if any).
			</returns>
			<remarks>
				<para>
					This method allows you to query a character's <em>default </em>text-to-speech engine without
					loading the character.
				</para>
				<para>
					<include file="DoubleAgent.Include.xml" path="/doc/methods/para[@name='Provider']" />
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/methods/note[@name='Provider']" />
				</note>
			</remarks>
			<seealso cref="T:DoubleAgent.Control.TTSEngine" suffix="Object" prefix="The" />
			<seealso cref="M:DoubleAgent.Control.Characters.Load" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Control.ShowDefaultCharacterProperties">
			<summary>
				<para>
					Shows the <em>Gallery </em>page of the <see cref="T:DoubleAgent.Control.PropertySheet" text="Advanced Character Options" />
					window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<em>control</em>.<c>ShowDefaultCharacterProperties</c> (<em>X</em>, <em>Y</em>)
</cpp>
<csharp>
<em>control</em>.<c>ShowDefaultCharacterProperties</c> (<em>X</em>, <em>Y</em>)
</csharp>
<vbnet>
<em>control</em>.<c>ShowDefaultCharacterProperties</c> (<em>X</em>, <em>Y</em>)
</vbnet>
<vb>
<em>control</em>.<c>ShowDefaultCharacterProperties</c>[ <em>X</em>, <em>Y</em>]
</vb>
</syntax>
			<param name="X">
				The horizontal position, in pixels, of the <see cref="P:DoubleAgent.Control.PropertySheet.Left" text="Advanced Character Options" />
				window. This parameter is optional. For programming languages that don't support optional parameters,
				a negative value will be ignored.
			</param>
			<param name="Y">
				The vertical position, in pixels, of the <see cref="P:DoubleAgent.Control.PropertySheet.Top" text="Advanced Character Options" />
				window. This parameter is optional. For programming languages that don't support optional parameters,
				a negative value will be ignored.
			</param>
			<remarks>
				<para>
					This method is obsolete, but is still supported for backward compatibility. Calling it shows
					the <see cref="T:DoubleAgent.Control.PropertySheet" text="Advanced Character Options" /> window.
					New applications should use the <see cref="T:DoubleAgent.Control.PropertySheet"></see> object instead.
				</para>
				<para>
					If you don't specify the <em>X </em>and <em>Y </em>coordinates (or use a negative value for programming languages
					that don't support optional parameters), the window appears at the last location it was displayed.
				</para>
			</remarks>
			<seealso cref="T:DoubleAgent.Control.PropertySheet" prefix="The" suffix="Object" />
			<seealso cref="P:DoubleAgent.Control.PropertySheet.Page" prefix="The" suffix="Property" />
			<seealso cref="E:DoubleAgent.Control.Control.DefaultCharacterChange" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.AudioOutput">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Control.Settings" />
					property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.AutoConnect">
			<summary>
				<para>
					Indicates if the Double Agent control will automatically connect to the Double Agent server.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>control</em>-&gt;<c>get_AutoConnect</c> (&amp;<em>AutoConnect</em>)</para>

<para><em>control</em>-&gt;<c>put_AutoConnect</c> (<em>AutoConnect</em>)</para>
</cpp>
<csharp>
<para>[<em>AutoConnect</em> = ]<em>control</em>.<c>AutoConnect</c></para>

<para><em>control</em>.<c>AutoConnect</c> = <em>AutoConnect</em></para>
</csharp>
<vb>
<para>[<em>AutoConnect</em> = ]<em>control</em>.<c>AutoConnect</c></para>

<para><em>control</em>.<c>AutoConnect</c> = <em>AutoConnect</em></para>
</vb>
</syntax>
			<value name="AutoConnect">
				A <c>boolean </c>value specifying whether automatic connection is enabled.
			</value>
			<remarks>
				<para>
					If this property is <c>True</c>, then the control will automatically establish a connection
					with the server the first time it's required. To use the control in <em>stand-alone </em>mode,
					you must set this property to <c>False</c>.
				</para>
				<para>
					For compatibility with Microsoft Agent, the default value for this property is <c>True</c>.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Control.Connected" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.AutoSize">
			<summary></summary>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.BackColor">
			<summary></summary>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.BorderColor">
			<summary></summary>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.BorderStyle">
			<summary></summary>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.BorderVisible">
			<summary></summary>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.BorderWidth">
			<summary></summary>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.CharacterFiles">
			<summary>
				<para>
					Retrieves the control's <see cref="T:DoubleAgent.Control.CharacterFiles" suffix="Object" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>control</em>-&gt;<c>get_CharacterFiles</c> (&amp;<em>CharacterFiles</em>)</para>
</cpp>
<csharp>
<para>[<em>CharacterFiles</em> = ]<em>control</em>.<c>CharacterFiles</c></para>
</csharp>
<vbnet>
<para>[<em>CharacterFiles</em> = ]<em>control</em>.<c>CharacterFiles</c></para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>CharacterFiles</em> = ]<em>control</em>.<c>CharacterFiles</c></para>
</vb>
</syntax>
			<value name="CharacterFiles">
				The control's <c>
					<see cref="T:DoubleAgent.Control.CharacterFiles" suffix="Object" />
				</c>.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.Characters">
			<summary>
				<para>
					Retrieves the control's <see cref="T:DoubleAgent.Control.Characters" suffix="Collection" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>control</em>-&gt;<c>get_Characters</c> (&amp;<em>Characters</em>)</para>
</cpp>
<csharp>
<para>[<em>Characters</em> = ]<em>control</em>.<c>Characters</c></para>
</csharp>
<vbnet>
<para>[<em>Characters</em> = ]<em>control</em>.<c>Characters</c></para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Characters</em> = ]<em>control</em>.<c>Characters</c></para>
</vb>
</syntax>
			<value name="Characters">
				The control's <c>
					<see cref="T:DoubleAgent.Control.Characters" suffix="Collection" />
				</c>.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.CharacterStyle">
			<summary>
				<para>
					Specifies the initial style to use when a <see cref="T:DoubleAgent.Control.Character" /> is
					loaded.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>control</em>-&gt;<c>get_CharacterStyle</c> (&amp;<em>CharacterStyle</em>)</para>

<para><em>control</em>-&gt;<c>put_CharacterStyle</c> (<em>CharacterStyle</em>)</para>
</cpp>
<csharp>
<para>[<em>CharacterStyle</em> = ]<em>control</em>.<c>CharacterStyle</c></para>

<para><em>control</em>.<c>CharacterStyle</c> = <em>CharacterStyle</em></para>
</csharp>
<vb>
<para>[<em>CharacterStyle</em> = ]<em>control</em>.<c>CharacterStyle</c></para>

<para><em>control</em>.<c>CharacterStyle</c> = <em>CharacterStyle</em></para>
</vb>
</syntax>
			<value name="CharacterStyle">
				A <c>numeric </c>bit-field value that specifies the <see cref="P:DoubleAgent.Control.Character.Style" />
				to apply when a <see cref="T:DoubleAgent.Control.Character" /> is loaded.<include path="/doc/members/member[@name='T:DoubleAgent.Control.CharacterStyleFlags']/syntax" />
			</value>
			<remarks>
				<para>
					Setting this property allows you to establish a default <see cref="T:DoubleAgent.Control.Character" />.
					<see cref="P:DoubleAgent.Control.Character.Style" /> for you application.
				</para>
				<para>
					The <see cref="F:DoubleAgent.Control.CharacterStyleFlags.Smoothed" /> and <see cref="F:DoubleAgent.Control.CharacterStyleFlags.SmoothEdges" />
					bits can only be changed here. Once a <see cref="T:DoubleAgent.Control.Character" /> is loaded,
					these bits <c>cannot </c>be changed in it's <see cref="P:DoubleAgent.Control.Character.Style" />
					property. Also, these two settings are only used the first time the character is loaded. If another
					client has already loaded the character, it's smoothing settings will not change. If your client application
					is the first client to load the character, then your smoothing settings will apply to all clients.
				</para>
				<para>
					For compatibility with Microsoft Agent, the <see cref="F:DoubleAgent.Control.CharacterStyleFlags.IconShown" />
					bit is set to 1 by default. To load a <see cref="T:DoubleAgent.Control.Character" /> without showing
					it's notification icon, set the <see cref="F:DoubleAgent.Control.CharacterStyleFlags.IconShown" />
					bit to 0.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.Style" suffix="Property" prefix="The" />
			<seealso cref="T:DoubleAgent.Control.CharacterStyleFlags" suffix="Enumeration" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.CommandsWindow">
			<summary>
				<para>
					Retrieves the control's <see cref="T:DoubleAgent.Control.CommandsWindow" suffix="Object" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>control</em>-&gt;<c>get_CommandsWindow</c> (&amp;<em>CommandsWindow</em>)</para>
</cpp>
<csharp>
<para>[<em>CommandsWindow</em> = ]<em>control</em>.<c>CommandsWindow</c></para>
</csharp>
<vbnet>
<para>[<em>CommandsWindow</em> = ]<em>control</em>.<c>CommandsWindow</c></para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>CommandsWindow</em> = ]<em>control</em>.<c>CommandsWindow</c></para>
</vb>
</syntax>
			<value name="CommandsWindow">
				The control's <c>
					<see cref="T:DoubleAgent.Control.CommandsWindow" suffix="Object" />
				</c>.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.Connected">
			<summary>
				<para>Returns or sets whether the control is currently connected to the Double Agent server.</para>
				<para>
					The Double Agent control will work whether or not it's connected to the server, but there are
					are special considerations in each case. See...
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>control</em>-&gt;<c>get_Connected</c> (&amp;<em>Connected</em>)</para>

<para><em>control</em>-&gt;<c>put_Connected</c> (<em>Connected</em>)</para>
</cpp>
<csharp>
<para>[<em>Connected</em> = ]<em>control</em>.<c>Connected</c></para>

<para><em>control</em>.<c>Connected</c> = <em>Connected</em></para>
</csharp>
<vb>
<para>[<em>Connected</em> = ]<em>control</em>.<c>Connected</c></para>

<para><em>control</em>.<c>Connected</c> = <em>Connected</em></para>
</vb>
</syntax>
			<value name="Connected">
				A <c>boolean </c>value specifying whether the control is connected.
			</value>
			<remarks>
				<para>
					You can manually open or close the connection to the server by changing the <c>Connected </c>property.
					When the connection state changes, any characters you've loaded are automatically unloaded. If you still
					have references to any objects except the control itself, any attempt to access the objects' properties
					or methods will fail.
				</para>
			</remarks>
			<details>
				<h4 class="details">Details</h4>
				<para>
					In many situations, using the control automatically creates a connection with the Double Agent
					server (depending on the <see cref="P:DoubleAgent.Control.Control.AutoConnect" /> property setting).
					For example, using the Double Agent control's CLSID in the &lt;OBJECT&gt; tag in a Web page automatically
					opens a server connection and exiting the page closes the connection. Similarly, for Visual Basic or
					other languages that enable you to drop a control on a form, running the program automatically opens
					a connection and exiting the program closes the connection. If the server isn't currently running, it
					automatically starts.
				</para>
				<para>
					When you release <c>all </c>references to Agent objects, such as <see cref="T:DoubleAgent.Control.Character" />
					and <see cref="T:DoubleAgent.Control.Command" />, the connection with the Double Agent server will
					automatically be closed. You must also release your reference to the <see cref="T:DoubleAgent.Control.Control" />
					object itself. In Visual Basic, you can release a reference to an object by setting its variable to
					<c>Nothing</c>. If you have loaded characters, your should unload them before releasing the <see cref="T:DoubleAgent.Control.Character" /> object.
				</para>
				<h4 class="details">Example</h4>
				<code xml:space="preserve">Dim WithEvents MyAgent as DoubleAgentCtl
Dim Genie as DaCtlCharacter

Sub Form_Load
    ' Create an instance of the control using New
    Set MyAgent = New DoubleAgentCtl

    ' Open a connection to the server
    MyAgent.Connected = True

    ' Load the character into the Characters collection
    MyAgent.Characters.Load "Genie", "Genie.acs"

    ' Create a reference to the character
    Set Genie = MyAgent.Characters ("Genie")
End Sub

Sub CloseConnection
    ' Unload the character
    MyAgent.Charcters.Unload "Genie"

    ' Release the reference to the character object
    Set Genie = Nothing

    ' Release the reference to the Agent control
    Set MyAgent = Nothing
End Sub</code>
			</details>
			<seealso cref="P:DoubleAgent.Control.Control.AutoConnect" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.ControlCharacter">
			<summary></summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>control</em>-&gt;<c>get_ControlCharacter</c> (&amp;<em>ControlCharacter</em>)</para>

<para><em>control</em>-&gt;<c>put_ControlCharacter</c> (<em>ControlCharacter</em>|<c>NULL</c>)</para>
</cpp>
<csharp>
<para>[<em>ControlCharacter</em> = ]<em>control</em>.<c>ControlCharacter</c></para>

<para><em>control</em>.<c>ControlCharacter</c> = <em>ControlCharacter</em>|<c>null</c></para>
</csharp>
<vbnet>
<para>[<em>ControlCharacter</em> = ]<em>control</em>.<c>ControlCharacter</c></para>

<para><em>control</em>.<c>ControlCharacter</c> = <em>ControlCharacter</em>|<c>Nothing</c></para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>ControlCharacter</em> = ]<em>control</em>.<c>ControlCharacter</c></para>

<para><c>Set</c> <em>control</em>.<c>ControlCharacter</c> = <em>ControlCharacter</em>|<c>Nothing</c></para>
</vb>
</syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.MousePointer">
			<summary></summary>
			<syntax xml:space="preserve">
<cpp></cpp>
<csharp></csharp>
<vb></vb>
			</syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.PropertySheet">
			<summary>
				<para>
					Retrieves the control's <see cref="T:DoubleAgent.Control.PropertySheet" suffix="Object" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>control</em>-&gt;<c>get_PropertySheet</c> (&amp;<em>PropertySheet</em>)</para>
</cpp>
<csharp>
<para>[<em>PropertySheet</em> = ]<em>control</em>.<c>PropertySheet</c></para>
</csharp>
<vbnet>
<para>[<em>PropertySheet</em> = ]<em>control</em>.<c>PropertySheet</c></para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>PropertySheet</em> = ]<em>control</em>.<c>PropertySheet</c></para>
</vb>
</syntax>
			<value name="PropertySheet">
				The control's <c>
					<see cref="T:DoubleAgent.Control.PropertySheet" suffix="Object" />
				</c>.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.RaiseRequestErrors">
			<summary>
				<para>
					Returns or sets whether an error condition is raised (an exception thrown) for failed requests.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>control</em>-&gt;<c>get_RaiseRequestErrors</c> (&amp;<em>RaiseErrors</em>)</para>

<para><em>control</em>-&gt;<c>put_RaiseRequestErrors</c> (<em>RaiseErrors</em>)</para>
</cpp>
<csharp>
<para>[<em>RaiseErrors</em> = ]<em>control</em>.<c>RaiseRequestErrors</c></para>

<para><em>control</em>.<c>RaiseRequestErrors</c> = <em>RaiseErrors</em></para>
</csharp>
<vb>
<para>[<em>RaiseErrors</em> = ]<em>control</em>.<c>RaiseRequestErrors</c></para>

<para><em>control</em>.<c>RaiseRequestErrors</c> = <em>RaiseErrors</em></para>
</vb>
</syntax>
			<value name="RaiseErrors">
				A <c>boolean </c>value that determines whether errors are raised for failed
				requests. The default value is <c>True</c>.
			</value>
			<remarks>
				<para>
					When a method that returns a <see cref="T:DoubleAgent.Control.Request" /> object fails, there
					are two ways to detect the error. If <c>RaiseRequestErrors </c>is set, the Double Agent control
					will raise an error condition. If it's not set, you can check the <see cref="T:DoubleAgent.Control.Request" />
					object's <see cref="P:DoubleAgent.Control.Request.Status" /> property. An example of a request
					error is when you specify an animation name that doesn't exist for the <see cref="M:DoubleAgent.Control.Character.Play" />
					method.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.Settings">
			<summary>
				<para>
					Retrieves the control's <see cref="T:DoubleAgent.Control.Settings" suffix="Object" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>control</em>-&gt;<c>get_Settings</c> (&amp;<em>Settings</em>)</para>
</cpp>
<csharp>
<para>[<em>Settings</em> = ]<em>control</em>.<c>Settings</c></para>
</csharp>
<vbnet>
<para>[<em>Settings</em> = ]<em>control</em>.<c>Settings</c></para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Settings</em> = ]<em>control</em>.<c>Settings</c></para>
</vb>
</syntax>
			<value name="Settings">
				The control's <c>
					<see cref="T:DoubleAgent.Control.Settings" suffix="Object" />
				</c>.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.SpeechInput">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Control.Settings" />
					property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.SREngines">
			<summary>
				<para>
					Retrieves a collection of <see cref="T:DoubleAgent.Control.SREngine" text="Speech Recognition Engine" />
					objects for all available speech recognition engines.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>control</em>-&gt;<c>get_SREngines</c> (&amp;<em>SREngines</em>)</para>
</cpp>
<csharp>
<para>[<em>SREngines</em> = ]<em>control</em>.<c>SREngines</c></para>
</csharp>
<vbnet>
<para>[<em>SREngines</em> = ]<em>control</em>.<c>SREngines</c></para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>SREngines</em> = ]<em>control</em>.<c>SREngines</c></para>
</vb>
</syntax>
			<value name="SREngines">
				A <c>
					<see cref="T:DoubleAgent.Control.SREngines" suffix="Collection" />
				</c> that includes all available speech recognition engines.
			</value>
			<remarks>
				<para>
					This property allows you to query available speech recognition engines without loading a character.
				</para>
			</remarks>
			<seealso cref="T:DoubleAgent.Control.SREngines" suffix="Collection" prefix="The" />
			<seealso cref="T:DoubleAgent.Control.SREngine" suffix="Object" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Control.TTSEngines">
			<summary>
				<para>
					Retrieves a collection of <see cref="T:DoubleAgent.Control.TTSEngine" text="Text-To-Speech Engine" />
					objects for all available text-to-speech engines.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>control</em>-&gt;<c>get_TTSEngines</c> (&amp;<em>TTSEngines</em>)</para>
</cpp>
<csharp>
<para>[<em>TTSEngines</em> = ]<em>control</em>.<c>TTSEngines</c></para>
</csharp>
<vbnet>
<para>[<em>TTSEngines</em> = ]<em>control</em>.<c>TTSEngines</c></para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>SREngines</em> = ]<em>control</em>.<c>TTSEngines</c></para>
</vb>
</syntax>
			<value name="TTSEngines">
				A <c>
					<see cref="T:DoubleAgent.Control.TTSEngines" suffix="Collection" />
				</c> that includes all available text-to-speech engines.
			</value>
			<remarks>
				<para>
					This property allows you to query available text-to-speech engines without loading a character.
				</para>
			</remarks>
			<seealso cref="T:DoubleAgent.Control.TTSEngines" suffix="Collection" prefix="The" />
			<seealso cref="T:DoubleAgent.Control.TTSEngine" suffix="Object" prefix="The" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.ActivateInput">
			<summary>
				<para>Signalled when a client becomes input-active.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>ActivateInput (LPCTSTR</c> <em>CharacterID</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>ActivateInput<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>ActivateInput</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>ActivateInput</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>ActivateInput</c> (<c>ByVal</c> <em>CharacterID</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">The unique identifier of the character that has become input-active.</param>
			<remarks>
				<para>
					The input-active client receives mouse and speech input events for the character. Double Agent
					sends this event only to the client that becomes input-active.
				</para>
				<para>
					This event can occur when the user uses your <see cref="T:DoubleAgent.Control.Commands" />
					object, for example, by choosing a <see cref="T:DoubleAgent.Control.Commands" /> object entry in
					the <see cref="T:DoubleAgent.Control.CommandsWindow" /> or in the pop-up menu for a character.
					It can also occur when the user selects a character (by clicking or speaking its name), when a character
					becomes visible, or when the character of another client application becomes hidden.
				</para>
				<para>
					You can also call the <see cref="M:DoubleAgent.Control.Character.Activate" /> method (with
					<c>State </c>set to 2) to explicitly make the character topmost, which results in your client application
					becoming input-active and triggers this event. However, this event does not occur if you use the
					<see cref="M:DoubleAgent.Control.Character.Activate" /> method only to specify whether or not your
					client is the active client of the character.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.DeactivateInput" prefix="The" suffix="Event" />
			<seealso cref="M:DoubleAgent.Control.Character.Activate" prefix="The" suffix="Method" />
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.ActiveClientChange">
			<summary>
				<para>Signalled when the active client of the character changes.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>ActiveClientChange</c> (<c>LPCTSTR</c> <em>CharacterID</em>, <c>VARIANT_BOOL</c> <em>Active</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>ActiveClientChange<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>, <c>bool</c>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>ActiveClientChange</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String<c>, </c> <c>ByVal</c></c> <em>Active</em> <c>As Boolean</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>ActiveClientChange</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String<c>, </c> <c>ByVal</c></c> <em>Active</em> <c>As Boolean</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>ActiveClientChange</c> (<c>ByVal</c> <em>CharacterID</em>, <c>ByVal</c> <em>Active</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">
				The unique identifier of the character that has become active or inactive.
			</param>
			<param name="Active">
				<c>True </c>if the character has become the active client or <c>False </c>if
				it's no longer the active client.
			</param>
			<remarks>
				<para>
					When multiple clients (<see cref="T:DoubleAgent.Control.Control" /> instances) share the same
					character, the active client of the character receives mouse input (for example, click or drag events).
					Similarly, when multiple characters are displayed, the active client of the topmost character (also
					known as the input-active client) receives <see cref="E:DoubleAgent.Control.Control.Command" />
					events.
				</para>
				<para>
					A client application may receive this event when the user selects one of the client's entries
					in the character's pop-up menu or by voice command, when the client application changes its active status,
					or when another client terminates.
				</para>
				<para>
					Double Agent sends this event only to the clients that are directly affected; that either become
					the active client or stop being the active client.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.ActivateInput" prefix="The" suffix="Event" />
			<seealso cref="E:DoubleAgent.Control.Control.DeactivateInput" prefix="The" suffix="Event" />
			<seealso cref="M:DoubleAgent.Control.Character.Activate" prefix="The" suffix="Method" />
			<seealso cref="P:DoubleAgent.Control.Character.Active" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.AgentPropertyChange">
			<summary>
				<para>
					Signalled when the user changes a property in the <see cref="T:DoubleAgent.Control.PropertySheet" text="Advanced Character Options" />
					window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>AgentPropertyChange</c> ()</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>AgentPropertyChange<em>EventHandler</em></c> ()</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>AgentPropertyChange</c> ()</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>AgentPropertyChange</c> ()</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>AgentPropertyChange</c> ()</para>
</vbscript>
</syntax>
			<remarks>
				<para>
					This event indicates that the user has changed and applied any property in the <see cref="T:DoubleAgent.Control.PropertySheet" />
					window. You can use the <see cref="T:DoubleAgent.Control.Settings" /> object to query the specific
					property settings.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.DefaultCharacterChange" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.BalloonHide">
			<summary>
				<para>Signalled when a character's word balloon is hidden.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>BalloonHide</c> (<c>LPCTSTR</c> <em>CharacterID</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>BalloonHide<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>BalloonHide</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>BalloonHide</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>BalloonHide</c> (<c>ByVal</c> <em>CharacterID</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">The unique identifier of the character who's balloon was hidden.</param>
			<remarks>
				<para>
					Double Agent sends this event only to the clients of the character (applications that have
					loaded the character) that use the word balloon.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.BalloonShow" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.BalloonShow">
			<summary>
				<para>Signalled when a character's word balloon is shown.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>BalloonShow</c> (<c>LPCTSTR</c> <em>CharacterID</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>BalloonShow<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>BalloonShow</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>BalloonShow</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>BalloonShow</c> (<c>ByVal</c> <em>CharacterID</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">The unique identifier of the character who's balloon was shown.</param>
			<remarks>
				<para>
					Double Agent sends this event only to the clients of the character (applications that have
					loaded the character) that use the word balloon.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.BalloonHide" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.Bookmark">
			<summary>
				<para>Signalled when a bookmark defined by your application in a speech text string is reached.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>Bookmark</c> (<c>long</c> <em>BookmarkID</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>Bookmark<em>EventHandler</em></c> (<c>int</c> <em>BookmarkID</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>Bookmark</c> (<c>ByVal</c> <em>BookmarkID</em> <c>As Integer</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>Bookmark</c> (<c>ByVal</c> <em>BookmarkID</em> <c>As Long</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>Bookmark</c> (<c>ByVal</c> <em>BookmarkID</em>)</para>
</vbscript>
</syntax>
			<param name="BookmarkID">The bookmark's unique identifier.</param>
			<remarks>
				<para>
					To specify a bookmark event, use the <see cref="M:DoubleAgent.Control.Character.Speak" />
					method with a <c>Mrk </c>tag in your supplied text. For more information about tags, see <a href="MsAgent.chm::/hh/msagent/guidlin_2my6.htm">
						Speech Output Tags
					</a>.
				</para>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Character.Speak" prefix="The" suffix="Method" />
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.Click">
			<summary>
				<para>Signalled when the user clicks a character, or the character's icon.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>Click</c> (<c>LPCTSTR</c> <em>CharacterID</em>, <c>short</c> <em>Button</em>, <c>short</c> <em>Shift</em>, <c>short</c> <em>X</em>, <c>short</c> <em>Y</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>Click<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>, <c>short</c> <em>Button</em>, <c>short</c> <em>Shift</em>, <c>short</c> <em>X</em>, <c>short</c> <em>Y</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>Click</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Button</em> <c>As Short</c>, <c>ByVal</c> <em>Shift</em> <c>As Short</c>, <c>ByVal</c> <em>X</em> <c>As Short</c>, <c>ByVal</c> <em>Y</em> <c>As Short</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>Click</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Button</em> <c>As Integer</c>, <c>ByVal</c> <em>Shift</em> <c>As Integer</c>, <c>ByVal</c> <em>X</em> <c>As Integer</c>, <c>ByVal</c> <em>Y</em> <c>As Integer</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>Click</c> (<c>ByVal</c> <em>CharacterID</em>, <c>ByVal</c> <em>Button</em>, <c>ByVal</c> <em>Shift</em>, <c>ByVal</c> <em>X</em>, <c>ByVal</c> <em>Y</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">The unique identifier of the character that was clicked.</param>
			<param name="Button">
				<include file="DoubleAgent.Include.xml" path="/doc/params/param[@name='Button']" />
			</param>
			<param name="Shift">
				<include file="DoubleAgent.Include.xml" path="/doc/params/param[@name='Shift']" />
			</param>
			<param name="X">
				<include file="DoubleAgent.Include.xml" path="/doc/params/param[@name='X']" />
			</param>
			<param name="Y">
				<include file="DoubleAgent.Include.xml" path="/doc/params/param[@name='Y']" />
			</param>
			<remarks>
				<para>
					This event is sent only to the input-active client of a character. When the user clicks a character
					or its taskbar icon with no input-active client, Double Agent sends the event to its active client.
					If the character is visible (<see cref="P:DoubleAgent.Control.Character.Visible" /> is <c>True</c>),
					the user's action also sets the character's current input-active client as the last input-active client,
					sending the <see cref="E:DoubleAgent.Control.Control.ActivateInput" /> event to that client, and
					then sending the <c>Click </c>event. If the character is hidden (<see cref="P:DoubleAgent.Control.Character.Visible" />
					is <c>False</c>), and the user clicks the character's taskbar icon using button 1, the character
					is also automatically shown.
				</para>
				<note>
					Clicking a character does not disable all other character output. However, pressing the <em>
						Listening
					</em> key <em>does </em>flush the input-active character's output and triggers the <see cref="E:DoubleAgent.Control.Control.RequestComplete" />
					event, passing a <see cref="P:DoubleAgent.Control.Request.Status" /> that indicates that the client's
					queue was interrupted.
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.Command">
			<summary>
				<para>Signalled when the user chooses a (client's) command.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>Command (<see cref="T:DoubleAgent.Control.UserInput" text="IDaCtlUserInput" /> *</c> <em>UserInput</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>Command<em>EventHandler</em></c> (<c><see cref="T:DoubleAgent.Control.UserInput" text="DoubleAgent.Control.UserInput" /></c> <em>UserInput</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>Command</c> (<c>ByVal</c> <em>UserInput</em> <c>As <see cref="T:DoubleAgent.Control.UserInput" text="DoubleAgent.Control.UserInput" /></c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>Command</c> (<c>ByVal</c> <em>UserInput</em> <c>As <see cref="T:DoubleAgent.Control.UserInput" text="DaCtlUserInput" /></c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>Command</c> (<c>ByVal</c> <em>UserInput</em>)</para>
</vbscript>
</syntax>
			<param name="UserInput">
				A <c>
					<see cref="T:DoubleAgent.Control.UserInput" />
				</c> object that identifies the chosen command.
			</param>
			<remarks>
				<para>
					Double Agent sends this event when your application is input-active and the user chooses a
					command from the character's pop-up menu, or by spoken input.
				</para>
			</remarks>
			<seealso cref="T:DoubleAgent.Control.UserInput" prefix="The" suffix="Object" />
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.DblClick">
			<summary>
				<para>Signalled when the user double-clicks a character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>DblClick</c> (<c>LPCTSTR</c> <em>CharacterID</em>, <c>short</c> <em>Button</em>, <c>short</c> <em>Shift</em>, <c>short</c> <em>X</em>, <c>short</c> <em>Y</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>DblClick<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>, <c>short</c> <em>Button</em>, <c>short</c> <em>Shift</em>, <c>short</c> <em>X</em>, <c>short</c> <em>Y</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>DblClick</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Button</em> <c>As Short</c>, <c>ByVal</c> <em>Shift</em> <c>As Short</c>, <c>ByVal</c> <em>X</em> <c>As Short</c>, <c>ByVal</c> <em>Y</em> <c>As Short</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>DblClick</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Button</em> <c>As Integer</c>, <c>ByVal</c> <em>Shift</em> <c>As Integer</c>, <c>ByVal</c> <em>X</em> <c>As Integer</c>, <c>ByVal</c> <em>Y</em> <c>As Integer</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>DblClick</c> (<c>ByVal</c> <em>CharacterID</em>, <c>ByVal</c> <em>Button</em>, <c>ByVal</c> <em>Shift</em>, <c>ByVal</c> <em>X</em>, <c>ByVal</c> <em>Y</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">The unique identifier of the character that was double-clicked.</param>
			<param name="Button">
				<include file="DoubleAgent.Include.xml" path="/doc/params/param[@name='Button']" />
			</param>
			<param name="Shift">
				<include file="DoubleAgent.Include.xml" path="/doc/params/param[@name='Shift']" />
			</param>
			<param name="X">
				<include file="DoubleAgent.Include.xml" path="/doc/params/param[@name='X']" />
			</param>
			<param name="Y">
				<include file="DoubleAgent.Include.xml" path="/doc/params/param[@name='Y']" />
			</param>
			<remarks>
				<para>
					This event is sent only to the input-active client of a character. When the user double-clicks
					a character or its taskbar icon with no input-active client, Double Agent sends the event to its active
					client. If the character is visible (<see cref="P:DoubleAgent.Control.Character.Visible" /> is
					<c>True</c>), the user's action also sets the character's current input-active client as the last
					input-active client, sending the <see cref="E:DoubleAgent.Control.Control.ActivateInput" /> event
					to that client, and then sending the <c>DblClick </c>event. If the character is hidden (<see cref="P:DoubleAgent.Control.Character.Visible" />
					is <c>False</c>), and the user double-clicks the character's taskbar icon using button 1, the character
					is also automatically shown.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.DeactivateInput">
			<summary>
				<para>Signalled when a client becomes non-input-active.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>DeactivateInput</c> (<c>LPCTSTR</c> <em>CharacterID</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>DeactivateInput<em>EventHandler</em></c><c> (string</c> <em>CharacterID</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>DeactivateInput</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>DeactivateInput</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>DeactivateInput</c> (<c>ByVal</c> <em>CharacterID</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">
				The unique identifier of the character that has become non-input-active.
			</param>
			<remarks>
				<para>
					A non-input-active client no longer receives mouse or speech events from Double Agent (unless
					it becomes input-active again). Double Agent sends this event only to the client that becomes non-input-active.
				</para>
				<para>
					This event is signalled when your client application is input-active and the user chooses a
					another client's <see cref="T:DoubleAgent.Control.Command" /> in a character's pop-up menu or the
					<see cref="T:DoubleAgent.Control.CommandsWindow" />, or you call the <see cref="M:DoubleAgent.Control.Character.Activate" />
					method and set the <c>State </c>parameter to 0. It may also occur when the user selects the name
					of another character by clicking or speaking. You also get this event when your character is hidden
					or another character becomes visible.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.ActivateInput" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.DefaultCharacterChange">
			<summary>
				<para>Signalled when the user changes the default character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>DefaultCharacterChange</c> (<c>LPCTSTR</c> <em>CharGUID</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>DefaultCharacterChange<em>EventHandler</em></c><c> (string</c> <em>CharGUID</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>DefaultCharacterChange</c> (<c>ByVal</c> <em>CharGUID</em> <c>As String)</c></para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>DefaultCharacterChange</c> (<c>ByVal</c> <em>CharGUID</em> <c>As String)</c></para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>DefaultCharacterChange</c> (<c>ByVal</c> <em>CharGUID</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">The unique identifier of the new default character.</param>
			<remarks>
				<para>
					This event indicates that the user has changed the character assigned as the user's default
					character. Double Agent sends this only to clients that have loaded the default character.
				</para>
				<para>
					When the new character appears, it assumes the same size as any already loaded instance of
					the character, or the previous default character (in that order).
				</para>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Control.ShowDefaultCharacterProperties" prefix="The" suffix="Method" />
			<seealso cref="M:DoubleAgent.Control.Characters.Load" prefix="The" suffix="Method" />
			<seealso cref="P:DoubleAgent.Control.CharacterFiles.DefaultFilePath" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.DragComplete">
			<summary>
				<para>Signalled when the user stops dragging a character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>DragComplete</c> (<c>LPCTSTR</c> <em>CharacterID</em>, <c>short</c> <em>Button</em>, <c>short</c> <em>Shift</em>, <c>short</c> <em>X</em>, <c>short</c> <em>Y</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>DragComplete<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>, <c>short</c> <em>Button</em>, <c>short</c> <em>Shift</em>, <c>short</c> <em>X</em>, <c>short</c> <em>Y</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>DragComplete</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Button</em> <c>As Short</c>, <c>ByVal</c> <em>Shift</em> <c>As Short</c>, <c>ByVal</c> <em>X</em> <c>As Short</c>, <c>ByVal</c> <em>Y</em> <c>As Short</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>DragComplete</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Button</em> <c>As Integer</c>, <c>ByVal</c> <em>Shift</em> <c>As Integer</c>, <c>ByVal</c> <em>X</em> <c>As Integer</c>, <c>ByVal</c> <em>Y</em> <c>As Integer</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>DragComplete</c> (<c>ByVal</c> <em>CharacterID</em>, <c>ByVal</c> <em>Button</em>, <c>ByVal</c> <em>Shift</em>, <c>ByVal</c> <em>X</em>, <c>ByVal</c> <em>Y</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">The unique identifier of the character that was dragged.</param>
			<param name="Button">
				<include file="DoubleAgent.Include.xml" path="/doc/params/param[@name='Button']" />
			</param>
			<param name="Shift">
				<include file="DoubleAgent.Include.xml" path="/doc/params/param[@name='Shift']" />
			</param>
			<param name="X">
				<include file="DoubleAgent.Include.xml" path="/doc/params/param[@name='X']" />
			</param>
			<param name="Y">
				<include file="DoubleAgent.Include.xml" path="/doc/params/param[@name='Y']" />
			</param>
			<remarks>
				<para>
					This event is sent only to the input-active client of a character. When the user drags a character
					with no input-active client, Double Agent sets its current input-active client as the last input-active
					client, sending the <see cref="E:DoubleAgent.Control.Control.ActivateInput" /> event to that client,
					and then sending the <see cref="E:DoubleAgent.Control.Control.DragStart" /> and <c>DragComplete </c>events.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.DragStart" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.DragStart">
			<summary>
				<para>Signalled when the user starts dragging a character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>DragStart</c> (<c>LPCTSTR</c> <em>CharacterID</em>, <c>short</c> <em>Button</em>, <c>short</c> <em>Shift</em>, <c>short</c> <em>X</em>, <c>short</c> <em>Y</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>DragStart<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>, <c>short</c> <em>Button</em>, <c>short</c> <em>Shift</em>, <c>short</c> <em>X</em>, <c>short</c> <em>Y</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>DragStart</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Button</em> <c>As Short</c>, <c>ByVal</c> <em>Shift</em> <c>As Short</c>, <c>ByVal</c> <em>X</em> <c>As Short</c>, <c>ByVal</c> <em>Y</em> <c>As Short</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>DragStart</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Button</em> <c>As Integer</c>, <c>ByVal</c> <em>Shift</em> <c>As Integer</c>, <c>ByVal</c> <em>X</em> <c>As Integer</c>, <c>ByVal</c> <em>Y</em> <c>As Integer</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>DragStart</c> (<c>ByVal</c> <em>CharacterID</em>, <c>ByVal</c> <em>Button</em>, <c>ByVal</c> <em>Shift</em>, <c>ByVal</c> <em>X</em>, <c>ByVal</c> <em>Y</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">The unique identifier of the character that's being dragged.</param>
			<param name="Button">
				<include file="DoubleAgent.Include.xml" path="/doc/params/param[@name='Button']" />
			</param>
			<param name="Shift">
				<include file="DoubleAgent.Include.xml" path="/doc/params/param[@name='Shift']" />
			</param>
			<param name="X">
				<include file="DoubleAgent.Include.xml" path="/doc/params/param[@name='X']" />
			</param>
			<param name="Y">
				<include file="DoubleAgent.Include.xml" path="/doc/params/param[@name='Y']" />
			</param>
			<remarks>
				<para>
					This event is sent only to the input-active client of a character. When the user drags a character
					with no input-active client, Double Agent sets its current input-active client as the last input-active
					client, sending the <see cref="E:DoubleAgent.Control.Control.ActivateInput" /> event to that client,
					and then sending the <c>DragStart </c>event.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.DragComplete" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.Hide">
			<summary>
				<para>Signalled when a character is hidden.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>Hide</c> (<c>LPCTSTR</c> <em>CharacterID</em>, <c>VisibilityCauseType</c> <em>Cause</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>Hide<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>, <c>DoubleAgent.Control.VisibilityCauseType</c> <em>Cause</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>Hide</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Cause</em> <c>As DoubleAgent.Control.VisibilityCauseType</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>Hide</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Cause</em> <c>As VisibilityCauseType</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>Hide</c> (<c>ByVal</c> <em>CharacterID</em>, <c>ByVal</c> <em>Cause</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">The unique identifier of the character that was hidden.</param>
			<param name="Cause">
				A <c>
					<see cref="T:DoubleAgent.Control.VisibilityCauseType" />
				</c> value that indicates what caused the character to be hidden:
				<list type="table">
					<item>
						<include path="/doc/members/member[@name='T:DoubleAgent.Control.VisibilityCauseType']/syntax/list/item[@name='UserHid']" />
					</item>
					<item>
						<include path="/doc/members/member[@name='T:DoubleAgent.Control.VisibilityCauseType']/syntax/list/item[@name='ProgramHid']" />
					</item>
					<item>
						<include path="/doc/members/member[@name='T:DoubleAgent.Control.VisibilityCauseType']/syntax/list/item[@name='OtherProgramHid']" />
					</item>
				</list>
			</param>
			<remarks>
				<para>
					Double Agent sends this event to all clients of the character. To query the current state of
					the character, use the <see cref="P:DoubleAgent.Control.Character.Visible" /> property.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Show" prefix="The" suffix="Event" />
			<seealso cref="M:DoubleAgent.Control.Character.Hide" prefix="The" suffix="Method" />
			<seealso cref="P:DoubleAgent.Control.Character.VisibilityCause" prefix="The" suffix="Property" />
			<seealso cref="P:DoubleAgent.Control.Character.Visible" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.IdleComplete">
			<summary>
				<para>
					Signalled when Double Agent ends the <em>Idling </em>state of a character.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>IdleComplete</c> (<c>LPCTSTR</c> <em>CharacterID</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>IdleComplete<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>IdleComplete</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>IdleComplete</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>IdleComplete</c> (<c>ByVal</c> <em>CharacterID</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">
				The unique identifier of the <em>Idling </em>character.
			</param>
			<remarks>
				<para>Double Agent sends this event to all clients of the character.</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.IdleStart" prefix="The" suffix="Event" />
			<seealso cref="P:DoubleAgent.Control.Character.IdleEnabled" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.IdleStart">
			<summary>
				<para>
					Signalled when Double Agent sets a character to the <em>Idling </em>state.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>IdleStart</c> (<c>LPCTSTR</c> <em>CharacterID</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>IdleStart<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>IdleStart</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>IdleStart</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>IdleStart</c> (<c>ByVal</c> <em>CharacterID</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">
				The unique identifier of the <em>Idling </em>character.
			</param>
			<remarks>
				<para>Double Agent sends this event to all clients of the character.</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.IdleComplete" prefix="The" suffix="Event" />
			<seealso cref="P:DoubleAgent.Control.Character.IdleEnabled" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.HelpComplete">
			<summary>
				<para>Not Implemented</para>
			</summary>
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.ListenComplete">
			<summary>
				<para>
					Signalled when <em>Listening mode</em> (speech recognition) has ended.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>ListenComplete</c> (<c>LPCTSTR</c> <em>CharacterID</em>, <c>ListenCompleteType</c> <em>Cause</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>ListenComplete<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>, <c>DoubleAgent.Control.ListenCompleteType</c> <em>Cause</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>ListenComplete</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Cause</em> <c>As DoubleAgent.Control.ListenCompleteType</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>ListenComplete</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Cause</em> <c>As ListenCompleteType</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>ListenComplete</c> (<c>ByVal</c> <em>CharacterID</em>, <c>ByVal</c> <em>Cause</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">The unique identifier of the listening character.</param>
			<param name="Cause">
				The cause of the <c>ListenComplete </c>event.<include path="/doc/members/member[@name='T:DoubleAgent.Control.ListenCompleteType']/syntax" />
			</param>
			<remarks>
				<para>
					This event is sent to all clients when the <em>Listening mode </em>time-out ends, after the
					user releases the <em>Listening key</em>, when the input-active client calls the <see cref="M:DoubleAgent.Control.Character.Listen" />
					method with <c>False</c>, or the user has finished speaking. You can use this event to determine
					when to resume spoken output.
				</para>
				<para>
					If you turn on <em>Listening mode </em>using the <see cref="M:DoubleAgent.Control.Character.Listen" />
					method and then the user presses the <em>Listening key</em>, the <em>Listening mode </em>resets
					and continues until the <em>Listening key </em>time-out completes, the <em>Listening key </em>is
					released, or the user finishes speaking, whichever is later. In this situation, you will not receive
					a <c>ListenComplete </c>event until the <em>Listening key</em>'s mode completes.
				</para>
				<para>
					The event returns the <em>CharacterID </em>to the clients that currently have this character
					loaded. All other clients receive a null <em>CharacterID</em> (empty string).
				</para>
			</remarks>
			<seealso cref="T:DoubleAgent.Control.ListenCompleteType" suffix="Enumeration" prefix="The" />
			<seealso cref="E:DoubleAgent.Control.Control.ListenStart" prefix="The" suffix="Event" />
			<seealso cref="M:DoubleAgent.Control.Character.Listen" prefix="The" suffix="Method" />
			<seealso cref="P:DoubleAgent.Control.Settings.SRHotKeyTime" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.ListenStart">
			<summary>
				<para>
					Signalled when <em>Listening mode</em> (speech recognition) begins.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>ListenStart</c> (<c>LPCTSTR</c> <em>CharacterID</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>ListenStart<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>ListenStart</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>ListenStart</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>ListenStart</c> (<c>ByVal</c> <em>CharacterID</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">The unique identifier of the listening character.</param>
			<remarks>
				<para>
					This event is sent to all clients when <em>Listening mode </em>begins because the user pressed
					the <em>Listening key </em>or the input-active client called the <see cref="M:DoubleAgent.Control.Character.Listen" />
					method with <c>True</c>. You can use this event to avoid having your character speak while <em>
						Listening
					</em> mode is active.
				</para>
				<para>
					If you turn on <em>Listening mode </em>with the <see cref="M:DoubleAgent.Control.Character.Listen" />
					method and then the user presses the <em>Listening key</em>, the <em>Listening mode </em>resets
					and continues until the <em>Listening key </em>time-out completes, the <em>Listening key </em>is
					released, or the user finishes speaking, whichever is later. In this situation, when <em>
						Listening
					</em> mode is already on, you will not get an additional <c>ListenStart </c>event when the user
					presses the <em>Listening key</em>.
				</para>
				<para>
					The event returns the <em>CharacterID </em>to the clients that currently have this character
					loaded. All other clients receive a null <em>CharacterID</em> (empty string).
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.ListenComplete" prefix="The" suffix="Event" />
			<seealso cref="M:DoubleAgent.Control.Character.Listen" prefix="The" suffix="Method" />
			<seealso cref="P:DoubleAgent.Control.Settings.SRHotKey" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.Move">
			<summary>
				<para>Signalled when a character is moved.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>Move</c> (<c>LPCTSTR</c> <em>CharacterID</em>, <c>short</c> <em>X</em>, <c>short</c> <em>Y</em>, <c>MoveCauseType</c> <em>Cause</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>Move<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>, <c>short</c> <em>X</em>, <c>short</c> <em>Y</em>, <c>DoubleAgent.Control.MoveCauseType</c> <em>Cause</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>Move</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>X</em> <c>As Short</c>, <c>ByVal</c> <em>Y</em> <c>As Short</c>, <c>ByVal</c> <em>Cause</em> <c>As DoubleAgent.Control.MoveCauseType</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>Move</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>X</em> <c>As Integer</c>, <c>ByVal</c> <em>Y</em> <c>As Integer</c>, <c>ByVal</c> <em>Cause</em> <c>As MoveCauseType</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>Move</c> (<c>ByVal</c> <em>CharacterID</em>, <c>ByVal</c> <em>X</em>, <c>ByVal</c> <em>Y</em>, <c>ByVal</c> <em>Cause</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">The unique identifier of the character that was moved.</param>
			<param name="X">
				The character's new horizontal location, in pixels, relative to the left side of the
				screen.
			</param>
			<param name="Y">
				The character's new vertical location, in pixels, relative to the top of the screen.
			</param>
			<param name="Cause">
				The reason the character moved:
				<list type="table">
					<item>
						<include path="/doc/members/member[@name='T:DoubleAgent.Control.MoveCauseType']/syntax/list/item[@name='UserMoved']" />
					</item>
					<item>
						<include path="/doc/members/member[@name='T:DoubleAgent.Control.MoveCauseType']/syntax/list/item[@name='ProgramMoved']" />
					</item>
					<item>
						<include path="/doc/members/member[@name='T:DoubleAgent.Control.MoveCauseType']/syntax/list/item[@name='OtherProgramMoved']" />
					</item>
				</list>
			</param>
			<remarks>
				<para>
					This event is signalled when the user or an application changes the character's position. Coordinates
					are relevant to the upper left corner of the screen. This event is sent only to the clients of the character
					(applications that have loaded the character).
				</para>
			</remarks>
			<seealso cref="T:DoubleAgent.Control.MoveCauseType" suffix="Enumeration" prefix="The" />
			<seealso cref="E:DoubleAgent.Control.Control.Size" prefix="The" suffix="Event" />
			<seealso cref="M:DoubleAgent.Control.Character.MoveTo" prefix="The" suffix="Method" />
			<seealso cref="P:DoubleAgent.Control.Character.MoveCause" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.RequestComplete">
			<summary>
				<para>Signalled when Double Agent completes a queued request.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>RequestComplete</c> (<c><see cref="T:DoubleAgent.Control.Request" text="IDaCtlRequest" /> *</c> <em>Request</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>RequestComplete<em>EventHandler</em></c> (<c><see cref="T:DoubleAgent.Control.Request" text="DoubleAgent.Control.Request" /></c> <em>Request</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>RequestComplete</c> (<c>ByVal</c> <em>Request</em> <c>As <see cref="T:DoubleAgent.Control.Request" text="DoubleAgent.Control.Request" /></c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>RequestComplete</c> (<c>ByVal</c> <em>Request</em> <c>As <see cref="T:DoubleAgent.Control.Request" text="DaCtlRequest" /></c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>RequestComplete</c> (<c>ByVal</c> <em>Request</em>)</para>
</vbscript>
</syntax>
			<param name="Request">
				The <c>
					<see cref="T:DoubleAgent.Control.Request" />
				</c> object that identifies the completed request.
			</param>
			<remarks>
				<para>
					This event provides a <see cref="T:DoubleAgent.Control.Request" /> object. Because requests
					are processed asynchronously, you can use this event to determine when Double Agent finishes processing
					a request (such as a <see cref="M:DoubleAgent.Control.Character.Get" />, <see cref="M:DoubleAgent.Control.Character.Play" />,
					or <see cref="M:DoubleAgent.Control.Character.Speak" /> method) to synchronize this event with
					other actions generated by your application. Double Agent sends the event only to the client that created
					the reference to the <see cref="T:DoubleAgent.Control.Request" /> object, and only if you defined
					a global variable for the request reference.
				</para>
				<example>
					<code xml:space="preserve">Dim MyRequest 
Dim Genie

Sub window_Onload
    AgentControl.Characters.Load "Genie","Genie.acs"

    Set Genie = Agent.Characters("Genie")

    ' This syntax will generate RequestStart and RequestComplete events.
    Set MyRequest = Genie.Show(False)
    ' This syntax will not generate RequestStart and RequestComplete events.
    Genie.Hide False
End Sub

Sub AgentControl_RequestComplete(ByVal Request)
    If Request Is MyRequest Then
        Status = "Genie was shown"
End Sub</code>
				</example>
				<para>
					Because animation <see cref="T:DoubleAgent.Control.Request" /> objects don't get assigned
					until Double Agent has queued the request, make sure that the <see cref="T:DoubleAgent.Control.Request" />
					object exists before you attempt to evaluate it. For example, in Visual Basic, if you use a conditional
					to test whether a specific request was completed, you can use the <c>Nothing </c>keyword.
				</para>
				<example>
					<code xml:space="preserve">Sub AgentControl_RequestComplete (ByVal Request)
    If Not (MyRequest Is Nothing) Then
        If Request Is MyRequest Then
            '-- Do whatever
        End If
    End If
End Sub</code>
				</example>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.RequestStart" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.RequestStart">
			<summary>
				<para>Signalled when Double Agent begins a queued request.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>RequestStart</c> (<c><see cref="T:DoubleAgent.Control.Request" text="IDaCtlRequest" /> *</c> <em>Request</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>RequestStart<em>EventHandler</em></c><c> (<see cref="T:DoubleAgent.Control.Request" text="DoubleAgent.Control.Request" /></c> <em>Request</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>RequestStart</c> (<c>ByVal</c> <em>Request</em> <c>As <see cref="T:DoubleAgent.Control.Request" text="DoubleAgent.Control.Request" /></c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>RequestStart</c> (<c>ByVal</c> <em>Request</em> <c>As <see cref="T:DoubleAgent.Control.Request" text="DaCtlRequest" /></c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>RequestStart</c> (<c>ByVal</c> <em>Request</em>)</para>
</vbscript>
</syntax>
			<param name="Request">
				The <c>
					<see cref="T:DoubleAgent.Control.Request" />
				</c> object that identifies the queued request.
			</param>
			<remarks>
				<para>
					The event provides a <see cref="T:DoubleAgent.Control.Request" /> object. Because requests
					are processed asynchronously, you can use this event to determine when Double Agent begins processing
					a request (such as a <see cref="M:DoubleAgent.Control.Character.Get" />, <see cref="M:DoubleAgent.Control.Character.Play" />,
					or <see cref="M:DoubleAgent.Control.Character.Speak" /> method) and thereby synchronize this with
					other actions generated by your application. The event is sent only to the client that created the reference
					to the <see cref="T:DoubleAgent.Control.Request" /> object, and only if you defined a global variable
					for the request reference.
				</para>
				<example>
					<code xml:space="preserve">Dim MyRequest 
Dim Genie 

Sub window_Onload
    AgentControl.Characters.Load "Genie", "Genie.acs"

    Set Genie = AgentControl.Characters("Genie")

    ' This syntax will generate RequestStart and RequestComplete events.
    Set MyRequest = Genie.Show(False)

    ' This syntax will not generate RequestStart and RequestComplete events.
    Genie.Hide False
End Sub

Sub AgentControl_RequestStart(ByVal Request)
    If Request Is MyRequest Then
        Status = "Genie is showing"
End Sub</code>
				</example>
				<para>
					The <see cref="P:DoubleAgent.Control.Request.Status" text="Request.Status" /> property is
					4 (InProgress) for the <see cref="T:DoubleAgent.Control.Request" /> object.
				</para>
				<para>
					Because animation <see cref="T:DoubleAgent.Control.Request" /> objects don't get assigned
					until Double Agent has queued the request, make sure that the <see cref="T:DoubleAgent.Control.Request" />
					object exists before you attempt to evaluate it. For example, in Visual Basic, if you use a conditional
					to test whether a specific request was completed, you can use the <c>Nothing </c>keyword.
				</para>
				<example>
					<code xml:space="preserve">Sub AgentControl_RequestStart (ByVal Request)
    If Not (MyRequest Is Nothing) Then
        If Request Is MyRequest Then
            '-- Do whatever
        End If
    End If
End Sub</code>
				</example>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.RequestComplete" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.Show">
			<summary>Signalled when a character is displayed.</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>Show</c> (<c>LPCTSTR</c> <em>CharacterID</em>, <c>VisibilityCauseType</c> <em>Cause</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>Show<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>, <c>DoubleAgent.Control.VisibilityCauseType</c> <em>Cause</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>Show</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Cause</em> <c>As DoubleAgent.Control.VisibilityCauseType</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>Show</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Cause</em> <c>As VisibilityCauseType</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>Show</c> (<c>ByVal</c> <em>CharacterID</em>, <c>ByVal</c> <em>Cause</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">The unique identifier of the character that was shown.</param>
			<param name="Cause">
				A <c>
					<see cref="T:DoubleAgent.Control.VisibilityCauseType" />
				</c> value that indicates what caused the character to be shown.
				<list type="table">
					<item>
						<include path="/doc/members/member[@name='T:DoubleAgent.Control.VisibilityCauseType']/syntax/list/item[@name='UserShowed']" />
					</item>
					<item>
						<include path="/doc/members/member[@name='T:DoubleAgent.Control.VisibilityCauseType']/syntax/list/item[@name='ProgramShowed']" />
					</item>
					<item>
						<include path="/doc/members/member[@name='T:DoubleAgent.Control.VisibilityCauseType']/syntax/list/item[@name='OtherProgramShowed']" />
					</item>
				</list>
			</param>
			<remarks>
				<para>
					Double Agent sends this event to all clients of the character. To query the current state of
					the character, use the <see cref="P:DoubleAgent.Control.Character.Visible" /> property.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Hide" prefix="The" suffix="Event" />
			<seealso cref="M:DoubleAgent.Control.Character.Show" prefix="The" suffix="Method" />
			<seealso cref="P:DoubleAgent.Control.Character.VisibilityCause" prefix="The" suffix="Property" />
			<seealso cref="P:DoubleAgent.Control.Character.Visible" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="E:DoubleAgent.Control.Control.Size">
			<summary>
				<para>Signalled when a character's size changes.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><c>void</c> <em>control</em>_<c>Size</c> (<c>LPCTSTR</c> <em>CharacterID</em>, <c>short</c> <em>Width</em>, <c>short</c> <em>Height</em>)</para>
</cpp>
<csharp>
<para><c>delegate void</c> <em>control</em>_<c>Size<em>EventHandler</em></c> (<c>string</c> <em>CharacterID</em>, <c>short</c> <em>Width</em>, <c>short</c> <em>Height</em>)</para>
</csharp>
<vbnet>
<para><c>Event</c> <em>control</em>_<c>Size</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Width</em> <c>As Short</c>, <c>ByVal</c> <em>Height</em> <c>As Short</c>)</para>
</vbnet>
<vb6>
<para><c>Sub</c> <em>control</em>_<c>Size</c> (<c>ByVal</c> <em>CharacterID</em> <c>As String</c>, <c>ByVal</c> <em>Width</em> <c>As Integer</c>, <c>ByVal</c> <em>Height</em> <c>As Integer</c>)</para>
</vb6>
<vbscript>
<para><c>Sub</c> <em>control</em>_<c>Size</c> (<c>ByVal</c> <em>CharacterID</em>, <c>ByVal</c> <em>Width</em>, <c>ByVal</c> <em>Height</em>)</para>
</vbscript>
</syntax>
			<param name="CharacterID">The unique identifier of the character that was resized.</param>
			<param name="Width">The character's new width, in pixels.</param>
			<param name="Height">The character's new height, in pixels.</param>
			<remarks>
				<para>
					This event is signalled when an application changes the size of a character. This event is
					sent only to the clients of the character (applications that have loaded the character).
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Move" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.Characters" kind="Collection">
			<summary>
				<para>
					The <c>Characters </c>collection includes methods and properties for loading, unloading, and
					accessing <see cref="T:DoubleAgent.Control.Character" /> s. It can be accessed using the <see cref="T:DoubleAgent.Control.Control" />'s
					<see cref="P:DoubleAgent.Control.Control.Characters" /> property.
				</para>
			</summary>
			<syntax>
				<list type="bullet">
					<item>
						<term>
							<bookmark name="Methods"></bookmark>
							The <c>Characters </c>collection has the following <c>methods</c>:
						</term>
						<description>
							<see cref="M:DoubleAgent.Control.Characters.Character" />,
							<see cref="M:DoubleAgent.Control.Characters.Load" />,
							<see cref="M:DoubleAgent.Control.Characters.Unload" />
						</description>
					</item>
					<item>
						<term>
							<bookmark name="Properties"></bookmark>
							The <c>Characters </c>collection has the following <c>properties</c>:
						</term>
						<description>
							<see cref="P:DoubleAgent.Control.Characters.Count" />,
							<see cref="P:DoubleAgent.Control.Characters.Index" />,
							<see cref="P:DoubleAgent.Control.Characters.Item" />
						</description>
					</item>
				</list>
			</syntax>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Characters.Unload">
			<summary>
				<para>Unloads the character data for a loaded character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>characters</em>-&gt;<c>Unload</c> ("<em>CharacterID</em>")</para>
</cpp>
<csharp>
<para><em>control</em>.Characters.<c>Unload</c> ("<em>CharacterID</em>")</para>
</csharp>
<vbnet>
<para><em>control</em>.Characters.<c>Unload</c> ("<em>CharacterID</em>")</para>
</vbnet>
<vb>
<para><em>control</em>.Characters.<c>Unload</c> "<em>CharacterID</em>"</para>
</vb>
</syntax>
			<param name="CharacterID">
				The character's unique identifier specified when the character was loaded.
			</param>
			<remarks>
				<para>
					Use this method when you no longer need a character, to free up memory used to store information
					about the character. If you access the character again, use the <see cref="M:DoubleAgent.Control.Characters.Load" />
					method.
				</para>
				<para>
					This method does <c>not </c>return a <see cref="T:DoubleAgent.Control.Request" /> object.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Characters.Load">
			<summary>
				<para>
					Loads a character into the <c>Characters </c>collection.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>characters</em>-&gt;<c>Load</c> ("<em>CharacterID</em>", <em>Provider</em>, &amp;<em>Request</em>)</para>
</cpp>
<csharp>
<para>[<em>Request</em> = ]<em>control</em>.Characters.<c>Load</c> ("<em>CharacterID</em>, <em>Provider</em>")</para>
</csharp>
<vbnet>
<para>[<em>Request</em> = ]<em>control</em>.Characters.<c>Load</c> ("<em>CharacterID</em>, <em>Provider</em>")</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Request</em> = ]<em>control</em>.Characters.<c>Load</c> "<em>CharacterID</em>", <em>Provider</em></para>
</vb>
</syntax>
			<param name="CharacterID">
				A <c>string </c>value that you will use to refer to the character when
				it's loaded. See the <see cref="P:DoubleAgent.Control.Characters.Item" /> property.
			</param>
			<param name="Provider">
				One of the following:
				<list type="table">
					<item>
						<term>
							<em>Filespec</em>
						</term>
						<description>The location of a local character definition file (.ACS format)</description>
					</item>
					<item>
						<term>
							<em>URL</em>
						</term>
						<description>The HTTP address of the character's definition file (.ACF format)</description>
					</item>
				</list>
			</param>
			<returns name="Request">
				A <c>
					<see cref="T:DoubleAgent.Control.Request" />
				</c> object your application
				can use to track the status of the <c>Load </c>request. The <c>Load </c>method is asynchronous only
				when loading a character using the HTTP protocol.
			</returns>
			<remarks>
				<para>
					You can load characters from the default location(s) by specifying only a file name. For example,
					specifying the following would search for Genie.acs using the default search path.
				</para>
				<example>
					<code xml:space="preserve">Control.Characters.Load "Genie", "Genie.acs"</code>
					<para>You can also specify an absolute location,</para>
					<code xml:space="preserve">Control.Characters.Load "Genie", "C:\MyCharacters\Genie.acs"</code>
					<para>or specify your own subdirectory by using a relative path.</para>
					<code xml:space="preserve">Control.Characters.Load "Genie", "MyCharacters\Genie.acs"</code>
				</example>
				<para>
					You can load the default character by omitting the second parameter of the <c>Load </c>method,
					or passing an empty string. This will load the default character from the <see cref="P:DoubleAgent.Control.CharacterFiles.DefaultFilePath" text="default file path" />.
				</para>
				<example>
					<code xml:space="preserve">Control.Characters.Load "DefChar"</code>
				</example>
				<para>
					You <c>cannot </c>load the same character (a character having the same <see cref="P:DoubleAgent.Control.Character.UniqueID" />)
					more than once from a single instance of the control. Similarly, you cannot load the default character
					and other characters at the same time from a single instance of the control because the default character
					could be the same as the other character. If you attempt to do this, Double Agent raises an error. However,
					you can create another instance of the Agent control and load the same character.
				</para>
				<para>
					Loading a character does not automatically display the character. Use the <see cref="M:DoubleAgent.Control.Character.Show" />
					method first to make the character visible.
				</para>
			</remarks>
			<details>
				<h4 class="details">Data Providers</h4>
				<para>
					Character data can be loaded from a single structured file (.ACS) with character data and animation
					data together, or from separate character data (.ACF) and animation (.ACA) files. Use a single structured
					.ACS file to load a character that's stored on a local disk or network and accessed using a conventional
					file protocol (such as UNC path names). Use separate .ACF and .ACA files when you want to load the animation
					files individually from a remote site where they're accessed using the HTTP protocol. The <c>Load </c>
					method does not support downloading .ACS files from an HTTP site.
				</para>
				<para>
					For .ACS files, using the <c>Load </c>method provides access to a character's animations.
					For .ACF files, you should also use the <see cref="M:DoubleAgent.Control.Character.Prepare" />
					method to load animation data. Using <see cref="M:DoubleAgent.Control.Character.Prepare" /> is
					optional, but it will prevent unexpected delays when playing animations.
				</para>
				<h4 class="details">Error Handling</h4>
				<para>
					If you use the <c>Load </c>method to load a character file stored on the local machine and
					the call fails; for example, because the file is not found, Double Agent raises an error. If <see cref="P:DoubleAgent.Control.Control.RaiseRequestErrors" />
					is set to <c>True</c>, you should provide an error handling routine to catch and process the error.
				</para>
				<example>
					<code xml:space="preserve">Sub Form_Load
    On Error GoTo ErrorHandler
    AgentControl.Characters.Load "MyChar", "Genie.acs"
    ' Successful load
    . . .
    Exit Sub
    ErrorHandler:
    ' Unsuccessful load
    . . .
    Resume Next
End Sub</code>
				</example>
				<para>
					You can also handle the error by setting <see cref="P:DoubleAgent.Control.Control.RaiseRequestErrors" />
					to <c>False</c>, declaring an object, and assigning the <c>Load </c>request to it. Then follow
					the <c>Load </c>call with a statement that checks the status of the <see cref="T:DoubleAgent.Control.Request" />
					object.
				</para>
				<example>
					<code xml:space="preserve">Dim LoadRequest as Object

Sub Form_Load
    AgentControl.RaiseRequestErrors = False
    Set LoadRequest = AgentControl.Characters.Load ("MyChar", "c:\some directory\some character.acs")
    If LoadRequest.Status Not 0 Then
    ' Unsuccessful load
    . . .
    Exit Sub
    Else 
    ' Successful load
    . . .
End Sub</code>
				</example>
				<para>
					If you load a character using the HTTP protocol, you can also check for a <c>Load </c>failure
					by assigning a <see cref="T:DoubleAgent.Control.Request" /> object to the <c>Load </c>method. However,
					because this method of loading a character is handled asynchronously, check its status in the <see cref="E:DoubleAgent.Control.Control.RequestComplete" /> event.
					This technique will not work when loading a character using the UNC protocol because the
					<c>Load </c>method is processed synchronously.
				</para>
			</details>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Characters.Character">
			<summary>
				<para>
					Returns a <see cref="T:DoubleAgent.Control.Character" /> object in the <see cref="T:DoubleAgent.Control.Characters" />
					collection.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>characters</em>-&gt;<c>Character</c> ("<em>CharacterID</em>", &amp;<em>Character</em>)</para>
</cpp>
<csharp>
<para>[<em>Character</em> = ]<em>control</em>.Characters.<c>Character</c> ("<em>CharacterID</em>")</para>
</csharp>
<vbnet>
<para>[<em>Character</em> = ]<em>control</em>.Characters.<c>Character</c> ("<em>CharacterID</em>")</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Character</em> = ]<em>control</em>.Characters.<c>Character</c> "<em>CharacterID</em>"</para>
</vb>
</syntax>
			<param name="CharacterID">
				The character's unique identifier specified when the character was loaded.
			</param>
			<returns name="Character">
				A loaded <c>
					<see cref="T:DoubleAgent.Control.Character" />
				</c> object.
			</returns>
			<remarks>
				<para>
					You can use this method to access a <see cref="T:DoubleAgent.Control.Character" /> object's
					methods and properties.
				</para>
				<note>
					This method may be required for some programming languages that don't support collections.
					For languages that <em>do </em>support collections, you can use the language's collection indexing
					syntax.
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Characters.Item" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Characters.Count">
			<summary>
				<para>
					Returns the count of <see cref="T:DoubleAgent.Control.Character" /> objects in the <see cref="T:DoubleAgent.Control.Characters" />
					collection.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<em>characters</em>.<c>get_Count</c> (&amp;<em>Count</em>)
</cpp>
<csharp>
[<em>Count</em> = ]<em>control</em>.<c>Characters</c>.<c>Count</c>
</csharp>
<vb>
[<em>Count</em> = ]<em>control</em>.<c>Characters</c>.<c>Count</c>
</vb>
</syntax>
			<value name="Count">
				A <c>numeric </c>value that indicates the number of <see cref="T:DoubleAgent.Control.Character" />
				objects in the collection.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Characters.Index">
			<summary>
				<para>
					Returns a <see cref="T:DoubleAgent.Control.Character" suffix="Object" /> in the collection.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>characters</em>.<c>get_Index</c> (<em>Index</em>, &amp;<em>Character</em>)</para>
</cpp>
<csharp>
<para>[<em>Character</em> = ]<em>control</em>.<c>Characters</c>.get_Index (<em>Index</em>)</para>
</csharp>
<vbnet>
<para>[<em>Character</em> = ]<em>control</em>.<c>Characters</c>.Index (<em>Index</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Character</em> = ]<em>control</em>.<c>Characters</c>.Index (<em>Index</em>)</para>
</vb>
</syntax>
			<param name="Index">
				A <c>numeric </c>value that specifies the zero-based index of the item to retrieve.
			</param>
			<returns name="Character">
				The <see cref="T:DoubleAgent.Control.Character" suffix="Object" /> at the
				spedified <em>Index</em>.
			</returns>
			<remarks>
				<para>
					When you want to use the <see cref="T:DoubleAgent.Control.Characters" suffix="Collection" />
					as an <em>ordered </em>collection, you can use the <c>Index </c>property instead of the <see cref="P:DoubleAgent.Control.Characters.Item" />
					property.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Characters.Count" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Characters.Item" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Characters.Item">
			<summary>
				<para>
					Returns a <see cref="T:DoubleAgent.Control.Character" suffix="Object" /> in the collection.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>control</em>.<c>get_Item</c> (<em>CharacterID</em>, &amp;<em>Character</em>)</para>
</cpp>
<csharp>
<para>[<em>Command</em> = ]<em>control</em>.<c>Characters</c>.this [<em>CharacterID</em>]</para>
</csharp>
<vbnet>
<para>[<em>Command</em> = ]<em>control</em>.<c>Characters</c> (<em>CharacterID</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Command</em> = ]<em>control</em>.<c>Characters</c> (<em>CharacterID</em>)</para>
</vb>
</syntax>
			<param name="CharacterID">
				A <c>string </c>value that specifies the <see cref="P:DoubleAgent.Control.Character.CharacterID" />
				assigned to the character when it was loaded.
			</param>
			<returns name="Character">
				The <see cref="T:DoubleAgent.Control.Character" suffix="Object" /> with
				the specified <em>CharacterID</em>.
			</returns>
			<seealso cref="P:DoubleAgent.Control.Character.CharacterID" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Characters.Index" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.Character">
			<summary>
				<para>
					The <c>Character </c>object provides the methods and properties your application will use
					to access the bulk of Double Agent's features.
				</para>
			</summary>
			<syntax>
				<list type="bullet">
					<item>
						<term>
							<bookmark name="Methods"></bookmark>
							The <c>Character </c>object has the following <c>methods</c>:
						</term>
						<description>
							<see cref="M:DoubleAgent.Control.Character.Activate" />,
							<see cref="M:DoubleAgent.Control.Character.FindSREngines" />,
							<see cref="M:DoubleAgent.Control.Character.FindTTSEngines" />,
							<see cref="M:DoubleAgent.Control.Character.GenerateIcon" />,
							<see cref="M:DoubleAgent.Control.Character.GestureAt" />,
							<see cref="M:DoubleAgent.Control.Character.Prepare" />,
							<see cref="M:DoubleAgent.Control.Character.Hide" />,
							<see cref="M:DoubleAgent.Control.Character.Interrupt" />,
							<see cref="M:DoubleAgent.Control.Character.Listen" />,
							<see cref="M:DoubleAgent.Control.Character.MoveTo" />,
							<see cref="M:DoubleAgent.Control.Character.Play" />,
							<see cref="M:DoubleAgent.Control.Character.Show" />,
							<see cref="M:DoubleAgent.Control.Character.ShowPopupMenu" />,
							<see cref="M:DoubleAgent.Control.Character.Speak" />,
							<see cref="M:DoubleAgent.Control.Character.Stop" />,
							<see cref="M:DoubleAgent.Control.Character.StopAll" />,
							<see cref="M:DoubleAgent.Control.Character.Think" />,
							<see cref="M:DoubleAgent.Control.Character.Wait" />
						</description>
					</item>
					<item>
						<term>
							<bookmark name="Properties"></bookmark>
							The <c>Character </c>object has the following <c>properties</c>:
						</term>
						<description>
							<see cref="P:DoubleAgent.Control.Character.ActiveState" />,
							<see cref="P:DoubleAgent.Control.Character.Animations" />,
							<see cref="P:DoubleAgent.Control.Character.AutoPopupMenu" />,
							<see cref="P:DoubleAgent.Control.Character.Balloon" />,
							<see cref="P:DoubleAgent.Control.Character.CharacterID" />,
							<see cref="P:DoubleAgent.Control.Character.Commands" />,
							<see cref="P:DoubleAgent.Control.Character.Connected" />,
							<see cref="P:DoubleAgent.Control.Character.Description" />,
							<see cref="P:DoubleAgent.Control.Character.ExtraData" />,
							<see cref="P:DoubleAgent.Control.Character.FileName" />,
							<see cref="P:DoubleAgent.Control.Character.FilePath" />,
							<see cref="P:DoubleAgent.Control.Character.HasIcon" />,
							<see cref="P:DoubleAgent.Control.Character.HasOtherClients" />,
							<see cref="P:DoubleAgent.Control.Character.Height" />,
							<see cref="P:DoubleAgent.Control.Character.IconIdentity" />,
							<see cref="P:DoubleAgent.Control.Character.IconShown" />,
							<see cref="P:DoubleAgent.Control.Character.IconTip" />,
							<see cref="P:DoubleAgent.Control.Character.IconVisible" />,
							<see cref="P:DoubleAgent.Control.Character.IdleEnabled" />,
							<see cref="P:DoubleAgent.Control.Character.IdleState" />,
							<see cref="P:DoubleAgent.Control.Character.LanguageID" />,
							<see cref="P:DoubleAgent.Control.Character.Left" />,
							<see cref="P:DoubleAgent.Control.Character.ListeningStatus" />,
							<see cref="P:DoubleAgent.Control.Character.MoveCause" />,
							<see cref="P:DoubleAgent.Control.Character.Name" />,
							<see cref="P:DoubleAgent.Control.Character.OriginalHeight" />,
							<see cref="P:DoubleAgent.Control.Character.OriginalWidth" />,
							<see cref="P:DoubleAgent.Control.Character.Pitch" />,
							<see cref="P:DoubleAgent.Control.Character.Smoothed" />,
							<see cref="P:DoubleAgent.Control.Character.SmoothEdges" />,
							<see cref="P:DoubleAgent.Control.Character.SoundEffectsEnabled" />,
							<see cref="P:DoubleAgent.Control.Character.Speed" />,
							<see cref="P:DoubleAgent.Control.Character.SREngine" />,
							<see cref="P:DoubleAgent.Control.Character.SRModeID" />,
							<see cref="P:DoubleAgent.Control.Character.States" />,
							<see cref="P:DoubleAgent.Control.Character.Style" />,
							<see cref="P:DoubleAgent.Control.Character.Top" />,
							<see cref="P:DoubleAgent.Control.Character.TTSEngine" />,
							<see cref="P:DoubleAgent.Control.Character.TTSModeID" />,
							<see cref="P:DoubleAgent.Control.Character.UniqueID" />,
							<see cref="P:DoubleAgent.Control.Character.Version" />,
							<see cref="P:DoubleAgent.Control.Character.VisibilityCause" />,
							<see cref="P:DoubleAgent.Control.Character.Visible" />,
							<see cref="P:DoubleAgent.Control.Character.Width" />
							<note>
								The <see cref="P:DoubleAgent.Control.Character.Height" />, <see cref="P:DoubleAgent.Control.Character.Left" />,
								<see cref="P:DoubleAgent.Control.Character.Top" />, and <see cref="P:DoubleAgent.Control.Character.Width" />
								properties refer to the position and size of the <c>Character</c>, not the location of the Double
								Agent control.
							</note>
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					Because the server loads an HTTP character asynchronously, ensure that the character has been
					loaded before querying its properties, for example, using the <see cref="E:DoubleAgent.Control.Control.RequestComplete" />
					event. Otherwise, the properties may return incorrect values.
				</para>
			</remarks>
			<details>
				<h4 class="remarks">Referencing the Character Object</h4>
				<list type="bullet">
					<item>
						<term>
							To use a method or property, reference the character in the <see cref="T:DoubleAgent.Control.Characters" />
							collection. In VBScript and Visual Basic, you do this by specifying the unique identifier you assigned
							when you loaded the character:
						</term>
						<description>
							<code xml:space="preserve">Sub FormLoad
    'Load the genie character into the Characters collection
    AgentControl.Characters.Load "Genie", "Genie.acs"

    'Display the character
    AgentControl.Characters("Genie").Show
    AgentControl.Characters("Genie").Play "Greet"
    AgentControl.Characters("Genie").Speak "Hello."
End Sub</code>
						</description>
					</item>
					<item>
						<term>
							To simplify the syntax of your code, you can define an object variable and set it to reference
							a character object in the <see cref="T:DoubleAgent.Control.Characters" /> collection. Then you
							can use your variable to reference methods or properties of the character. The following example demonstrates
							how you can do this using the Visual Basic <c>Set </c>statement:
						</term>
						<description>
							<code xml:space="preserve">'Define a global object variable
Dim Genie as Object

Sub FormLoad
    'Load the genie character into the Characters collection
    AgentControl.Characters.Load "Genie", "Genie.acs"

    'Create a reference to the character
    Set Genie = AgentControl.Characters("Genie")

    'Display the character
    Genie.Show

    'Make the character say Hello
    Genie.Speak "Hello."
End Sub</code>
						</description>
					</item>
					<item>
						<term>
							In Visual Basic, you can also create your reference by declaring your variable as a <see cref="T:DoubleAgent.Control.Character" />
							object:
						</term>
						<description>
							<code xml:space="preserve">Dim Genie as DaControl.DaCtlCharacter

Sub FormLoad
    'Load the genie character into the Characters collection
    AgentControl.Characters.Load "Genie", "Genie.acs"

    'Create a reference to the character
    Set Genie = AgentControl.Characters("Genie")

    'Display the character
    Genie.Show
End Sub</code>
							<para>
								Declaring an object of type <c>DaCtlCharacter </c>enables early binding on the object,
								which allows immediate syntax checking and results in better performance.
							</para>
						</description>
					</item>
					<item>
						<term>
							In VBScript, you cannot declare a reference as a particular type. However, you can simply
							declare the variable reference:
						</term>
						<description>
							<code xml:space="preserve">&lt;SCRIPT LANGUAGE = "VBScript"&gt;
&lt;!--
Dim Genie

Sub window_OnLoad
    'Load the character
    AgentCtl.Characters.Load "Genie", "http://agent.microsoft.com/characters/v2/genie/genie.acf"

    'Create an object reference to the character in the collection
    set Genie= AgentCtl.Characters ("Genie")

    'Prepare the Showing state animation
    Genie.Prepare "state", "Showing"

    'Display the character
    Genie.Show
End Sub
--&gt;
&lt;/SCRIPT&gt;</code>
						</description>
					</item>
					<item>
						<term>
							Some programming languages do not support collections. However, you can access a <see cref="T:DoubleAgent.Control.Character" />
							object's methods with the <see cref="M:DoubleAgent.Control.Characters.Character" /> method:
						</term>
						<description>
							<code xml:space="preserve">
<em>control</em>.Characters.Character("<em>CharacterID</em>").<em>method</em></code>
						</description>
					</item>
					<item>
						<term>
							In addition, you can create a reference to the <c>Character </c>object to make your script
							code easier to follow:
						</term>
						<description>
							<code xml:space="preserve">&lt;SCRIPT LANGUAGE="JScript" FOR="window" EVENT="onLoad()"&gt;
&lt;!--
//Load the character's data
AgentControl.Characters.Load ("Genie", "http://agent.microsoft.com/characters/v2/genie/genie.acf");

//Create a reference to this object
Genie = AgentControl.Characters.Character("Genie");

//Prepare the Showing state animation
Genie.Prepare("state", "Showing");

//Display the character
Genie.Show();
--&gt;
&lt;/SCRIPT&gt;</code>
						</description>
					</item>
				</list>
			</details>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.Activate">
			<summary>
				<para>Sets the active client or character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>Activate</c> (<em>State</em>, &amp;<em>Success</em>)</para>
</cpp>
<csharp>
<para>[<em>Success</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Activate</c> (<em>State</em>)</para>
</csharp>
<vbnet>
<para>[<em>Success</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Activate</c> (<em>State</em>)</para>
</vbnet>
<vb>
<para>[<em>Success</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Activate</c>[ <em>State</em>]</para>
</vb>
</syntax>
			<param name="State">
				An optional <c>numeric </c>value from the <see cref="T:DoubleAgent.Control.ActiveStateType" />
				enumeration:<include path="/doc/members/member[@name='T:DoubleAgent.Control.ActiveStateType']/syntax" />
			</param>
			<returns name="Success">
				<c>True </c>if the method succeeded.
			</returns>
			<details>
				<h4 class="details">Details</h4>
				<para>
					When multiple characters are visible, only one of the characters receives speech input at a
					time. Similarly, when multiple client applications share the same character, only one of the clients
					receives mouse input (for example, <see cref="E:DoubleAgent.Control.Control.Click" /> or <see cref="E:DoubleAgent.Control.Control.DragStart" text="Drag" />
					events). The character set to receive mouse and speech input is the input-active character and the client
					that receives the input is the active client of that character. (The input-active character's window
					also appears at the top of the character window's z-order.) Typically, the user determines the input-active
					character by explicitly selecting the character. However, input activation also changes when a character
					is shown or hidden (the character becomes or is no longer input-active, respectively.)
				</para>
				<para>
					You can also use this method to explicitly manage when your client receives input directed
					to the character such as when your application itself becomes active. For example, setting <c>State </c>
					to 2 makes the character input-active and your client receives all mouse and speech input events
					generated from user interaction with the character. Therefore, it also makes your client the input-active
					client of the character.
				</para>
				<para>
					However, you can also set yourself to be the active client for a character without making the
					character input-active, by setting <c>State </c>to 1. This allows your client to receive input
					directed to that character when the character does become input-active. Similarly, you can set your
					client to <em>not </em>be the active client (not to receive input) when the character becomes input-active,
					by setting <c>State </c>to 0.
				</para>
				<para>
					If you call this method as a function, it returns a boolean value that indicates whether the
					method succeeded. Attempting to call this method with the <c>State </c>parameter set to 2 when
					the specified character is hidden will fail. Similarly, if you set <c>State </c>to 0 and your application
					is the only client, this call fails because a character must always have a input-active client.
				</para>
				<h4 class="details">Example</h4>
				<code xml:space="preserve">Dim Genie as Object

Sub FormLoad()
    AgentControl.Characters.Load "Genie", "Genie.acs"

    Set Genie = AgentControl.Characters ("Genie")

    If (Genie.Activate = True) Then
      ' I'm active
    Else
      ' I must be hidden or something
    End If 
End Sub</code>
			</details>
			<remarks>
				<para>
					Avoid calling this method directly after a <see cref="M:DoubleAgent.Control.Character.Show" />
					method.<see cref="M:DoubleAgent.Control.Character.Show" /> automatically sets the input-active
					client. When the character is shown, the <c>Activate </c>call may fail if it gets processed before
					the <see cref="M:DoubleAgent.Control.Character.Show" /> method completes.
				</para>
				<note>
					Calling this method with <c>State </c>set to 1 does not typically generate an <see cref="E:DoubleAgent.Control.Control.ActivateInput" />
					event unless there are no other characters loaded or your application is already input-active.
				</note>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.ActivateInput" prefix="The" suffix="Event" />
			<seealso cref="E:DoubleAgent.Control.Control.DeactivateInput" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.FindSREngines">
			<summary>
				<para>
					Retrieves a collection of <see cref="T:DoubleAgent.Control.SREngine" text="Speech Recognition Engine" />
					objects that meet the character's requirements.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>-&gt;<c>FindSREngines</c> (<em>LanguageID</em>, &amp;<em>SREngines</em>)</para>
</cpp>
<csharp>
<para>[<em>SREngines</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>FindSREngines</c> (<em>LanguageID</em>)</para>
</csharp>
<vbnet>
<para>[<em>SREngines</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>FindSREngines</c> (<em>LanguageID</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>SREngines</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>FindSREngines</c> (<em>LanguageID</em>)</para>
</vb>
</syntax>
			<param name="LanguageID">
				A <c>numeric </c>value that specifies the language to match, or <c>zero </c> for any language.
			</param>
			<returns name="SREngines">
				A <c>
					<see cref="T:DoubleAgent.Control.SREngines" suffix="Collection" />
				</c> that matches the character's text-to-speech requirements and the specified <em>LanguageID</em>.
			</returns>
			<seealso cref="T:DoubleAgent.Control.SREngines" suffix="Collection" prefix="The" />
			<seealso cref="T:DoubleAgent.Control.SREngine" suffix="Object" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.FindTTSEngines">
			<summary>
				<para>
					Retrieves a collection of <see cref="T:DoubleAgent.Control.TTSEngine" text="Text-To-Speech Engine" />
					objects that meet the character's requirements.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>-&gt;<c>FindTTSEngines</c> (<em>LanguageID</em>, &amp;<em>TTSEngines</em>)</para>
</cpp>
<csharp>
<para>[<em>TTSEngines</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>FindTTSEngines</c> (<em>LanguageID</em>)</para>
</csharp>
<vbnet>
<para>[<em>TTSEngines</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>FindTTSEngines</c> (<em>LanguageID</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>TTSEngines</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>FindTTSEngines</c> (<em>LanguageID</em>)</para>
</vb>
</syntax>
			<param name="LanguageID">
				A <c>numeric </c>value that specifies the language to match, or <c>zero </c>for any language.
			</param>
			<returns name="TTSEngines">
				A <c>
					<see cref="T:DoubleAgent.Control.TTSEngines" suffix="Collection" />
				</c> that matches the character's text-to-speech requirements and the specified <em>LanguageID</em>.
			</returns>
			<seealso cref="T:DoubleAgent.Control.TTSEngines" suffix="Collection" prefix="The" />
			<seealso cref="T:DoubleAgent.Control.TTSEngine" suffix="Object" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.GenerateIcon">
			<summary>
				<para>Generates a notification icon from one frame of a character's animations.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<em>character</em>-&gt;<c>GenerateIcon</c> (<em>ClipLeft</em>, <em>ClipTop</em>, <em>ClipWidth</em>, <em>ClipHeight</em>)
</cpp>
<csharp>
<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>GenerateIcon</c> (<em>ClipLeft</em>, <em>ClipTop</em>, <em>ClipWidth</em>, <em>ClipHeight</em>)
</csharp>
<vbnet>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>GenerateIcon</c> (<em>ClipLeft</em>, <em>ClipTop</em>, <em>ClipWidth</em>, <em>ClipHeight</em>)
</vbnet>
<vb>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>GenerateIcon</c> [<em>ClipLeft</em>][, <em>ClipTop</em>][, <em>ClipWidth</em>][, <em>ClipHeight</em>]
</vb>
</syntax>
			<param name="ClipLeft">
				An optional <c>numeric </c>value that specifies the left side of the clipping
				area. The default value is 0.
			</param>
			<param name="ClipTop">
				An optional <c>numeric </c>value that specifies the top of the clipping area.
				The default value is 0.
			</param>
			<param name="ClipWidth">
				An optional <c>numeric </c>value that specifies the width of the clipping
				area. The default value is -1, meaning the full width of the animation frame.
			</param>
			<param name="ClipHeight">
				An optional <c>numeric </c>value that specifies the height of the clipping
				area. The default value is -1, meaning the full width of the animation frame.
			</param>
			<remarks>
				<para>
					The icon is generated using the first frame of one of the character's animations as the source
					of the icon image. Which animation is used depends on which animations the character supports.
				</para>
				<para>
					You can specify an optional clipping area to generate the icon from only a part of the animation
					frame.
				</para>
				<para>
					If you don't specify a clipping area, the entire image is used (with any empty space around
					the edges removed).
				</para>
				<note>
					You can only use this method once per character. Once a notification icon has been generated,
					it cannot be changed.
				</note>
				<note>
					If you use this method for a character that has a notification icon in its definition, the
					defined icon is replaced by the generated icon for as long as the character is loaded.
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.HasIcon" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Character.IconShown" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.GestureAt">
			<summary>
				<para>Plays a character's gesturing animation towards the specified location.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>GestureAt</c> (<em>X</em>, <em>Y</em>, &amp;<em>Request</em>)</para>
</cpp>
<csharp>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>GestureAt</c> (<em>X</em>, <em>Y</em>)</para>
</csharp>
<vbnet>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>GestureAt</c> (<em>X</em>, <em>Y</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>GestureAt</c> <em>X</em>, <em>Y</em></para>
</vb>
</syntax>
			<param name="X">
				A <c>numeric </c>value that indicates the horizontal screen coordinate, in pixels,
				to which the character will gesture.
			</param>
			<param name="Y">
				A <c>numeric </c>value that indicates the vertical screen coordinate, in pixels,
				to which the character will gesture.
			</param>
			<returns name="Request">
				A <c>
					<see cref="T:DoubleAgent.Control.Request" />
				</c> object your application can used to track the method's status.
			</returns>
			<remarks>
				<para>
					Double Agent automatically plays the appropriate animation to gesture toward the specified
					location. The coordinates are always relative to the upper left corner of the screen.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.Get">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This method has been replaced by the <see cref="M:DoubleAgent.Control.Character.Prepare" />
					method, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.Hide">
			<summary>
				<para>Hides a character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>Hide</c> (<em>Fast</em>, &amp;<em>Request</em>)</para>
</cpp>
<csharp>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Hide</c> (<em>Fast</em>)</para>
</csharp>
<vbnet>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Hide</c> (<em>Fast</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Hide</c>[ <em>Fast</em>]</para>
</vb>
</syntax>
			<param name="Fast">
				A <c>boolean </c>value that indicates whether to skip the character's <c>
					Hiding
				</c> state animation.
			</param>
			<returns name="Request">
				A <c>
					<see cref="T:DoubleAgent.Control.Request" />
				</c> object your application can used to track the method's status.
			</returns>
			<remarks>
				<para>
					Double Agent queues the actions of the <c>Hide </c>method in the character's queue, so you
					can use it to hide the character after a sequence of other animations. You can play the action immediately
					by using the <see cref="M:DoubleAgent.Control.Character.Stop" /> or <see cref="M:DoubleAgent.Control.Character.StopAll" />
					method before calling this method.
				</para>
				<note>
					Hiding a character can trigger the <see cref="E:DoubleAgent.Control.Control.ActivateInput" />
					event of another client.
				</note>
				<note>
					Hidden characters cannot access the screen or the audio channel. Double Agent will pass a failure
					status in the <see cref="E:DoubleAgent.Control.Control.RequestComplete" /> event if you attempt
					to animate a hidden character.
				</note>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Character.Show" prefix="The" suffix="Method" />
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.Interrupt">
			<summary>
				<para>Interrupts an animation for another character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>Interrupt</c> (<em>InterruptRequest</em>, &amp;<em>Request</em>)</para>
</cpp>
<csharp>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Interrupt</c> (<em>InterruptRequest</em>)</para>
</csharp>
<vbnet>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Interrupt</c> (<em>InterruptRequest</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Interrupt</c> <em>InterruptRequest</em></para>
</vb>
</syntax>
			<param name="InterruptRequest">
				The <see cref="T:DoubleAgent.Control.Request" /> object for the animation
				call you want to interrupt.
			</param>
			<returns name="Request">
				A <c>
					<see cref="T:DoubleAgent.Control.Request" />
				</c> object your application can used to track the method's status.
			</returns>
			<remarks>
				<para>
					You can use this to synchronize animation between characters. For example, if another character
					is in a looping animation, this method will stop the loop and move to the next animation in the character's
					queue.
				</para>
			</remarks>
			<details>
				<h4 class="details">Example</h4>
				<para>
					To specify the request parameter, create a variable for the animation request you want to interrupt:
				</para>
				<code xml:space="preserve">Dim GenieRequest as Object
Dim RobbyRequest as Object
Dim Genie as Object
Dim Robby as Object

Sub FormLoad()
    MyAgentControl.Characters.Load "Genie", "Genie.acs"
    MyAgentControl.Characters.Load "Robby", "Robby.acs"

    Set Genie = MyAgentControl.Characters ("Genie")
    Set Robby = MyAgentControl.Characters ("Robby")

    Genie.Show
    Genie.Speak "Just a moment"
    Set GenieRequest = Genie.Play ("Processing")

    Robby.Show
    Robby.Play "confused"
    Robby.Speak "Hey, Genie. What are you doing?"
    Robby.Interrupt GenieRequest

    Genie.Speak "I was just checking on something."
End Sub</code>
				<h4 class="details">Details</h4>
				<para>
					You can only use the <c>Interrupt </c>method to interrupt <em>another </em>character. To stop
					an animation for a single character, use the <see cref="M:DoubleAgent.Control.Character.Stop" />
					method.
				</para>
				<note>
					The <c>Interrupt </c>method does not flush the character's queue; it halts the specified animation
					and moves on to the next animation in the character's queue. To halt and flush a character's queue,
					use that character's <see cref="M:DoubleAgent.Control.Character.StopAll" /> method.
				</note>
				<note>
					You cannot interrupt a character animation that you didn't start (that was started by another
					client).
				</note>
			</details>
			<seealso cref="M:DoubleAgent.Control.Character.Stop" prefix="The" suffix="Method" />
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.Listen">
			<summary>
				<para>
					Turns on <em>Listening mode</em> (speech recognition) for a timed period.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>Listen</c> (<em>Listen</em>, &amp;<em>StartedListening</em>)</para>
</cpp>
<csharp>
<para>[<em>StartedListening</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Listen</c> (<em>Listen</em>)</para>
</csharp>
<vbnet>
<para>[<em>StartedListening</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Listen</c> (<em>Listen</em>)</para>
</vbnet>
<vb>
<para>[<em>StartedListening</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Listen</c> <em>Listen</em></para>
</vb>
</syntax>
			<param name="Listen">
				A <c>boolean </c>value that determines whether to turn <em>Listening mode </em>
				on or off.
			</param>
			<returns name="StartedListening">
				<c>True </c>if <em>Listening mode </em>was started.
			</returns>
			<remarks>
				<para>
					Setting the <c>Listen </c>parameter to <c>True </c>enables <em>Listening mode</em> (turns
					on speech recognition) for a fixed period of time (10 seconds). While you cannot set the value of the
					time-out, you can turn off <em>Listening mode </em>before the time-out expires.
				</para>
				<para>
					If you (or another client) successfully set <em>Listening mode </em>on and you attempt to
					set this property to <c>True </c>before the time-out expires, the method succeeds and resets the
					time-out. However, if the <em>Listening mode </em>is on because the user is pressing the <em>Listening key</em>,
					the method succeeds, but the time-out is ignored and <em>Listening mode </em>ends based
					on the user's interaction with the <em>Listening key</em>.
				</para>
				<para>
					This method succeeds only when called by the input-active client and only if speech services
					are available. To detect the success of this method, call it as a function and it will return a boolean
					value indicating whether the method succeeded.
				</para>
				<example>
					<code xml:space="preserve">If Genie.Listen(True) Then
    ' The method succeeded
Else
    ' The method failed
End If</code>
				</example>
			</remarks>
			<details>
				<h4 class="details">Details</h4>
				<para>
					The method also fails if the user is pressing the <em>Listening key </em>and you attempt to
					set <c>Listen </c>to <c>False</c>. However, if the user has released the <em>Listening key </em>
					and <em>Listening mode </em>has not timed out, it will succeed.
				</para>
				<para>
					<c>Listen </c>also fails if there is no compatible speech engine available that matches the
					character's <see cref="P:DoubleAgent.Control.Character.LanguageID" /> setting, the user has disabled
					speech input using the Advanced Character Options window, or the audio device is busy.
				</para>
				<para>
					When you successfully set this method to <c>True</c>, the Double Agent triggers the <see cref="E:DoubleAgent.Control.Control.ListenStart" />
					event. Double Agent sends <see cref="E:DoubleAgent.Control.Control.ListenComplete" /> when the
					<em>Listening mode </em>time-out completes or when you set <c>Listen </c>to <c>False</c>.
				</para>
				<para>
					This method <em>does not </em>automatically call the <see cref="M:DoubleAgent.Control.Character.Stop" />
					method and play a <em>Listening </em>state animation as Double Agent does when the <em>Listening key </em>
					is pressed. This allows you to determine whether to interrupt the current animation for
					the <see cref="E:DoubleAgent.Control.Control.ListenStart" /> event by calling <see cref="M:DoubleAgent.Control.Character.Stop" />
					and playing your own appropriate animation. However, the Double Agent <em>does </em>call <see cref="M:DoubleAgent.Control.Character.Stop" />
					and plays a <em>Hearing </em>state animation when a user utterance is detected.
				</para>
			</details>
			<seealso cref="P:DoubleAgent.Control.Character.ListeningStatus" prefix="The" suffix="Property" />
			<seealso cref="E:DoubleAgent.Control.Control.ListenStart" prefix="The" suffix="Event" />
			<seealso cref="E:DoubleAgent.Control.Control.ListenComplete" prefix="The" suffix="Event" />
			<seealso cref="P:DoubleAgent.Control.Character.LanguageID" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.MoveTo">
			<summary>
				<para>Moves a character to the specified location.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>MoveTo</c> (<em>X</em>, <em>Y</em>, <em>Speed</em>, &amp;<em>Request</em>)</para>
</cpp>
<csharp>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>MoveTo</c> (<em>X</em>, <em>Y</em>, <em>Speed</em>)</para>
</csharp>
<vbnet>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>MoveTo</c> (<em>X</em>, <em>Y</em>, <em>Speed</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>MoveTo</c> <em>X</em>, <em>Y</em>[, <em>Speed</em>]</para>
</vb>
</syntax>
			<param name="X">The horizontal location, in pixels, relative to the left side of the screen.</param>
			<param name="Y">The vertical location, in pixels, relative to the top of the screen.</param>
			<param name="Speed">
				An optional <c>numeric </c>value specifying how quickly the character's image
				moves, in milliseconds. The default value is 1000. Specifying zero moves the image without playing an
				animation.
			</param>
			<returns name="Request">
				A <c>
					<see cref="T:DoubleAgent.Control.Request" />
				</c> object your application can used to track the method's status.
			</returns>
			<remarks>
				<para>
					The location of a character is based on the upper left corner of its image. Double Agent automatically
					plays the appropriate animation assigned to the <c>Moving </c>states.
				</para>
				<note>
					If you call <c>MoveTo </c>with a non-zero <c>Speed </c>before the character is shown, it will
					return a failure status if you assigned a <see cref="T:DoubleAgent.Control.Request" /> object,
					because the non-zero value indicates that you're attempting to play an animation when the character
					isn't visible.
				</note>
				<note>
					The <c>Speed </c>parameter's actual effect may vary based on the computer's processor speed
					and the priority of other tasks running on the system.
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.Play">
			<summary>
				<para>Plays the specified animation for a character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>GestureAt</c> ("<em>Animation</em>", &amp;<em>Request</em>)</para>
</cpp>
<csharp>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>GestureAt</c> ("<em>Animation</em>")</para>
</csharp>
<vbnet>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>GestureAt</c> ("<em>Animation</em>")</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>GestureAt</c> "<em>Animation</em>"</para>
</vb>
</syntax>
			<param name="Animation">
				A <c>string </c>value that specifies the name of an animation sequence.
			</param>
			<returns name="Request">
				A <c>
					<see cref="T:DoubleAgent.Control.Request" />
				</c> object your application can used to track the method's status.
			</returns>
			<remarks>
				<para>
					An animation's name is defined when the character is authored. Before playing the specified
					animation, Double Agent attempts to play the <c>Return </c>animation for the previous animation,
					if one has been assigned.
				</para>
				<para>
					The <c>Play </c>method does not make the character visible. If the character is not visible,
					Double Agent plays the animation invisibly, and sets the <see cref="P:DoubleAgent.Control.Request.Status" />
					property of the <see cref="T:DoubleAgent.Control.Request" /> object.
				</para>
				<para>
					When accessing a character's animations using a conventional file protocol, you can simply
					use the <c>Play </c>method specifying the name of the animation. However, if you're using the HTTP
					protocol to access character animation data, use the <see cref="M:DoubleAgent.Control.Character.Prepare" />
					method to load the animation before calling the <c>Play </c>method.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.Animations" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.Prepare">
			<summary>
				<para>Retrieves specified animation data for the a remote character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>Prepare</c> (<em>ResourceType</em>, "<em>Name</em>", <em>Queue</em>, &amp;<em>Request</em>)</para>
</cpp>
<csharp>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Prepare</c> (<em>ResourceType</em>, "<em>Name</em>", <em>Queue</em>)</para>
</csharp>
<vbnet>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Prepare</c> (<em>ResourceType</em>, "<em>Name</em>", <em>Queue</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Prepare</c> <em>ResourceType</em>, "<em>Name</em>"[, <em>Queue</em>]</para>
</vb>
</syntax>
			<param name="ResourceType">
				One of the following members of the <see cref="T:DoubleAgent.Control.PrepareResourceType" />
				enumeration:<include path="/doc/members/member[@name='T:DoubleAgent.Control.PrepareResourceType']/syntax" />
			</param>
			<param name="Name">
				A <c>string </c>that indicates the name of the animation resource.
				<list type="bullet">
					<item>For animations, the name is one of those defined for the character when it was authored.</item>
					<item>
						For states, the name is one of those defined for the character when it was authored. See the
						<see cref="P:DoubleAgent.Control.Character.States" /> property for details.
					</item>
					<item>
						For audio files, specify the location of the .WAV file. If an incomplete path is specified,
						it's interpreted as being relative to the location used in the <see cref="M:DoubleAgent.Control.Characters.Load" />
						method.
					</item>
					<item>
						You can specify multiple animations and states by separating them with commas. However, you
						cannot mix types in the same <c>Prepare </c>call.
					</item>
				</list>
			</param>
			<param name="Queue">
				A <c>boolean </c>value specifying whether the Double Agent queues the <c>Prepare</c>, or starts it immediately.
			</param>
			<returns name="Request">
				A <c>
					<see cref="T:DoubleAgent.Control.Request" />
				</c> object your application can used to track the method's status.
			</returns>
			<remarks>
				<para>
					If you load a character using the HTTP protocol (an .ACF file), you should use the <c>Prepare </c>
					method to retrieve animation data before you play the animation. You do not use this method
					if you loaded the character using the UNC protocol (an .ACS file).
				</para>
				<para>
					Using the <c>Prepare </c>method is <c>not </c>mandatory. If Double Agent requires an animation
					from an .ACS file, it will load the file automatically (from the same location the .ACF file was loaded).
					However, this may cause unexpected delays when using the HTTP protocol.
				</para>
				<para>
					You can declare an object reference and set it to the method's <see cref="T:DoubleAgent.Control.Request" />
					object return value. If the associated animation fails to load, Double Agent sets the <see cref="T:DoubleAgent.Control.Request" />
					object's <see cref="P:DoubleAgent.Control.Request.Status" /> property to 1 (Failed) with an appropriate
					error <see cref="P:DoubleAgent.Control.Request.Number" />. You can use the <see cref="E:DoubleAgent.Control.Control.RequestComplete" />
					event to check the status and determine what action to take.
				</para>
				<para>
					Animation or sound data retrieved with the <c>Prepare </c>method is cached locally. Subsequent
					calls will check the cache, and if the animation data is already there, the control loads the data directly
					from the cache. Once loaded, the animation or sound data can be played with the <see cref="M:DoubleAgent.Control.Character.Play" />
					or <see cref="M:DoubleAgent.Control.Character.Speak" /> methods.
				</para>
			</remarks>
			<seealso cref="T:DoubleAgent.Control.PrepareResourceType" suffix="Enumeration" prefix="The" />
			<seealso cref="M:DoubleAgent.Control.Characters.Load" prefix="The" suffix="Method" />
			<seealso cref="P:DoubleAgent.Control.Character.Animations" prefix="The" suffix="Property" />
			<seealso cref="P:DoubleAgent.Control.Character.States" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.Show">
			<summary>
				<para>
					Makes the specified character visible and optionally plays its associated <c>Showing </c>animation.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>Show</c> (<em>Fast</em>, &amp;<em>Request</em>)</para>
</cpp>
<csharp>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Show</c> (<em>Fast</em>)</para>
</csharp>
<vbnet>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Show</c> (<em>Fast</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Show</c>[ <em>Fast</em>]</para>
</vb>
</syntax>
			<param name="Fast">
				A <c>boolean </c>value specifying whether or not the <em>Showing </em>state animation
				is played.
			</param>
			<returns name="Request">
				A <c>
					<see cref="T:DoubleAgent.Control.Request" />
				</c> object your application can used to track the method's status.
			</returns>
			<remarks>
				<para>
					Avoid setting the <c>Fast </c>parameter to <c>True </c>without first playing an animation;
					otherwise, the character may be shown with no image. In particular, note that if you call <see cref="M:DoubleAgent.Control.Character.MoveTo" /> when
					the character is not visible, it <em>does not </em>play any animation. Therefore, if you call the
					<c>Show </c>method with <c>Fast </c>set to <c>True</c>, no image will display. Similarly, if you
					call <see cref="M:DoubleAgent.Control.Character.Hide" />, then <c>Show </c>with <c>Fast </c>set
					to <c>True</c>, there will be no visible image.
				</para>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Character.Hide" prefix="The" suffix="Method" />
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.ShowPopupMenu">
			<summary>
				<para>Displays a character's pop-up menu at the specified location.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>ShowPopupMenu</c> (<em>X</em>, <em>Y</em>, &amp;<em>Showed</em>)</para>
</cpp>
<csharp>
<para>[<em>Showed</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>ShowPopupMenu</c> (<em>X</em>, <em>Y</em>)</para>
</csharp>
<vbnet>
<para>[<em>Showed</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>ShowPopupMenu</c> (<em>X</em>, <em>Y</em>)</para>
</vbnet>
<vb>
<para>[<em>Showed</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>ShowPopupMenu</c> <em>X</em>, <em>Y</em></para>
</vb>
</syntax>
			<param name="X">The horizontal screen coordinate to display the menu, in pixels.</param>
			<param name="Y">The vertical screen coordinate to display the menu, in pixels.</param>
			<returns name="Showed">
				<c>True </c>if the method succeeded.
			</returns>
			<remarks>
				<para>
					If the <see cref="P:DoubleAgent.Control.Character.AutoPopupMenu" /> property is set to <c>True</c>,
					Double Agent automatically displays the character's pop-up menu when the user right-clicks
					the character. If you set <see cref="P:DoubleAgent.Control.Character.AutoPopupMenu" /> to <c>False</c>,
					you can use <c>ShowPopupMenu </c>to display the menu.
				</para>
				<para>
					The menu remains displayed until the user selects a command or displays another menu. Only
					one pop-up menu can be displayed at a time; therefore, calls to this method will cancel (remove) the
					former menu.
				</para>
				<para>
					This method should be called only when your client application is the active client of the
					character; otherwise it fails. To determine the success of this method you can call it as a function
					and it will return a boolean value indicating whether the method succeeded.
				</para>
				<example>
					<code xml:space="preserve">If Genie.ShowPopupMenu (10,10) = True Then
    ' The menu was displayed
Else
    ' The menu was not displayed
End If</code>
				</example>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.AutoPopupMenu" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.Speak">
			<summary>
				<para>Speaks the specified text or sound file for a character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>Speak</c> (<em>Text</em>, <em>Url</em>, &amp;<em>Request</em>)</para>
</cpp>
<csharp>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Speak</c> (<em>Text</em>, <em>Url</em>)</para>
</csharp>
<vbnet>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Speak</c> (<em>Text</em>, <em>Url</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Speak</c> [<em>Text</em>], [<em>Url</em>]</para>
</vb>
</syntax>
			<param name="Text">
				A <c>string </c>value that specifies what the character says.
			</param>
			<param name="Url">
				A <c>string </c>value specifying the location of an audio file (.WAV format). The
				location can be specified as a file (including a UNC path specification) or URL (when character animation
				data is also being retrieved via HTTP protocol).
			</param>
			<returns name="Request">
				A <c>
					<see cref="T:DoubleAgent.Control.Request" />
				</c> object your application can used to track the method's status.
			</returns>
			<remarks>
				<para>
					At least one of the <em>Text </em>and <em>Url </em>parameters must be supplied. To use this
					method with a character configured to speak only in its word balloon or using a text-to-speech (TTS)
					engine, simply provide the <em>Text </em>parameter. Include a space between words to define appropriate
					word breaks in the word balloon, even for languages that do not traditionally include spaces.
				</para>
				<para>
					You can also include vertical bar '|' characters in the <em>Text </em>parameter to designate
					alternative strings, so that Double Agent randomly chooses a different string each time it processes
					the method.
				</para>
			</remarks>
			<details>
				<h4 class="details">Text-To-Speech</h4>
				<para>
					Support for TTS output is defined when the character is authored. To generate TTS output, a
					compatible TTS engine must already be installed before calling this method. For further information,
					see <a href="Ctl_Programming_Speech.htm">Accessing Speech Services</a>.
				</para>
				<para>
					Unlike Microsoft Agent, Double Agents supports the <c>Speak </c>method for characters that
					are not designed to speak. However, there won't be any mouth animations because they aren't included
					in the character design.
				</para>
				<para>
					You can vary parameters of the speech output with special tags that you include in the <em>
						Text
					</em>parameter. For more information, see <a href="MsAgent.chm::/hh/msagent/spoutput_2v1w.htm">
						Microsoft Agent Speech Output Tags
					</a>.
				</para>
				<example>
					<para>
						You can also include bookmark speech tags in your <c>Speak </c>text to synchronize your code:
					</para>
					<code xml:space="preserve">Dim SpeakRequest as Object
...
Set SpeakRequest = Genie.Speak ("And here \mrk=100\it is.")
...
Sub AgentControl_Bookmark (ByVal BookmarkID As Long)
   If BookmarkID = 100 Then
       ' Display the message box 
       Msgbox "Tada!"
    End If
End Sub</code>For
					more information on the bookmark speech tag, see <a href="MsAgent.chm::/hh/msagent/spoutput_2v1w.htm">
						Speech Output Tags
					</a>.
				</example>
				<para>
					Agent's automatic word breaking in the word balloon breaks words using white-space characters
					(for example, Space or Tab). However, if it cannot, it may break a word to fit the balloon. In languages
					like Japanese, Chinese, and Thai, where spaces are not used to break words, insert a Unicode zero-width
					space character (0x200B) between characters to define logical word breaks.
				</para>
				<h4 class="details">Sound Files</h4>
				<para>
					If you use recorded sound file (.WAV format only) output for the character, specify the file's
					location in the <em>Url </em>parameter. This file specification can include a local (absolute or
					relative) or universal naming convention (UNC) path. The filename cannot include any characters not
					included in the US code page 1252. However, if you are using the HTTP protocol to access the character
					data, use the <see cref="M:DoubleAgent.Control.Character.Prepare" /> method to load the sound file
					before calling the <c>Speak </c>method.
				</para>
				<para>
					When using recorded sound file output, you can still use the <em>Text </em>parameter to specify
					the words that appear in the character's word balloon.
				</para>
				<para>
					If you call <c>Speak </c>and the audio channel is busy, the character's audio output will
					not be heard, but the text will display in the word balloon.
				</para>
				<h4 class="details">Animation</h4>
				<para>
					The <c>Speak </c>method uses the last action played to determine which speaking animation
					to play. For example, if you preceded the <c>Speak </c>command with <c>Play</c>"GestureRight",
					Double Agent will play <em>GestureRight </em>and then the <em>GestureRight </em>speaking animation.
					If the last animation played has no speaking animation, Double Agent plays the animation assigned to
					the character's <em>Speaking </em>state.
				</para>
				<br />
				<note>
					To track the method's status, you can declare an object reference and set it to the method's
					<see cref="T:DoubleAgent.Control.Request" /> object return value.
				</note>
				<note>
					The word balloon's <see cref="P:DoubleAgent.Control.Balloon.Enabled" /> property must also
					be <c>True </c>for text to display.
				</note>
				<note>
					Set the character's <see cref="P:DoubleAgent.Control.Character.LanguageID" /> before using
					the <c>Speak </c>method to ensure appropriate text display within the word balloon.
				</note>
			</details>
			<seealso cref="P:DoubleAgent.Control.Character.LanguageID" prefix="The" suffix="Property" />
			<seealso cref="E:DoubleAgent.Control.Control.Bookmark" prefix="The" suffix="Event" />
			<seealso cref="E:DoubleAgent.Control.Control.RequestStart" prefix="The" suffix="Event" />
			<seealso cref="E:DoubleAgent.Control.Control.RequestComplete" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.Stop">
			<summary>
				<para>Stops an animation for a character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>Stop</c> (<em>Request</em>)</para>
</cpp>
<csharp>
<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Stop</c> (<em>Request</em>)</para>
</csharp>
<vbnet>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Stop</c> (<em>Request</em>)</para>
</vbnet>
<vb>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Stop</c> <em>Request</em></para>
</vb>
</syntax>
			<param name="Request">
				A <c>
					<see cref="T:DoubleAgent.Control.Request" />
				</c> object specifying a particular animation call, or a null reference to stop all animations.
			</param>
			<remarks>
				<para>
					To specify the request parameter, you must create a variable and assign the animation request
					you want to stop. If you don't set the <c>Request </c>parameter, Double Agent stops all animations
					for the character, including queued <see cref="M:DoubleAgent.Control.Character.Prepare" /> calls,
					and clears its animation queue (unless the character is currently playing its <c>Hiding </c>or
					<c>Showing </c>animation). This method <em>does not </em>stop non-queued <see cref="M:DoubleAgent.Control.Character.Prepare" /> calls.
				</para>
				<example>
					<para>
						To stop a specific animation or <see cref="M:DoubleAgent.Control.Character.Prepare" /> call,
						declare an object variable and assign your animation request to that variable:
					</para>
					<code xml:space="preserve">Dim MyRequest
Dim Genie

AgentControl.Characters.Load "Genie", "Genie.acs"

Set Genie = AgentControl.Characters ("Genie")
Genie.Show

'This animation will never play
Set MyRequest = Genie.Play ("Greet")

Genie.Stop MyRequest</code>
				</example>
				<para>
					This method is performed immediately and does not generate a <see cref="T:DoubleAgent.Control.Request" />
					object.
				</para>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Character.StopAll" prefix="The" suffix="Method" />
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.StopAll">
			<summary>
				<para>Stops all animation requests or specified types of requests for a character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>StopAll</c> (<em>Types</em>)</para>
</cpp>
<csharp>
<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>StopAll</c> (<em>Types</em>)</para>
</csharp>
<vbnet>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>StopAll</c> (<em>Types</em>)</para>
</vbnet>
<vb>
<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>StopAll</c> [<em>Types</em>]</para>
</vb>
</syntax>
			<param name="Types">
				You can omit this parameter you or use any combination of the following members
				of the <see cref="T:DoubleAgent.Control.StopAllFlags" /> enumeration:<include path="/doc/members/member[@name='T:DoubleAgent.Control.StopAllFlags']/syntax" />
				<para>
					You can use a <c>string </c>value instead, with one or more of the following values, separating
					with commas:
				</para>
				<list type="table">
					<item>
						<term>"Play"</term>
						<description>StopAllFlags.Play</description>
					</item>
					<item>
						<term>"Move"</term>
						<description>StopAllFlags.Move</description>
					</item>
					<item>
						<term>"Speak"</term>
						<description>StopAllFlags.Speak</description>
					</item>
					<item>
						<term>"QueuedPrepare" (or "Get" for compatibility)</term>
						<description>StopAllFlags.QueuedPrepare</description>
					</item>
					<item>
						<term>"ImmediatePrepare" (or "NonQueuedGet" for compatibility)</term>
						<description>StopAllFlags.ImmediatePrepare</description>
					</item>
					<item>
						<term>"Visibility" or "Visible"</term>
						<description>StopAllFlags.Visibility</description>
					</item>
					<item>
						<term>"Everything" or "All"</term>
						<description>StopAllFlags.Everything</description>
					</item>
				</list>
			</param>
			<remarks>
				<para>
					If you don't set the <c>Type </c>parameter, Double Agent stops all animations for the character,
					including queued and non-queued <see cref="M:DoubleAgent.Control.Character.Prepare" /> requests,
					and clears its animation queue. It also stops playing a character's <c>Hiding </c>or <c>Showing </c>
					animation.
				</para>
				<para>
					This method is performed immediately and does not generate a <see cref="T:DoubleAgent.Control.Request" />
					object.
				</para>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Character.Stop" prefix="The" suffix="Method" />
			<seealso cref="T:DoubleAgent.Control.StopAllFlags" prefix="The" suffix="Enumeration" />
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.Think">
			<summary>
				<para>
					Displays the specified text in a character's <em>thought </em>balloon.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>Think</c> (<em>Text</em>, &amp;<em>Request</em>)</para>
</cpp>
<csharp>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Think</c> (<em>Text</em>)</para>
</csharp>
<vbnet>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Think</c> (<em>Text</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Think</c> <em>Text</em></para>
</vb>
</syntax>
			<param name="Text">
				A <c>string </c>value that specifies the character's thought output.
			</param>
			<returns name="Request">
				A <c>
					<see cref="T:DoubleAgent.Control.Request" />
				</c> object your application can used to track the method's status.
			</returns>
			<remarks>
				<para>
					Like the <see cref="M:DoubleAgent.Control.Character.Speak" /> method, the <c>Think </c>method
					is a queued request that displays text in a word balloon, except that the <c>Think </c>word balloon
					differs visually. In addition, the balloon supports only the Bookmark speech control tag (<c>\Mrk</c>)
					and ignores any other speech control tags. Unlike <see cref="M:DoubleAgent.Control.Character.Speak" />,
					the <c>Think </c>method does not change the character's animation state.
				</para>
				<para>
					The <see cref="T:DoubleAgent.Control.Balloon" /> object's properties affect the output of
					both the <see cref="M:DoubleAgent.Control.Character.Speak" /> and <c>Think </c>methods. For example,
					the <see cref="T:DoubleAgent.Control.Balloon" /> object's <see cref="P:DoubleAgent.Control.Balloon.Enabled" />
					property must be <c>True </c>for text to display.
				</para>
				<para>
					Agent's automatic word breaking in the word balloon breaks words using white-space characters
					(for example, SPACE or TAB). However, if it cannot, it may break a word to fit the balloon. In languages
					like Japanese, Chinese, and Thai where spaces are not used to break words, insert a Unicode zero-width
					space character (0x200B) between characters to define logical word breaks.
				</para>
				<note>
					To track the method's status, you can declare an object reference and set it to the method's
					<see cref="T:DoubleAgent.Control.Request" /> object return value.
				</note>
				<note>
					Set the character's <see cref="P:DoubleAgent.Control.Character.LanguageID" /> before using
					the <c>Think </c>method to ensure appropriate text display within the word balloon.
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.LanguageID" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Character.Wait">
			<summary>
				<para>
					Causes the animation queue for the specified character to wait until the specified animation
					request completes.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>Wait</c> (<em>WaitRequest</em>, &amp;<em>Request</em>)</para>
</cpp>
<csharp>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Wait</c> (<em>WaitRequest</em>)</para>
</csharp>
<vbnet>
<para>[<em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Wait</c> (<em>WaitRequest</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Request</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Wait</c> <em>WaitRequest</em></para>
</vb>
</syntax>
			<param name="WaitRequest">
				A <c>
					<see cref="T:DoubleAgent.Control.Request" />
				</c> object specifying the animation to wait for.
			</param>
			<returns name="Request">
				A <c>
					<see cref="T:DoubleAgent.Control.Request" />
				</c> object your application can used to track the method's status.
			</returns>
			<remarks>
				<para>
					Use this method only when you are using multiple (simultaneous) characters and are trying to
					sequence the interaction of characters. (For a single character, each animation request is played sequentially--after
					the previous request completes.)
				</para>
				<para>
					If you have two characters and you want one character's animation request to wait until the
					other character's animation completes, use the <c>Wait </c>method with the other character's animation
					<see cref="T:DoubleAgent.Control.Request" /> object.
				</para>
				<example>
					<para>
						To specify the request parameter, create a variable for animation request you want to wait
						for:
					</para>
					<code xml:space="preserve">Dim GenieRequest
Dim RobbyRequest
Dim Genie
Dim Robby

Sub window_Onload
    AgentControl.Characters.Load "Genie", "Genie.acs"
    AgentControl.Characters.Load "Robby", "Robby.acs"

    Set Genie = AgentControl.Characters("Genie")
    Set Robby = AgentControl.Characters("Robby")

    Genie.MoveTo 100,100
    Genie.Show

    Robby.MoveTo 250,100
    Robby.Show

    Genie.Play "Announce"
    Set GenieRequest = Genie.Speak ("Why did the chicken cross the road?")

    Robby.Wait GenieRequest
    Robby.Play "Confused"
    Set RobbyRequest = Robby.Speak ("I don't know. Why did the chicken cross the road?")

    Genie.Wait RobbyRequest
    Genie.Play "Pleased"
    Set GenieRequest = Genie.Speak ("To get to the other side.")

    Robby.Wait GenieRequest
    Robby.Play "Sad"
    Robby.Speak "I never should have asked."
End Sub</code>
				</example>
				<example>
					<para>
						You can also streamline your code by just calling <c>Wait </c>directly, using a specific
						animation request.
					</para>
					<code xml:space="preserve">
Robby.Wait Genie.Play "GestureRight"
</code>
					<para>
						This avoids having to explicitly declare a <see cref="T:DoubleAgent.Control.Request" /> object.
					</para>
				</example>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Active">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Character.ActiveState" />
					property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.ActiveState">
			<summary>
				<para>
					Returns whether your application is the active client of the character and whether the character
					is input-active.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_ActiveState</c> (&amp;<em>ActiveState</em>)</para>
</cpp>
<csharp>
<para>[<em>ActiveState</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>ActiveState</c></para>
</csharp>
<vb>
<para>[<em>ActiveState</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>ActiveState</c></para>
</vb>
</syntax>
			<value name="ActiveState">
				An value from the <see cref="T:DoubleAgent.Control.ActiveStateType" />
				enumeration indicating the state of the character and your client application:<include path="/doc/members/member[@name='T:DoubleAgent.Control.ActiveStateType']/syntax" />
			</value>
			<remarks>
				<para>
					When multiple client applications share the same character, the active client of the character
					receives mouse input (for example, Double Agent control <c>Click </c>or <c>Drag </c>events). Similarly,
					when multiple characters are displayed, the active client of the topmost character (also known as the
					input-active client) receives Command events.
				</para>
				<para>
					You can use the <see cref="M:DoubleAgent.Control.Character.Activate" /> method to set whether
					your application is the active client of the character or to make your application the input-active
					client (which also makes the character topmost).
				</para>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Character.Activate" prefix="The" suffix="Method" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.AnimationNames">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Character.Animations" />
					property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Animations">
			<summary>
				<para>Returns the names of the character's animations.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_Animations</c> (&amp;<em>Animations</em>)</para>
</cpp>
<csharp>
<para>[<em>Animations</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Animations</c></para>
</csharp>
<vb>
<para>[<em>Animations</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Animations</c></para>
</vb>
</syntax>
			<value name="Animations">
				An array of <c>string </c>values that name all of the animations the character
				can play.
			</value>
			<remarks>
				<para>
					For .ACF characters, the array contains all the animations defined for the character, not just
					the ones that have been retrieved with the <see cref="M:DoubleAgent.Control.Character.Prepare" />
					method.
				</para>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Character.Play" suffix="Method" prefix="The" />
			<seealso cref="M:DoubleAgent.Control.Character.Prepare" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.AutoPopupMenu">
			<summary>
				<para>
					Returns or sets whether right-clicking the character or its taskbar icon automatically displays
					the character's pop-up menu.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_AutoPopupMenu</c> (&amp;<em>Enabled</em>)</para>

<para><em>character</em>.<c>put_AutoPopupMenu</c> (<em>Enabled</em>)</para>
</cpp>
<csharp>
<para>[<em>Enabled</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>AutoPopupMenu</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>AutoPopupMenu</c> = <em>Enabled</em></para>
</csharp>
<vb>
<para>[<em>Enabled</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>AutoPopupMenu</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>AutoPopupMenu</c> = <em>Enabled</em></para>
</vb>
</syntax>
			<value name="Enabled">
				A <c>boolean </c>value specifying whether Double Agent automatically displays
				the character's pop-up menu on right-click.
			</value>
			<remarks>
				<para>
					By setting this property to <c>False</c>, you can create your own menu-handling behaviour.
					To display the menu after setting this property to <c>False</c>, use the <see cref="M:DoubleAgent.Control.Character.ShowPopupMenu" />
					method.
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ThisClientOnly']" />
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.Style" suffix="Property" prefix="The" />
			<seealso cref="M:DoubleAgent.Control.Character.ShowPopupMenu" prefix="The" suffix="Method" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Balloon">
			<summary>
				<para>
					Retrieves the character's <see cref="T:DoubleAgent.Control.Balloon" suffix="Object" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>-&gt;<c>get_Balloon</c> (&amp;<em>Balloon</em>)</para>
</cpp>
<csharp>
<para>[<em>Balloon</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c></para>
</csharp>
<vbnet>
<para>[<em>Balloon</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c></para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Balloon</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c></para>
</vb>
</syntax>
			<value name="Balloon">
				The character's <c>
					<see cref="T:DoubleAgent.Control.Balloon" suffix="Object" />
				</c>.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.CharacterID">
			<summary>
				<para>
					The unique string that identifies the <see cref="T:DoubleAgent.Control.Character" suffix="Object" />
					in the <see cref="T:DoubleAgent.Control.Characters" suffix="Collection" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_CharacterID</c> (&amp;<em>CharacterID</em>)</para>
</cpp>
<csharp>
<para>[<em>CharacterID</em> = ]<em>character</em>.<c>CharacterID</c></para>
</csharp>
<vb>
<para>[<em>CharacterID</em> = ]<em>character</em>.<c>CharacterID</c></para>
</vb>
</syntax>
			<value name="CharacterID">
				A <c>string </c>value that identifies the <see cref="T:DoubleAgent.Control.Character" suffix="Object" />.
			</value>
			<remarks>
				<para>
					When you keep a reference to a <see cref="T:DoubleAgent.Control.Character" suffix="Object" />
					object, you can use this property to relate it back to it's owner <see cref="T:DoubleAgent.Control.Characters" suffix="Collection" />.
				</para>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Characters.Load" suffix="Method" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Characters.Item" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Commands">
			<summary>
				<para>
					Retrieves the character's <see cref="T:DoubleAgent.Control.Commands" suffix="Collection" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>-&gt;<c>get_Commands</c> (&amp;<em>Commands</em>)</para>
</cpp>
<csharp>
<para>[<em>Commands</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c></para>
</csharp>
<vbnet>
<para>[<em>Commands</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c></para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Commands</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c></para>
</vb>
</syntax>
			<value name="Commands">
				The character's <c>
					<see cref="T:DoubleAgent.Control.Commands" suffix="Collection" />
				</c>.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Connected">
			<summary>
				<para></para>
			</summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Description">
			<summary>
				<para>Returns or sets a string that specifies the description for the specified character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_Description</c> (&amp;<em>Description</em>)</para>

<para><em>character</em>.<c>put_Description</c> (<em>Description</em>)</para>
</cpp>
<csharp>
<para>[<em>Description</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Description</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Description</c> = "<em>Description</em>"</para>
</csharp>
<vb>
<para>[<em>Description</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Description</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Description</c> = "<em>Description</em>"</para>
</vb>
</syntax>
			<value name="Description">
				A <c>string </c>value corresponding to the character's description (in
				the current language setting).
			</value>
			<remarks>
				<para>
					A character's <c>Description </c>may depend on the character's <see cref="P:DoubleAgent.Control.Character.LanguageID" />
					setting. A character's description in one language may be different or use different characters than
					in another. The character's default <c>Description </c>for a specific language is defined when the
					character is compiled with the Microsoft Agent Character Editor.
				</para>
				<note>
					The <c>Description </c>property is optional and may not be supplied for all characters.
				</note>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='AllClients']" />
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.ExtraData">
			<summary>
				<para>Returns a string that specifies additional data stored as part of the character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_ExtraData</c> (&amp;<em>ExtraData</em>)</para>
</cpp>
<csharp>
<para>[<em>ExtraData</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>ExtraData</c></para>
</csharp>
<vb>
<para>[<em>ExtraData</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>ExtraData</c></para>
</vb>
</syntax>
			<value name="ExtraData">
				A <c>string </c>that contains any additional data stored as part of the character.
			</value>
			<remarks>
				<para>
					The default value for the <c>ExtraData </c>property for a character is defined when the character
					is compiled with the Microsoft Agent Character Editor. It cannot be changed or specified at run time.
				</para>
				<note>
					The <c>ExtraData </c>property setting is optional and may not be supplied for all characters.
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.FileName">
			<summary>
				<para>Returns the name of the character's definition file.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_FileName</c> (&amp;<em>FileName</em>)</para>
</cpp>
<csharp>
<para>[<em>FileName</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>FileName</c></para>
</csharp>
<vb>
<para>[<em>FileName</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>FileName</c></para>
</vb>
</syntax>
			<value name="FileName">
				A <c>string </c>value that contains the character's definition file name.
			</value>
			<remarks>
				<para>
					This is the name of the file that was used to <see cref="M:DoubleAgent.Control.Characters.Load" />
					the character.
				</para>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Characters.Load" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.FilePath">
			<summary>
				<para>Returns the full path (UNC or HTTP) of the character's definition file.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_FilePath</c> (&amp;<em>FilePath</em>)</para>
</cpp>
<csharp>
<para>[<em>FilePath</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>FilePath</c></para>
</csharp>
<vb>
<para>[<em>FilePath</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>FilePath</c></para>
</vb>
</syntax>
			<value name="FilePath">
				A <c>string </c>value that contains the character's definition file path.
			</value>
			<remarks>
				<para>
					This is the full path of the file that was used to <see cref="M:DoubleAgent.Control.Characters.Load" />
					the character.
				</para>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Characters.Load" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.GUID">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Character.UniqueID" />
					property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.HasIcon">
			<summary>
				<para>Indicates if the character has a notification icon in its definition.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_HasIcon</c> (&amp;<em>HasIcon</em>)</para>
</cpp>
<csharp>
<para>[<em>HasIcon</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>HasIcon</c></para>
</csharp>
<vb>
<para>[<em>HasIcon</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>HasIcon</c></para>
</vb>
</syntax>
			<value name="HasIcon">
				A <c>boolean </c>value that indicates if the character definition includes
				a notification icon.
			</value>
			<remarks>
				<para>
					If the character definition does not include an icon (or even if it does) you can use the
					<see cref="M:DoubleAgent.Control.Character.GenerateIcon" /> method to create an icon from the character's
					animations.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.IconShown" suffix="Property" prefix="The" />
			<seealso cref="M:DoubleAgent.Control.Character.GenerateIcon" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.HasOtherClients">
			<summary>
				<para>Returns whether the specified character is in use by other applications.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_HasOtherClients</c> (&amp;<em>HasOtherClients</em>)</para>
</cpp>
<csharp>
<para>[<em>HasOtherClients</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>HasOtherClients</c></para>
</csharp>
<vb>
<para>[<em>HasOtherClients</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>HasOtherClients</c></para>
</vb>
</syntax>
			<value name="HasOtherClients">
				A <c>boolean </c>value that indicates if another client application
				is using this character.
			</value>
			<remarks>
				<para>
					You can use this property to determine if your application is the character's only client,
					or if another application is sharing (has loaded) the same character.
				</para>
				<note>
					If your application uses multiple instances of the <see cref="T:DoubleAgent.Control.Control" suffix="Object" />,
					each instance is a treated as a different client and this property will return <c>True</c>.
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Height">
			<summary>
				<para>Returns or sets the height of the specified character's image.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_Height</c> (&amp;<em>Height</em>)</para>

<para><em>character</em>.<c>put_Height</c> (<em>Height</em>)</para>
</cpp>
<csharp>
<para>[<em>Height</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Height</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Height</c> = <em>Height</em></para>
</csharp>
<vb>
<para>[<em>Height</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Height</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Height</c> = <em>Height</em></para>
</vb>
</syntax>
			<value name="Height">
				A <c>numeric </c>value that specifies the character's image height.
			</value>
			<remarks>
				<para>
					The <c>Height </c>property is always expressed in pixels.
				</para>
				<para>
					Even though the character appears in an irregularly shaped region window, the height of the
					character is based on the external dimensions of the rectangular animation frame used when the character
					was compiled with the Microsoft Agent Character Editor.
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='AllClients']" />
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.HelpContextID">
			<summary>Not Implemented</summary>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.HelpFile">
			<summary>Not Implemented</summary>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.HelpModeOn">
			<summary>Not Implemented</summary>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.IconIdentity">
			<summary>
				<para>
					Specifies the identity that Windows will use to remember the character's notification icon.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_IconIdentity</c> (&amp;<em>IconIdentity</em>)</para>

<para><em>character</em>.<c>put_IconIdentity</c> (<em>IconIdentity</em>)</para>
</cpp>
<csharp>
<para>[<em>IconIdentity</em> =] <em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>IconIdentity</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>IconIdentity</c> = <em>IconIdentity</em></para>
</csharp>
<vb>
<para>[<em>IconIdentity</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>IconIdentity</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>IconIdentity</c> = <em>IconIdentity</em></para>
</vb>
</syntax>
			<value name="IconIdentity">
				A <c>string </c>value that allows Windows to uniquely identify this character's
				notification icon. It must be either a value GUID string or an empty string.
			</value>
			<remarks>
				<para>
					Every notification icon has an identity that allows Windows to remember it's state (shown,
					hidden, active, etc.). By default, Windows associates a notification icon with the application that
					creates it.
				</para>
				<para>You can either supply a GUID identifier, or an empty string to use the default identity.</para>
				<list type="bullet">
					<item>
						If the character was loaded by the Double Agent server, it's notification will be associated
						with the server by default.
					</item>
					<item>
						If you're using the control in stand-alone mode, the character's notification will be associated
						with your client application by default.
					</item>
					<item>
						You can supply a <em>single </em>GUID for all characters you load. All of their notification
						icons will be associated with that single identity.
					</item>
					<item>
						You can supply a <em>unique </em>GUID for each character you load. Windows will then identify
						each character's notification icon uniquely.
					</item>
				</list>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ThisClientOnly']" />
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.IconShown" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.IconShown">
			<summary>
				<para>Specifies if the character's notification icon is shown in the Windows notification area.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_IconShown</c> (&amp;<em>IconShown</em>)</para>

<para><em>character</em>.<c>put_IconShown</c> (<em>IconShown</em>)</para>
</cpp>
<csharp>
<para>[<em>IconShown</em> =] <em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>IconShown</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>IconShown</c> = <em>IconShown</em></para>
</csharp>
<vb>
<para>[<em>IconShown</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>IconShown</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>IconShown</c> = <em>IconShown</em></para>
</vb>
</syntax>
			<value name="IconShown">
				A <c>boolean </c>value that indicates if the icon is shown.
			</value>
			<remarks>
				<para>
					This property only specifies if the notification icon is added to the Windows notification
					area. The user decides whether it's visible or hidden. See the <see cref="P:DoubleAgent.Control.Character.IconIdentity" />
					property for more details.
				</para>
				<note>This property has no effect if the character doesn't have a notification icon.</note>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ThisClientOnly']" />
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.Style" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Character.HasIcon" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Character.IconVisible" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Character.IconIdentity" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Character.IconTip" suffix="Property" prefix="The" />
			<seealso cref="M:DoubleAgent.Control.Character.GenerateIcon" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.IconTip">
			<summary>
				<para>Specifies the tip text associated with the character's notification icon.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_IconTip</c> (&amp;<em>IconTip</em>)</para>

<para><em>character</em>.<c>put_IconTip</c> (<em>IconTip</em>)</para>
</cpp>
<csharp>
<para>[<em>IconTip</em> =] <em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>IconTip</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>IconTip</c> = <em>IconTip</em></para>
</csharp>
<vb>
<para>[<em>IconTip</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>IconTip</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>IconTip</c> = <em>IconTip</em></para>
</vb>
</syntax>
			<value name="IconTip">
				A <c>string </c>value that specifies the icon's tip text. An empty string means
				that the default tip (the character's name) is used.
			</value>
			<remarks>
				<para>
					By default, the character's name is shown in the notification icon tip. You can use this property
					to show your own tip.
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ThisClientOnly']" />
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.IconShown" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Character.IconVisible" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Character.Name" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.IconVisible">
			<summary>
				<para>Indicates if the character has an icon in the Windows notification area.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_IconVisible</c> (&amp;<em>IconVisible</em>)</para>
</cpp>
<csharp>
<para>[<em>IconVisible</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>IconVisible</c></para>
</csharp>
<vb>
<para>[<em>IconVisible</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>IconVisible</c></para>
</vb>
</syntax>
			<value name="IconVisible">
				A <c>boolean </c>value that indicates if the character is showing a notification
				icon.
			</value>
			<remarks>
				<para>
					This property only indicates if the notification icon has been created. The user decides if
					the icon is actually visible or hidden.
				</para>
				<para>
					The <see cref="P:DoubleAgent.Control.Character.IconShown" /> property only applies to your
					client application, so it is only in effect when you application is the character's active client. When
					your application is <em>not </em>the character's active client, you can use this property to determine
					if another client has shown or hidden the notification icon.
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='AllClients']" />
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.IconShown" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Character.IconIdentity" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.IdleEnabled">
			<summary>
				<para>
					Returns or sets whether the character will show its <em>Idling </em>animations when it's not
					busy.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_IdleEnabled</c> (&amp;<em>IdleEnabled</em>)</para>

<para><em>character</em>.<c>put_IdleEnabled</c> (<em>IdleEnabled</em>)</para>
</cpp>
<csharp>
<para>[<em>IdleEnabled</em> =] <em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>IdleEnabled</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>IdleEnabled</c> = <em>IdleEnabled</em></para>
</csharp>
<vb>
<para>[<em>IdleEnabled</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>IdleEnabled</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>IdleEnabled</c> = <em>IdleEnabled</em></para>
</vb>
</syntax>
			<value name="IdleEnabled">
				A <c>boolean </c>value specifying whether Double Agent manages idle mode.
			</value>
			<remarks>
				<para>
					Double Agent automatically sets a time-out after the last animation played for a character.
					When this timer's interval is complete, Double Agent begins the <em>Idling </em>state for a character,
					playing its associated <em>Idling </em>animations at regular intervals. If you want to disable Double
					Agent from automatically playing the <em>Idling </em>state animations, set the property to <c>False </c>
					and play an animation or call the <see cref="M:DoubleAgent.Control.Character.Stop" /> method.
					Setting this value does not affect the current animation state of the character.
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ThisClientOnly']" />
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.Style" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Character.IdleState" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.IdleOn">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Character.IdleEnabled" />
					property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.IdleState">
			<summary>
				<para>
					Indicates if the character is currently playing its <em>Idling </em>animations.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_IdleState</c> (&amp;<em>IdleState</em>)</para>
</cpp>
<csharp>
<para>[<em>IdleState</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>IdleState</c></para>
</csharp>
<vb>
<para>[<em>IdleState</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>IdleState</c></para>
</vb>
</syntax>
			<value name="IdleState">
				A <c>boolean </c>value that indicates if the character is idling.
			</value>
			<remarks>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='AllClients']" />
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.IdleEnabled" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.LanguageID">
			<summary>
				<para>Returns or sets the language identifier for the character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_LanguageID</c> (&amp;<em>LanguageID</em>)</para>

<para><em>character</em>.<c>put_LanguageID</c> (<em>LanguageID</em>)</para>
</cpp>
<csharp>
<para>[<em>LanguageID</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>LanguageID</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>LanguageID</c> = <em>LanguageID</em></para>
</csharp>
<vb>
<para>[<em>LanguageID</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>LanguageID</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>LanguageID</c> = <em>LanguageID</em></para>
</vb>
</syntax>
			<value name="LanguageID">
				A <c>numeric </c>value specifying the language ID for the character. The
				language ID (LANGID) for a character is a 16-bit value defined by Windows, consisting of a primary language
				ID and a secondary language ID.
			</value>
			<remarks>
				<para>
					If you do not set the <c>LanguageID </c>for the character, its language will be the current
					system language, if the corresponding Agent language DLL is installed. Otherwise, the character's language
					will be English (US).
				</para>
				<para>
					This property also determines the language for word balloon text, the commands in the character's
					pop-up menu, and the speech recognition engine. It also determines the default language for text-to-speech
					output.
				</para>
			</remarks>
			<details>
				<h4 class="details">Details</h4>
				<para>
					If you try to set the <c>LanguageID </c>for a character and the Agent language DLL for that
					language is not installed or a display font for the language is not available, Agent raises an error
					and <c>LanguageID </c>remains at its last setting.
				</para>
				<para>
					Setting this property does not raise an error if there are no matching speech engines for the
					language. To determine if there is a compatible speech engine available for the <c>LanguageID</c>,
					check <see cref="P:DoubleAgent.Control.Character.SRModeID" /> or <see cref="P:DoubleAgent.Control.Character.TTSModeID" />.
					If you do not set <c>LanguageID</c>, it will be set to the user default language.
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ThisClientOnly']" />
				</note>
				<note>
					If you set <c>LanguageID </c>to a language that supports bidirectional text (such as Arabic
					or Hebrew), but the system running your application does not have bidirectional support installed, text
					in the word balloon may appear in logical rather than display order.
				</note>
			</details>
			<seealso cref="P:DoubleAgent.Control.Character.TTSModeID" prefix="The" suffix="Property" />
			<seealso cref="P:DoubleAgent.Control.Character.SRModeID" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Left">
			<summary>
				<para>Returns or sets the left edge of the specified character's image.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_Left</c> (&amp;<em>Left</em>)</para>

<para><em>character</em>.<c>put_Left</c> (<em>Left</em>)</para>
</cpp>
<csharp>
<para>[<em>Left</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Left</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Left</c> = <em>Left</em></para>
</csharp>
<vb>
<para>[<em>Left</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Left</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Left</c> = <em>Left</em></para>
</vb>
</syntax>
			<value name="Left">
				A <c>numeric </c>value that specifies the left edge of the character's image.
			</value>
			<remarks>
				<para>
					The <c>Left </c>property is always expressed in pixels, relative to screen origin (upper left).
				</para>
				<para>
					Even though the character appears in an irregularly shaped region window, the location of the
					character is based on the external dimensions of the rectangular animation frame used when the character
					was compiled with the Microsoft Agent Character Editor.
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='AllClients']" />
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.Top" prefix="The" suffix="Property" />
			<seealso cref="M:DoubleAgent.Control.Character.MoveTo" prefix="The" suffix="Method" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.ListeningStatus">
			<summary>
				<para>Returns whether speech input can be started for the character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_SRStatus</c> (&amp;<em>SRStatus</em>)</para>
</cpp>
<csharp>
<para>[<em>SRStatus</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>SRStatus</c></para>
</csharp>
<vb>
<para>[<em>SRStatus</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>SRStatus</c></para>
</vb>
</syntax>
			<value name="ListeningStatus">
				One of the following members of the <see cref="T:DoubleAgent.Control.ListeningStatusType" />
				enumeration:<include path="/doc/members/member[@name='T:DoubleAgent.Control.ListeningStatusType']/syntax" />
			</value>
			<remarks>
				<para>
					This property checks for the conditions necessary to support speech input. You can check this
					property before you call the <see cref="M:DoubleAgent.Control.Character.Listen" /> method to better
					ensure its success.
				</para>
			</remarks>
			<details>
				<h4 class="details">Details</h4>
				<para>
					When speech input is enabled in the <see cref="T:DoubleAgent.Control.PropertySheet" text="Advanced Character Options" />
					window, querying this property will load the associated engine, if it is not already loaded, and start
					speech services. That is, the <em>Listening key </em>is available, and the <em>Listening tip </em>
					is automatically displayable. (The <em>Listening key </em>and <em>Listening tip </em>are only enabled
					if they are also enabled in the <see cref="T:DoubleAgent.Control.PropertySheet" text="Advanced Character Options" />
					window.) However, if you query the property when speech is disabled, Double Agent does not start speech
					services.
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ThisClientOnly']" />
				</note>
			</details>
			<seealso cref="T:DoubleAgent.Control.ListeningStatusType" suffix="Enumeration" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Settings.SREnabled" suffix="Property" prefix="The" />
			<seealso cref="M:DoubleAgent.Control.Character.Listen" prefix="The" suffix="Method" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.MoveCause">
			<summary>
				<para>Returns a numeric value that specifies what caused the character's last move.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_MoveCause</c> (&amp;<em>MoveCause</em>)</para>
</cpp>
<csharp>
<para>[<em>MoveCause</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>MoveCause</c></para>
</csharp>
<vb>
<para>[<em>MoveCause</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>MoveCause</c></para>
</vb>
</syntax>
			<value name="MoveCause">
				One of the following members of the <see cref="T:DoubleAgent.Control.MoveCauseType" />
				enumeration:<include path="/doc/members/member[@name='T:DoubleAgent.Control.MoveCauseType']/syntax" />
			</value>
			<remarks>
				<para>
					You can use this property to determine what caused the character to move, when more than one
					application is sharing (has loaded) the same character. These values are the same as those returned
					by the <see cref="E:DoubleAgent.Control.Control.Move" /> event.
				</para>
			</remarks>
			<seealso cref="T:DoubleAgent.Control.MoveCauseType" suffix="Enumeration" prefix="The" />
			<seealso cref="E:DoubleAgent.Control.Control.Move" prefix="The" suffix="Event" />
			<seealso cref="M:DoubleAgent.Control.Character.MoveTo" prefix="The" suffix="Method" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Name">
			<summary>
				<para>Returns or sets the specified character's displayed name.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_Name</c> (&amp;<em>Name</em>)</para>

<para><em>character</em>.<c>put_Name</c> (<em>Name</em>)</para>
</cpp>
<csharp>
<para>[<em>Name</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Name</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Name</c> = "<em>Name</em>"</para>
</csharp>
<vb>
<para>[<em>Name</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Name</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Name</c> = "<em>Name</em>"</para>
</vb>
</syntax>
			<value name="Name">
				A <c>string </c>value corresponding to the character's name (in the current language
				setting).
			</value>
			<remarks>
				<para>
					A character's <c>Name </c>may depend on the character's <see cref="P:DoubleAgent.Control.Character.LanguageID" />
					setting. A character's name in one language may be different or use different characters than in another.
					The character's default <c>Name </c>for a specific language is defined when the character is compiled
					with the Microsoft Agent Character Editor.
				</para>
				<para>
					Avoid renaming a character, especially when using it in a scenario where other client applications
					may use the same character. Also, Double Agent uses the character's <c>Name </c>to automatically
					create commands for hiding and showing the character.
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='AllClients']" />
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.OriginalHeight">
			<summary>
				<para>Returns a numeric value that specifies the character's original height.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_OriginalHeight</c> (&amp;<em>OriginalHeight</em>)</para>
</cpp>
<csharp>
<para>[<em>OriginalHeight</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>OriginalHeight</c></para>
</csharp>
<vb>
<para>[<em>OriginalHeight</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>OriginalHeight</c></para>
</vb>
</syntax>
			<value name="OriginalHeight">
				The character's image height as defined with the Microsoft Agent Character
				Editor.
			</value>
			<seealso cref="P:DoubleAgent.Control.Character.Height" prefix="The" suffix="Property" />
			<seealso cref="P:DoubleAgent.Control.Character.OriginalWidth" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.OriginalWidth">
			<summary>
				<para>Returns a numeric value that specifies the character's original width.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_OriginalWidth</c> (&amp;<em>OriginalWidth</em>)</para>
</cpp>
<csharp>
<para>[<em>OriginalWidth</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>OriginalWidth</c></para>
</csharp>
<vb>
<para>[<em>OriginalWidth</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>OriginalWidth</c></para>
</vb>
</syntax>
			<value name="OriginalWidth">
				The character's image width as defined with the Microsoft Agent Character
				Editor.
			</value>
			<seealso cref="P:DoubleAgent.Control.Character.Width" prefix="The" suffix="Property" />
			<seealso cref="P:DoubleAgent.Control.Character.OriginalHeight" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Pitch">
			<summary>
				<para>Returns the character's default speech output (text-to-speech) pitch setting.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_Pitch</c> (&amp;<em>Pitch</em>)</para>
</cpp>
<csharp>
<para>[<em>Pitch</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Pitch</c></para>
</csharp>
<vb>
<para>[<em>Pitch</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Pitch</c></para>
</vb>
</syntax>
			<value name="Pitch">
				A <c>numeric </c>value that specifies the pitch (in hertz) of the character's
				<em>default </em>text-to-speech engine.
			</value>
			<remarks>
				<para>
					This property is of limited value since it only supplies the <em>default </em>pitch from the
					character's definition. It's supported for compatibility.
				</para>
				<para>
					Although your application cannot write this value, you can include <c>Pit </c>(pitch) tags
					in your speech output text that will temporarily change the pitch for a particular utterance. However,
					using the <c>Pit </c>tag to change the pitch will not change the <c>Pitch </c>property value. For
					further information, see <a href="MsAgent.chm::/hh/msagent/spoutput_2v1w.htm">Speech Output Tags</a>.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Smoothed">
			<summary>
				<para>Indicates if image smoothing is being applied to the character's animations.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_Smoothed</c> (&amp;<em>Smoothed</em>)</para>
</cpp>
<csharp>
<para>[<em>Smoothed</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Smoothed</c></para>
</csharp>
<vb>
<para>[<em>Smoothed</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Smoothed</c></para>
</vb>
</syntax>
			<value name="Smoothed">
				A <c>boolean </c>value that indicates if animation frames are smoothed.
			</value>
			<remarks>
				<para>
					Agent character animations are defined with an 8-bit color depth (256 color palette), which
					can result in low image quality and visible pixelation. Image smoothing reduces pixelation by applying
					a slight blur to each animation frame.
				</para>
				<note>
					This is a read-only property. Its value is initialized from the
					<see cref="T:DoubleAgent.Control.Control" />.<see cref="P:DoubleAgent.Control.Control.CharacterStyle" /> property.
				</note>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='AllClients']" />
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.SmoothEdges" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Control.CharacterStyle" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Character.Style" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.SmoothEdges">
			<summary>
				<para>Indicates if image smoothing is being applied to the edges of the character's animations.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_SmoothEdges</c> (&amp;<em>SmoothEdges</em>)</para>
</cpp>
<csharp>
<para>[<em>SmoothEdges</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>SmoothEdges</c></para>
</csharp>
<vb>
<para>[<em>SmoothEdges</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>SmoothEdges</c></para>
</vb>
</syntax>
			<value name="SmoothEdges">
				A <c>boolean </c>value that indicates if animation frames have smoothed
				edges.
			</value>
			<remarks>
				<para>
					Agent character animations are defined with an 8-bit color depth (256 color palette), which
					can result in low image quality and visible pixelation. Edge smoothing reduces pixelation by applying
					a slight blur to the edges of each animation frame.
				</para>
				<note>
					This is a read-only property. Its value is initialized from the
					<see cref="T:DoubleAgent.Control.Control" />.<see cref="P:DoubleAgent.Control.Control.CharacterStyle" /> property.
				</note>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='AllClients']" />
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.Smoothed" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Control.CharacterStyle" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Character.Style" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.SoundEffectsEnabled">
			<summary>
				<para>Returns or sets whether sound effects are enabled for your character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_SoundEffectsEnabled</c> (&amp;<em>SoundEffectsEnabled</em>)</para>

<para><em>character</em>.<c>put_SoundEffectsEnabled</c> (<em>SoundEffectsEnabled</em>)</para>
</cpp>
<csharp>
<para>[<em>SoundEffectsEnabled</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>SoundEffectsEnabled</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>SoundEffectsEnabled</c> = <em>SoundEffectsEnabled</em></para>
</csharp>
<vb>
<para>[<em>SoundEffectsEnabled</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>SoundEffectsEnabled</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>SoundEffectsEnabled</c> = <em>SoundEffectsEnabled</em></para>
</vb>
</syntax>
			<value name="SoundEffectsEnabled">
				A <c>boolean </c>value specifying whether sound effects are enabled.
			</value>
			<remarks>
				<para>
					This property determines whether the sound effects included as a part of a character's animations
					will play when an animation plays.
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ThisClientOnly']" />
				</note>
				<note>
					This settings can be overridden by the user in the <see cref="T:DoubleAgent.Control.PropertySheet" text="Advanced Character Options" />
					window.
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.Style" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Settings.SoundEffectsEnabled" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.SoundEffectsOn">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Character.SoundEffectsEnabled" />
					property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Speed">
			<summary>
				<para>Returns the character's speech output (text-to-speech) speed setting.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_Speed</c> (&amp;<em>Speed</em>)</para>
</cpp>
<csharp>
<para>[<em>Speed</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Speed</c></para>
</csharp>
<vb>
<para>[<em>Speed</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Speed</c></para>
</vb>
</syntax>
			<value name="Speed">
				A <c>numeric </c>value that specifies the speed (in words-per-minute) of the
				character's <em>default </em>text-to-speech engine.
			</value>
			<remarks>
				<para>
					This property is of limited value since it only supplies the <em>default </em>speed from the
					character's definition, scaled by the <see cref="P:DoubleAgent.Control.Settings.TTSSpeed" /> property.
					It's supported for compatibility.
				</para>
				<para>
					Although your application cannot write this value, you can include <c>Spd </c>(speed) tags
					in your speech output text that will temporarily change the output speed for a particular utterance.
					However, using the <c>Spd </c>tag to change the character's spoken output does not affect the <c>Speed </c>
					property value. For further information, see <a href="MsAgent.chm::/hh/msagent/spoutput_2v1w.htm">Speech Output Tags</a>.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.SREngine">
			<summary>
				<para>
					Retrieves the character's current or default <see cref="T:DoubleAgent.Control.SREngine" text="Speech Recognition Engine" />
					object.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>-&gt;<c>get_SREngine</c> (<em>GetDefault</em>, &amp;<em>SREngine</em>)</para>
</cpp>
<csharp>
<para>[<em>SREngine</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>get_SREngine</c> (<em>GetDefault</em>)</para>
</csharp>
<vbnet>
<para>[<em>SREngine</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>SREngine</c>[ [<em>GetDefault</em>]]</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>SREngine</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>SREngine</c>[ [<em>GetDefault</em>]]</para>
</vb>
</syntax>
			<param name="GetDefault">
				An optional <c>boolean </c>value that indicates if you want the character's
				current or default speech recognition engine. The default value is <c>False</c>.
			</param>
			<value name="SREngine">
				A <c>
					<see cref="T:DoubleAgent.Control.SREngine" suffix="Object" />
				</c> that corresponds to the character's current or default <see cref="P:DoubleAgent.Control.Character.SRModeID" />.
			</value>
			<remarks>
				<para>
					If you change the character's <see cref="P:DoubleAgent.Control.Character.SRModeID" /> you
					must re-access this property to get the correct current <see cref="T:DoubleAgent.Control.SREngine" suffix="Object" />.
				</para>
			</remarks>
			<seealso cref="T:DoubleAgent.Control.SREngine" suffix="Object" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Character.SRModeID" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.SRModeID">
			<summary>
				<para>Returns or sets the speech recognition engine the character uses.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_SRModeID</c> (&amp;<em>SRModeID</em>)</para>

<para><em>character</em>.<c>put_SRModeID</c> (<em>SRModeID</em>)</para>
</cpp>
<csharp>
<para>[<em>SRModeID</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>SRModeID</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>SRModeID</c> = "<em>SRModeID</em>"</para>
</csharp>
<vb>
<para>[<em>SRModeID</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>SRModeID</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>SRModeID</c> = "<em>SRModeID</em>"</para>
</vb>
</syntax>
			<value name="SRModeID">
				A <c>string </c>value that identifies a speech recognition engine.
			</value>
			<remarks>
				<para>
					This property determines the speech recognition engine used by the character for speech input.
					The <c>SRModeID </c>for a speech recognition engine is a formatted string defined by the vendor
					that uniquely identifies the engine.
				</para>
			</remarks>
			<details>
				<h4 class="details">Details</h4>
				<para>
					If you specify the <c>SRModeID </c>for a speech engine that isn't installed, if the user has
					disabled speech recognition, or if the language of the specified speech engine doesn't match the character's
					<see cref="P:DoubleAgent.Control.Character.LanguageID" /> setting, Double Agent raises an error.
				</para>
				<para>
					If you query this property and haven't already (successfully) set the speech recognition engine,
					the server returns the <c>SRModeID </c>of the engine that SAPI returns based on the character's
					<see cref="P:DoubleAgent.Control.Character.LanguageID" /> setting. If you haven't set the character's
					<see cref="P:DoubleAgent.Control.Character.LanguageID" />, then Double Agent returns the <c>SRModeID </c>
					of the engine that SAPI returns based on the user's default language setting. If there is
					no matching engine, Double Agent returns an empty string ("").
				</para>
				<para>
					Querying this property does not require that <see cref="P:DoubleAgent.Control.Settings.SREnabled" /> be
					set to <c>True</c>. However, if you query the property when speech input is disabled, Double Agent
					returns an empty string.
				</para>
				<para>
					When speech input is enabled, querying or setting this property will load the associated engine
					(if it is not already loaded), and start speech services. That is, the <em>Listening key </em>is
					available, and the <em>Listening tip </em>is displayable. (The <em>Listening key </em>and <em>Listening tip </em>
					are enabled only if they are also enabled in the <see cref="T:DoubleAgent.Control.PropertySheet" text="Advanced Character Options" />
					window.) However, if you query the property when speech is disabled, Double Agent does not start speech
					services.
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ThisClientOnly']" />
				</note>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='UsesSapi']" />
				</note>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='NoSoundSupport']" />
				</note>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='SlowSoundLoad']" />
				</note>
			</details>
			<seealso cref="P:DoubleAgent.Control.Character.LanguageID" prefix="The" suffix="Property" />
			<seealso cref="M:DoubleAgent.Control.Character.Listen" prefix="The" suffix="Method" />
			<seealso cref="P:DoubleAgent.Control.Character.SREngine" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.SRStatus">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Character.ListeningStatus" />
					property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.States">
			<summary>
				<para>
					Returns the names of the character's <em>state </em>animations.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_States</c> (&amp;<em>States</em>)</para>
</cpp>
<csharp>
<para>[<em>States</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>States</c></para>
</csharp>
<vb>
<para>[<em>States</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>States</c></para>
</vb>
</syntax>
			<remarks>
				<para>
					For .ACF characters, the array contains all the states defined for the character, not just
					the ones that have been retrieved with the <see cref="M:DoubleAgent.Control.Character.Prepare" />
					method.
				</para>
				<para>
					<em>Most </em>characters include the following states:
				</para>
				<list type="bullet">
					<item>"Gesturing" or "GesturingDown", "GesturingLeft", "GesturingRight" and "GesturingUp"</item>
					<item>"Hiding"</item>
					<item>"Hearing"</item>
					<item>"Idling" or "IdlingLevel1", "IdlingLevel2" and "IdlingLevel3"</item>
					<item>"Listening"</item>
					<item>"Moving" or "MovingDown", "MovingLeft", "MovingRight" and "MovingUp"</item>
					<item>"Showing"</item>
					<item>"Speaking"</item>
				</list>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Character.Play" suffix="Method" prefix="The" />
			<seealso cref="M:DoubleAgent.Control.Character.Prepare" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Style">
			<summary>
				<para>Specifies a group of settings that affect the character's appearence.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_Style</c> (&amp;<em>Style</em>)</para>

<para><em>character</em>.<c>put_Style</c> (<em>Style</em>)</para>
</cpp>
<csharp>
<para>[<em>Style</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Style</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Style</c> = "<em>Style</em>"</para>
</csharp>
<vb>
<para>[<em>Style</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Style</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Style</c> = "<em>Style</em>"</para>
</vb>
</syntax>
			<value name="Style">
				A <c>numeric </c>bit-field value that has one or more of the following:<include path="/doc/members/member[@name='T:DoubleAgent.Control.CharacterStyleFlags']/syntax" />
			</value>
			<remarks>
				<para>
					Each style bit corresponds to a specific <see cref="T:DoubleAgent.Control.Character" suffix="Object" />
					property. You can use this property to query or modify all of the style settings at once.
				</para>
				<para>
					The <see cref="F:DoubleAgent.Control.CharacterStyleFlags.Smoothed" /> and <see cref="F:DoubleAgent.Control.CharacterStyleFlags.SmoothEdges" />
					bits are read-only. They can only be set in the <see cref="T:DoubleAgent.Control.Control" />.<see cref="P:DoubleAgent.Control.Control.CharacterStyle" />
					property before the <see cref="T:DoubleAgent.Control.Character" /> is loaded.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.AutoPopupMenu" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Character.IconShown" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Character.IdleEnabled" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Character.Smoothed" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Character.SmoothEdges" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Character.SoundEffectsEnabled" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Control.CharacterStyle" suffix="Property" prefix="The" />
			<seealso cref="T:DoubleAgent.Control.CharacterStyleFlags" suffix="Enumeration" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Top">
			<summary>
				<para>Returns or sets the top edge of the specified character's image.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_Top</c> (&amp;<em>Top</em>)</para>

<para><em>character</em>.<c>put_Top</c> (<em>Top</em>)</para>
</cpp>
<csharp>
<para>[<em>Top</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Top</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Top</c> = <em>Top</em></para>
</csharp>
<vb>
<para>[<em>Top</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Top</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Top</c> = <em>Top</em></para>
</vb>
</syntax>
			<value name="Top">
				A <c>numeric </c>value that specifies the character's top edge.
			</value>
			<remarks>
				<para>
					The <c>Top </c>property is always expressed in pixels, relative to screen origin (upper left).
				</para>
				<para>
					Even though the character appears in an irregularly shaped region window, the location of the
					character is based on the external dimensions of the rectangular animation frame used when the character
					was compiled with the Microsoft Agent Character Editor.
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='AllClients']" />
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.Left" prefix="The" suffix="Property" />
			<seealso cref="M:DoubleAgent.Control.Character.MoveTo" prefix="The" suffix="Method" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.TTSEngine">
			<summary>
				<para>
					Retrieves the character's current or default <see cref="T:DoubleAgent.Control.TTSEngine" text="Text-To-Speech Engine" />
					object.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>-&gt;<c>get_TTSEngine</c> (<em>GetDefault</em>, &amp;<em>TTSEngine</em>)</para>
</cpp>
<csharp>
<para>[<em>TTSEngine</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>get_TTSEngine</c> (<em>GetDefault</em>)</para>
</csharp>
<vbnet>
<para>[<em>TTSEngine</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>TTSEngine</c>[ [<em>GetDefault</em>]]</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>TTSEngine</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>TTSEngine</c>[ [<em>GetDefault</em>]]</para>
</vb>
</syntax>
			<param name="GetDefault">
				An optional <c>boolean </c>value that indicates if you want the character's
				current or default text-to-speech engine. The default value is <c>False</c>.
			</param>
			<value name="TTSEngine">
				A <c>
					<see cref="T:DoubleAgent.Control.TTSEngine" suffix="Object" />
				</c> that corresponds to the character's current or default <see cref="P:DoubleAgent.Control.Character.TTSModeID" />.
			</value>
			<remarks>
				<para>
					If you change the character's <see cref="P:DoubleAgent.Control.Character.TTSModeID" /> you
					must re-access this property to get the correct current <see cref="T:DoubleAgent.Control.TTSEngine" suffix="Object" />.
				</para>
			</remarks>
			<seealso cref="T:DoubleAgent.Control.TTSEngine" suffix="Object" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Character.TTSModeID" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.TTSModeID">
			<summary>
				<para>Returns or sets the text-to-speech engine used for the character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_TTSModeID</c> (&amp;<em>TTSModeID</em>)</para>

<para><em>character</em>.<c>put_TTSModeID</c> (<em>TTSModeID</em>)</para>
</cpp>
<csharp>
<para>[<em>TTSModeID</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>TTSModeID</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>TTSModeID</c> = "<em>TTSModeID</em>"</para>
</csharp>
<vb>
<para>[<em>TTSModeID</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>TTSModeID</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>TTSModeID</c> = "<em>TTSModeID</em>"</para>
</vb>
</syntax>
			<value name="TTSModeID">
				A <c>string </c>value that uniquely identifies a text-to-speech engine and
				synthesis mode.
			</value>
			<remarks>
				<para>
					This property determines the TTS (text-to-speech) engine for a character's spoken output. The
					<c>TTSModeID </c>for a TTS engine is a formatted string defined by the vendor that uniquely identifies
					the engine and it's synthesis mode.
				</para>
			</remarks>
			<details>
				<h4 class="details">Details</h4>
				<para>
					Setting this property overrides Double Agent's attempt to load an engine based on the character's
					compiled TTS setting and the character's current <see cref="P:DoubleAgent.Control.Character.LanguageID" />
					setting. However, if you specify a mode ID for an engine that isn't installed or if the user has disabled
					speech output in the <see cref="T:DoubleAgent.Control.PropertySheet" text="Advanced Character Options" />,
					Double Agent raises an error.
				</para>
				<para>
					If you do not (or have not successfully) set the character's <c>TTSModeID</c>, Double Agent
					checks to see if the character's compiled TTS mode setting matches the character's <see cref="P:DoubleAgent.Control.Character.LanguageID" />
					setting, and if the associated TTS engine is installed. If so, the character's <c>TTSModeID </c>
					is initialized accordingly. If not, Double Agent looks for a compatible SAPI speech engine that matches
					the character's <see cref="P:DoubleAgent.Control.Character.LanguageID" /> and gender. If you have
					not set the character's <see cref="P:DoubleAgent.Control.Character.LanguageID" />, the current
					user language is used. If no matching engine can be found, this property returns an empty string. Similarly,
					if you query this property when the user has disabled speech output in the <see cref="T:DoubleAgent.Control.PropertySheet" text="Advanced Character Options" />,
					the value will be an empty string.
				</para>
				<para>
					Querying or setting this property will load the associated engine (if it is not already loaded).
					However, if the engine specified in the character's compiled TTS setting is installed and matches the
					character's <see cref="P:DoubleAgent.Control.Character.LanguageID" /> setting, the engine will be
					loaded when the character loads.
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ThisClientOnly']" />
				</note>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='UsesSapi']" />
				</note>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='NoSoundSupport']" />
				</note>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='SlowSoundLoad']" />
				</note>
			</details>
			<seealso cref="P:DoubleAgent.Control.Character.LanguageID" prefix="The" suffix="Property" />
			<seealso cref="M:DoubleAgent.Control.Character.Speak" prefix="The" suffix="Method" />
			<seealso cref="P:DoubleAgent.Control.Character.TTSEngine" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.UniqueID">
			<summary>
				<para>Returns the unique identifier given to the character when it was defined.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_UniqueID</c> (&amp;<em>UniqueID</em>)</para>
</cpp>
<csharp>
<para>[<em>UniqueID</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>UniqueID</c></para>
</csharp>
<vb>
<para>[<em>UniqueID</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>UniqueID</c></para>
</vb>
</syntax>
			<value name="UniqueID">
				A <c>string </c>value containing the the character's unique (GUID) identifier.
			</value>
			<remarks>
				<para>
					This property returns a string representing the internal identifier that Double Agent uses
					to uniquely identify the character. A character identifier is set when it is compiled with the Microsoft
					Agent Character Editor.
				</para>
				<note>
					This is the value that Double Agent uses to determine if a character has already been loaded.
					The character's file name or location <c>does not </c>uniquely identify the character.
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Version">
			<summary>
				<para>Returns the character's version.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_Version</c> (&amp;<em>Version</em>)</para>
</cpp>
<csharp>
<para>[<em>Version</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Version</c></para>
</csharp>
<vb>
<para>[<em>Version</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Version</c></para>
</vb>
</syntax>
			<value name="Version">
				A <c>string </c>that identifies the Microsoft Agent version for which the character
				was built.
			</value>
			<remarks>
				<para>
					The <c>Version </c>property returns a string that corresponds to the version of the standard
					animation set definition for which the character was compiled. The character's version number is automatically
					set when you build it with the Microsoft Agent Character Editor.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.VisibilityCause">
			<summary>
				<para>
					Returns a <see cref="T:DoubleAgent.Control.VisibilityCauseType" suffix="Enumeration" /> value
					that specifies what caused the character's visible state to change.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_VisibilityCause</c> (&amp;<em>VisibilityCause</em>)</para>
</cpp>
<csharp>
<para>[<em>VisibilityCause</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>VisibilityCause</c></para>
</csharp>
<vb>
<para>[<em>VisibilityCause</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>VisibilityCause</c></para>
</vb>
</syntax>
			<value name="VisibilityCause">
				<para>
					A <c>
						<see cref="T:DoubleAgent.Control.VisibilityCauseType" />
					</c> value:
				</para>
				<include path="/doc/members/member[@name='T:DoubleAgent.Control.VisibilityCauseType']/syntax" />
			</value>
			<remarks>
				<para>
					You can use this property to determine what caused the character to change visibility when
					more than one application is sharing (has loaded) the same character. These values are the same as those
					received by the <see cref="E:DoubleAgent.Control.Control.Show" /> and <see cref="E:DoubleAgent.Control.Control.Hide" />
					events.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.Visible" suffix="Property" prefix="The" />
			<seealso cref="E:DoubleAgent.Control.Control.Show" prefix="The" suffix="Event" />
			<seealso cref="E:DoubleAgent.Control.Control.Hide" prefix="The" suffix="Event" />
			<seealso cref="M:DoubleAgent.Control.Character.Show" prefix="The" suffix="Method" />
			<seealso cref="M:DoubleAgent.Control.Character.Hide" prefix="The" suffix="Method" />
			<seealso cref="T:DoubleAgent.Control.VisibilityCauseType" prefix="The" suffix="Enumeration" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Visible">
			<summary>
				<para>Returns a boolean indicating whether or not the character is visible.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_Visible</c> (&amp;<em>Visible</em>)</para>
</cpp>
<csharp>
<para>[<em>Visible</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Visible</c></para>
</csharp>
<vb>
<para>[<em>Visible</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Visible</c></para>
</vb>
</syntax>
			<value name="Visible">
				<c>True </c>if the character is displayed, <c>False </c>if it's hidden
			</value>
			<remarks>
				<para>
					This property indicates whether the character's animations are being displayed. It does not
					necessarily mean that there is an image on the screen. For example, this property returns <c>True </c>
					even when the character is positioned off the visible display area or when the current character
					animation contains no images.
				</para>
				<para>
					This property is read-only. To make a character visible or hidden, use the <see cref="M:DoubleAgent.Control.Character.Show" />
					or <see cref="M:DoubleAgent.Control.Character.Hide" /> methods.
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='AllClients']" />
				</note>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Character.Show" prefix="The" suffix="Method" />
			<seealso cref="M:DoubleAgent.Control.Character.Hide" prefix="The" suffix="Method" />
			<seealso cref="P:DoubleAgent.Control.Character.VisibilityCause" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Character.Width">
			<summary>
				<para>Returns or sets the width of the the specified character's image.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>character</em>.<c>get_Width</c> (&amp;<em>Width</em>)</para>

<para><em>character</em>.<c>put_Width</c> (<em>Width</em>)</para>
</cpp>
<csharp>
<para>[<em>Width</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Width</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Width</c> = <em>Width</em></para>
</csharp>
<vb>
<para>[<em>Width</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Width</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Width</c> = <em>Width</em></para>
</vb>
</syntax>
			<value name="Width">
				A <c>numeric </c>value that specifies the character's image width.
			</value>
			<remarks>
				<para>
					The <c>Width </c>property is always expressed in pixels.
				</para>
				<para>
					Even though the character appears in an irregularly shaped region window, the location of the
					character is based on the external dimensions of the rectangular animation frame used when the character
					was compiled with the Microsoft Agent Character Editor.
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='AllClients']" />
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.Commands" kind="Collection">
			<summary>
				The <c>Commands </c>collection defines the <see cref="T:DoubleAgent.Control.Command" />s
				that the user can apply to a <see cref="T:DoubleAgent.Control.Character" />. It can be accessed
				using the <see cref="T:DoubleAgent.Control.Character" />'s <see cref="P:DoubleAgent.Control.Character.Commands" />
				property.
			</summary>
			<syntax>
				<list type="bullet">
					<item>
						<term>
							<bookmark name="Methods"></bookmark>
							The <c>Commands </c>collection has the following <c>methods</c>:
						</term>
						<description>
							<see cref="M:DoubleAgent.Control.Commands.Add" />,
							<see cref="M:DoubleAgent.Control.Commands.Command" />,
							<see cref="M:DoubleAgent.Control.Commands.Insert" />,
							<see cref="M:DoubleAgent.Control.Commands.Remove" />,
							<see cref="M:DoubleAgent.Control.Commands.RemoveAll" />
						</description>
					</item>
					<item>
						<term>
							<bookmark name="Properties"></bookmark>
							The <c>Commands </c>collection has the following <c>properties</c>:
						</term>
						<description>
							<see cref="P:DoubleAgent.Control.Commands.Caption" />,
							<see cref="P:DoubleAgent.Control.Commands.Count" />,
							<see cref="P:DoubleAgent.Control.Commands.DefaultCommand" />,
							<see cref="P:DoubleAgent.Control.Commands.FontName" />,
							<see cref="P:DoubleAgent.Control.Commands.FontSize" />,
							<see cref="P:DoubleAgent.Control.Commands.Index" />,
							<see cref="P:DoubleAgent.Control.Commands.Item" />,
							<see cref="P:DoubleAgent.Control.Commands.Visible" />,
							<see cref="P:DoubleAgent.Control.Commands.VoiceGrammar" />,
							<see cref="P:DoubleAgent.Control.Commands.VoiceCaption" />
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					The <c>Commands </c>collection can appear in both the pop-up menu and the <see cref="T:DoubleAgent.Control.CommandsWindow" text="Voice Commands" />
					window for a character. To include commands in the pop-up menu, set its <see cref="P:DoubleAgent.Control.Commands.Caption" />
					property. To include commands in the <see cref="T:DoubleAgent.Control.CommandsWindow" text="Voice Commands" />
					window, set its <see cref="P:DoubleAgent.Control.Commands.VoiceCaption" /> property (for backward
					compatibility, if there is no <see cref="P:DoubleAgent.Control.Commands.VoiceCaption" />, the <see cref="P:DoubleAgent.Control.Commands.Caption" />
					setting is used).
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Commands.Add">
			<summary>
				<para>
					Adds a <see cref="T:DoubleAgent.Control.Command" /> object to the <see cref="T:DoubleAgent.Control.Commands" />
					collection.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<em>commands</em>.<c>Add</c> (<em>CharacterID</em>, <em>Commands</em>, <em>VoiceGrammar</em>, <em>Enabled</em>, <em>Visible</em>, &amp;<em>Command</em>)
</cpp>
<csharp>
[<em>Command</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c><c>.Add</c> ("<em>Name</em>", <em>Caption</em>, <em>VoiceGrammar</em>, <em>Enabled</em>, <em>Visible</em>)
</csharp>
<vbnet>
[<em>Command</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c><c>.Add</c> ("<em>Name</em>", <em>Caption</em>, <em>VoiceGrammar</em>, <em>Enabled</em>, <em>Visible</em>)
</vbnet>
<vb>
[<em>Command</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c><c>.Add</c> "<em>Name</em>", <em>Caption</em>, <em>VoiceGrammar</em>, <em>Enabled</em>, <em>Visible</em>
</vb>
</syntax>
			<param name="Name">
				A <c>string </c>value that uniquely identifies the command.
			</param>
			<param name="Caption">
				A <c>string </c>value specifying the name that will appear in the character's
				pop-up menu and in the <see cref="T:DoubleAgent.Control.CommandsWindow" /> when the client application
				is input-active. For more information, see the <see cref="T:DoubleAgent.Control.Command" /> object's
				<see cref="P:DoubleAgent.Control.Command.Caption" /> property.
			</param>
			<param name="VoiceGrammar">
				A <c>string </c>value specifying the words or phrase used by the speech
				engine for recognizing this command. For more information on formatting alternatives for the string,
				see the <see cref="T:DoubleAgent.Control.Command" /> object's <see cref="P:DoubleAgent.Control.Command.VoiceGrammar" />
				property.
			</param>
			<param name="Enabled">
				A <c>boolean </c>value indicating whether the command is enabled. The default
				value is <c>True</c>. For more information, see the <see cref="T:DoubleAgent.Control.Command" />
				object's <see cref="P:DoubleAgent.Control.Command.Enabled" /> property.
			</param>
			<param name="Visible">
				A <c>boolean </c>value indicating whether the command is visible in the character's
				pop-up menu when the client application is input-active. The default value is <c>True</c>. For more
				information, see the <see cref="T:DoubleAgent.Control.Command" /> object's <see cref="P:DoubleAgent.Control.Command.Visible" />
				property.
			</param>
			<returns name="Command">
				The <c>
					<see cref="T:DoubleAgent.Control.Command" />
				</c> object added, if successful.
			</returns>
			<remarks>
				<para>
					The value of a <see cref="T:DoubleAgent.Control.Command" /> object's <see cref="P:DoubleAgent.Control.Command.Name" />
					property must be unique within its <see cref="T:DoubleAgent.Control.Commands" /> collection. You
					must remove a <see cref="T:DoubleAgent.Control.Command" /> before you can create a new <see cref="T:DoubleAgent.Control.Command" />
					with the same <see cref="P:DoubleAgent.Control.Command.Name" /> property. Attempting to create
					a <see cref="T:DoubleAgent.Control.Command" /> with a <see cref="P:DoubleAgent.Control.Command.Name" />
					property that already exists raises an error.
				</para>
				<para>
					This method returns a <see cref="T:DoubleAgent.Control.Command" /> object. This allows you
					to declare an object and assign a <see cref="T:DoubleAgent.Control.Command" /> to it when you call
					the <c>Add </c>method.
				</para>
				<example>
					<code xml:space="preserve">Dim Command1 as DaControl.DaCtlCommand
Set Command1 = Genie.Commands.Add ("my first command", "Test", "Test", True, True)
Command1.VoiceCaption = "this is a test"</code>
				</example>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Commands.Insert" prefix="The" suffix="Method" />
			<seealso cref="M:DoubleAgent.Control.Commands.Remove" prefix="The" suffix="Method" />
			<seealso cref="M:DoubleAgent.Control.Commands.RemoveAll" prefix="The" suffix="Method" />
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Commands.Command">
			<summary>
				<para>
					Returns a <see cref="T:DoubleAgent.Control.Command" /> object in a <see cref="T:DoubleAgent.Control.Commands" />
					collection.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<em>commands</em>.<c>Command</c> (<em>Name</em>, &amp;<em>Command</em>)
</cpp>
<csharp>
[<em>Command</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c><c>.Command</c> ("<em>Name</em>")
</csharp>
<vbnet>
[<em>Command</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c><c>.Command</c> ("<em>Name</em>")
</vbnet>
<vb>
[<em>Command</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c><c>.Command</c> "<em>Name</em>"
</vb>
</syntax>
			<param name="Name">
				The name of the <see cref="T:DoubleAgent.Control.Command" /> object to retrieve.
			</param>
			<returns name="Command">
				The <c>
					<see cref="T:DoubleAgent.Control.Command" />
				</c> with the specified name, if successful.
			</returns>
			<remarks>
				<para>
					You can use this method to access a <see cref="T:DoubleAgent.Control.Command" /> object's
					properties.
				</para>
				<note>
					This method may be required for some programming languages. It is not required for VBScript
					or Visual Basic. For further information on using <see cref="T:DoubleAgent.Control.Command" />
					methods, see <see cref="T:DoubleAgent.Control.Command" bookmark="Properties" text="Command Object Properties" />.
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Commands.Insert">
			<summary>
				Inserts a <see cref="T:DoubleAgent.Control.Command" /> object in the <see cref="T:DoubleAgent.Control.Commands" />
				collection.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<em>commands</em>.<c>Insert</c> (<em>Name</em>, <em>RefName</em>, <em>Before</em>, <em>Caption</em>, <em>VoiceGrammar</em>, <em>Enabled</em>, <em>Visible</em>, &amp;<em>Command</em>)
</cpp>
<csharp>
[<em>Command</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c><c>.Insert</c> ("<em>Name</em>", "<em>RefName</em>", <em>Before</em>, <em>Caption</em>, <em>VoiceGrammar</em>, <em>Enabled</em>, <em>Visible</em>)
</csharp>
<vbnet>
[<em>Command</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c><c>.Insert</c> ("<em>Name</em>", "<em>RefName</em>", <em>Before</em>, <em>Caption</em>, <em>VoiceGrammar</em>, <em>Enabled</em>, <em>Visible</em>)
</vbnet>
<vb>
[<em>Command</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c><c>.Insert</c> "<em>Name</em>", "<em>RefName</em>", <em>Before</em>, <em>Caption</em>, <em>VoiceGrammar</em>, <em>Enabled</em>, <em>Visible</em>
</vb>
</syntax>
			<param name="Name">
				A <c>string </c>value that uniquely identifies the command.
			</param>
			<param name="RefName">
				A <c>string </c>value that specifies the name of the command just above or
				below where you want to insert the new command.
			</param>
			<param name="Before">
				A <c>boolean </c>value indicating whether to insert the new command <c>before </c>
				the command specified by <em>RefName</em>.
			</param>
			<param name="Caption">
				A <c>string </c>value specifying the name that will appear in the character's
				pop-up menu and in the <see cref="T:DoubleAgent.Control.CommandsWindow" /> when the client application
				is input-active. For more information, see the <see cref="T:DoubleAgent.Control.Command" /> object's
				<see cref="P:DoubleAgent.Control.Command.Caption" /> property.
			</param>
			<param name="VoiceGrammar">
				A <c>string </c>value specifying the words or phrase used by the speech
				engine for recognizing this command. For more information on formatting alternatives for the string,
				see the <see cref="T:DoubleAgent.Control.Command" /> object's <see cref="P:DoubleAgent.Control.Command.VoiceGrammar" />
				property.
			</param>
			<param name="Enabled">
				A <c>boolean </c>value indicating whether the command is enabled. The default
				value is <c>True</c>. For more information, see the <see cref="T:DoubleAgent.Control.Command" />
				object's <see cref="P:DoubleAgent.Control.Command.Enabled" /> property.
			</param>
			<param name="Visible">
				A <c>boolean </c>value indicating whether the command is visible in the character's
				pop-up menu when the client application is input-active. The default value is <c>True</c>. For more
				information, see the <see cref="T:DoubleAgent.Control.Command" /> object's <see cref="P:DoubleAgent.Control.Command.Visible" />
				property.
			</param>
			<returns name="Command">
				The <c>
					<see cref="T:DoubleAgent.Control.Command" />
				</c> object inserted, if successful.
			</returns>
			<remarks>
				<para>
					The value of a <see cref="T:DoubleAgent.Control.Command" /> object's <see cref="P:DoubleAgent.Control.Command.Name" />
					property must be unique within its <see cref="T:DoubleAgent.Control.Commands" /> collection. You
					must remove a <see cref="T:DoubleAgent.Control.Command" /> before you can create a new <see cref="T:DoubleAgent.Control.Command" />
					with the same <see cref="P:DoubleAgent.Control.Command.Name" /> property setting. Attempting to
					create a <see cref="T:DoubleAgent.Control.Command" /> with a <see cref="P:DoubleAgent.Control.Command.Name" />
					property that already exists raises an error.
				</para>
				<para>
					This method returns a <see cref="T:DoubleAgent.Control.Command" /> object. This allows you
					to declare an object and assign a <see cref="T:DoubleAgent.Control.Command" /> to it when you call
					the <c>Insert </c>method.
				</para>
				<example>
					<code xml:space="preserve">Dim Command2 as DaControl.DaCtlCommand
Set Command2 = Genie.Commands.Insert ("my second command", "my first command",_ True, "Test", "Test", True, True)
Command2.VoiceCaption = "this is a test"</code>
				</example>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Commands.Add" prefix="The" suffix="Method" />
			<seealso cref="M:DoubleAgent.Control.Commands.Remove" prefix="The" suffix="Method" />
			<seealso cref="M:DoubleAgent.Control.Commands.RemoveAll" prefix="The" suffix="Method" />
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Commands.Remove">
			<summary>
				<para>
					Removes a <see cref="T:DoubleAgent.Control.Command" /> object from the <see cref="T:DoubleAgent.Control.Commands" />
					collection.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<em>commands</em>.<c>Remove</c> (<em>Name</em>)
</cpp>
<csharp>
<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c><c>.Remove</c> ("<em>Name</em>")
</csharp>
<vbnet>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c><c>.Remove</c> ("<em>Name</em>")
</vbnet>
<vb>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c><c>.Remove</c> "<em>Name</em>"
</vb>
</syntax>
			<param name="Name">
				The name of the <see cref="T:DoubleAgent.Control.Command" /> object to remove.
			</param>
			<remarks>
				<para>
					When a <see cref="T:DoubleAgent.Control.Command" /> object is removed from the collection,
					it no longer appears when the character's pop-up menu is displayed, nor in the <see cref="T:DoubleAgent.Control.CommandsWindow" />
					when your client application is input-active.
				</para>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Commands.RemoveAll" prefix="The" suffix="Method" />
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.Commands.RemoveAll">
			<summary>
				<para>
					Removes all <see cref="T:DoubleAgent.Control.Command" /> objects from the <see cref="T:DoubleAgent.Control.Commands" />
					collection.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<em>commands</em>.<c>RemoveAll</c> ()
</cpp>
<csharp>
<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c><c>.RemoveAll</c> ()
</csharp>
<vbnet>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c><c>.RemoveAll</c> ()
</vbnet>
<vb>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c><c>.RemoveAll</c>
</vb>
</syntax>
			<remarks>
				<para>
					An empty <see cref="T:DoubleAgent.Control.Commands" /> collection no longer appears when the
					character's pop-up menu is displayed, nor in the <see cref="T:DoubleAgent.Control.CommandsWindow" />
					when your client application is input-active.
				</para>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Commands.Remove" prefix="The" suffix="Method" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Commands.Caption">
			<summary>
				<para>
					Specifies the text displayed for the <see cref="T:DoubleAgent.Control.Commands" /> object
					in the character's pop-up menu.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>commands</em>.<c>get_Caption</c> (&amp;<em>Caption</em>)</para>

<para><em>commands</em>.<c>put_Caption</c> (<em>Caption</em>)</para>
</cpp>
<csharp>
<para><em>[Caption</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>.<c>Caption</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>.<c>Caption</c> = <em>Caption</em></para>
</csharp>
<vb>
<para><em>[Caption</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.<c>Caption</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.<c>Caption</c> = <em>Caption</em></para>
</vb>
</syntax>
			<value name="Caption">
				A <c>string </c>value that specifies the text displayed in the menu.
			</value>
			<remarks>
				<para>
					Setting the <c>Caption </c>property for your <see cref="T:DoubleAgent.Control.Commands" />
					collection defines how it will appear on the character's pop-up menu when its <see cref="P:DoubleAgent.Control.Commands.Visible" />
					property is set to <c>True </c>and your application is <em>not </em>the input-active client. To
					specify an access key (underlined mnemonic) for your <c>Caption</c>, include an ampersand (&amp;) before
					the mnemonic character.
				</para>
				<para>
					If you define <see cref="T:DoubleAgent.Control.Command" /> objects for a <see cref="T:DoubleAgent.Control.Commands" />
					collection, you typically also define a <c>Caption </c>for the <see cref="T:DoubleAgent.Control.Commands" />
					collection.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Commands.Count">
			<summary>
				<para>
					Returns the count of <see cref="T:DoubleAgent.Control.Command" /> objects in the <see cref="T:DoubleAgent.Control.Commands" />
					collection.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>command</em>.<c>get_Count</c> (&amp;<em>Count</em>)</para>
</cpp>
<csharp>
<para>[<em>Count</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>.<c>Count</c></para>
</csharp>
<vb>
<para>[<em>Count</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.<c>Count</c></para>
</vb>
</syntax>
			<value name="Count">
				A <c>numeric </c>value that indicates the number of <see cref="T:DoubleAgent.Control.Command" />
				objects in the collection.
			</value>
			<remarks>
				<para>
					<c>Count </c>includes only the number of <see cref="T:DoubleAgent.Control.Command" /> objects
					you define in <em>your </em><see cref="T:DoubleAgent.Control.Commands" /> collection. Pre-defined
					entries or entries defined by other clients are not included.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Commands.DefaultCommand">
			<summary>
				<para>
					Returns or sets the default command of the <see cref="T:DoubleAgent.Control.Commands" /> collection.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>commands</em>.<c>get_DefaultCommand</c> (&amp;<em>DefaultCommand</em>)</para>

<para><em>commands</em>.<c>put_DefaultCommand</c> (<em>DefaultCommand</em>)</para>
</cpp>
<csharp>
<para>[<em>DefaultCommand</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>.<c>DefaultCommand</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>.<c>DefaultCommand</c> = <em>DefaultCommand</em></para>
</csharp>
<vb>
<para>[<em>DefaultCommand</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.<c>DefaultCommand</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.<c>DefaultCommand</c> = <em>DefaultCommand</em></para>
</vb>
</syntax>
			<value name="DefaultCommand">
				The name of the <see cref="T:DoubleAgent.Control.Command" /> that's
				shown bold in the pop-up menu (an empty string if none).
			</value>
			<remarks>
				<para>
					This property allows you to set a <see cref="T:DoubleAgent.Control.Command" /> in your <see cref="T:DoubleAgent.Control.Commands" />
					collection as the default command, rendering it bold. This does not actually change command handling
					or double-click events.
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ThisClientOnly']" />
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Commands.FontName">
			<summary>
				<para>
					Returns or sets the font used in the <see cref="T:DoubleAgent.Control.CommandsWindow" text="Voice Commands" />
					window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>commands</em>-&gt;<c>get_FontName</c> (<em>&amp;FontName</em>)</para>

<para><em>commands</em>-&gt;<c>put_FontName</c> (<em>FontName</em>)</para>
</cpp>
<csharp>
<para>[<em>FontName</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands.FontName</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands.FontName</c> = <em>FontName</em></para>
</csharp>
<vb>
<para>[<em>FontName</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands.FontName</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands.FontName</c> = <em>FontName</em></para>
</vb>
</syntax>
			<value name="FontName">
				A <c>string </c>value specifying the font name.
			</value>
			<remarks>
				<para>
					The <c>FontName </c>property defines the font used to display text in the <see cref="T:DoubleAgent.Control.CommandsWindow" />.
					The default value for the font setting is based on the <em>menu font </em>for the character's <see cref="P:DoubleAgent.Control.Character.LanguageID" /> or,
					if that's not set, the user default language.
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ThisClientOnly']" />
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Commands.FontSize">
			<summary>
				<para>
					Returns or sets the font size used in the <see cref="T:DoubleAgent.Control.CommandsWindow" text="Voice Commands" />
					window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>commands</em>-&gt;<c>get_FontSize</c> (<em>&amp;FontSize</em>)</para>

<para><em>commands</em>-&gt;<c>put_FontSize</c> (<em>FontSize</em>)</para>
</cpp>
<csharp>
<para>[<em>FontSize</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands.FontSize</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands.FontSize</c> = <em>FontSize</em></para>
</csharp>
<vb>
<para>[<em>FontSize</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands.FontSize</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands.FontSize</c> = <em>FontSize</em></para>
</vb>
</syntax>
			<value name="FontName">
				A <c>numeric </c>value specifying the font size (in points).
			</value>
			<remarks>
				<para>
					The <c>FontSize </c>property defines the point size of the font used to display text in the
					<see cref="T:DoubleAgent.Control.CommandsWindow" />. The default value for the font setting is
					based on the <em>menu font </em>for the character's <see cref="P:DoubleAgent.Control.Character.LanguageID" />
					or, if that's not set, the user default language.
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ThisClientOnly']" />
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Commands.GlobalVoiceCommandsEnabled">
			<summary>
				<para>
					Returns or sets whether pre-defined commands appear in the <see cref="T:DoubleAgent.Control.CommandsWindow" text="Voice Commands" />
					window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>commands</em>.<c>get_GlobalVoiceCommandsEnabled</c> (&amp;<em>Enabled</em>)</para>

<para><em>commands</em>.<c>put_GlobalVoiceCommandsEnabled</c> (<em>Enabled</em>)</para>
</cpp>
<csharp>
<para>[<em>Enabled</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>.<c>GlobalVoiceCommandsEnabled</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>.<c>GlobalVoiceCommandsEnabled</c> = <em>Enabled</em></para>
</csharp>
<vb>
<para>[<em>Enabled</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.<c>GlobalVoiceCommandsEnabled</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.<c>GlobalVoiceCommandsEnabled</c> = <em>Enabled</em></para>
</vb>
</syntax>
			<value name="Enabled">
				A <c>boolean </c>value that indicates if global voice commands are enabled.
			</value>
			<remarks>
				<para>
					Double Agent automatically adds voice commands (grammar) for opening and closing the <see cref="T:DoubleAgent.Control.CommandsWindow" text="Voice Commands" />
					window and for showing and hiding the character. If you set <c>GlobalVoiceCommandsEnabled </c>to
					<c>False</c>, Agent disables any voice parameters for these voice commands as well as the voice
					commands for the <see cref="P:DoubleAgent.Control.Commands.Caption" /> of other clients' <see cref="T:DoubleAgent.Control.Commands" />
					objects. This allows you to eliminate these from your client's current active grammar. However, because
					this potentially blocks voice access to other clients, reset this property to <c>True </c>after
					processing the user's voice input.
				</para>
				<para>
					Disabling the property does not affect the character's pop-up menu. The global commands added
					by Double Agent will still appear; you cannot remove them from the pop-up menu.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Commands.HelpContextID">
			<summary>Not Implemented</summary>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Commands.Index">
			<summary>
				<para>
					Returns a <see cref="T:DoubleAgent.Control.Command" suffix="Object" /> in the collection.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>commands</em>.<c>get_Index</c> (<em>Index</em>, &amp;<em>Command</em>)</para>
</cpp>
<csharp>
<para>[<em>Command</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>.get_Index (<em>Index</em>)</para>
</csharp>
<vbnet>
<para>[<em>Command</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.Index (<em>Index</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Command</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.Index (<em>Index</em>)</para>
</vb>
</syntax>
			<param name="Index">
				A <c>numeric </c>value that specifies the zero-based index of the item to retrieve.
			</param>
			<returns name="Character">
				The <see cref="T:DoubleAgent.Control.Command" suffix="Object" /> at the
				spedified <em>Index</em>.
			</returns>
			<remarks>
				<para>
					When you want to use the <see cref="T:DoubleAgent.Control.Commands" suffix="Collection" />
					as an <em>ordered </em>collection, you can use the <c>Index </c>property instead of the <see cref="P:DoubleAgent.Control.Commands.Item" />
					property.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Commands.Count" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Commands.Item" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Commands.Item">
			<summary>
				<para>
					Returns a <see cref="T:DoubleAgent.Control.Command" suffix="Object" /> in the collection.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>commands</em>.<c>get_Item</c> (<em>Name</em>, &amp;<em>Command</em>)</para>
</cpp>
<csharp>
<para>[<em>Command</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>.this [<em>Name</em>]</para>
</csharp>
<vbnet>
<para>[<em>Command</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c> (<em>Name</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>Command</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c> (<em>Name</em>)</para>
</vb>
</syntax>
			<param name="Name">
				A <c>string </c>value that specifies the <see cref="P:DoubleAgent.Control.Command.Name" />
				given to the command when it was defined.
			</param>
			<returns name="Command">
				The <see cref="T:DoubleAgent.Control.Command" suffix="Object" /> with the
				specified <em>Name</em>.
			</returns>
			<seealso cref="P:DoubleAgent.Control.Command.Name" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Commands.Index" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Commands.Visible">
			<summary>
				<para>
					Returns or sets a value that determines whether the <see cref="T:DoubleAgent.Control.Commands" />
					collection appears in the character's pop-up menu.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>commands</em>.<c>get_Visible</c> (&amp;<em>Visible</em>)</para>

<para><em>commands</em>.<c>put_Visible</c> (<em>Visible</em>)</para>
</cpp>
<csharp>
<para>[<em>Visible</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>.<c>Visible</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>.<c>Visible</c> = <em>Visible</em></para>
</csharp>
<vb>
<para>[<em>Visible</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.<c>Visible</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.<c>Visible</c> = <em>Visible</em></para>
</vb>
</syntax>
			<value name="Visible">
				A <c>boolean </c>value that indiciates if the <see cref="T:DoubleAgent.Control.Commands" />
				<see cref="P:DoubleAgent.Control.Commands.Caption" /> is visible.
			</value>
			<remarks>
				<para>
					For the caption to appear in the character's pop-up menu when your application is not the input-active
					client, this property must be set to <c>True </c>and the <see cref="P:DoubleAgent.Control.Commands.Caption" />
					property set for your <see cref="T:DoubleAgent.Control.Commands" /> collection. In addition, this
					property must be set to <c>True </c>for commands in your collection to appear in the pop-up menu
					when your application is input-active.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Commands.Voice">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Commands.VoiceGrammar" />
					property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Commands.VoiceCaption">
			<summary>
				<para>
					Returns or sets the text displayed for the <see cref="T:DoubleAgent.Control.Commands" /> object
					in the <see cref="T:DoubleAgent.Control.CommandsWindow" text="Voice Commands" /> window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>commands</em>.<c>get_VoiceCaption</c> (&amp;<em>VoiceCaption</em>)</para>

<para><em>commands</em>.<c>put_VoiceCaption</c> (<em>VoiceCaption</em>)</para>
</cpp>
<csharp>
<para>[<em>VoiceCaption</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>.<c>VoiceCaption</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>.<c>VoiceCaption</c> = <em>VoiceCaption</em></para>
</csharp>
<vb>
<para>[<em>VoiceCaption</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.<c>VoiceCaption</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.<c>VoiceCaption</c> = <em>VoiceCaption</em></para>
</vb>
</syntax>
			<value name="VoiceCaption">
				A <c>string </c>value that specifies the caption text.
			</value>
			<remarks>
				<para>
					The <c>VoiceCaption </c>text appears in the <see cref="T:DoubleAgent.Control.CommandsWindow" text="Voice Commands" />
					window when your client application is input-active and the character is visible. If this property is
					not set, the <see cref="P:DoubleAgent.Control.Commands.Caption" /> property is used instead. When
					neither the <c>VoiceCaption </c>mor <see cref="P:DoubleAgent.Control.Commands.Caption" /> property
					is set, then commands in the collection appear in the <see cref="T:DoubleAgent.Control.CommandsWindow" text="Voice Commands" />
					window under an <em>(undefined command)</em> title when your client application becomes input-active.
				</para>
				<para>
					The <c>VoiceCaption </c>setting also determines the text displayed in the <em>
						Listening Tip
					</em> to indicate the commands for which the character listens.
				</para>
				<para>
					If you set the <see cref="P:DoubleAgent.Control.Commands.VoiceGrammar" /> property of your
					<see cref="T:DoubleAgent.Control.Commands" /> collection, you will typically also set its
					<c>VoiceCaption </c>property.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Commands.Caption" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Commands.VoiceGrammar">
			<summary>
				<para>Returns or sets the text that is passed to the speech engine for recognition.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>commands</em>.<c>get_VoiceGrammar</c> (&amp;<em>VoiceGrammar</em>)</para>

<para><em>commands</em>.<c>put_VoiceGrammar</c> (<em>VoiceGrammar</em>)</para>
</cpp>
<csharp>
<para>[<em>VoiceGrammar</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>.<c>VoiceGrammar</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>.<c>VoiceGrammar</c> = <em>VoiceGrammar</em></para>
</csharp>
<vb>
<para>[<em>VoiceGrammar</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.<c>VoiceGrammar</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>.<c>VoiceGrammar</c> = <em>VoiceGrammar</em></para>
</vb>
</syntax>
			<value name="VoiceGrammar">
				A <c>string </c>value that specifies the recognition text.
			</value>
			<remarks>
				<para>
					If you do not supply this parameter, the <see cref="P:DoubleAgent.Control.Commands.VoiceCaption" />
					for your <see cref="T:DoubleAgent.Control.Commands" /> object will not appear in the <see cref="T:DoubleAgent.Control.CommandsWindow" text="Voice Commands" />
					window.
				</para>
			</remarks>
			<details>
				<include file="DoubleAgent.Include.xml" path="/doc/properties/details[@name='VoiceCaption']" />
			</details>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.Command">
			<summary>
				<para>
					A <c>Command </c>object is an item in a <see cref="T:DoubleAgent.Control.Commands" /> collection.
					Double Agent provides the user access to your <c>Command </c>objects when your client application
					becomes input-active.
				</para>
			</summary>
			<syntax>
				<list type="bullet">
					<item>
						<term>
							<bookmark name="Properties"></bookmark>
							The <c>Command </c>object has the following <c>properties</c>:
						</term>
						<description>
							<see cref="P:DoubleAgent.Control.Command.Caption" />,
							<see cref="P:DoubleAgent.Control.Command.ConfidenceText" />,
							<see cref="P:DoubleAgent.Control.Command.ConfidenceThreshold" />,
							<see cref="P:DoubleAgent.Control.Command.Enabled" />,
							<see cref="P:DoubleAgent.Control.Command.Name" />,
							<see cref="P:DoubleAgent.Control.Command.Visible" />,
							<see cref="P:DoubleAgent.Control.Command.VoiceCaption" />,
							<see cref="P:DoubleAgent.Control.Command.VoiceGrammar" />
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					A command may appear in either the character's pop-up menu and the <see cref="T:DoubleAgent.Control.CommandsWindow" text="Voice Commands" />
					window, or in both. To appear in the pop-up menu it must have a <see cref="P:DoubleAgent.Control.Command.Caption" />
					and have the <see cref="P:DoubleAgent.Control.Command.Visible" /> property set to <c>True</c>.
					In addition, its <see cref="T:DoubleAgent.Control.Commands" /> collection's <see cref="P:DoubleAgent.Control.Command.Visible" />
					property must also be set to <c>True</c>. To appear in the <see cref="T:DoubleAgent.Control.CommandsWindow" text="Voice Commands" />
					window, a <c>Command </c>must have its <see cref="P:DoubleAgent.Control.Command.Caption" /> and
					<see cref="P:DoubleAgent.Control.Command.VoiceGrammar" /> properties set.
				</para>
				<para>
					When Double Agent receives input for one of your commands, it sends a <see cref="E:DoubleAgent.Control.Control.Command" />
					event, and passes back the name of the <c>Command </c>as an attribute of the <see cref="T:DoubleAgent.Control.UserInput" />
					object. You can then use conditional statements to match and process the <c>Command</c>.
				</para>
				<para>
					Note that a character's pop-up menu entries do not change while the menu is displayed. If you
					add or remove commands or change their properties while the character's pop-up menu is displayed, the
					menu reflects those changes whenever the user next shows it. However, the <see cref="T:DoubleAgent.Control.CommandsWindow" text="Voice Commands" />
					window dynamically reflects any changes you make.
				</para>
			</remarks>
			<details>
				<h4 class="remarks">Referencing the Command Object</h4>
				<list type="bullet">
					<item>
						<term>
							To access the properties of a <c>Command </c>object, you reference it in its collection
							using its <see cref="P:DoubleAgent.Control.Command.Name" /> property. In VBScript and Visual Basic
							you can use the <see cref="P:DoubleAgent.Control.Command.Name" /> property directly:
						</term>
						<description>
							<code xml:space="preserve">
<i>control</i>.Characters("<i>CharacterID</i>").Commands("<i>Name</i>").<i>property</i>[ = <i>value</i>]
</code>
						</description>
					</item>
					<item>
						<term>
							For programming languages that don't support collections, use the <see cref="M:DoubleAgent.Control.Commands.Command" />
							method:
						</term>
						<description>
							<code xml:space="preserve">
<i>control</i>.Characters("<i>CharacterID</i>").Commands.Command("<i>Name</i>").<i>property</i>[ = <i>value</i>]
</code>
						</description>
					</item>
					<item>
						<term>
							You can also use a Command object by creating a reference to it. In Visual Basic, declare
							an object variable and use the <c>Set </c>statement to create the reference:
						</term>
						<description>
							<code xml:space="preserve">Dim Command1 as Object
...
Set Command1 = Agent.Characters("MyCharacterID").Commands("SampleCommand")
...
Command1.Enabled = True</code>
						</description>
					</item>
					<item>
						<term>
							You can also declare the object as type <c>DaCtlCommand </c>and create the reference. This
							convention enables early syntax checking and binding, which results in better performance:
						</term>
						<description>
							<code xml:space="preserve">Dim Command1 as DaControl.DaCtlCommand
...
Set Command1 = Agent.Characters("MyCharacterID").Commands("SampleCommand")
...
Command1.Enabled = True</code>
						</description>
					</item>
					<item>
						<term>
							In VBScript, you can't declare a reference as a particular type, but you can still declare
							the variable and set it to the <c>Command </c>in the collection:
						</term>
						<description>
							<code xml:space="preserve">Dim Command1
...
Set Command1 = Agent.Characters("MyCharacterID").Commands("SampleCommand")
...
Command1.Enabled = True</code>
						</description>
					</item>
				</list>
				<h4 class="remarks">Details</h4>
				<para>
					The following table summarizes how the properties of a <c>Command </c>affect its presentation:
				</para>
				<table>
					<tr valign="top">
						<th align="left" valign="top" width="12%">
							Caption<br />Property
						</th>
						<th align="left" valign="top" width="12%">
							Voice Caption<br />Property
						</th>
						<th align="left" valign="top" width="13%">
							Voice Grammar<br />Property
						</th>
						<th align="left" valign="top" width="13%">
							Visible<br />Property
						</th>
						<th align="left" valign="top" width="12%">
							Enabled<br />Property
						</th>
						<th align="left" valign="top" width="18%">
							Appears in Character's Pop-up
							Menu
						</th>
						<th align="left" valign="top" width="20%">Appears in Voice Commands Window</th>
					</tr>
					<tr valign="top">
						<td width="12%">Set</td>
						<td width="12%">Set</td>
						<td width="13%">Set</td>
						<td width="13%">True</td>
						<td width="12%">
							True
						</td>
						<td width="18%">
							Normal, using <c>Caption</c>
						</td>
						<td width="20%">
							Yes, using <c>VoiceCaption</c>
						</td>
					</tr>
					<tr valign="top">
						<td width="12%">Set</td>
						<td width="12%">Set</td>
						<td width="13%">
							Set
						</td>
						<td width="13%">True</td>
						<td width="12%">False</td>
						<td width="18%">
							Disabled, using <c>Caption</c>
						</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Set</td>
						<td width="12%">
							Set
						</td>
						<td width="13%">Set</td>
						<td width="13%">False</td>
						<td width="12%">True</td>
						<td width="18%">
							No
						</td>
						<td width="20%">
							Yes, using <c>VoiceCaption</c>
						</td>
					</tr>
					<tr valign="top">
						<td width="12%">
							Set
						</td>
						<td width="12%">Set</td>
						<td width="13%">Set</td>
						<td width="13%">False</td>
						<td width="12%">
							False
						</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">
							Set
						</td>
						<td width="12%">Set</td>
						<td width="13%">Empty</td>
						<td width="13%">True</td>
						<td width="12%">
							True
						</td>
						<td width="18%">
							Normal, using <c>Caption</c>
						</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Set</td>
						<td width="12%">Set</td>
						<td width="13%">Empty</td>
						<td width="13%">True</td>
						<td width="12%">
							False
						</td>
						<td width="18%">
							Disabled, using <c>Caption</c>
						</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Set</td>
						<td width="12%">Set</td>
						<td width="13%">Empty</td>
						<td width="13%">False</td>
						<td width="12%">True</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">
							Set
						</td>
						<td width="12%">Set</td>
						<td width="13%">Empty</td>
						<td width="13%">False</td>
						<td width="12%">
							False
						</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">
							Empty
						</td>
						<td width="12%">Set</td>
						<td width="13%">Set</td>
						<td width="13%">True </td>
						<td width="12%">
							True
						</td>
						<td width="18%">No</td>
						<td width="20%">
							Yes, using <c>VoiceCaption</c>
						</td>
					</tr>
					<tr valign="top">
						<td width="12%">Empty</td>
						<td width="12%">Set</td>
						<td width="13%">Set</td>
						<td width="13%">True</td>
						<td width="12%">
							False
						</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">
							Empty
						</td>
						<td width="12%">Set</td>
						<td width="13%">Set</td>
						<td width="13%">False</td>
						<td width="12%">
							True
						</td>
						<td width="18%">No</td>
						<td width="20%">
							Yes, using <c>VoiceCaption</c>
						</td>
					</tr>
					<tr valign="top">
						<td width="12%">Empty</td>
						<td width="12%">Set</td>
						<td width="13%">Set</td>
						<td width="13%">False</td>
						<td width="12%">False</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">
							Empty
						</td>
						<td width="12%">Set</td>
						<td width="13%">Empty</td>
						<td width="13%">True</td>
						<td width="12%">
							True
						</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">
							Empty
						</td>
						<td width="12%">Set</td>
						<td width="13%">Empty</td>
						<td width="13%">True</td>
						<td width="12%">
							False
						</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">
							Empty
						</td>
						<td width="12%">Set</td>
						<td width="13%">Empty</td>
						<td width="13%">False</td>
						<td width="12%">
							True
						</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">
							Empty
						</td>
						<td width="12%">Set</td>
						<td width="13%">Empty</td>
						<td width="13%">False</td>
						<td width="12%">
							False
						</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">
							Set
						</td>
						<td width="12%">Empty</td>
						<td width="13%">Set</td>
						<td width="13%">True</td>
						<td width="12%">
							True
						</td>
						<td width="18%">
							Normal, using <c>Caption</c>
						</td>
						<td width="20%">
							Yes, using <c>Caption</c>
						</td>
					</tr>
					<tr valign="top">
						<td width="12%">Set</td>
						<td width="12%">Empty</td>
						<td width="13%">
							Set
						</td>
						<td width="13%">True</td>
						<td width="12%">False</td>
						<td width="18%">
							Disabled, using <c>Caption</c>
						</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Set</td>
						<td width="12%">
							Empty
						</td>
						<td width="13%">Set</td>
						<td width="13%">False</td>
						<td width="12%">True</td>
						<td width="18%">
							No
						</td>
						<td width="20%">
							Yes, using <c>Caption</c>
						</td>
					</tr>
					<tr valign="top">
						<td width="12%">
							Set
						</td>
						<td width="12%">Empty</td>
						<td width="13%">Set</td>
						<td width="13%">False</td>
						<td width="12%">
							False
						</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">
							Set
						</td>
						<td width="12%">Empty</td>
						<td width="13%">Empty</td>
						<td width="13%">True</td>
						<td width="12%">
							True
						</td>
						<td width="18%">
							Normal, using <c>Caption</c>
						</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Set</td>
						<td width="12%">Empty</td>
						<td width="13%">Empty</td>
						<td width="13%">True</td>
						<td width="12%">False</td>
						<td width="18%">
							Disabled, using <c>Caption</c>
						</td>
						<td width="20%">
							No
						</td>
					</tr>
					<tr valign="top">
						<td width="12%">Set</td>
						<td width="12%">Empty</td>
						<td width="13%">
							Empty
						</td>
						<td width="13%">False</td>
						<td width="12%">True</td>
						<td width="18%">No</td>
						<td width="20%">
							No
						</td>
					</tr>
					<tr valign="top">
						<td width="12%">Set</td>
						<td width="12%">Empty</td>
						<td width="13%">
							Empty
						</td>
						<td width="13%">False</td>
						<td width="12%">False</td>
						<td width="18%">No</td>
						<td width="20%">
							No
						</td>
					</tr>
					<tr valign="top">
						<td width="12%">Empty</td>
						<td width="12%">Empty</td>
						<td width="13%">
							Set
						</td>
						<td width="13%">True </td>
						<td width="12%">True</td>
						<td width="18%">No</td>
						<td width="20%">
							No<sup>*</sup>
						</td>
					</tr>
					<tr valign="top">
						<td width="12%">Empty</td>
						<td width="12%">Empty</td>
						<td width="13%">Set</td>
						<td width="13%">True</td>
						<td width="12%">False</td>
						<td width="18%">No</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Empty</td>
						<td width="12%">Empty</td>
						<td width="13%">Set</td>
						<td width="13%">False</td>
						<td width="12%">True</td>
						<td width="18%">No</td>
						<td width="20%">
							No<sup>*</sup>
						</td>
					</tr>
					<tr valign="top">
						<td width="12%">Empty</td>
						<td width="12%">
							Empty
						</td>
						<td width="13%">Set</td>
						<td width="13%">False</td>
						<td width="12%">False</td>
						<td width="18%">
							No
						</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Empty</td>
						<td width="12%">
							Empty
						</td>
						<td width="13%">Empty</td>
						<td width="13%">True</td>
						<td width="12%">True</td>
						<td width="18%">
							No
						</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Empty</td>
						<td width="12%">
							Empty
						</td>
						<td width="13%">Empty</td>
						<td width="13%">True</td>
						<td width="12%">False</td>
						<td width="18%">
							No
						</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Empty</td>
						<td width="12%">
							Empty
						</td>
						<td width="13%">Empty</td>
						<td width="13%">False</td>
						<td width="12%">True</td>
						<td width="18%">
							No
						</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td width="12%">Empty</td>
						<td width="12%">
							Empty
						</td>
						<td width="13%">Empty</td>
						<td width="13%">False</td>
						<td width="12%">False</td>
						<td width="18%">
							No
						</td>
						<td width="20%">No</td>
					</tr>
					<tr valign="top">
						<td colspan="7" width="100%">
							<sup>*</sup>
							The command is still voice-accessible.
						</td>
					</tr>
				</table>
			</details>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Command.Caption">
			<summary>
				<para>
					Specifies the text displayed for a <see cref="T:DoubleAgent.Control.Command" /> in the character's
					pop-up menu.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>command</em>.<c>get_Caption</c> (&amp;<em>Caption</em>)</para>

<para><em>command</em>.<c>put_Caption</c> (<em>Caption</em>)</para>
</cpp>
<csharp>
<para>[<em>Caption</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>("<em>Name</em>").<c>Caption</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>("<em>Name</em>").<c>Caption</c> = <em>Caption</em></para>
</csharp>
<vb>
<para>[<em>Caption</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>Caption</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>Caption</c> = <em>Caption</em></para>
</vb>
</syntax>
			<value name="Caption">
				A <c>string </c>value that specifies the text displayed in the menu.
			</value>
			<remarks>
				<para>
					To specify an access key (underlined mnemonic) for your <c>Caption</c>, include an ampersand
					(&amp;) before the mnemonic character.
				</para>
				<para>
					If you don't define a <see cref="P:DoubleAgent.Control.Command.VoiceCaption" /> for your command,
					the <c>Caption </c>property will be used.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Command.Confidence">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Command.ConfidenceThreshold" />
					property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Command.ConfidenceText">
			<summary>
				<para>
					Returns or sets the text that appears in the <em>Listening tip</em>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>command</em>.<c>get_ConfidenceText</c> (&amp;<em>ConfidenceText</em>)</para>

<para><em>command</em>.<c>put_ConfidenceText</c> (<em>ConfidenceText</em>)</para>
</cpp>
<csharp>
<para>[<em>ConfidenceText</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>("<em>Name</em>").<c>ConfidenceText</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>("<em>Name</em>").<c>ConfidenceText</c> = <em>ConfidenceText</em></para>
</csharp>
<vb>
<para>[<em>ConfidenceText</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>ConfidenceText</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>ConfidenceText</c> = <em>ConfidenceText</em></para>
</vb>
</syntax>
			<value name="ConfidenceText">
				A <c>string </c>value that specifies the text displayed in the <em>
					Listening
					Tip
				</em>.
			</value>
			<remarks>
				<para>
					When the <see cref="P:DoubleAgent.Control.UserInput.Confidence" /> value of the best match
					<em>does not exceed </em>the command's <see cref="P:DoubleAgent.Control.Command.ConfidenceThreshold" />
					property, Double Agent displays the text specified in <c>ConfidenceText </c>in the <em>
						Listening
						Tip
					</em>.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Command.ConfidenceThreshold" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Command.ConfidenceThreshold">
			<summary>
				<para>
					Returns or sets whether the command's <see cref="P:DoubleAgent.Control.Command.ConfidenceText" />
					appears in the <em>Listening tip</em>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>command</em>.<c>get_ConfidenceThreshold</c> (&amp;<em>ConfidenceThreshold</em>)</para>

<para><em>command</em>.<c>put_ConfidenceThreshold</c> (<em>ConfidenceThreshold</em>)</para>
</cpp>
<csharp>
<para>[<em>ConfidenceThreshold</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>("<em>Name</em>").<c>ConfidenceThreshold</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>("<em>Name</em>").<c>ConfidenceThreshold</c> = <em>ConfidenceThreshold</em></para>
</csharp>
<vb>
<para>[<em>ConfidenceThreshold</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>ConfidenceThreshold</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>ConfidenceThreshold</c> = <em>ConfidenceThreshold</em></para>
</vb>
</syntax>
			<value name="ConfidenceThreshold">
				A <c>numeric </c>value that specifies the confidence threshold
				for the command.
			</value>
			<remarks>
				<para>
					If the <see cref="P:DoubleAgent.Control.UserInput.Confidence" /> value of the best match <em>
						does not exceed
					</em> the value you set for the <c>ConfidenceThreshold </c>property, the text supplied
					in <see cref="P:DoubleAgent.Control.Command.ConfidenceText" /> is displayed in the <em>
						Listening
						Tip
					</em>.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Command.ConfidenceText" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Command.Enabled">
			<summary>
				<para>
					Returns or sets whether the <see cref="T:DoubleAgent.Control.Command" /> is enabled in the
					character's pop-up menu.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>command</em>.<c>get_Enabled</c> (&amp;<em>Enabled</em>)</para>

<para><em>command</em>.<c>put_Enabled</c> (<em>Enabled</em>)</para>
</cpp>
<csharp>
<para>[<em>Enabled</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>("<em>Name</em>").<c>Enabled</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>("<em>Name</em>").<c>Enabled</c> = <em>Enabled</em></para>
</csharp>
<vb>
<para>[<em>Enabled</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>Enabled</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>Enabled</c> = <em>Enabled</em></para>
</vb>
</syntax>
			<value name="Enabled">
				A <c>boolean </c>value that indicates if the command is enabled.
			</value>
			<remarks>
				<para>
					If the <c>Enabled </c>property is set to <c>True</c>, the <see cref="T:DoubleAgent.Control.Command" />
					object's <see cref="P:DoubleAgent.Control.Command.Caption" /> appears as normal text in the character's
					pop-up menu when the client application is input-active. If the <c>Enabled </c>property is <c>False</c>,
					the <see cref="P:DoubleAgent.Control.Command.Caption" /> appears as unavailable (disabled)
					text. A disabled <see cref="T:DoubleAgent.Control.Command" /> is also not accessible for voice input.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Command.HelpContextID">
			<summary>Not Implemented</summary>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Command.Name">
			<summary>
				<para>
					The unique name that identifies the <see cref="T:DoubleAgent.Control.Command" suffix="Object" />
					in the <see cref="T:DoubleAgent.Control.Commands" suffix="Collection" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>command</em>.<c>get_Name</c> (&amp;<em>Name</em>)</para>
</cpp>
<csharp>
<para>[<em>Name</em> = ]<em>command</em>.<c>Name</c></para>
</csharp>
<vb>
<para>[<em>Name</em> = ]<em>command</em>.<c>Name</c></para>
</vb>
</syntax>
			<value name="Name">
				A <c>string </c>value that identifies the <see cref="T:DoubleAgent.Control.Command" suffix="Object" />.
			</value>
			<remarks>
				<para>
					When you keep a reference to a <see cref="T:DoubleAgent.Control.Command" suffix="Object" />
					object, you can use this property to relate it back to it's owner <see cref="T:DoubleAgent.Control.Commands" suffix="Collection" />.
				</para>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Commands.Add" suffix="Method" prefix="The" />
			<seealso cref="M:DoubleAgent.Control.Commands.Insert" suffix="Method" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Commands.Item" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Command.Visible">
			<summary>
				Returns or sets whether the <see cref="T:DoubleAgent.Control.Command" /> is visible in the
				character's pop-up menu.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>command</em>.<c>get_Visible</c> (&amp;<em>Visible</em>)</para>

<para><em>command</em>.<c>put_Visible</c> (<em>Visible</em>)</para>
</cpp>
<csharp>
<para>[<em>Visible</em>] = <em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>("<em>Name</em>").<c>Visible</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>("<em>Name</em>").<c>Visible</c>[ = <em>Visible</em>]</para>
</csharp>
<vb>
<para>[<em>Visible</em>] = <em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>Visible</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>Visible</c>[ = <em>Visible</em>]</para>
</vb>
</syntax>
			<value name="Visible">
				A <c>boolean </c>value that indicates if the command is visible.
			</value>
			<remarks>
				<para>
					Set this property to <c>False </c>when you want to include voice input for your command without
					having it appear in the pop-up menu for the character. If you set a <see cref="T:DoubleAgent.Control.Command" />
					object's <see cref="P:DoubleAgent.Control.Command.Caption" /> property to the empty string (""),
					the caption text will not appear in the pop-up menu (for example, as a blank line), regardless of its
					<c>Visible </c>property setting.
				</para>
				<para>
					The <c>Visible </c>property of a <see cref="T:DoubleAgent.Control.Command" /> object's parent
					<see cref="T:DoubleAgent.Control.Commands" /> collection does not affect the <c>Visible </c>property
					of the <see cref="T:DoubleAgent.Control.Command" />.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Command.Voice">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Command.VoiceGrammar" />
					property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Command.VoiceCaption">
			<summary>
				Sets or returns the text displayed for the <see cref="T:DoubleAgent.Control.Command" />
				object in the <see cref="T:DoubleAgent.Control.CommandsWindow" text="Voice Commands" /> window.
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>command</em>.<c>get_VoiceCaption</c> (&amp;<em>VoiceCaption</em>)</para>

<para><em>command</em>.<c>put_VoiceCaption</c> (<em>VoiceCaption</em>)</para>
</cpp>
<csharp>
<para>[<em>VoiceCaption</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>("<em>Name</em>").<c>VoiceCaption</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>("<em>Name</em>").<c>VoiceCaption</c> = <em>VoiceCaption</em></para>
</csharp>
<vb>
<para>[<em>VoiceCaption</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>VoiceCaption</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>VoiceCaption</c> = <em>VoiceCaption</em></para>
</vb>
</syntax>
			<remarks>
				<para>
					This text will appear in the <see cref="T:DoubleAgent.Control.CommandsWindow" text="Voice Commands" />
					window when your client application is input-active and the character is visible. If this property is
					not set, the <see cref="P:DoubleAgent.Control.Command.Caption" /> property is used instead. When
					neither the <c>VoiceCaption </c>nor <see cref="P:DoubleAgent.Control.Command.Caption" /> property
					is set, the command does not appear in the <see cref="T:DoubleAgent.Control.CommandsWindow" text="Voice Commands" />
					window.
				</para>
				<para>
					If you define a <see cref="T:DoubleAgent.Control.Command" /> object in a <see cref="T:DoubleAgent.Control.Commands" />
					collection with a non-blank <see cref="P:DoubleAgent.Control.Commands.VoiceCaption" /> property,
					you will typically also set the <see cref="T:DoubleAgent.Control.Command" />'s <c>VoiceCaption </c>
					property.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Command.Caption" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Command.VoiceGrammar">
			<summary>
				<para>
					Returns or sets the grammar text that is passed to the speech recognition engine for matching
					this <see cref="T:DoubleAgent.Control.Command" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>command</em>.<c>get_VoiceGrammar</c> (&amp;<em>VoiceGrammar</em>)</para>

<para><em>command</em>.<c>put_VoiceGrammar</c> (<em>VoiceGrammar</em>)</para>
</cpp>
<csharp>
<para>[<em>VoiceGrammar</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>("<em>Name</em>").<c>VoiceGrammar</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Commands</c>("<em>Name</em>").<c>VoiceGrammar</c> = <em>VoiceGrammar</em></para>
</csharp>
<vb>
<para>[<em>VoiceGrammar</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>VoiceGrammar</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Commands</c>("<em>Name</em>").<c>VoiceGrammar</c> = <em>VoiceGrammar</em></para>
</vb>
</syntax>
			<value name="VoiceGrammar">
				A <c>string </c>value that specifies the recognition text.
			</value>
			<remarks>
				<para>
					If you do not supply this parameter, the <see cref="P:DoubleAgent.Control.Command.VoiceCaption" />
					for your <see cref="T:DoubleAgent.Control.Command" /> object will not appear in the <see cref="T:DoubleAgent.Control.CommandsWindow" text="Voice Commands" />
					window. If you specify a <c>VoiceGrammar </c>parameter but not a <see cref="P:DoubleAgent.Control.Command.VoiceCaption" />(or
					<see cref="P:DoubleAgent.Control.Command.Caption" />), the command will not appear in the <see cref="T:DoubleAgent.Control.CommandsWindow" text="Voice Commands" />
					window, but it will be voice-accessible when the client application becomes input-active.
				</para>
			</remarks>
			<details>
				<include file="DoubleAgent.Include.xml" path="/doc/properties/details[@name='VoiceCaption']" />
			</details>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.Balloon">
			<summary>
				<para>
					Double Agent supports textual captioning of the <see cref="M:DoubleAgent.Control.Character.Speak" />
					method using a cartoon word balloon. The <see cref="M:DoubleAgent.Control.Character.Think" /> method
					lets you display text without audio output in a <em>thought </em>balloon.
				</para>
				<para>
					The <c>Balloon </c>object allows you to customize the appearance and behaviour of a character's
					word balloon. It can be accessed using the <see cref="T:DoubleAgent.Control.Character" />'s <see cref="P:DoubleAgent.Control.Character.Balloon" />
					property.
				</para>
			</summary>
			<syntax>
				<list type="bullet">
					<item>
						<term>
							<bookmark name="Properties"></bookmark>
							The <c>Balloon </c>object has the following <c>properties</c>:
						</term>
						<description>
							<see cref="P:DoubleAgent.Control.Balloon.AutoHide" />,
							<see cref="P:DoubleAgent.Control.Balloon.AutoPace" />,
							<see cref="P:DoubleAgent.Control.Balloon.BackColor" />,
							<see cref="P:DoubleAgent.Control.Balloon.BorderColor" />,
							<see cref="P:DoubleAgent.Control.Balloon.CharsPerLine" />,
							<see cref="P:DoubleAgent.Control.Balloon.Enabled" />,
							<see cref="P:DoubleAgent.Control.Balloon.FontBold" />,
							<see cref="P:DoubleAgent.Control.Balloon.FontCharSet" />,
							<see cref="P:DoubleAgent.Control.Balloon.FontItalic" />,
							<see cref="P:DoubleAgent.Control.Balloon.FontName" />,
							<see cref="P:DoubleAgent.Control.Balloon.FontSize" />,
							<see cref="P:DoubleAgent.Control.Balloon.FontStrikethru" />,
							<see cref="P:DoubleAgent.Control.Balloon.FontUnderline" />,
							<see cref="P:DoubleAgent.Control.Balloon.NumberOfLines" />,
							<see cref="P:DoubleAgent.Control.Balloon.ShowPartialLines" />,
							<see cref="P:DoubleAgent.Control.Balloon.SizeToText" />,
							<see cref="P:DoubleAgent.Control.Balloon.Style" />,
							<see cref="P:DoubleAgent.Control.Balloon.TextColor" />,
							<see cref="P:DoubleAgent.Control.Balloon.Visible" />
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					A character's initial word balloon window defaults are defined and compiled in the Microsoft
					Agent Character Editor. Once running, the balloon's <c>Enabled </c>and <c>Font </c>properties may
					be overridden by the user. If a user changes the word balloon's properties, they affect all characters.
					Both the <see cref="M:DoubleAgent.Control.Character.Speak" /> and <see cref="M:DoubleAgent.Control.Character.Think" />
					word balloons use the same property settings for size. You can access the properties for a character's
					word balloon through the <c>Balloon </c>object, which is a child of the <see cref="T:DoubleAgent.Control.Character" /> object.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.BackColor">
			<summary>
				<para>Returns or sets the background color of a character's word balloon.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>balloon</em>-&gt;<c>get_BackColor</c> (<em>&amp;BackColor</em>)</para>

<para><em>balloon</em>-&gt;<c>put_BackColor</c> (<em>BackColor</em>)</para>
</cpp>
<csharp>
<para>[<em>BackColor</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>BackColor</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>BackColor</c> = <em>BackColor</em></para>
</csharp>
<vb>
<para>[<em>BackColor</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>BackColor</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>BackColor</c> = <em>BackColor</em></para>
</vb>
</syntax>
			<value name="BackColor">
				A <c>numeric </c>value that specifies the background color.
			</value>
			<remarks>
				<para>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/para[@name='Color']" />
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ThisClientOnly']" />
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.BorderColor">
			<summary>
				<para>Returns or sets the border color of a character's word balloon.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>balloon</em>-&gt;<c>get_BorderColor</c> (<em>&amp;BorderColor</em>)</para>

<para><em>balloon</em>-&gt;<c>put_BorderColor</c> (<em>BorderColor</em>)</para>
</cpp>
<csharp>
<para>[<em>BorderColor</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>BorderColor</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>BorderColor</c> = <em>BorderColor</em></para>
</csharp>
<vb>
<para>[<em>BorderColor</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>BorderColor</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>BorderColor</c> = <em>BorderColor</em></para>
</vb>
</syntax>
			<value name="BorderColor">
				A <c>numeric </c>value that specifies the outline color.
			</value>
			<remarks>
				<para>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/para[@name='Color']" />
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ThisClientOnly']" />
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.CharsPerLine">
			<summary>
				<para>Returns or sets the characters per line used for a character's word balloon.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>balloon</em>-&gt;<c>get_CharsPerLine</c> (<em>&amp;CharsPerLine</em>)</para>

<para><em>balloon</em>-&gt;<c>put_CharsPerLine</c> (<em>CharsPerLine</em>)</para>
</cpp>
<csharp>
<para>[<em>CharsPerLine</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>CharsPerLine</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>CharsPerLine</c> = <em>CharsPerLine</em></para>
</csharp>
<vb>
<para>[<em>CharsPerLine</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>CharsPerLine</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>CharsPerLine</c> = <em>CharsPerLine</em></para>
</vb>
</syntax>
			<value name="CharsPerLine">
				A <c>numeric </c>value that specifies the average number of characters
				per line.
			</value>
			<remarks>
				<para>
					The <c>CharsPerLine </c>property is the average number of characters (letters) displayed in
					the word balloon. For backward compatibility, you can also set the value using the <see cref="P:DoubleAgent.Control.Balloon.Style" />
					property.
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ThisClientOnly']" />
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Balloon.Style" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.Enabled">
			<summary>
				<para>Returns whether the word balloon is enabled for a character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>balloon</em>-&gt;<c>get_Enabled</c> (<em>&amp;Enabled</em>)</para>
</cpp>
<csharp>
<para>[<em>Enabled</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>Enabled</c></para>
</csharp>
<vb>
<para>[<em>Enabled</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>Enabled</c></para>
</vb>
</syntax>
			<value name="Enabled">
				A <c>boolean </c>value that indicates if the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.Enabled" />
				style is set.
			</value>
			<remarks>
				<include path="/doc/members/member[@name='F:DoubleAgent.Control.BalloonStyleFlags.Enabled']/remarks/para" />
				<para>
					The default enabled style is set as part of a character's definition when the character is
					compiled in the Microsoft Agent Character Editor. If a character is defined to not support the word
					balloon, this property will always be <c>False </c>for the character.
				</para>
				<para>
					The user can override the enabled style for <em>all </em>characters in the <see cref="T:DoubleAgent.Control.PropertySheet" text="Advanced Character Options" />
					window.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Balloon.Style" prefix="The" suffix="Property" />
			<seealso cref="P:DoubleAgent.Control.Settings.BalloonEnabled" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.FontCharSet">
			<summary>
				<para>Returns or sets the character set for the font used in a character's word balloon.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>balloon</em>-&gt;<c>get_FontCharSet</c> (<em>&amp;FontCharSet</em>)</para>

<para><em>balloon</em>-&gt;<c>put_FontCharSet</c> (<em>FontCharSet</em>)</para>
</cpp>
<csharp>
<para>[<em>FontCharSet</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>FontCharSet</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>FontCharSet</c> = <em>FontCharSet</em></para>
</csharp>
<vb>
<para>[<em>FontCharSet</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>FontCharSet</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>FontCharSet</c> = <em>FontCharSet</em></para>
</vb>
</syntax>
			<value name="FontCharSet">
				A <c>numeric </c>value that specifies one of the character sets supported
				by Windows.
			</value>
			<remarks>
				<para>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/para[@name='DefaultBalloonFont']" />
				</para>
				<note>
					If you're using a character that you didn't compile, check the <see cref="P:DoubleAgent.Control.Balloon.FontName" />
					and <c>FontCharSet </c>properties for the character to determine whether they are appropriate for
					your locale. You may need to set these values before using the <see cref="M:DoubleAgent.Control.Character.Speak" />
					method to ensure appropriate text display within the word balloon.
				</note>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ThisClientOnly']" />
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Balloon.FontName" prefix="The" suffix="Property" />
			<seealso cref="P:DoubleAgent.Control.Settings.BalloonFont" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.FontName">
			<summary>
				<para>Returns or sets the font used in the word balloon for the specified character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>balloon</em>-&gt;<c>get_FontName</c> (<em>&amp;FontName</em>)</para>

<para><em>balloon</em>-&gt;<c>put_FontName</c> (<em>FontName</em>)</para>
</cpp>
<csharp>
<para>[<em>FontName</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>FontName</c>
<para></para>
<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>FontName</c> = <em>FontName</em></para>
</csharp>
<vb>
<para>[<em>FontName</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>FontName</c>
<para></para>
<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>FontName</c> = <em>FontName</em></para>
</vb>
</syntax>
			<value name="FontName">
				A <c>string </c>value that specifies the font name.
			</value>
			<remarks>
				<para>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/para[@name='DefaultBalloonFont']" />
				</para>
				<note>
					If you're using a character that you didn't compile, check the <c>FontName </c>and <see cref="P:DoubleAgent.Control.Balloon.FontCharSet" />
					properties for the character to determine whether they are appropriate for your locale. You may need
					to set these values before using the <see cref="M:DoubleAgent.Control.Character.Speak" /> method
					to ensure appropriate text display within the word balloon.
				</note>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ThisClientOnly']" />
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Balloon.FontCharSet" prefix="The" suffix="Property" />
			<seealso cref="P:DoubleAgent.Control.Settings.BalloonFont" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.FontBold">
			<summary>
				<para>Returns or sets the font style of a character's the word balloon.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>balloon</em>-&gt;<c>get_FontBold</c> (<em>&amp;FontBold</em>)</para>

<para><em>balloon</em>-&gt;<c>put_FontBold</c> (<em>FontBold</em>)</para>
</cpp>
<csharp>
<para>[<em>FontBold</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>FontBold</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>FontBold</c> = <em>FontBold</em></para>
</csharp>
<vb>
<para>[<em>FontBold</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>FontBold</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>FontBold</c> = <em>FontBold</em></para>
</vb>
</syntax>
			<value name="FontBold">
				A <c>boolean </c>value that indicates if the font is bold.
			</value>
			<remarks>
				<para>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/para[@name='DefaultBalloonFont']" />
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ThisClientOnly']" />
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Settings.BalloonFont" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.FontItalic">
			<summary>
				<para>Returns or sets the font style of a character's the word balloon.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>balloon</em>-&gt;<c>get_FontItalic</c> (<em>&amp;FontItalic</em>)</para>

<para><em>balloon</em>-&gt;<c>put_FontItalic</c> (<em>FontItalic</em>)</para>
</cpp>
<csharp>
<para>[<em>FontItalic</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>FontItalic</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>FontItalic</c> = <em>FontItalic</em></para>
</csharp>
<vb>
<para>[<em>FontItalic</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>FontItalic</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>FontItalic</c> = <em>FontItalic</em></para>
</vb>
</syntax>
			<value name="FontItalic">
				A <c>boolean </c>value that indicates if the font is italic.
			</value>
			<remarks>
				<para>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/para[@name='DefaultBalloonFont']" />
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ThisClientOnly']" />
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Settings.BalloonFont" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.FontSize">
			<summary>
				<para>Returns or sets the font size supported for the word balloon for the specified character.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>balloon</em>-&gt;<c>get_FontSize</c> (<em>&amp;FontSize</em>)</para>

<para><em>balloon</em>-&gt;<c>put_FontSize</c> (<em>FontSize</em>)</para>
</cpp>
<csharp>
<para>[<em>FontSize</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>FontSize</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>FontSize</c> = <em>FontSize</em></para>
</csharp>
<vb>
<para>[<em>FontSize</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>FontSize</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>FontSize</c> = <em>FontSize</em></para>
</vb>
</syntax>
			<value name="FontSize">
				A <c>numeric </c>value that specifies the font size, in points.
			</value>
			<remarks>
				<para>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/para[@name='DefaultBalloonFont']" />
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ThisClientOnly']" />
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Settings.BalloonFont" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.FontStrikethru">
			<summary>
				<para>Returns or sets the font style of a character's the word balloon.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>balloon</em>-&gt;<c>get_FontStrikethru</c> (<em>&amp;FontStrikethru</em>)</para>

<para><em>balloon</em>-&gt;<c>put_FontStrikethru</c> (<em>FontStrikethru</em>)</para>
</cpp>
<csharp>
<para>[<em>FontStrikethru</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>FontStrikethru</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>FontStrikethru</c> = <em>FontStrikethru</em></para>
</csharp>
<vb>
<para>[<em>FontStrikethru</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>FontStrikethru</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>FontStrikethru</c> = <em>FontStrikethru</em></para>
</vb>
</syntax>
			<value name="FontStrikethru">
				A <c>boolean </c>value that indicates if the font has the <em>
					strikethru
				</em> style.
			</value>
			<remarks>
				<para>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/para[@name='DefaultBalloonFont']" />
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ThisClientOnly']" />
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Settings.BalloonFont" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.FontUnderline">
			<summary>
				<para>Returns or sets the font style of a character's word balloon.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>balloon</em>-&gt;<c>get_FontUnderline</c> (<em>&amp;FontUnderline</em>)</para>

<para><em>balloon</em>-&gt;<c>put_FontUnderline</c> (<em>FontUnderline</em>)</para>
</cpp>
<csharp>
<para>[<em>FontUnderline</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>FontUnderline</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>FontUnderline</c> = <em>FontUnderline</em></para>
</csharp>
<vb>
<para>[<em>FontUnderline</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>FontUnderline</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>FontUnderline</c> = <em>FontUnderline</em></para>
</vb>
</syntax>
			<value name="FontUnderline">
				A <c>boolean </c>value that indicates if the font is underlined.
			</value>
			<remarks>
				<para>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/para[@name='DefaultBalloonFont']" />
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ThisClientOnly']" />
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Settings.BalloonFont" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.ForeColor">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Balloon.TextColor" />
					property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.TextColor">
			<summary>
				<para>Returns the text color displayed in a character's word balloon.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>balloon</em>-&gt;<c>get_TextColor</c> (<em>&amp;TextColor</em>)</para>

<para><em>balloon</em>-&gt;<c>put_TextColor</c> (<em>TextColor</em>)</para>
</cpp>
<csharp>
<para>[<em>TextColor</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>TextColor</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>TextColor</c> = <em>TextColor</em></para>
</csharp>
<vb>
<para>[<em>TextColor</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>TextColor</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>TextColor</c> = <em>TextColor</em></para>
</vb>
</syntax>
			<value name="TextColor">
				A <c>numeric </c>value that specifies the text color.
			</value>
			<remarks>
				<para>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/para[@name='Color']" />
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.NumberOfLines">
			<summary>
				<para>Returns or sets the number of lines used for a character's word balloon.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>balloon</em>-&gt;<c>get_NumberOfLines</c> (<em>&amp;NumberOfLines</em>)</para>

<para><em>balloon</em>-&gt;<c>put_NumberOfLines</c> (<em>NumberOfLines</em>)</para>
</cpp>
<csharp>
<para>[<em>NumberOfLines</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>NumberOfLines</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>NumberOfLines</c> = <em>NumberOfLines</em></para>
</csharp>
<vb>
<para>[<em>NumberOfLines</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>NumberOfLines</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>NumberOfLines</c> = <em>NumberOfLines</em></para>
</vb>
</syntax>
			<value name="NumberOfLines">
				A <c>numeric </c>value that specifies the number of lines in a fixed-size
				word balloon.
			</value>
			<remarks>
				The <c>NumberOfLines </c>property is only used if the word balloon doesn't have the <c>AutoSize </c>style.
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Balloon.Style" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.Style">
			<summary>
				<para>Returns or sets the character's word balloon output style.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>balloon</em>-&gt;<c>get_Style</c> (<em>&amp;Style</em>)</para>

<para><em>balloon</em>-&gt;<c>put_Style</c> (<em>Style</em>)</para>
</cpp>
<csharp>
<para>[<em>Style</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>Style</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>Style</c> = <em>Style</em></para>
</csharp>
<vb>
<para>[<em>Style</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>Style</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>Style</c> = <em>Style</em></para>
</vb>
</syntax>
			<value name="Style">
				An <c>numeric </c>value that represents the balloon's output style. The style
				value is a bit field with bits defined as follows:
				<list type="table">
					<item>
						<term>bit 0 (&amp;H00000001)</term>
						<description>
							<see cref="P:DoubleAgent.Control.Balloon.Enabled" />
						</description>
					</item>
					<item>
						<term>bit 1 (&amp;H00000002)</term>
						<description>
							<see cref="P:DoubleAgent.Control.Balloon.SizeToText" />
						</description>
					</item>
					<item>
						<term>bit 2 (&amp;H00000004)</term>
						<description>
							<see cref="P:DoubleAgent.Control.Balloon.AutoHide" />
						</description>
					</item>
					<item>
						<term>bit 3 (&amp;H00000008)</term>
						<description>
							<see cref="P:DoubleAgent.Control.Balloon.AutoPace" />
						</description>
					</item>
					<item>
						<term>bit 4 (&amp;H00000010)</term>
						<description>
							<see cref="P:DoubleAgent.Control.Balloon.ShowPartialLines" />
						</description>
					</item>
					<item>
						<term>bits 16-23</term>
						<description>
							<see cref="P:DoubleAgent.Control.Balloon.CharsPerLine" />
						</description>
					</item>
					<item>
						<term>bits 24-31</term>
						<description>
							<see cref="P:DoubleAgent.Control.Balloon.NumberOfLines" />
						</description>
					</item>
				</list>
			</value>
			<remarks>
				<para>
					All of the settings included in the <c>Style </c>property can be accessed using specific <see cref="T:DoubleAgent.Control.Balloon" />
					object properties. The <c>Style </c>property lets you retrieve or set all of these settings at
					once.
				</para>
			</remarks>
			<details>
				<list type="bullet">
					<item>
						<include path="/doc/members/member[@name='F:DoubleAgent.Control.BalloonStyleFlags.Enabled']/remarks/para" />
					</item>
					<item>
						<include path="/doc/members/member[@name='F:DoubleAgent.Control.BalloonStyleFlags.SizeToText']/remarks/para" />
					</item>
					<item>
						<include path="/doc/members/member[@name='F:DoubleAgent.Control.BalloonStyleFlags.AutoHide']/remarks/para" />
					</item>
					<item>
						<include path="/doc/members/member[@name='F:DoubleAgent.Control.BalloonStyleFlags.AutoPace']/remarks/para" />
					</item>
					<item>
						<include path="/doc/members/member[@name='F:DoubleAgent.Control.BalloonStyleFlags.ShowPartialLines']/remarks/para" />
					</item>
					<item>
						The <c>Style </c>property also contains the <see cref="P:DoubleAgent.Control.Balloon.CharsPerLine" />
						in the lower byte of the upper word and the <see cref="P:DoubleAgent.Control.Balloon.NumberOfLines" />
						in the high byte of the upper word. The value for the <see cref="P:DoubleAgent.Control.Balloon.CharsPerLine" />
						must be between 8 and 255, and the <see cref="P:DoubleAgent.Control.Balloon.NumberOfLines" />
						must be between 1 and 128. If you provide an invalid value for the <c>Style </c>property, Double
						Agent will raise an error.
					</item>
				</list>
				<para>
					The defaults for the <c>Style </c>property are set when the character is compiled with the
					Microsoft Agent Character Editor.
				</para>
				<note>
					The <c>Style </c>property can be set even if the user has disabled word balloons in the <see cref="T:DoubleAgent.Control.PropertySheet" text="Advanced Character Options" />
					window.
				</note>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ThisClientOnly']" />
				</note>
			</details>
			<seealso cref="P:DoubleAgent.Control.Balloon.AutoHide" prefix="The" suffix="Property" />
			<seealso cref="P:DoubleAgent.Control.Balloon.AutoPace" prefix="The" suffix="Property" />
			<seealso cref="P:DoubleAgent.Control.Balloon.CharsPerLine" prefix="The" suffix="Property" />
			<seealso cref="P:DoubleAgent.Control.Balloon.NumberOfLines" prefix="The" suffix="Property" />
			<seealso cref="P:DoubleAgent.Control.Balloon.Enabled" prefix="The" suffix="Property" />
			<seealso cref="P:DoubleAgent.Control.Balloon.SizeToText" prefix="The" suffix="Property" />
			<seealso cref="P:DoubleAgent.Control.Balloon.ShowPartialLines" prefix="The" suffix="Property" />
			<seealso cref="T:DoubleAgent.Control.BalloonStyleFlags" suffix="Enumeration" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.Visible">
			<summary>
				<para>Returns or sets the visiblity of a character's word balloon.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>balloon</em>-&gt;<c>get_Visible</c> (<em>&amp;Visible</em>)</para>

<para><em>balloon</em>-&gt;<c>put_Visible</c> (<em>Visible</em>)</para>
</cpp>
<csharp>
<para>[<em>Visible</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>Visible</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>Visible</c> = <em>Visible</em></para>
</csharp>
<vb>
<para>[<em>Visible</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>Visible</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>Visible</c> = <em>Visible</em></para>
</vb>
</syntax>
			<value name="Visible">
				A <c>boolean </c>value that indicates if the balloon is visible.
			</value>
			<remarks>
				<para>
					If you follow a <see cref="M:DoubleAgent.Control.Character.Speak" /> or <see cref="M:DoubleAgent.Control.Character.Think" />
					call with a statement that changes this property, it may not affect the balloon's <c>Visible </c>
					state because the <see cref="M:DoubleAgent.Control.Character.Speak" /> or <see cref="M:DoubleAgent.Control.Character.Think" />
					call gets queued, but the call to set this property does not. Therefore, only set this value when no
					<see cref="M:DoubleAgent.Control.Character.Speak" /> or <see cref="M:DoubleAgent.Control.Character.Think" />
					calls are in the character's queue.
				</para>
				<para>
					If you attempt to set this property while the character is speaking, moving, or being dragged,
					the property setting does not take effect until the preceding operation is completed.
				</para>
				<para>
					Calling the <see cref="M:DoubleAgent.Control.Character.Speak" /> and <see cref="M:DoubleAgent.Control.Character.Think" />
					methods automatically makes the balloon visible, setting the <c>Visible </c>property to <c>True</c>.
					If the character's balloon <see cref="P:DoubleAgent.Control.Balloon.AutoHide" /> property is enabled,
					the balloon is automatically hidden after the text output is complete. Clicking or dragging a character
					that is not currently speaking also automatically hides the balloon even if its <see cref="P:DoubleAgent.Control.Balloon.AutoHide" />
					setting is disabled.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Balloon.AutoHide" prefix="The" suffix="Property" />
			<seealso cref="P:DoubleAgent.Control.Balloon.Style" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.AutoHide">
			<summary>
				<para>
					Indicates if the word balloon will be automatically hidden after all of its text has been shown.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>balloon</em>-&gt;<c>get_AutoHide</c> (<em>&amp;AutoHide</em>)</para>

<para><em>balloon</em>-&gt;<c>put_AutoHide</c> (<em>AutoHide</em>)</para>
</cpp>
<csharp>
<para>[<em>AutoHide</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>AutoHide</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>AutoHide</c> = <em>AutoHide</em></para>
</csharp>
<vb>
<para>[<em>AutoHide</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>AutoHide</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>AutoHide</c> = <em>AutoHide</em></para>
</vb>
</syntax>
			<value name="AutoHide">
				A <c>boolean </c>value that indicates if the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.AutoHide" />
				style is enabled.
			</value>
			<remarks>
				<include path="/doc/members/member[@name='F:DoubleAgent.Control.BalloonStyleFlags.AutoHide']/remarks/para" />
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Balloon.Style" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.AutoPace">
			<summary>
				<para>Indicates if the word balloon paces its text display to the speech output.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>balloon</em>-&gt;<c>get_AutoPace</c> (<em>&amp;AutoPace</em>)</para>

<para><em>balloon</em>-&gt;<c>put_AutoPace</c> (<em>AutoPace</em>)</para>
</cpp>
<csharp>
<para>[<em>AutoPace</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>AutoPace</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>AutoPace</c> = <em>AutoPace</em></para>
</csharp>
<vb>
<para>[<em>AutoPace</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>AutoPace</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>AutoPace</c> = <em>AutoPace</em></para>
</vb>
</syntax>
			<value name="AutoPace">
				A <c>boolean </c>value that indicates if the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.AutoPace" />
				style is enabled.
			</value>
			<remarks>
				<include path="/doc/members/member[@name='F:DoubleAgent.Control.BalloonStyleFlags.AutoPace']/remarks/para" />
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Balloon.Style" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.ShowPartialLines">
			<summary>
				<para>Indicates if the word balloon shows partial lines when it scrolls.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>balloon</em>-&gt;<c>get_ShowPartialLines</c> (<em>&amp;ShowPartialLines</em>)</para>

<para><em>balloon</em>-&gt;<c>put_ShowPartialLines</c> (<em>ShowPartialLines</em>)</para>
</cpp>
<csharp>
<para>[<em>ShowPartialLines</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>ShowPartialLines</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>ShowPartialLines</c> = <em>ShowPartialLines</em></para>
</csharp>
<vb>
<para>[<em>ShowPartialLines</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>ShowPartialLines</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>ShowPartialLines</c> = <em>ShowPartialLines</em></para>
</vb>
</syntax>
			<value name="ShowPartialLines">
				A <c>boolean </c>value that indicates if the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.ShowPartialLines" />
				style is enabled.
			</value>
			<remarks>
				<include path="/doc/members/member[@name='F:DoubleAgent.Control.BalloonStyleFlags.ShowPartialLines']/remarks/para" />
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Balloon.Style" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Balloon.SizeToText">
			<summary>
				<para>Indicates if the word balloon is automatically resized to fit it's contents.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>balloon</em>-&gt;<c>get_SizeToText</c> (<em>&amp;SizeToText</em>)</para>

<para><em>balloon</em>-&gt;<c>put_SizeToText</c> (<em>SizeToText</em>)</para>
</cpp>
<csharp>
<para>[<em>SizeToText</em> = ]<em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>SizeToText</c></para>

<para><em>control</em>.<c>Characters</c>.this ["<em>CharacterID</em>"].<c>Balloon</c>.<c>SizeToText</c> = <em>SizeToText</em></para>
</csharp>
<vb>
<para>[<em>SizeToText</em> = ]<em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>SizeToText</c></para>

<para><em>control</em>.<c>Characters</c> ("<em>CharacterID</em>").<c>Balloon</c>.<c>SizeToText</c> = <em>SizeToText</em></para>
</vb>
</syntax>
			<value name="SizeToText">
				A <c>boolean </c>value that indicates if the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.SizeToText" />
				style is enabled.
			</value>
			<remarks>
				<include path="/doc/members/member[@name='F:DoubleAgent.Control.BalloonStyleFlags.SizeToText']/remarks/para" />
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Balloon.Style" prefix="The" suffix="Property" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.Request">
			<summary>
				<para>
					Double Agent processes some methods, such as <see cref="M:DoubleAgent.Control.Characters.Load" />,
					<see cref="M:DoubleAgent.Control.Character.Play" />, and <see cref="M:DoubleAgent.Control.Character.Speak" />,
					asynchronously. This allows your application code to continue while the method is completing. When a
					client application calls one of these methods, the control queues the request and returns a <c>Request </c>
					object. The <c>Request </c>object allows you to check the status of your request by keeping
					a reference to the object.
				</para>
			</summary>
			<syntax>
				<list type="bullet">
					<item>
						<term>
							<bookmark name="Properties"></bookmark>
							The <c>Request </c>object has the following <c>properties</c>:
						</term>
						<description>
							<see cref="P:DoubleAgent.Control.Request.Number" />,
							<see cref="P:DoubleAgent.Control.Request.Description" />,
							<see cref="P:DoubleAgent.Control.Request.Status" />
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					If you create a <c>Request </c>object reference, Double Agent automatically notifies you when
					an animation request has started or completed through the <see cref="E:DoubleAgent.Control.Control.RequestStart" />
					and <see cref="E:DoubleAgent.Control.Control.RequestComplete" /> events. Because methods that return
					<c>Request </c>objects are asynchronous and may not complete during the scope of the calling function,
					declare your reference to the <c>Request </c>object globally.
				</para>
				<para>
					The following methods can return a <c>Request </c>object: <see cref="M:DoubleAgent.Control.Character.GestureAt" />,
					<see cref="M:DoubleAgent.Control.Character.Hide" />, <see cref="M:DoubleAgent.Control.Character.Interrupt" />,
					<see cref="M:DoubleAgent.Control.Characters.Load" />, <see cref="M:DoubleAgent.Control.Character.MoveTo" />,
					<see cref="M:DoubleAgent.Control.Character.Play" />, <see cref="M:DoubleAgent.Control.Character.Prepare" />,
					<see cref="M:DoubleAgent.Control.Character.Show" />, <see cref="M:DoubleAgent.Control.Character.Speak" />,
					<see cref="M:DoubleAgent.Control.Character.Think" />, and <see cref="M:DoubleAgent.Control.Character.Wait" />.
				</para>
			</remarks>
			<details>
				<h4 class="details">Examples</h4>
				<example>
					<para>In Visual Basic, first declare an object variable:</para>
					<code xml:space="preserve">Dim MyRequest as Object</code>
					<para>In VBScript, you don't include the variable type in your declaration:</para>
					<code xml:space="preserve">Dim MyRequest</code>
					<para>
						And use Visual Basic's <c>Set </c>statement to assign the variable to the return value of
						the method call:
					</para>
					<code xml:space="preserve">Set MyRequest = <em>control</em>.Characters("<em>CharacterID</em>").<em>method</em> (<em>parameter</em>[s])</code>
					<para>
						This adds a reference to the <c>Request </c>object. The <c>Request </c>object will be destroyed
						when there are no more references to it. Where you declare the <c>Request </c>object and how you
						use it determines its lifetime. If the object is declared local to a subroutine or function, it will
						be destroyed when it goes out of scope; that is, when the subroutine or function ends. If the object
						is declared globally, it will not be destroyed until either the program terminates or a new value (or
						a value set to "empty") is assigned to the object.
					</para>
				</example>
			</details>
			<seealso cref="E:DoubleAgent.Control.Control.RequestStart" prefix="The" suffix="Event" />
			<seealso cref="E:DoubleAgent.Control.Control.RequestComplete" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Request">
			<summary>
				<include path="/doc/members/member[@name='T:DoubleAgent.Control.Request']/summary" />
			</summary>
			<details>
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.Request.Status']/details" />
			</details>
			<syntax xml:space="preserve">
<cpp>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.Request.Status']/syntax/cpp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.Request.Number']/syntax/cpp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.Request.Description']/syntax/cpp" />
</cpp>
<csharp>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.Request.Status']/syntax/csharp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.Request.Number']/syntax/csharp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.Request.Description']/syntax/csharp" />
</csharp>
<vb>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.Request.Status']/syntax/vb" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.Request.Number']/syntax/vb" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.Request.Description']/syntax/vb" />
</vb>
</syntax>
			<value name="Status">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.Request.Status']/value[@name='Status']" />
			</value>
			<value name="Number">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.Request.Number']/value[@name='Number']" />
			</value>
			<value name="Description">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.Request.Description']/value[@name='Description']" />
			</value>
			<remarks>
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.Request.Number']/remarks" />
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Request.Description">
			<summary>
				<para>
					Returns a description of a request error <see cref="P:DoubleAgent.Control.Request.Number" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>request</em>-&gt;<c>get_Description</c> (<em>&amp;Description</em>)</para>
</cpp>
<csharp>
<para>[<em>Description</em> = ]<em>request</em>.<c>Description</c></para>
</csharp>
<vb>
<para>[<em>Description</em> = ]<em>request</em>.<c>Description</c></para>
</vb>
</syntax>
			<value name="Description">
				A string value that corresponds to the error <c>Number</c>. If no description
				is found for an error, <c>Description </c>contains <em>
					"Application-defined or object-defined error"
				</em>.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Request.Number">
			<summary>
				<para>
					Returns the error or cause of the <see cref="P:DoubleAgent.Control.Request.Status" /> code.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>request</em>-&gt;<c>get_Number</c> (<em>&amp;Number</em>)</para>
</cpp>
<csharp>
<para>[<em>Number</em> = ]<em>request</em>.<c>Number</c></para>
</csharp>
<vb>
<para>[<em>Number</em> = ]<em>request</em>.<c>Number</c></para>
</vb>
</syntax>
			<value name="Number">
				The error or cause of the <c>Status </c>code. If there is no error, this value
				is zero.
			</value>
			<remarks>
				<para>
					For the values and meanings of the <c>Number </c>property, see <a href="MsAgent.chm::/hh/msagent/agenterr_6w36.htm">
						Microsoft Agent Error Codes
					</a>.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Request.Status">
			<summary>
				<para>
					You can use the <c>Status </c>property to check the status of your request.
				</para>
			</summary>
			<details>
				<h4 class="details">Example</h4>
				<code xml:space="preserve">Dim MyRequest

Set MyRequest = AgentControl.Characters("Genie").Play ("GetAttention")

If (MyRequest.Status = 2) then
    'do something
Else If (MyRequest.Status = 0) then
    'do something right away
End If</code>
			</details>
			<syntax xml:space="preserve">
<cpp>
<para><em>request</em>-&gt;<c>get_Status</c> (<em>&amp;Status</em>)</para>
</cpp>
<csharp>
<para>[<em>Status</em> = ]<em>request</em>.<c>Status</c></para>
</csharp>
<vb>
<para>[<em>Status</em> = ]<em>request</em>.<c>Status</c></para>
</vb>
</syntax>
			<value name="Status">
				The current status of the request:<include path="/doc/members/member[@name='T:DoubleAgent.Control.RequestStatus']/syntax" />
			</value>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.AnimationNames" kind="Collection">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This object has been replaced by the <see cref="P:DoubleAgent.Control.Character.Animations" />
					property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.UserInput">
			<summary>
				<para>
					Double Agent sends the <see cref="E:DoubleAgent.Control.Control.Command" /> event when your
					application is input-active and the user chooses a command from the character's pop-up menu or by spoken
					input. The event passes a <c>UserInput </c>object that identifies the number of possible matching
					commands as well as the name, confidence scoring, and voice text for those matches.
				</para>
			</summary>
			<syntax>
				<list type="bullet">
					<item>
						<term>
							<bookmark name="Properties"></bookmark>
							The <c>UserInput </c>object has the following <c>properties</c>:
						</term>
						<description>
							<see cref="P:DoubleAgent.Control.UserInput.Alt1Name" />,
							<see cref="P:DoubleAgent.Control.UserInput.Alt1Confidence" />,
							<see cref="P:DoubleAgent.Control.UserInput.Alt1Voice" />,
							<see cref="P:DoubleAgent.Control.UserInput.Alt2Name" />,
							<see cref="P:DoubleAgent.Control.UserInput.Alt2Confidence" />,
							<see cref="P:DoubleAgent.Control.UserInput.Alt2Voice" />,
							<see cref="P:DoubleAgent.Control.UserInput.CharacterID" />,
							<see cref="P:DoubleAgent.Control.UserInput.Count" />,
							<see cref="P:DoubleAgent.Control.UserInput.Confidence" />,
							<see cref="P:DoubleAgent.Control.UserInput.Name" />,
							<see cref="P:DoubleAgent.Control.UserInput.Voice" />
						</description>
					</item>
				</list>
			</syntax>
			<details>
				<h4 class="details">Details</h4>
				<para>
					If voice input triggers this event, Double Agent returns a string that identifies the best
					match in the <see cref="P:DoubleAgent.Control.UserInput.Name" /> parameter, and the second- and
					third-best matches in <see cref="P:DoubleAgent.Control.UserInput.Alt1Name" /> and <see cref="P:DoubleAgent.Control.UserInput.Alt2Name" />.
					An empty string indicates that the input did not match any command your application defined. If, for
					example, the command was matched to the pre-defined <c>Hide </c>command, an empty string would
					be returned in the <see cref="P:DoubleAgent.Control.UserInput.Name" /> parameter, but you would
					still receive the text heard in the <see cref="P:DoubleAgent.Control.UserInput.Voice" /> parameter.
				</para>
				<para>
					You may get the same command name returned in more than one entry. <see cref="P:DoubleAgent.Control.UserInput.Confidence" />,
					<see cref="P:DoubleAgent.Control.UserInput.Alt1Confidence" />, and <see cref="P:DoubleAgent.Control.UserInput.Alt2Confidence" />
					parameters return the relative scores, in the range of -100 to 100, that are returned by the speech
					recognition engine for each respective match. <see cref="P:DoubleAgent.Control.UserInput.Voice" />,
					<see cref="P:DoubleAgent.Control.UserInput.Alt1Voice" />, and <see cref="P:DoubleAgent.Control.UserInput.Alt2Voice" />
					parameters return the voice text that the speech recognition engine matched for each alternative. If
					<see cref="P:DoubleAgent.Control.UserInput.Count" /> returns zero, Double Agent detected spoken
					input, but determined that there was no matching command.
				</para>
				<para>
					If voice input was <c>not </c>the source for the command, for example, if the user selected
					the command from the character's pop-up menu, Double Agent returns the name of the selected command
					in the <see cref="P:DoubleAgent.Control.UserInput.Name" /> property. It also returns the value
					of the <see cref="P:DoubleAgent.Control.UserInput.Confidence" /> parameter as 100, and the value
					of the <see cref="P:DoubleAgent.Control.UserInput.Voice" /> parameters as an empty string ("").
					<see cref="P:DoubleAgent.Control.UserInput.Alt1Name" /> and <see cref="P:DoubleAgent.Control.UserInput.Alt2Name" />
					also return empty strings. <see cref="P:DoubleAgent.Control.UserInput.Alt1Confidence" /> and <see cref="P:DoubleAgent.Control.UserInput.Alt2Confidence" />
					return zero, and <see cref="P:DoubleAgent.Control.UserInput.Alt1Voice" /> and <see cref="P:DoubleAgent.Control.UserInput.Alt2Voice" />
					return empty strings. <see cref="P:DoubleAgent.Control.UserInput.Count" /> returns 1.
				</para>
			</details>
			<remarks>
				<para>
					Not all speech recognition engines may return all the values for all the properties of this
					object. Check with your engine vendor to determine whether the engine supports the Microsoft Speech
					API interface for returning alternatives and confidence scores.
				</para>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Command" prefix="The" suffix="Event" />
			<seealso cref="T:DoubleAgent.Control.Command" prefix="The" suffix="Object" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.UserInput">
			<summary>
				<include path="/doc/members/member[@name='T:DoubleAgent.Control.UserInput']/summary" />
			</summary>
			<details></details>
			<syntax xml:space="preserve">
<cpp>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.CharacterID']/syntax/cpp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Count']/syntax/cpp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Name']/syntax/cpp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Confidence']/syntax/cpp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Voice']/syntax/cpp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt1Name']/syntax/cpp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt1Confidence']/syntax/cpp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt1Voice']/syntax/cpp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt2Name']/syntax/cpp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt2Confidence']/syntax/cpp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt2Voice']/syntax/cpp" />
</cpp>
<csharp>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.CharacterID']/syntax/csharp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Count']/syntax/csharp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Name']/syntax/csharp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Confidence']/syntax/csharp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Voice']/syntax/csharp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt1Name']/syntax/csharp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt1Confidence']/syntax/csharp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt1Voice']/syntax/csharp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt2Name']/syntax/csharp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt2Confidence']/syntax/csharp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt2Voice']/syntax/csharp" />
</csharp>
<vb>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.CharacterID']/syntax/vb" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Count']/syntax/vb" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Name']/syntax/vb" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Confidence']/syntax/vb" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Voice']/syntax/vb" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt1Name']/syntax/vb" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt1Confidence']/syntax/vb" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt1Voice']/syntax/vb" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt2Name']/syntax/vb" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt2Confidence']/syntax/vb" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt2Voice']/syntax/vb" />
</vb>
</syntax>
			<value name="CharacterID">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.CharacterID']/value[@name='CharacterID']" />
			</value>
			<value name="Count">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Count']/value[@name='Count']" />
			</value>
			<value name="Name">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Name']/value[@name='Name']" />
			</value>
			<value name="Confidence">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Confidence']/value[@name='Confidence']" />
			</value>
			<value name="Voice">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Voice']/value[@name='Voice']" />
			</value>
			<value name="Alt1Name">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt1Name']/value[@name='Alt1Name']" />
			</value>
			<value name="Alt1Confidence">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt1Confidence']/value[@name='Alt1Confidence']" />
			</value>
			<value name="Alt1Voice">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt1Voice']/value[@name='Alt1Voice']" />
			</value>
			<value name="Alt2Name">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt2Name']/value[@name='Alt2Name']" />
			</value>
			<value name="Alt2Confidence">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt2Confidence']/value[@name='Alt2Confidence']" />
			</value>
			<value name="Alt2Voice">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.UserInput.Alt2Voice']/value[@name='Alt2Voice']" />
			</value>
			<remarks>
				<include path="/doc/members/member[@name='T:DoubleAgent.Control.UserInput']/remarks" />
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Command" prefix="The" suffix="Event" />
			<seealso cref="T:DoubleAgent.Control.Command" prefix="The" suffix="Object" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.UserInput.Alt1Confidence">
			<summary>
				<para>
					Returns the speech recognition confidence scoring for the second-best matching <see cref="T:DoubleAgent.Control.Command" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>userinput</em>-&gt;<c>get_Alt1Confidence</c> (<em>&amp;Alt1Confidence</em>)</para>
</cpp>
<csharp>
<para>[<em>Alt1Confidence</em> = ]<em>userinput</em>.<c>Alt1Confidence</c></para>
</csharp>
<vb>
<para>[<em>Alt1Confidence</em> = ]<em>userinput</em>.<c>Alt1Confidence</c></para>
</vb>
</syntax>
			<value name="Alt1Confidence">
				The relative confidence scoring of second-best match, from -100 to 100
				(0 if the <see cref="T:DoubleAgent.Control.Command" /> was chosen from the pop-up menu)
			</value>
			<remarks></remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Command" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.UserInput.Alt1Name">
			<summary>
				<para>
					Returns the name of the second-best matching <see cref="T:DoubleAgent.Control.Command" />
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>userinput</em>-&gt;<c>get_Alt1Name</c> (<em>&amp;Alt1Name</em>)</para>
</cpp>
<csharp>
<para>[<em>Alt1Name</em> = ]<em>userinput</em>.<c>Alt1Name</c></para>
</csharp>
<vb>
<para>[<em>Alt1Name</em> = ]<em>userinput</em>.<c>Alt1Name</c></para>
</vb>
</syntax>
			<value name="Alt1Name">
				The name of the second-best matching <see cref="T:DoubleAgent.Control.Command" />.
			</value>
			<remarks></remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Command" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.UserInput.Alt1Voice">
			<summary>
				<para>
					Returns the voice text the speech recognition engine matched for the second-best matching
					<see cref="T:DoubleAgent.Control.Command" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>userinput</em>-&gt;<c>get_Alt1Voice</c> (<em>&amp;Alt1Voice</em>)</para>
</cpp>
<csharp>
<para>[<em>Alt1Voice</em> = ]<em>userinput</em>.<c>Alt1Voice</c></para>
</csharp>
<vb>
<para>[<em>Alt1Voice</em> = ]<em>userinput</em>.<c>Alt1Voice</c></para>
</vb>
</syntax>
			<value name="Alt1Voice">The second-best matching voice text</value>
			<remarks></remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Command" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.UserInput.Alt2Confidence">
			<summary>
				<para>
					Returns the speech recognition confidence scoring for the third-best matching <see cref="T:DoubleAgent.Control.Command" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>userinput</em>-&gt;<c>get_Alt2Confidence</c> (<em>&amp;Alt2Confidence</em>)</para>
</cpp>
<csharp>
<para>[<em>Alt2Confidence</em> = ]<em>userinput</em>.<c>Alt2Confidence</c></para>
</csharp>
<vb>
<para>[<em>Alt2Confidence</em> = ]<em>userinput</em>.<c>Alt2Confidence</c></para>
</vb>
</syntax>
			<value name="Alt2Confidence">
				The relative confidence scoring of third-best match, from -100 to 100
				(0 if the <see cref="T:DoubleAgent.Control.Command" /> was chosen from the pop-up menu)
			</value>
			<remarks></remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Command" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.UserInput.Alt2Name">
			<summary>
				<para>
					Returns the name of the third-best matching <see cref="T:DoubleAgent.Control.Command" />
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>userinput</em>-&gt;<c>get_Alt2Name</c> (<em>&amp;Alt2Name</em>)</para>
</cpp>
<csharp>
<para>[<em>Alt2Name</em> = ]<em>userinput</em>.<c>Alt2Name</c></para>
</csharp>
<vb>
<para>[<em>Alt2Name</em> = ]<em>userinput</em>.<c>Alt2Name</c></para>
</vb>
</syntax>
			<value name="Alt2Name">
				The name of the third-best matching <see cref="T:DoubleAgent.Control.Command" />.
			</value>
			<remarks></remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Command" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.UserInput.Alt2Voice">
			<summary>
				<para>
					Returns the voice text the speech recognition engine matched for the third-best matching <see cref="T:DoubleAgent.Control.Command" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>userinput</em>-&gt;<c>get_Alt2Voice</c> (<em>&amp;Alt2Voice</em>)</para>
</cpp>
<csharp>
<para>[<em>Alt2Voice</em> = ]<em>userinput</em>.<c>Alt2Voice</c></para>
</csharp>
<vb>
<para>[<em>Alt2Voice</em> = ]<em>userinput</em>.<c>Alt2Voice</c></para>
</vb>
</syntax>
			<value name="Alt2Voice">The third-best matching voice text</value>
			<remarks></remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Command" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.UserInput.CharacterID">
			<summary>
				<para>
					Returns the unique identifier of the <see cref="T:DoubleAgent.Control.Character" /> that is
					the object of the <see cref="E:DoubleAgent.Control.Control.Command" /> event.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>userinput</em>-&gt;<c>get_CharacterID</c> (<em>&amp;CharacterID</em>)</para>
</cpp>
<csharp>
<para>[<em>CharacterID</em> = ]<em>userinput</em>.<c>CharacterID</c></para>
</csharp>
<vb>
<para>[<em>CharacterID</em> = ]<em>userinput</em>.<c>CharacterID</c></para>
</vb>
</syntax>
			<value name="CharacterID">
				Identifies the <see cref="T:DoubleAgent.Control.Character" /> whose <see cref="T:DoubleAgent.Control.Command" />
				was chosen.
			</value>
			<remarks></remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Command" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.UserInput.Confidence">
			<summary>
				<para>
					Returns the speech recognition confidence scoring for the best matching <see cref="T:DoubleAgent.Control.Command" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>userinput</em>-&gt;<c>get_Confidence</c> (<em>&amp;Confidence</em>)</para>
</cpp>
<csharp>
<para>[<em>Confidence</em> = ]<em>userinput</em>.<c>Confidence</c></para>
</csharp>
<vb>
<para>[<em>Confidence</em> = ]<em>userinput</em>.<c>Confidence</c></para>
</vb>
</syntax>
			<value name="Confidence">
				The relative confidence scoring of best match, from -100 to 100 (100 if the
				<see cref="T:DoubleAgent.Control.Command" /> was chosen from the pop-up menu)
			</value>
			<remarks></remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Command" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.UserInput.Count">
			<summary>
				<para>Returns the number of possible matching commands.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>userinput</em>-&gt;<c>get_Count</c> (<em>&amp;Count</em>)</para>
</cpp>
<csharp>
<para>[<em>Count</em> = ]<em>userinput</em>.<c>Count</c></para>
</csharp>
<vb>
<para>[<em>Count</em> = ]<em>userinput</em>.<c>Count</c></para>
</vb>
</syntax>
			<value name="Count">The number of possible matching commands, from 0 to 3.</value>
			<remarks>
				Even if the <c>Count </c>is zero (no commands were matched), the <see cref="P:DoubleAgent.Control.UserInput.Voice" />
				property will still return the spoken text.
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Command" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.UserInput.Name">
			<summary>
				<para>
					Identifies the chosen <see cref="T:DoubleAgent.Control.Command" />, if chosen from the popup-menu,
					or the best matching <see cref="T:DoubleAgent.Control.Command" />, if voice input triggers the
					<see cref="E:DoubleAgent.Control.Control.Command" /> event.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>userinput</em>-&gt;<c>get_Name</c> (<em>&amp;Name</em>)</para>
</cpp>
<csharp>
<para>[<em>Name</em> = ]<em>userinput</em>.<c>Name</c></para>
</csharp>
<vb>
<para>[<em>Name</em> = ]<em>userinput</em>.<c>Name</c></para>
</vb>
</syntax>
			<value name="Name">
				The name of the chosen <see cref="T:DoubleAgent.Control.Command" />, or an empty
				string if the chose command was pre-defined (for example, the <c>Hide </c>command).
			</value>
			<seealso cref="E:DoubleAgent.Control.Control.Command" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.UserInput.Voice">
			<summary>
				<para>
					Returns the voice text the speech recognition engine matched for the best matching <see cref="T:DoubleAgent.Control.Command" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>userinput</em>-&gt;<c>get_Voice</c> (<em>&amp;Voice</em>)</para>
</cpp>
<csharp>
<para>[<em>Name</em> = ]<em>userinput</em>.<c>Voice</c></para>
</csharp>
<vb>
<para>[<em>Name</em> = ]<em>userinput</em>.<c>Voice</c></para>
</vb>
</syntax>
			<value name="Voice">
				The best matching voice text (or an empty string if the <see cref="T:DoubleAgent.Control.Command" />
				was chosen from the popup-menu)
			</value>
			<remarks>Even if no command was matched, the text that the speech engine heard is returned.</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.Command" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.CommandsWindow">
			<summary>
				<para>
					The <c>CommandsWindow </c>object provides access to Double Agent's <c>Voice Commands </c>window.
					It allows you to show and hide the window, and retrieve and update the window's location. It can be
					accessed using the <see cref="T:DoubleAgent.Control.Control" />'s <see cref="P:DoubleAgent.Control.Control.CommandsWindow" />
					property.
				</para>
			</summary>
			<syntax>
				<list type="bullet">
					<item>
						<term>
							<bookmark name="Properties"></bookmark>
							The <c>CommandsWindow </c>object has the following <c>properties</c>:
						</term>
						<description>
							<see cref="P:DoubleAgent.Control.CommandsWindow.Left" />,
							<see cref="P:DoubleAgent.Control.CommandsWindow.Height" />,
							<see cref="P:DoubleAgent.Control.CommandsWindow.Top" />,
							<see cref="P:DoubleAgent.Control.CommandsWindow.Visible" />,
							<see cref="P:DoubleAgent.Control.CommandsWindow.Width" />
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					The <c>Voice Commands </c>window is shared among all Double Agent clients. Changes to the
					window's location and visibility should be made with this in mind.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CommandsWindow">
			<summary>
				<include path="/doc/members/member[@name='T:DoubleAgent.Control.CommandsWindow']/summary" />
			</summary>
			<syntax xml:space="preserve">
<cpp>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.CommandsWindow.Left']/syntax/cpp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.CommandsWindow.Top']/syntax/cpp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.CommandsWindow.Width']/syntax/cpp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.CommandsWindow.Height']/syntax/cpp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.CommandsWindow.Visible']/syntax/cpp" />
</cpp>
<csharp>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.CommandsWindow.Left']/syntax/csharp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.CommandsWindow.Top']/syntax/csharp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.CommandsWindow.Width']/syntax/csharp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.CommandsWindow.Height']/syntax/csharp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.CommandsWindow.Visible']/syntax/csharp" />
</csharp>
<vb>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.CommandsWindow.Left']/syntax/vb" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.CommandsWindow.Top']/syntax/vb" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.CommandsWindow.Width']/syntax/vb" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.CommandsWindow.Height']/syntax/vb" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.CommandsWindow.Visible']/syntax/vb" />
</vb>
</syntax>
			<value name="Left">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.CommandsWindow.Left']/value[@name='Left']" />
			</value>
			<value name="Top">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.CommandsWindow.Top']/value[@name='Top']" />
			</value>
			<value name="Width">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.CommandsWindow.Width']/value[@name='Width']" />
			</value>
			<value name="Height">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.CommandsWindow.Height']/value[@name='Height']" />
			</value>
			<value name="Visible">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.CommandsWindow.Visible']/value[@name='Visible']" />
			</value>
			<remarks>
				<include path="/doc/members/member[@name='T:DoubleAgent.Control.CommandsWindow']/remarks" />
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CommandsWindow.Height">
			<summary>
				<para>
					Returns the current height, in pixels, of the <c>Voice Commands </c>window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>commandswindow</em>-&gt;<c>get_Height</c> (<em>&amp;Height</em>)</para>
</cpp>
<csharp>
<para>[<em>Height</em> = ]<em>control</em>.<c>CommandsWindow.Height</c></para>
</csharp>
<vb>
<para>[<em>Height</em> = ]<em>control</em>.<c>CommandsWindow.Height</c></para>
</vb>
</syntax>
			<value name="Height">
				A <c>numeric </c>value that indicates the height, in pixels, of the <em>
					Voice
					Commands
				</em> window.
			</value>
			<remarks>
				<para>Double Agent remembers and reuses the window height set by the user.</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CommandsWindow.Left">
			<summary>
				<para>
					Returns or sets the horizontal location, in pixels, of the <c>Voice Commands </c>window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>commandswindow</em>-&gt;<c>get_Left</c> (<em>&amp;Left</em>)</para>

<para><em>commandswindow</em>-&gt;<c>put_Left</c> (<em>Left</em>)</para>
</cpp>
<csharp>
<para>[<em>Left</em> = ]<em>control</em>.<c>CommandsWindow.Left</c></para>

<para><em>control</em>.<c>CommandsWindow.Left</c> = <em>Left</em></para>
</csharp>
<vb>
<para>[<em>Left</em> = ]<em>control</em>.<c>CommandsWindow.Left</c></para>

<para><em>control</em>.<c>CommandsWindow.Left</c> = <em>Left</em></para>
</vb>
</syntax>
			<value name="Left">
				A <c>numeric </c>value that specifies the left edge, in pixels, of the <em>
					Voice
					Commands
				</em> window.
			</value>
			<remarks>
				<para>Double Agent remembers and reuses the window location set by the user.</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CommandsWindow.Top">
			<summary>
				<para>
					Returns or sets the vertical location, in pixels, of the <c>Voice Commands </c>window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>commandswindow</em>-&gt;<c>get_Top</c> (<em>&amp;Top</em>)</para>

<para><em>commandswindow</em>-&gt;<c>put_Top</c> (<em>Top</em>)</para>
</cpp>
<csharp>
<para>[<em>Top</em> = ]<em>control</em>.<c>CommandsWindow.Top</c></para>

<para><em>control</em>.<c>CommandsWindow.Top</c> = <em>Top</em></para>
</csharp>
<vb>
<para>[<em>Top</em> = ]<em>control</em>.<c>CommandsWindow.Top</c></para>

<para><em>control</em>.<c>CommandsWindow.Top</c> = <em>Top</em></para>
</vb>
</syntax>
			<value name="Top">
				A <c>numeric </c>value that specifies the top edge, in pixels, of the <em>
					Voice
					Commands
				</em> window.
			</value>
			<remarks>
				<para>Double Agent remembers and reuses the window location set by the user.</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CommandsWindow.Visible">
			<summary>
				<para>
					Returns or sets a value indicating whether or not the <c>Voice Commands </c>window is visible.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>commandswindow</em>-&gt;<c>get_Visible</c> (<em>&amp;Visible</em>)</para>

<para><em>commandswindow</em>-&gt;<c>put_Visible</c> (<em>Visible</em>)</para>
</cpp>
<csharp>
<para>[<em>Visible</em> = ]<em>control</em>.<c>CommandsWindow.Visible</c></para>

<para><em>control</em>.<c>CommandsWindow.Visible</c> = <em>Visible</em></para>
</csharp>
<vb>
<para>[<em>Visible</em> = ]<em>control</em>.<c>CommandsWindow.Visible</c></para>

<para><em>control</em>.<c>CommandsWindow.Visible</c> = <em>Visible</em></para>
</vb>
</syntax>
			<value name="Visible">
				A <c>boolean </c>value indicating whether or not the <em>Voice Commands </em>
				window is visible.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CommandsWindow.Width">
			<summary>
				<para>
					Returns current width, in pixels, of the <c>Voice Commands </c>window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>commandswindow</em>-&gt;<c>get_Width</c> (<em>&amp;Width</em>)</para>
</cpp>
<csharp>
<para>[<em>Width</em> = ]<em>control</em>.<c>CommandsWindow.Width</c></para>
</csharp>
<vb>
<para>[<em>Width</em> = ]<em>control</em>.<c>CommandsWindow.Width</c></para>
</vb>
</syntax>
			<value name="Width">
				A <c>numeric </c>value that indicates the width, in pixels, of the <em>
					Voice Commands
				</em> window.
			</value>
			<remarks>
				<para>Double Agent remembers and reuses the window width set by the user.</para>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.PropertySheet">
			<summary>
				<para>
					The <c>PropertySheet </c>object provides access to the <c>Advanced Character Options </c>window.
					It allows you to show and hide the window, and retrieve and update the window's location and current
					page. It can be accessed using the <see cref="T:DoubleAgent.Control.Control" />'s <see cref="P:DoubleAgent.Control.Control.PropertySheet" />
					property.
				</para>
			</summary>
			<syntax>
				<list type="bullet">
					<item>
						<term>
							<bookmark name="Properties"></bookmark>
							The <c>PropertySheet </c>object has the following <c>properties</c>:
						</term>
						<description>
							<see cref="P:DoubleAgent.Control.PropertySheet.Left" />,
							<see cref="P:DoubleAgent.Control.PropertySheet.Height" />,
							<see cref="P:DoubleAgent.Control.PropertySheet.Page" />,
							<see cref="P:DoubleAgent.Control.PropertySheet.Top" />,
							<see cref="P:DoubleAgent.Control.PropertySheet.Visible" />,
							<see cref="P:DoubleAgent.Control.PropertySheet.Width" />
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					The <c>Advanced Character Options </c>window is shared among all Double Agent clients. Changes
					to the window's location and visibility should be made with this in mind.
				</para>
				<note>
					The <c>Advanced Character Options </c>window combines the Microsoft Agent <c>Advanced Character
					Options </c>and <c>Default Character Properties </c>windows.
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.PropertySheet">
			<summary>
				<include path="/doc/members/member[@name='T:DoubleAgent.Control.PropertySheet']/summary" />
			</summary>
			<syntax xml:space="preserve">
<cpp>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.PropertySheet.Left']/syntax/cpp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.PropertySheet.Top']/syntax/cpp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.PropertySheet.Width']/syntax/cpp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.PropertySheet.Height']/syntax/cpp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.PropertySheet.Page']/syntax/cpp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.PropertySheet.Visible']/syntax/cpp" />
</cpp>
<csharp>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.PropertySheet.Left']/syntax/csharp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.PropertySheet.Top']/syntax/csharp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.PropertySheet.Width']/syntax/csharp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.PropertySheet.Height']/syntax/csharp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.PropertySheet.Page']/syntax/csharp" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.PropertySheet.Visible']/syntax/csharp" />
</csharp>
<vb>
<include path="/doc/members/member[@name='P:DoubleAgent.Control.PropertySheet.Left']/syntax/vb" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.PropertySheet.Top']/syntax/vb" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.PropertySheet.Width']/syntax/vb" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.PropertySheet.Height']/syntax/vb" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.PropertySheet.Page']/syntax/vb" />
<include path="/doc/members/member[@name='P:DoubleAgent.Control.PropertySheet.Visible']/syntax/vb" />
</vb>
</syntax>
			<value name="Left">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.PropertySheet.Left']/value[@name='Left']" />
			</value>
			<value name="Top">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.PropertySheet.Top']/value[@name='Top']" />
			</value>
			<value name="Width">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.PropertySheet.Width']/value[@name='Width']" />
			</value>
			<value name="Height">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.PropertySheet.Height']/value[@name='Height']" />
			</value>
			<value name="Page">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.PropertySheet.Page']/value[@name='Page']" />
			</value>
			<value name="Visible">
				<include path="/doc/members/member[@name='P:DoubleAgent.Control.PropertySheet.Visible']/value[@name='Visible']" />
			</value>
			<remarks>
				<include path="/doc/members/member[@name='T:DoubleAgent.Control.PropertySheet']/remarks" />
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.PropertySheet.Height">
			<summary>
				<para>
					Returns the current height, in pixels, of the <c>Advanced Character Options </c>window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>propertysheet</em>-&gt;<c>get_Height</c> (<em>&amp;Height</em>)</para>
</cpp>
<csharp>
<para>[<em>Height</em> = ]<em>control</em>.<c>PropertySheet.Height</c></para>
</csharp>
<vb>
<para>[<em>Height</em> = ]<em>control</em>.<c>PropertySheet.Height</c></para>
</vb>
</syntax>
			<value name="Height">
				A <c>numeric </c>value that indicates the height, in pixels, of the <em>
					Advanced
					Character Options
				</em> window.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.PropertySheet.Left">
			<summary>
				<para>
					Returns or sets the horizontal location, in pixels, of the <c>Advanced Character Options </c>
					window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>propertysheet</em>-&gt;<c>get_Left</c> (<em>&amp;Left</em>)</para>

<para><em>propertysheet</em>-&gt;<c>put_Left</c> (<em>Left</em>)</para>
</cpp>
<csharp>
<para>[<em>Left</em> = ]<em>control</em>.<c>PropertySheet.Left</c></para>

<para><em>control</em>.<c>PropertySheet.Left</c> = <em>Left</em></para>
</csharp>
<vb>
<para>[<em>Left</em> = ]<em>control</em>.<c>PropertySheet.Left</c></para>

<para><em>control</em>.<c>PropertySheet.Left</c> = <em>Left</em></para>
</vb>
</syntax>
			<value name="Left">
				A <c>numeric </c>value that specifies the left edge, in pixels, of the <em>
					Advanced
					Character Options
				</em> window.
			</value>
			<remarks>
				<para>Double Agent remembers and reuses the window location set by the user.</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.PropertySheet.Page">
			<summary>
				<para>
					Returns or sets the page displayed in the <c>Advanced Character Options </c>window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>propertysheet</em>-&gt;<c>get_Page</c> (<em>&amp;Page</em>)</para>

<para><em>propertysheet</em>-&gt;<c>put_Page</c> (<em>Page</em>)</para>
</cpp>
<csharp>
<para>[<em>Page</em> = ]<em>control</em>.<c>PropertySheet.Page</c></para>

<para><em>control</em>.<c>PropertySheet.Page</c> = <em>Page</em></para>
</csharp>
<vb>
<para>[<em>Page</em> = ]<em>control</em>.<c>PropertySheet.Page</c></para>

<para><em>control</em>.<c>PropertySheet.Page</c> = <em>Page</em></para>
</vb>
</syntax>
			<value name="Page">
				A <c>string </c>value indicating the visible page.
				<list type="table">
					<item>
						<term>"Output"</term>
						<description>
							Selects the <em>Output </em>page.
						</description>
					</item>
					<item>
						<term>"Speech"</term>
						<description>
							Selects the <em>Speech Input </em>page.
						</description>
					</item>
					<item>
						<term>"Character"</term>
						<description>
							Selects the <em>Gallery</em> (default character selection) page.
						</description>
					</item>
					<item>
						<term>"Copyright"</term>
						<description>
							Selects the <em>Copyright </em>page.
						</description>
					</item>
				</list>
			</value>
			<remarks>
				<para>
					If no speech engine is installed, setting <c>Page </c>to <c>&quot;Speech&quot; </c>has no effect. Also,
					the window's <see cref="P:DoubleAgent.Control.PropertySheet.Visible" /> property must be set to
					<c>True </c>for the user to see the page.
				</para>
				<note>When the user closes the window, this property is set to the last page shown.</note>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.PropertySheet.Top">
			<summary>
				<para>
					Returns or sets the vertical location, in pixels, of the <c>Advanced Character Options </c>
					window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>propertysheet</em>-&gt;<c>get_Top</c> (<em>&amp;Top</em>)</para>

<para><em>propertysheet</em>-&gt;<c>put_Top</c> (<em>Top</em>)</para>
</cpp>
<csharp>
<para>[<em>Top</em> = ]<em>control</em>.<c>PropertySheet.Top</c></para>

<para><em>control</em>.<c>PropertySheet.Top</c> = <em>Top</em></para>
</csharp>
<vb>
<para>[<em>Top</em> = ]<em>control</em>.<c>PropertySheet.Top</c></para>

<para><em>control</em>.<c>PropertySheet.Top</c> = <em>Top</em></para>
</vb>
</syntax>
			<value name="Top">
				A <c>numeric </c>value that specifies the left edge, in pixels, of the <em>
					Advanced
					Character Options
				</em> window.
			</value>
			<remarks>
				<para>Double Agent remembers and reuses the window location set by the user.</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.PropertySheet.Visible">
			<summary>
				<para>
					Returns or sets whether the <c>Advanced Character Options </c>window is visible (open).
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>propertysheet</em>-&gt;<c>get_Visible</c> (<em>&amp;Visible</em>)</para>

<para><em>propertysheet</em>-&gt;<c>put_Visible</c> (<em>Visible</em>)</para>
</cpp>
<csharp>
<para>[<em>Visible</em> = ]<em>control</em>.<c>PropertySheet.Visible</c></para>

<para><em>control</em>.<c>PropertySheet.Visible</c> = <em>Visible</em></para>
</csharp>
<vb>
<para>[<em>Visible</em> = ]<em>control</em>.<c>PropertySheet.Visible</c></para>

<para><em>control</em>.<c>PropertySheet.Visible</c> = <em>Visible</em></para>
</vb>
</syntax>
			<value name="Visible">
				A <c>boolean </c>value indicating whether or not the <em>
					Advanced Character
					Options
				</em> is visible.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.PropertySheet.Width">
			<summary>
				<para>
					Returns current width, in pixels, of the <c>Advanced Character Options </c>window.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>propertysheet</em>-&gt;<c>get_Width</c> (<em>&amp;Width</em>)</para>
</cpp>
<csharp>
<para>[<em>Width</em> = ]<em>control</em>.<c>PropertySheet.Width</c></para>
</csharp>
<vb>
<para>[<em>Width</em> = ]<em>control</em>.<c>PropertySheet.Width</c></para>
</vb>
</syntax>
			<value name="Width">
				A <c>numeric </c>value that indicates the width, in pixels, of the <em>
					Advanced
					Character Options
				</em> window.
			</value>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.Settings">
			<summary>
				<para>
					The <c>Settings </c>object provides access to various settings maintained by Double Agent.
					The properties are read-only for client applications, but the user can change them in the <see cref="T:DoubleAgent.Control.PropertySheet" text="Advanced Character Options" />
					window.
				</para>
				<para>
					This object can be accessed using the <see cref="T:DoubleAgent.Control.Control" />'s <see cref="P:DoubleAgent.Control.Control.Settings" />
					property.
				</para>
			</summary>
			<syntax>
				<list type="bullet">
					<item>
						<term>
							<bookmark name="Properties"></bookmark>
							The <c>Settings </c>object has the following <c>properties</c>:
						</term>
						<description>
							<see cref="P:DoubleAgent.Control.Settings.AudioStatus" />,
							<see cref="P:DoubleAgent.Control.Settings.BalloonEnabled" />,
							<see cref="P:DoubleAgent.Control.Settings.BalloonFont" />,
							<see cref="P:DoubleAgent.Control.Settings.SoundEffectsEnabled" />,
							<see cref="P:DoubleAgent.Control.Settings.SREnabled" />,
							<see cref="P:DoubleAgent.Control.Settings.SRHotKey" />,
							<see cref="P:DoubleAgent.Control.Settings.SRHotKeyTime" />,
							<see cref="P:DoubleAgent.Control.Settings.SRListeningPrompt" />,
							<see cref="P:DoubleAgent.Control.Settings.SRListeningTip" />,
							<see cref="P:DoubleAgent.Control.Settings.TTSEnabled" />,
							<see cref="P:DoubleAgent.Control.Settings.TTSSpeed" />
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					The <c>Settings </c>object replaces and extends the <see cref="T:DoubleAgent.Control.AudioOutput" />
					and <see cref="T:DoubleAgent.Control.SpeechInput" /> objects.
				</para>
				<note>
					For some properties, Double Agent returns a relevant value only if a compatible speech engine
					has been installed and is enabled.
				</note>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Settings.AudioStatus">
			<summary>
				<para>Returns the status of the audio output channel.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>settings</em>-&gt;<c>get_AudioStatus</c> (<em>&amp;AudioStatus</em>)</para>
</cpp>
<csharp>
<para>[<em>AudioStatus</em> = ]<em>control</em>.<c>Settings.AudioStatus</c></para>
</csharp>
<vb>
<para>[<em>AudioStatus</em> = ]<em>control</em>.<c>Settings.AudioStatus</c></para>
</vb>
</syntax>
			<value name="AudioStatus">
				A value from <see cref="T:DoubleAgent.Control.AudioStatusType" /> the enumeration
				that indicates the current audio output status:<include path="/doc/members/member[@name='T:DoubleAgent.Control.AudioStatusType']/syntax" />
			</value>
			<remarks>
				<para>
					Your client application can use this property to determine whether it is appropriate to have
					your character speak or whether it is appropriate to try to turn on <em>Listening mode</em> (using
					the <see cref="M:DoubleAgent.Control.Character.Listen" /> method).
				</para>
			</remarks>
			<seealso cref="T:DoubleAgent.Control.AudioStatusType" suffix="Enumeration" prefix="The" />
			<seealso cref="M:DoubleAgent.Control.Character.Listen" prefix="The" suffix="Method" />
			<seealso cref="E:DoubleAgent.Control.Control.ListenStart" prefix="The" suffix="Event" />
			<seealso cref="E:DoubleAgent.Control.Control.ListenComplete" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Settings.BalloonEnabled">
			<summary>
				<para>
					Indicates if the word balloon for the <see cref="M:DoubleAgent.Control.Character.Speak" />
					and <see cref="M:DoubleAgent.Control.Character.Think" /> methods is enabled.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>settings</em>-&gt;<c>get_BalloonEnabled</c> (<em>&amp;BalloonEnabled</em>)</para>
</cpp>
<csharp>
<para>[<em>BalloonEnabled</em> = ]<em>control</em>.<c>Settings.BalloonEnabled</c></para>
</csharp>
<vb>
<para>[<em>BalloonEnabled</em> = ]<em>control</em>.<c>Settings.BalloonEnabled</c></para>
</vb>
</syntax>
			<value name="BalloonEnabled">
				A <c>boolean </c>value that indicates if the word balloon is enabled.
			</value>
			<remarks>
				<para>
					This property reflects the <c>Display spoken output in word balloon …</c>option on the
					<em>Output </em>page of the <see cref="T:DoubleAgent.Control.PropertySheet" text="Advanced Character Options" />
					window.
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ReadOnlySetting']" />
				</note>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Character.Speak" suffix="Method" prefix="The" />
			<seealso cref="M:DoubleAgent.Control.Character.Think" suffix="Method" prefix="The" />
			<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Settings.BalloonFont">
			<summary></summary>
			<syntax xml:space="preserve"></syntax>
			<remarks></remarks>
			<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Settings.SoundEffectsEnabled">
			<summary>
				<para>Indicates whether sound effects associated with a character's animations will play.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>settings</em>-&gt;<c>get_SoundEffectsEnabled</c> (<em>&amp;SoundEffectsEnabled</em>)</para>
</cpp>
<csharp>
<para>[<em>SoundEffectsEnabled</em> = ]<em>control</em>.<c>Settings.SoundEffectsEnabled</c></para>
</csharp>
<vb>
<para>[<em>SoundEffectsEnabled</em> = ]<em>control</em>.<c>Settings.SoundEffectsEnabled</c></para>
</vb>
</syntax>
			<value name="SoundEffectsEnabled">
				A <c>boolean </c>value that indicates if sound effects are enabled.
			</value>
			<remarks>
				<para>
					This property reflects the <c>Play character sound effects </c>option on the <em>Output </em>
					page of the <see cref="T:DoubleAgent.Control.PropertySheet" text="Advanced Character Options" />
					window.
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ReadOnlySetting']" />
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Character.SoundEffectsEnabled" suffix="Property" prefix="The" />
			<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Settings.SREnabled">
			<summary>
				<para>Indicates whether speech input is enabled.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>settings</em>-&gt;<c>get_SREnabled</c> (<em>&amp;SREnabled</em>)</para>
</cpp>
<csharp>
<para>[<em>SREnabled</em> = ]<em>control</em>.<c>Settings.SREnabled</c></para>
</csharp>
<vb>
<para>[<em>SREnabled</em> = ]<em>control</em>.<c>Settings.SREnabled</c></para>
</vb>
</syntax>
			<value name="SREnabled">
				A <c>boolean </c>value that indicates if speech input is enabled.
			</value>
			<remarks>
				<para>
					This property reflects the <c>Characters listen for input </c>option on the <em>
						Speech Input
					</em> page of the <see cref="T:DoubleAgent.Control.PropertySheet" text="Advanced Character Options" />
					window.
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ReadOnlySetting']" />
				</note>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Character.Listen" suffix="Method" prefix="The" />
			<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Settings.SRHotKey">
			<summary>
				<para>
					Returns the user's current setting for the <em>Listening key</em>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>settings</em>-&gt;<c>get_SRHotKey</c> (<em>&amp;SRHotKey</em>)</para>
</cpp>
<csharp>
<para>[<em>SRHotKey</em> = ]<em>control</em>.<c>Settings.SRHotKey</c></para>
</csharp>
<vb>
<para>[<em>SRHotKey</em> = ]<em>control</em>.<c>Settings.SRHotKey</c></para>
</vb>
</syntax>
			<value name="SRHotKey">
				A <c>string </c>value that describes the current <em>Listening key</em>.
			</value>
			<remarks>
				<para>
					This property reflects the <c>When you press the … key </c>option on the <em>
						Speech Input
					</em> page of the <see cref="T:DoubleAgent.Control.PropertySheet" text="Advanced Character Options" />
					window.
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ReadOnlySetting']" />
				</note>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Character.Listen" suffix="Method" prefix="The" />
			<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Settings.SRHotKeyTime">
			<summary>
				<para>
					Returns the current timeout delay for the <em>Listening key</em>.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>settings</em>-&gt;<c>get_SRHotKeyTime</c> (<em>&amp;SRHotKeyTime</em>)</para>
</cpp>
<csharp>
<para>[<em>SRHotKeyTime</em> = ]<em>control</em>.<c>Settings.SRHotKeyTime</c></para>
</csharp>
<vb>
<para>[<em>SRHotKeyTime</em> = ]<em>control</em>.<c>Settings.SRHotKeyTime</c></para>
</vb>
</syntax>
			<value name="SRHotKeyTime">
				A <c>numeric </c>value that indicates the <em>Listening key </em>timeout,
				in seconds.
			</value>
			<remarks>
				<para>
					This property reflects the <c>And continue for … seconds …</c> option on the <em>Speech Input </em>
					page of the <see cref="T:DoubleAgent.Control.PropertySheet" text="Advanced Character Options" />
					window.
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ReadOnlySetting']" />
				</note>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Character.Listen" suffix="Method" prefix="The" />
			<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Settings.SRListeningPrompt">
			<summary>
				<para>
					Indicates if a sound is played when <em>Listening mode </em>is activated or deactivated.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>settings</em>-&gt;<c>get_SRListeningPrompt</c> (<em>&amp;SRListeningPrompt</em>)</para>
</cpp>
<csharp>
<para>[<em>SRListeningPrompt</em> = ]<em>control</em>.<c>Settings.SRListeningPrompt</c></para>
</csharp>
<vb>
<para>[<em>SRListeningPrompt</em> = ]<em>control</em>.<c>Settings.SRListeningPrompt</c></para>
</vb>
</syntax>
			<value name="SRListeningPrompt">
				A <c>boolean </c>value that indicates if the <em>Listening </em>prompt
				is enabled.
			</value>
			<remarks>
				<para>
					This property reflects the <c>Play tone when you can speak </c>option on the <em>
						Speech Input
					</em> page of the <see cref="T:DoubleAgent.Control.PropertySheet" text="Advanced Character Options" />
					window.
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ReadOnlySetting']" />
				</note>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Character.Listen" suffix="Method" prefix="The" />
			<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Settings.SRListeningTip">
			<summary>
				<para>
					Indicates if the <em>Listening tip </em>is shown when <em>Listening mode </em>is active.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>settings</em>-&gt;<c>get_SRListeningTip</c> (<em>&amp;SRListeningTip</em>)</para>
</cpp>
<csharp>
<para>[<em>SRListeningTip</em> = ]<em>control</em>.<c>Settings.SRListeningTip</c></para>
</csharp>
<vb>
<para>[<em>SRListeningTip</em> = ]<em>control</em>.<c>Settings.SRListeningTip</c></para>
</vb>
</syntax>
			<value name="SRListeningTip">
				A <c>boolean </c>value that indicates if the <em>Listening tip </em>
				is enabled.
			</value>
			<remarks>
				<para>
					This property reflects the <c>Display listening tips </c>option on the <em>Speech Input </em>
					page of the <see cref="T:DoubleAgent.Control.PropertySheet" text="Advanced Character Options" />
					window.
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ReadOnlySetting']" />
				</note>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Character.Listen" suffix="Method" prefix="The" />
			<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Settings.TTSEnabled">
			<summary>
				<para>Indicates if spoken audio output is enabled.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>settings</em>-&gt;<c>get_TTSEnabled</c> (<em>&amp;TTSEnabled</em>)</para>
</cpp>
<csharp>
<para>[<em>TTSEnabled</em> = ]<em>control</em>.<c>Settings.TTSEnabled</c></para>
</csharp>
<vb>
<para>[<em>TTSEnabled</em> = ]<em>control</em>.<c>Settings.TTSEnabled</c></para>
</vb>
</syntax>
			<value name="TTSEnabled">
				A <c>boolean </c>value indicating if spoken output is enabled.
			</value>
			<remarks>
				<para>
					This property reflects the <c>Play spoken audio </c>option on the <em>Output </em>page of
					the <see cref="T:DoubleAgent.Control.PropertySheet" text="Advanced Character Options" /> window.
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ReadOnlySetting']" />
				</note>
			</remarks>
			<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.Settings.TTSSpeed">
			<summary>
				<para>Returns the text-to-speech rate configured by the user.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>settings</em>-&gt;<c>get_TTSSpeed</c> (<em>&amp;TTSSpeed</em>)</para>
</cpp>
<csharp>
<para>[<em>TTSSpeed</em> = ]<em>control</em>.<c>Settings.TTSSpeed</c></para>
</csharp>
<vb>
<para>[<em>TTSSpeed</em> = ]<em>control</em>.<c>Settings.TTSSpeed</c></para>
</vb>
</syntax>
			<value name="TTSSpeed">
				A <c>numeric </c>value that indicates the relative rate applied to text-to-speech.
				It ranges from 0 (slow) to 10 (fast). A value of 5 indicates no change to the speech engine's normal
				speaking speed.
			</value>
			<remarks>
				<para>
					This property reflects the <c>Speaking speed </c>option on the <em>Output </em>page of the
					<see cref="T:DoubleAgent.Control.PropertySheet" text="Advanced Character Options" /> window.
				</para>
				<note>
					<include file="DoubleAgent.Include.xml" path="/doc/properties/note[@name='ReadOnlySetting']" />
				</note>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Character.Speak" suffix="Method" prefix="The" />
			<seealso cref="E:DoubleAgent.Control.Control.AgentPropertyChange" prefix="The" suffix="Event" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.AudioOutput">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This object has been replaced by the <see cref="T:DoubleAgent.Control.Settings" /> object,
					but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<member name="P:DoubleAgent.Control.AudioOutput.Enabled">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Settings.TTSEnabled" text="Settings.TTSEnabled" />
					property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<member name="P:DoubleAgent.Control.AudioOutput.SoundEffects">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Settings.SoundEffectsEnabled" text="Settings.SoundEffectsEnabled" />
					property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<member name="P:DoubleAgent.Control.AudioOutput.Status">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Settings.AudioStatus" text="Settings.AudioStatus" />
					property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.SpeechInput">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This object has been replaced by the <see cref="T:DoubleAgent.Control.Settings" /> object,
					but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<member name="P:DoubleAgent.Control.SpeechInput.Enabled">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Settings.SREnabled" text="Settings.SREnabled" />
					property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<member name="P:DoubleAgent.Control.SpeechInput.Engine">
			<summary>obsolete</summary>
		</member>

		<member name="P:DoubleAgent.Control.SpeechInput.HotKey">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Settings.SRHotKey" text="Settings.SRHotKey" />
					property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<member name="P:DoubleAgent.Control.SpeechInput.Installed">
			<summary>obsolete</summary>
		</member>

		<member name="P:DoubleAgent.Control.SpeechInput.Language">
			<summary>obsolete</summary>
		</member>

		<member name="P:DoubleAgent.Control.SpeechInput.ListeningTip">
			<summary>
				<para>deprecated</para>
			</summary>
			<remarks>
				<para>
					This property has been replaced by the <see cref="P:DoubleAgent.Control.Settings.SRListeningTip" text="Settings.SRListeningTip" />
					property, but is still supported for backward compatibility.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.CharacterFiles">
			<summary>
				<para>
					The <c>CharacterFiles </c>object provides information that allows you to locate locally installed
					character definition files. It includes a number of filtering properties that specify where to look
					for character files, and what kind of files to find. The results are returned in its <see cref="P:DoubleAgent.Control.CharacterFiles.FilePaths" />
					property.
				</para>
			</summary>
			<syntax>
				<list type="bullet">
					<item>
						<term>
							<bookmark name="Properties"></bookmark>
							The <c>CharacterFiles </c>object has the following <c>properties</c>:
						</term>
						<description>
							<see cref="P:DoubleAgent.Control.CharacterFiles.DefaultFileName" />,
							<see cref="P:DoubleAgent.Control.CharacterFiles.DefaultFilePath" />,
							<see cref="P:DoubleAgent.Control.CharacterFiles.DefaultSearchPath" />,
							<see cref="P:DoubleAgent.Control.CharacterFiles.DoubleAgentFiles" />,
							<s>
								<see cref="P:DoubleAgent.Control.CharacterFiles.FilePaths" />
							</s>,
							<see cref="P:DoubleAgent.Control.CharacterFiles.MsAgentFiles" />,
							<see cref="P:DoubleAgent.Control.CharacterFiles.MsOfficeFiles" />,
							<see cref="P:DoubleAgent.Control.CharacterFiles.NonSpeakingCharacters" />,
							<see cref="P:DoubleAgent.Control.CharacterFiles.SearchPath" />,
							<see cref="P:DoubleAgent.Control.CharacterFiles.SpeakingCharacters" />,
							<see cref="P:DoubleAgent.Control.CharacterFiles.VerifyVersion" />
						</description>
					</item>
				</list>
			</syntax>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CharacterFiles.DefaultFileName">
			<summary>
				<para>
					Returns the name of the <em>default </em>character's definition file.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>characterfiles</em>.<c>get_DefaultFileName</c> (&amp;<em>DefaultFileName</em>)</para>
</cpp>
<csharp>
<para>[<em>DefaultFileName</em> = ]<em>control</em>.<c>CharacterFiles</c>.<c>DefaultFileName</c></para>
</csharp>
<vb>
<para>[<em>DefaultFileName</em> = ]<em>control</em>.<c>CharacterFiles</c>.<c>DefaultFileName</c></para>
</vb>
</syntax>
			<value name="DefaultFileName">
				A <c>string </c>value that contains the name of the <em>default </em>
				character's definition file.
			</value>
			<remarks>
				<para>
					The <em>default </em>character is specified by the user in the <see cref="T:DoubleAgent.Control.PropertySheet" text=" Advanced Character Options" />
					window.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CharacterFiles.DefaultFilePath">
			<summary>
				<para>
					Returns the full path of the <em>default </em>character's definition file.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>characterfiles</em>.<c>get_DefaultFilePath</c> (&amp;<em>DefaultFilePath</em>)</para>
</cpp>
<csharp>
<para>[<em>DefaultFilePath</em> = ]<em>control</em>.<c>CharacterFiles</c>.<c>DefaultFilePath</c></para>
</csharp>
<vb>
<para>[<em>DefaultFilePath</em> = ]<em>control</em>.<c>CharacterFiles</c>.<c>DefaultFilePath</c></para>
</vb>
</syntax>
			<value name="DefaultFilePath">
				A <c>string </c>value that contains the UNC path of the <em>
					default
				</em> character's definition file.
			</value>
			<remarks>
				<para>
					The <em>default </em>character is specified by the user in the <see cref="T:DoubleAgent.Control.PropertySheet" text=" Advanced Character Options" />
					window.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CharacterFiles.DefaultSearchPath">
			<summary>
				<para>
					Identifies the <em>default </em>search path used to fill the <see cref="P:DoubleAgent.Control.CharacterFiles.FilePaths" />
					property.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>characterfiles</em>.<c>get_DefaultSearchPath</c> (&amp;<em>DefaultSearchPath</em>)</para>
</cpp>
<csharp>
<para>[<em>DefaultSearchPath</em> = ]<em>control</em>.<c>CharacterFiles</c>.<c>DefaultSearchPath</c></para>
</csharp>
<vb>
<para>[<em>DefaultSearchPath</em> = ]<em>control</em>.<c>CharacterFiles</c>.<c>DefaultSearchPath</c></para>
</vb>
</syntax>
			<value name="DefaultFilePath">
				A <c>string </c>value that identifies one or more UNC paths, separated
				by semicolons.
			</value>
			<remarks>
				<para>
					This property returns the <em>default </em>search path, based on the selection criteria specified
					by the <see cref="P:DoubleAgent.Control.CharacterFiles.DoubleAgentFiles" />, <see cref="P:DoubleAgent.Control.CharacterFiles.MsAgentFiles" />
					and <see cref="P:DoubleAgent.Control.CharacterFiles.MsOfficeFiles" /> properties. The <em>
						actual
					</em> search path can be set with the <see cref="P:DoubleAgent.Control.CharacterFiles.SearchPath" />
					property.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.CharacterFiles.SearchPath" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.CharacterFiles.FilePaths" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CharacterFiles.DoubleAgentFiles">
			<summary>
				<para>
					Indicates if the Double Agent install location should be included in the <see cref="P:DoubleAgent.Control.CharacterFiles.DefaultSearchPath" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>characterfiles</em>.<c>get_DoubleAgentFiles</c> (&amp;<em>DoubleAgentFiles</em>)</para>

<para><em>characterfiles</em>.<c>put_DoubleAgentFiles</c> (<em>DoubleAgentFiles</em>)</para>
</cpp>
<csharp>
<para>[<em>DoubleAgentFiles</em> = ]<em>control</em>.<c>CharacterFiles</c>.<c>DoubleAgentFiles</c></para>

<para><em>control</em>.<c>CharacterFiles</c>.<c>DoubleAgentFiles</c> = <em>DoubleAgentFiles</em></para>
</csharp>
<vb>
<para>[<em>DoubleAgentFiles</em> = ]<em>control</em>.<c>CharacterFiles</c>.<c>DoubleAgentFiles</c></para>

<para><em>control</em>.<c>CharacterFiles</c>.<c>DoubleAgentFiles</c> = <em>DoubleAgentFiles</em></para>
</vb>
</syntax>
			<value name="DoubleAgentFiles">
				A <c>boolean </c>value that indicates if the Double Agent install
				location should be included in the search for character files.
			</value>
			<remarks>
				<para>
					The path used to find character files is the <c>Chars </c>subdirectory of the Double Agent install location. Typically, this would be <c xml:space="preserve">C:\Program Files\Double Agent\Chars</c>.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.CharacterFiles.FilePaths" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.CharacterFiles.SearchPath" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.CharacterFiles.DefaultSearchPath" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CharacterFiles.FilePaths">
			<summary>
				<para>
					A list of character file paths that satisfy the filtering criteria defined by other properties
					in the <see cref="T:DoubleAgent.Control.CharacterFiles" suffix="Object" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>characterfiles</em>.<c>get_FilePaths</c> (&amp;<em>FilePaths</em>)</para>
</cpp>
<csharp>
<para>[<em>FilePaths</em> = ]<em>control</em>.<c>CharacterFiles</c>.<c>FilePaths</c></para>
</csharp>
<vb>
<para>[<em>FilePaths</em> = ]<em>control</em>.<c>CharacterFiles</c>.<c>FilePaths</c></para>
</vb>
</syntax>
			<value name="DefaultFilePath">
				An array of <c>string </c>values that identify locally available character
				definition files.
			</value>
			<remarks>
				<para>
					This property is the raison d'être of the <see cref="T:DoubleAgent.Control.CharacterFiles" suffix="Object" />.
					As you change the other properties in this object, the contents of this array will change accordingly.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.CharacterFiles.DoubleAgentFiles" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.CharacterFiles.MsAgentFiles" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.CharacterFiles.MsOfficeFiles" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.CharacterFiles.SpeakingCharacters" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.CharacterFiles.NonSpeakingCharacters" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.CharacterFiles.VerifyVersion" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.CharacterFiles.SearchPath" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.CharacterFiles.DefaultSearchPath" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CharacterFiles.MsAgentFiles">
			<summary>
				<para>
					Indicates if the Microsoft Agent install location should be included in the <see cref="P:DoubleAgent.Control.CharacterFiles.DefaultSearchPath" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>characterfiles</em>.<c>get_MsAgentFiles</c> (&amp;<em>MsAgentFiles</em>)</para>

<para><em>characterfiles</em>.<c>put_MsAgentFiles</c> (<em>MsAgentFiles</em>)</para>
</cpp>
<csharp>
<para>[<em>MsAgentFiles</em> = ]<em>control</em>.<c>CharacterFiles</c>.<c>MsAgentFiles</c></para>

<para><em>control</em>.<c>CharacterFiles</c>.<c>MsAgentFiles</c> = <em>MsAgentFiles</em></para>
</csharp>
<vb>
<para>[<em>MsAgentFiles</em> = ]<em>control</em>.<c>CharacterFiles</c>.<c>MsAgentFiles</c></para>

<para><em>control</em>.<c>CharacterFiles</c>.<c>MsAgentFiles</c> = <em>MsAgentFiles</em></para>
</vb>
</syntax>
			<value name="MsAgentFiles">
				A <c>boolean </c>value that indicates if the Microsoft Agent install location
				should be included in the search for character files.
			</value>
			<remarks>
				<para>
					The path used to find character files is the <c>Chars </c>subdirectory of the Microsoft Agent install location. Typically, this would be <c xml:space="preserve">C:\Windows\MsAgent\Chars</c>.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.CharacterFiles.FilePaths" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.CharacterFiles.SearchPath" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.CharacterFiles.DefaultSearchPath" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CharacterFiles.MsOfficeFiles">
			<summary>
				<para>
					Indicates if the Microsoft Office install location should be included in the <see cref="P:DoubleAgent.Control.CharacterFiles.DefaultSearchPath" />.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>characterfiles</em>.<c>get_MsOfficeFiles</c> (&amp;<em>MsOfficeFiles</em>)</para>

<para><em>characterfiles</em>.<c>put_MsOfficeFiles</c> (<em>MsOfficeFiles</em>)</para>
</cpp>
<csharp>
<para>[<em>MsOfficeFiles</em> = ]<em>control</em>.<c>CharacterFiles</c>.<c>MsOfficeFiles</c></para>

<para><em>control</em>.<c>CharacterFiles</c>.<c>MsOfficeFiles</c> = <em>MsOfficeFiles</em></para>
</csharp>
<vb>
<para>[<em>MsOfficeFiles</em> = ]<em>control</em>.<c>CharacterFiles</c>.<c>MsOfficeFiles</c></para>

<para><em>control</em>.<c>CharacterFiles</c>.<c>MsOfficeFiles</c> = <em>MsOfficeFiles</em></para>
</vb>
</syntax>
			<value name="MsOfficeFiles">
				A <c>boolean </c>value that indicates if the Microsoft Office install
				location should be included in the search for character files.
			</value>
			<remarks>
				<para>
					Typically, the Microsoft Office characters would be in <c xml:space="preserve">C:\Program Files\Microsoft Office\Office10</c>.
				</para>
				<note>Only older versions of Microsoft Office include Agent character files.</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.CharacterFiles.FilePaths" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.CharacterFiles.SearchPath" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.CharacterFiles.DefaultSearchPath" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CharacterFiles.NonSpeakingCharacters">
			<summary>
				<para>
					Indicates if the <see cref="P:DoubleAgent.Control.CharacterFiles.FilePaths" /> property should
					include characters that are <em>not </em>designed to speak.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>characterfiles</em>.<c>get_NonSpeakingCharacters</c> (&amp;<em>NonSpeakingCharacters</em>)</para>

<para><em>characterfiles</em>.<c>put_NonSpeakingCharacters</c> (<em>NonSpeakingCharacters</em>)</para>
</cpp>
<csharp>
<para>[<em>NonSpeakingCharacters</em> = ]<em>control</em>.<c>CharacterFiles</c>.<c>NonSpeakingCharacters</c></para>

<para><em>control</em>.<c>CharacterFiles</c>.<c>NonSpeakingCharacters</c> = <em>NonSpeakingCharacters</em></para>
</csharp>
<vb>
<para>[<em>NonSpeakingCharacters</em> = ]<em>control</em>.<c>CharacterFiles</c>.<c>NonSpeakingCharacters</c></para>

<para><em>control</em>.<c>CharacterFiles</c>.<c>NonSpeakingCharacters</c> = <em>NonSpeakingCharacters</em></para>
</vb>
</syntax>
			<value name="NonSpeakingCharacters">
				A <c>boolean </c>value that indicates if non-speaking characters
				should be included.
			</value>
			<remarks>
				<para>
					Unlike Microsoft Agent, Double Agents supports the <see cref="M:DoubleAgent.Control.Character.Speak" />
					method for characters that are not designed to speak. However, there won't be any mouth animations because
					they aren't included in the character design.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.CharacterFiles.FilePaths" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CharacterFiles.SearchPath">
			<summary></summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>characterfiles</em>.<c>get_SearchPath</c> (&amp;<em>SearchPath</em>)</para>

<para><em>characterfiles</em>.<c>put_SearchPath</c> (<em>SearchPath</em>)</para>
</cpp>
<csharp>
<para>[<em>SearchPath</em> = ]<em>control</em>.<c>CharacterFiles</c>.<c>SearchPath</c></para>

<para><em>control</em>.<c>CharacterFiles</c>.<c>SearchPath</c> = <em>SearchPath</em></para>
</csharp>
<vb>
<para>[<em>SearchPath</em> = ]<em>control</em>.<c>CharacterFiles</c>.<c>SearchPath</c></para>

<para><em>control</em>.<c>CharacterFiles</c>.<c>SearchPath</c> = <em>SearchPath</em></para>
</vb>
</syntax>
			<value name="SearchPath">
				A <c>string </c>value that identifies one or more UNC paths, separated by
				semicolons.
			</value>
			<remarks>
				<para>
					When this property is set to an <c>empty string</c>, it returns the <see cref="P:DoubleAgent.Control.CharacterFiles.DefaultSearchPath" />.
				</para>
				<para>
					Normally, you would leave this property alone and allow the <see cref="P:DoubleAgent.Control.CharacterFiles.DefaultSearchPath" />
					to be used. You would only set this property if you wanted to search for character files in non-default
					locations.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.CharacterFiles.DefaultSearchPath" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.CharacterFiles.FilePaths" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CharacterFiles.SpeakingCharacters">
			<summary>
				<para>
					Indicates if the <see cref="P:DoubleAgent.Control.CharacterFiles.FilePaths" /> property should
					include characters that are designed to speak.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>characterfiles</em>.<c>get_SpeakingCharacters</c> (&amp;<em>SpeakingCharacters</em>)</para>

<para><em>characterfiles</em>.<c>put_SpeakingCharacters</c> (<em>SpeakingCharacters</em>)</para>
</cpp>
<csharp>
<para>[<em>SpeakingCharacters</em> = ]<em>control</em>.<c>CharacterFiles</c>.<c>SpeakingCharacters</c></para>

<para><em>control</em>.<c>CharacterFiles</c>.<c>SpeakingCharacters</c> = <em>SpeakingCharacters</em></para>
</csharp>
<vb>
<para>[<em>SpeakingCharacters</em> = ]<em>control</em>.<c>CharacterFiles</c>.<c>SpeakingCharacters</c></para>

<para><em>control</em>.<c>CharacterFiles</c>.<c>SpeakingCharacters</c> = <em>SpeakingCharacters</em></para>
</vb>
</syntax>
			<value name="SpeakingCharacters">
				A <c>boolean </c>value that indicates if speaking characters should
				be included.
			</value>
			<seealso cref="P:DoubleAgent.Control.CharacterFiles.FilePaths" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.CharacterFiles.VerifyVersion">
			<summary>
				<para>
					Indicates if the the <see cref="P:DoubleAgent.Control.CharacterFiles.FilePaths" /> property
					should be limited to version 2.x characters.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>characterfiles</em>.<c>get_VerifyVersion</c> (&amp;<em>VerifyVersion</em>)</para>

<para><em>characterfiles</em>.<c>put_VerifyVersion</c> (<em>VerifyVersion</em>)</para>
</cpp>
<csharp>
<para>[<em>VerifyVersion</em> = ]<em>control</em>.<c>CharacterFiles</c>.<c>VerifyVersion</c></para>

<para><em>control</em>.<c>CharacterFiles</c>.<c>VerifyVersion</c> = <em>VerifyVersion</em></para>
</csharp>
<vb>
<para>[<em>VerifyVersion</em> = ]<em>control</em>.<c>CharacterFiles</c>.<c>VerifyVersion</c></para>

<para><em>control</em>.<c>CharacterFiles</c>.<c>VerifyVersion</c> = <em>VerifyVersion</em></para>
</vb>
</syntax>
			<value name="VerifyVersion">
				A <c>boolean </c>value that indicates if the character files' version
				should be verified.
			</value>
			<remarks>
				<para>Double Agent can only use version 2.x characters.</para>
				<note>
					Setting the <see cref="P:DoubleAgent.Control.CharacterFiles.SpeakingCharacters" /> or <see cref="P:DoubleAgent.Control.CharacterFiles.NonSpeakingCharacters" />
					filters will automatically set this property to <c>True</c>.
				</note>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.CharacterFiles.FilePaths" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.SREngine">
			<summary>
				<para>
					The <c>SREngine </c>object provides information about an installed speech recognition engine.
					You can use it to help choose a character's speech recognition engine.
				</para>
			</summary>
			<syntax>
				<list type="bullet">
					<item>
						<term>
							<bookmark name="Methods"></bookmark>
							The <c>SREngine </c>object has the following <c>method</c>:
						</term>
						<description>
							<see cref="M:DoubleAgent.Control.SREngine.GetVersion" />
						</description>
					</item>
					<item>
						<term>
							<bookmark name="Properties"></bookmark>
							The <c>SREngine </c>object has the following <c>properties</c>:
						</term>
						<description>
							<see cref="P:DoubleAgent.Control.SREngine.DisplayName" />,
							<see cref="P:DoubleAgent.Control.SREngine.LanguageID" />,
							<see cref="P:DoubleAgent.Control.SREngine.LanguageIDs" />,
							<see cref="P:DoubleAgent.Control.SREngine.LanguageName" />,
							<see cref="P:DoubleAgent.Control.SREngine.LanguageNames" />,
							<see cref="P:DoubleAgent.Control.SREngine.Manufacturer" />,
							<see cref="P:DoubleAgent.Control.SREngine.SRModeID" />
						</description>
					</item>
				</list>
			</syntax>
			<seealso cref="M:DoubleAgent.Control.Control.GetCharacterSREngine" suffix="Method" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Character.SREngine" suffix="Property" prefix="The" />
			<seealso cref="T:DoubleAgent.Control.SREngines" suffix="Collection" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.SREngine.GetVersion">
			<summary>
				<para>Returns the speech recognition engine's version.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>srengine</em>.<c>GetVersion</c> (&amp;<em>MajorVersion</em>, &amp;<em>MinorVersion</em>)</para>
</cpp>
<csharp>
<para><em>srengine</em>.<c>GetVersion</c> (<c>out</c> <em>MajorVersion</em>, <c>out</c> <em>MinorVersion</em>)</para>
</csharp>
<vbnet>
<para><em>srengine</em>.<c>GetVersion</c> (<em>MajorVersion</em>, <em>MinorVersion</em>)</para>
</vbnet>
<vb>
<para><c>Call</c> <em>srengine</em>.<c>GetVersion</c> (<em>MajorVersion</em>, <em>MinorVersion</em>)</para>
</vb>
</syntax>
			<param name="MajorVersion">
				A <c>numeric </c>values that identifies the engine's major version (always
				5 at this time).
			</param>
			<param name="MinorVersion">
				A <c>numeric </c>values that identifies the engine's minor version (always
				0 at this time).
			</param>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.SREngine.DisplayName">
			<summary>
				<para>Returns the speech recognition engine's human-readable name.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>srengine</em>.<c>get_DisplayName</c> (&amp;<em>DisplayName</em>)</para>
</cpp>
<csharp>
<para>[<em>DisplayName</em> = ]<em>srengine</em>.<c>DisplayName</c></para>
</csharp>
<vb>
<para>[<em>DisplayName</em> = ]<em>srengine</em>.<c>DisplayName</c></para>
</vb>
</syntax>
			<value name="DisplayName">
				A <c>string </c>value gives the engine's name in a form suitable for the
				user.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.SREngine.LanguageID">
			<summary>
				<para>Returns the speech recognition engine's primary language identifier.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>srengine</em>.<c>get_LanguageID</c> (&amp;<em>LanguageID</em>)</para>
</cpp>
<csharp>
<para>[<em>LanguageID</em> = ]<em>srengine</em>.<c>LanguageID</c></para>
</csharp>
<vb>
<para>[<em>LanguageID</em> = ]<em>srengine</em>.<c>LanguageID</c></para>
</vb>
</syntax>
			<value name="LanguageID">
				A <c>numeric </c>value that identifies the primary language supported by
				the engine.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.SREngine.LanguageIDs">
			<summary>
				<para>Returns the speech recognition engine's supported language identifiers.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>srengine</em>.<c>get_LanguageIDs</c> (&amp;<em>LanguageIDs</em>)</para>
</cpp>
<csharp>
<para>[<em>LanguageIDs</em> = ]<em>srengine</em>.<c>LanguageIDs</c></para>
</csharp>
<vb>
<para>[<em>LanguageIDs</em> = ]<em>srengine</em>.<c>LanguageIDs</c></para>
</vb>
</syntax>
			<value name="LanguageIDs">
				An array of <c>numeric </c>values that identify <em>all </em>languages
				supported by the engine.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.SREngine.LanguageName">
			<summary>
				<para>Returns the speech recognition engine's human-readable primary language name.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>srengine</em>.<c>get_LanguageName</c> (<em>EnglishName</em>, &amp;<em>LanguageName</em>)</para>
</cpp>
<csharp>
<para>[<em>LanguageName</em> = ]<em>srengine</em>.<c>get_LanguageName</c> (<em>EnglishName</em>)</para>
</csharp>
<vb>
<para>[<em>LanguageName</em> = ]<em>srengine</em>.<c>LanguageName</c>[ [<em>EnglishName</em>]]</para>
</vb>
</syntax>
			<value name="LanguageName">
				A <c>string </c>value that identifies the engine's primary language in
				a form suitable for the user.
			</value>
			<param name="EnglishName">
				An optional <c>boolean </c>value that specifies if the language name should
				be in English, or in the user's language. The default value is <c>True</c>.
			</param>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.SREngine.LanguageNames">
			<summary>
				<para>Returns the speech recognition engine's human-readable supported language names.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>srengine</em>.<c>get_LanguageNames</c> (<em>EnglishNames</em>, &amp;<em>LanguageNames</em>)</para>
</cpp>
<csharp>
<para>[<em>LanguageNames</em> = ]<em>srengine</em>.<c>get_LanguageNames</c> (<em>EnglishNames</em>)</para>
</csharp>
<vb>
<para>[<em>LanguageNames</em> = ]<em>srengine</em>.<c>LanguageNames</c>[ [<em>EnglishNames</em>]]</para>
</vb>
</syntax>
			<value name="LanguageNames">
				An array of <c>string </c>values that identify <em>all </em>of the engine's
				supported languages in a form suitable for the user.
			</value>
			<param name="EnglishNames">
				An optional <c>boolean </c>value that specifies if the language names
				should be in English, or in the user's language. The default value is <c>True</c>.
			</param>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.SREngine.Manufacturer">
			<summary>
				<para>Returns the speech recognition engine's manufacturer's name.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>srengine</em>.<c>get_Manufacturer</c> (&amp;<em>Manufacturer</em>)</para>
</cpp>
<csharp>
<para>[<em>Manufacturer</em> = ]<em>srengine</em>.<c>Manufacturer</c></para>
</csharp>
<vb>
<para>[<em>Manufacturer</em> = ]<em>srengine</em>.<c>Manufacturer</c></para>
</vb>
</syntax>
			<value name="Manufacturer">
				A <c>string </c>value that supplies the name of the engine's manufacturer.
			</value>
			<remarks>
				<para>Some speech recognition engines may not supply this property.</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.SREngine.SRModeID">
			<summary>
				<para>Returns the unique identifier used to select this speech recognition engine.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>srengine</em>.<c>get_SRModeID</c> (&amp;<em>SRModeID</em>)</para>
</cpp>
<csharp>
<para>[<em>Count</em> = ]<em>srengine</em>.<c>SRModeID</c></para>
</csharp>
<vb>
<para>[<em>Count</em> = ]<em>srengine</em>.<c>SRModeID</c></para>
</vb>
</syntax>
			<value name="SRModeID">
				A <c>string </c>value that uniquely identifies the speech recognition engine.
			</value>
			<remarks>
				<para>
					This property corresponds to the <see cref="T:DoubleAgent.Control.Character" />.<see cref="P:DoubleAgent.Control.Character.SRModeID" />
					property. To use <em>this </em><see cref="T:DoubleAgent.Control.SREngine" suffix="Object" />, set
					the character's <see cref="P:DoubleAgent.Control.Character.SRModeID" /> property to <em>this </em>value.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.SREngines" kind="Collection">
			<summary>
				<para>
					The <c>SREngines </c>collection contains a selected set of <see cref="T:DoubleAgent.Control.SREngine" />
					objects. You can use it to help choose a character's speech recognition engine.
				</para>
			</summary>
			<syntax>
				<list type="bullet">
					<item>
						<term>
							<bookmark name="Properties"></bookmark>
							The <c>SREngines </c>object has the following <c>properties</c>:
						</term>
						<description>
							<see cref="P:DoubleAgent.Control.SREngines.Count" />,
							<see cref="P:DoubleAgent.Control.SREngines.Item" />
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>The contents of the collection depends on how it was retrieved.</para>
				<para>
					<include path="/doc/members/member[@name='P:DoubleAgent.Control.SREngines.Item']/remarks/para[@name='Ordering']" />
				</para>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Control.FindCharacterSREngines" suffix="Method" prefix="The" />
			<seealso cref="M:DoubleAgent.Control.Control.FindSREngines" suffix="Method" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Control.SREngines" suffix="Property" prefix="The" />
			<seealso cref="M:DoubleAgent.Control.Character.FindSREngines" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.SREngines.Count">
			<summary>
				<para>
					Returns the count of <see cref="T:DoubleAgent.Control.SREngine" /> objects in the <see cref="T:DoubleAgent.Control.SREngines" />
					collection.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>srengines</em>.<c>get_Count</c> (&amp;<em>Count</em>)</para>
</cpp>
<csharp>
<para>[<em>Count</em> = ]<em>srengines</em>.<c>Count</c></para>
</csharp>
<vb>
<para>[<em>Count</em> = ]<em>srengines</em>.<c>Count</c></para>
</vb>
</syntax>
			<value name="Count">
				A <c>numeric </c>value that indicates the number of <see cref="T:DoubleAgent.Control.SREngine" />
				objects in the collection.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.SREngines.Item">
			<summary>
				<para>
					Returns a <see cref="T:DoubleAgent.Control.SREngine" suffix="Object" /> in the collection.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>srengines</em>.<c>get_Item</c> (<em>Index</em>, &amp;<em>SREngine</em>)</para>
</cpp>
<csharp>
<para>[<em>SREngine</em> = ]<em>srengines</em>.this [<em>Index</em>]</para>
</csharp>
<vbnet>
<para>[<em>SREngine</em> = ]<em>srengines</em> (<em>Index</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>SREngine</em> = ]<em>srengines</em> (<em>Index</em>)</para>
</vb>
</syntax>
			<param name="Index">
				A <c>numeric </c>value that specifies the zero-based index of the item to retrieve,<para />or
				a <c>string </c>value that specifies the <see cref="P:DoubleAgent.Control.SREngine.SRModeID" />
				of the item to retrieve.
			</param>
			<returns name="SREngine">
				The <see cref="T:DoubleAgent.Control.SREngine" suffix="Object" /> identified
				by <em>Index</em>.
			</returns>
			<remarks>
				<para name="Ordering">
					When the <see cref="T:DoubleAgent.Control.SREngines" suffix="Collection" />
					is retrieved using <c>matching criteria </c>(for example using the <see cref="M:DoubleAgent.Control.Character.FindSREngines" />
					method), it is an <em>ordered </em>collection. It's items are in order from best to worst match.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.SREngines.Count" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.TTSEngine">
			<summary>
				<para>
					The <c>TTSEngine </c>object provides information about an installed text-to-speech engine.
					You can use it to help choose a character's text-to-speech engine.
				</para>
			</summary>
			<syntax>
				<list type="bullet">
					<item>
						<term>
							<bookmark name="Methods"></bookmark>
							The <c>TTSEngine </c>object has the following <c>method</c>:
						</term>
						<description>
							<see cref="M:DoubleAgent.Control.TTSEngine.GetVersion" />
						</description>
					</item>
					<item>
						<term>
							<bookmark name="Properties"></bookmark>
							The <c>TTSEngine </c>object has the following <c>properties</c>:
						</term>
						<description>
							<see cref="P:DoubleAgent.Control.TTSEngine.DisplayName" />,
							<see cref="P:DoubleAgent.Control.TTSEngine.Gender" />,
							<see cref="P:DoubleAgent.Control.TTSEngine.LanguageID" />,
							<see cref="P:DoubleAgent.Control.TTSEngine.LanguageName" />,
							<see cref="P:DoubleAgent.Control.TTSEngine.Manufacturer" />,
							<see cref="P:DoubleAgent.Control.TTSEngine.TTSModeID" />
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>
					Some text-to-speech engines support several <em>modes</em>, generally one for each supported
					language or language variant. In that case, this object represents only one <em>mode</em>, and
					there will one <c>TTSEngine </c>object for each <em>mode </em>supported by the speech engine, each
					with a unique <see cref="P:DoubleAgent.Control.TTSEngine.TTSModeID" /> property.
				</para>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Control.GetCharacterTTSEngine" suffix="Method" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Character.TTSEngine" suffix="Property" prefix="The" />
			<seealso cref="T:DoubleAgent.Control.TTSEngines" suffix="Collection" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="M:DoubleAgent.Control.TTSEngine.GetVersion">
			<summary>
				<para>Returns the text-to-speech engine's version.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>ttsengine</em>.<c>GetVersion</c> (&amp;<em>MajorVersion</em>, &amp;<em>MinorVersion</em>)</para>
</cpp>
<csharp>
<para><em>ttsengine</em>.<c>GetVersion</c> (<c>out</c> <em>MajorVersion</em>, <c>out</c> <em>MinorVersion</em>)</para>
</csharp>
<vbnet>
<para><em>ttsengine</em>.<c>GetVersion</c> (<em>MajorVersion</em>, <em>MinorVersion</em>)</para>
</vbnet>
<vb>
<para><c>Call</c> <em>ttsengine</em>.<c>GetVersion</c> (<em>MajorVersion</em>, <em>MinorVersion</em>)</para>
</vb>
</syntax>
			<param name="MajorVersion">
				A <c>numeric </c>values that identifies the engine's major version (always
				4 or 5 at this time).
			</param>
			<param name="MinorVersion">
				A <c>numeric </c>values that identifies the engine's minor version (always
				0 at this time).
			</param>
			<remarks>
				<para>
					You can use this property to determine if the text-to-speech engine is a SAPI4 or SAPI5 engine.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.TTSEngine.DisplayName">
			<summary>
				<para>Returns the text-to-speech engine's human-readable name.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>ttsengine</em>.<c>get_DisplayName</c> (&amp;<em>DisplayName</em>)</para>
</cpp>
<csharp>
<para>[<em>DisplayName</em> = ]<em>ttsengine</em>.<c>DisplayName</c></para>
</csharp>
<vb>
<para>[<em>DisplayName</em> = ]<em>ttsengine</em>.<c>DisplayName</c></para>
</vb>
</syntax>
			<value name="DisplayName">
				A <c>string </c>value gives the engine's name in a form suitable for the
				user.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.TTSEngine.Gender">
			<summary>
				<para>Returns the text-to-speech engine's gender.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>ttsengine</em>.<c>get_Gender</c> (&amp;<em>Gender</em>)</para>
</cpp>
<csharp>
<para>[<em>Gender</em> = ]<em>ttsengine</em>.<c>Gender</c></para>
</csharp>
<vb>
<para>[<em>Gender</em> = ]<em>ttsengine</em>.<c>Gender</c></para>
</vb>
</syntax>
			<value name="Gender">
				A <c>numeric </c>value that identifies the speech engine's gender:
				<list type="table">
					<item>
						<include path="/doc/members/member[@name='T:DoubleAgent.Control.SpeechGenderType']/syntax/list/item[@name='Female']" />
					</item>
					<item>
						<include path="/doc/members/member[@name='T:DoubleAgent.Control.SpeechGenderType']/syntax/list/item[@name='Male']" />
					</item>
				</list>
			</value>
			<seealso cref="T:DoubleAgent.Control.SpeechGenderType" suffix="Enumeration" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.TTSEngine.LanguageID">
			<summary>
				<para>Returns the text-to-speech engine's language identifier.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>ttsengine</em>.<c>get_LanguageID</c> (&amp;<em>LanguageID</em>)</para>
</cpp>
<csharp>
<para>[<em>LanguageID</em> = ]<em>ttsengine</em>.<c>LanguageID</c></para>
</csharp>
<vb>
<para>[<em>LanguageID</em> = ]<em>ttsengine</em>.<c>LanguageID</c></para>
</vb>
</syntax>
			<value name="LanguageID">
				A <c>numeric </c>value that identifies the language supported by the engine.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.TTSEngine.LanguageName">
			<summary>
				<para>Returns the text-to-speech engine's human-readable language name.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>ttsengine</em>.<c>get_LanguageName</c> (<em>EnglishName</em>, &amp;<em>LanguageName</em>)</para>
</cpp>
<csharp>
<para>[<em>LanguageName</em> = ]<em>ttsengine</em>.<c>get_LanguageName</c> (<em>EnglishName</em>)</para>
</csharp>
<vb>
<para>[<em>LanguageName</em> = ]<em>ttsengine</em>.<c>LanguageName</c>[ [<em>EnglishName</em>]]</para>
</vb>
</syntax>
			<value name="LanguageName">
				A <c>string </c>value that identifies the engine's language in a form
				suitable for the user.
			</value>
			<param name="EnglishName">
				An optional <c>boolean </c>value that specifies if the language name should
				be in English, or in the user's language. The default value is <c>True</c>.
			</param>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.TTSEngine.Manufacturer">
			<summary>
				<para>Returns the text-to-speech engine's manufacturer's name.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>ttsengine</em>.<c>get_Manufacturer</c> (&amp;<em>Manufacturer</em>)</para>
</cpp>
<csharp>
<para>[<em>Manufacturer</em> = ]<em>ttsengine</em>.<c>Manufacturer</c></para>
</csharp>
<vb>
<para>[<em>Manufacturer</em> = ]<em>ttsengine</em>.<c>Manufacturer</c></para>
</vb>
</syntax>
			<value name="Manufacturer">
				A <c>string </c>value that supplies the name of the engine's manufacturer.
			</value>
			<remarks>
				<para>Some text-to-speech engine engines may not supply this property.</para>
			</remarks>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.TTSEngine.TTSModeID">
			<summary>
				<para>Returns the unique identifier used to select this text-to-speech engine.</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>ttsengine</em>.<c>get_TTSModeID</c> (&amp;<em>TTSModeID</em>)</para>
</cpp>
<csharp>
<para>[<em>TTSModeID</em> = ]<em>ttsengine</em>.<c>TTSModeID</c></para>
</csharp>
<vb>
<para>[<em>TTSModeID</em> = ]<em>ttsengine</em>.<c>TTSModeID</c></para>
</vb>
</syntax>
			<value name="TTSModeID">
				A <c>string </c>value that uniquely identifies a specific speech mode of
				a specific text-to-speech engine.
			</value>
			<remarks>
				<para>
					This property corresponds to the <see cref="T:DoubleAgent.Control.Character" />.<see cref="P:DoubleAgent.Control.Character.TTSModeID" />
					property. To use <em>this </em><see cref="T:DoubleAgent.Control.TTSEngine" suffix="Object" />,
					set the character's <see cref="P:DoubleAgent.Control.Character.TTSModeID" /> property to <em>
						this
					</em>value.
				</para>
			</remarks>
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.TTSEngines">
			<summary>
				<para>
					The <c>TTSEngines </c>collection contains a selected set of <see cref="T:DoubleAgent.Control.TTSEngine" />
					objects. You can use it to help choose a character's text-to-speech engine.
				</para>
			</summary>
			<syntax>
				<list type="bullet">
					<item>
						<term>
							<bookmark name="Properties"></bookmark>
							The <c>TTSEngines </c>object has the following <c>properties</c>:
						</term>
						<description>
							<see cref="P:DoubleAgent.Control.TTSEngines.Count" />,
							<see cref="P:DoubleAgent.Control.TTSEngines.Item" />
						</description>
					</item>
				</list>
			</syntax>
			<remarks>
				<para>The contents of the collection depends on how it was retrieved.</para>
				<para>
					<include path="/doc/members/member[@name='P:DoubleAgent.Control.TTSEngines.Item']/remarks/para[@name='Ordering']" />
				</para>
			</remarks>
			<seealso cref="M:DoubleAgent.Control.Control.FindCharacterTTSEngines" suffix="Method" prefix="The" />
			<seealso cref="M:DoubleAgent.Control.Control.FindTTSEngines" suffix="Method" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Control.TTSEngines" suffix="Property" prefix="The" />
			<seealso cref="M:DoubleAgent.Control.Character.FindTTSEngines" suffix="Method" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.TTSEngines.Count">
			<summary>
				<para>
					Returns the count of <see cref="T:DoubleAgent.Control.TTSEngine" /> objects in the <see cref="T:DoubleAgent.Control.TTSEngines" />
					collection.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>ttsengines</em>.<c>get_Count</c> (&amp;<em>Count</em>)</para>
</cpp>
<csharp>
<para>[<em>Count</em> = ]<em>ttsengines</em>.<c>Count</c></para>
</csharp>
<vb>
<para>[<em>Count</em> = ]<em>ttsengines</em>.<c>Count</c></para>
</vb>
</syntax>
			<value name="Count">
				A <c>numeric </c>value that indicates the number of <see cref="T:DoubleAgent.Control.TTSEngine" />
				objects in the collection.
			</value>
		</member>

		<!--=============================================================================================-->

		<member name="P:DoubleAgent.Control.TTSEngines.Item">
			<summary>
				<para>
					Returns a <see cref="T:DoubleAgent.Control.TTSEngine" suffix="Object" /> in the collection.
				</para>
			</summary>
			<syntax xml:space="preserve">
<cpp>
<para><em>ttsengines</em>.<c>get_Item</c> (<em>Index</em>, &amp;<em>TTSEngine</em>)</para>
</cpp>
<csharp>
<para>[<em>TTSEngine</em> = ]<em>ttsengines</em>.this [<em>Index</em>]</para>
</csharp>
<vbnet>
<para>[<em>TTSEngine</em> = ]<em>ttsengines</em> (<em>Index</em>)</para>
</vbnet>
<vb>
<para>[<c>Set</c> <em>TTSEngine</em> = ]<em>ttsengines</em> (<em>Index</em>)</para>
</vb>
</syntax>
			<param name="Index">
				A <c>numeric </c>value that specifies the zero-based index of the item to retrieve,<para />or
				a <c>string </c>value that specifies the <see cref="P:DoubleAgent.Control.SREngine.SRModeID" />
				of the item to retrieve.
			</param>
			<returns name="TTSEngine">
				The <see cref="T:DoubleAgent.Control.TTSEngine" suffix="Object" /> identified
				by <em>Index</em>.
			</returns>
			<remarks>
				<para name="Ordering">
					When the <see cref="T:DoubleAgent.Control.TTSEngines" suffix="Collection" />
					is retrieved using <c>matching criteria </c>(for example using the <see cref="M:DoubleAgent.Control.Character.FindTTSEngines" />
					method), it is an <em>ordered </em>collection. It's items are in order from best to worst match.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.TTSEngines.Count" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->
		<!--=============================================================================================-->
		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.ActiveStateType" kind="Enumeration">
			<summary></summary>
			<syntax>
				<list type="table">
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.ActiveStateType.Inactive']/value" /> = <c>Inactive</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.ActiveStateType.Inactive']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.ActiveStateType.Active']/value" /> = <c>Active</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.ActiveStateType.Active']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.ActiveStateType.InputActive']/value" /> = <c>InputActive</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.ActiveStateType.InputActive']/summary" />
						</description>
					</item>
				</list>
			</syntax>
		</member>

		<member name="F:DoubleAgent.Control.ActiveStateType.Active">
			<summary>Your client application is the character's active client.</summary>
			<value>1</value>
		</member>

		<member name="F:DoubleAgent.Control.ActiveStateType.Inactive">
			<summary>
				Your client application is <em>not </em>the character's active client.
			</summary>
			<value>0</value>
		</member>

		<member name="F:DoubleAgent.Control.ActiveStateType.InputActive">
			<summary>The character is the input-active character and will receive user input.</summary>
			<value>2</value>
		</member>

		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.AudioStatusType" kind="Enumeration">
			<summary></summary>
			<syntax>
				<list type="table">
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.AudioStatusType.Available']/value" /> = <c>Available</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.AudioStatusType.Available']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.AudioStatusType.Disabled']/value" /> = <c>Disabled</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.AudioStatusType.Disabled']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.AudioStatusType.UserSpeaking']/value" /> = <c>UserSpeaking</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.AudioStatusType.UserSpeaking']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.AudioStatusType.CharacterSpeaking']/value" /> = <c>CharacterSpeaking</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.AudioStatusType.CharacterSpeaking']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.AudioStatusType.CharacterListening']/value" /> = <c>CharacterListening</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.AudioStatusType.CharacterListening']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.AudioStatusType.Error']/value" /> = <c>Error</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.AudioStatusType.Error']/summary" />
						</description>
					</item>
				</list>
			</syntax>
			<seealso cref="P:DoubleAgent.Control.Settings.AudioStatus" suffix="Property" prefix="The" />
		</member>

		<member name="F:DoubleAgent.Control.AudioStatusType.Available">
			<summary>Text-to-speech is available.</summary>
			<value>0</value>
		</member>

		<member name="F:DoubleAgent.Control.AudioStatusType.CharacterListening">
			<summary>
				<em>Listening mode </em>is active.
			</summary>
			<value>5</value>
		</member>

		<member name="F:DoubleAgent.Control.AudioStatusType.CharacterSpeaking">
			<summary>A character is currently speaking.</summary>
			<value>4</value>
		</member>

		<member name="F:DoubleAgent.Control.AudioStatusType.Disabled">
			<summary>
				Text-to-speech is disabled in the <see cref="T:DoubleAgent.Control.PropertySheet" text=" Advanced Character Options" />
				window.
			</summary>
			<value>1</value>
		</member>

		<member name="F:DoubleAgent.Control.AudioStatusType.Error">
			<summary>The audio status could not be determined.</summary>
			<value>6</value>
		</member>

		<member name="F:DoubleAgent.Control.AudioStatusType.UserSpeaking">
			<summary>
				<em>Listening mode </em>is active and the user is currently speaking.
			</summary>
			<value>3</value>
		</member>

		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.BalloonStyleFlags" kind="Enumeration">
			<summary></summary>
			<syntax>
				<list type="table">
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.BalloonStyleFlags.Enabled']/value" /> = <c>Enabled</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.BalloonStyleFlags.Enabled']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.BalloonStyleFlags.SizeToText']/value" /> = <c>SizeToText</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.BalloonStyleFlags.SizeToText']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.BalloonStyleFlags.AutoHide']/value" /> = <c>AutoHide</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.BalloonStyleFlags.AutoHide']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.BalloonStyleFlags.AutoPace']/value" /> = <c>AutoPace</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.BalloonStyleFlags.AutoPace']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.BalloonStyleFlags.ShowPartialLines']/value" /> = <c>ShowPartialLines</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.BalloonStyleFlags.ShowPartialLines']/summary" />
						</description>
					</item>
				</list>
			</syntax>
			<seealso cref="P:DoubleAgent.Control.Balloon.Style" suffix="Property" prefix="The" />
		</member>

		<member name="F:DoubleAgent.Control.BalloonStyleFlags.AutoHide">
			<summary>The word balloon is hidden automatically after a short delay.</summary>
			<value>&amp;H00000004</value>
			<remarks>
				<para>
					When the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.AutoHide" /> style is set, the
					word balloon automatically hides when spoken output completes. When it's not set, the balloon remains
					displayed until the next <see cref="M:DoubleAgent.Control.Character.Speak" /> or <see cref="M:DoubleAgent.Control.Character.Think" />
					call, the character is hidden, or the user clicks or drags the character.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Balloon.AutoHide" suffix="Property" prefix="The" />
		</member>

		<member name="F:DoubleAgent.Control.BalloonStyleFlags.AutoPace">
			<summary>The text in the word balloon is shown one word at a time.</summary>
			<value>&amp;H00000008</value>
			<remarks>
				<para>
					When the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.AutoPace" /> style is set, the
					word balloon paces its text output based on the current output rate, for example one word at a time.
					When output exceeds the size of the balloon, the text is automatically scrolled. When it's not set,
					all text included in a <see cref="M:DoubleAgent.Control.Character.Speak" /> or <see cref="M:DoubleAgent.Control.Character.Think" />
					request is displayed at once.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Balloon.AutoPace" suffix="Property" prefix="The" />
		</member>

		<member name="F:DoubleAgent.Control.BalloonStyleFlags.Enabled">
			<summary>The word balloon is enabled.</summary>
			<value>&amp;H00000001</value>
			<remarks>
				<para>
					When the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.Enabled" /> style is set, the
					word balloon appears when the <see cref="M:DoubleAgent.Control.Character.Speak" /> or <see cref="M:DoubleAgent.Control.Character.Think" /> method
					is used, unless the user overrides this setting in the <see cref="T:DoubleAgent.Control.PropertySheet" text="Advanced Character Options" />
					window. When it's not set, the word balloon does not appear.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Balloon.Enabled" suffix="Property" prefix="The" />
		</member>

		<member name="F:DoubleAgent.Control.BalloonStyleFlags.ShowPartialLines">
			<summary>
				Partial lines are shown when the balloon text scrolls (for a word balloon that's <em>
					not
				</em><c>SizeToText</c>).
			</summary>
			<value>&amp;H00000010</value>
			<remarks>
				<para>
					When the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.ShowPartialLines" /> style is
					set, the word balloon will show partial lines at the bottom as it scrolls its text. When it's not set,
					only full lines are shown. This style only applies when the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.SizeToText" />
					style is <em>not </em>set.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Balloon.ShowPartialLines" suffix="Property" prefix="The" />
		</member>

		<member name="F:DoubleAgent.Control.BalloonStyleFlags.SizeToText">
			<summary>The word balloon is automatically resized to fit the speech or thought text.</summary>
			<value>&amp;H00000002</value>
			<remarks>
				<para>
					When the <see cref="F:DoubleAgent.Control.BalloonStyleFlags.SizeToText" /> style is set, the
					word balloon automatically adjusts the height of the balloon to the current size of the text for the
					<see cref="M:DoubleAgent.Control.Character.Speak" /> or <see cref="M:DoubleAgent.Control.Character.Think" />
					request. When it's not set, the balloon's height is based on the <see cref="P:DoubleAgent.Control.Balloon.NumberOfLines" />
					property. If this style is set and you attempt to set the <see cref="P:DoubleAgent.Control.Balloon.NumberOfLines" />
					property, Double Agent raises an error.
				</para>
			</remarks>
			<seealso cref="P:DoubleAgent.Control.Balloon.SizeToText" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.CharacterStyleFlags" kind="Enumeration">
			<summary></summary>
			<syntax>
				<list type="table">
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.CharacterStyleFlags.SoundEffects']/value" /> = <c>SoundEffects</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.CharacterStyleFlags.SoundEffects']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.CharacterStyleFlags.IdleEnabled']/value" /> = <c>IdleEnabled</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.CharacterStyleFlags.IdleEnabled']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.CharacterStyleFlags.AutoPopupMenu']/value" /> = <c>AutoPopupMenu</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.CharacterStyleFlags.AutoPopupMenu']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.CharacterStyleFlags.IconShown']/value" /> = <c>IconShown</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.CharacterStyleFlags.IconShown']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.CharacterStyleFlags.SmoothEdges']/value" /> = <c>SmoothEdges</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.CharacterStyleFlags.SmoothEdges']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.CharacterStyleFlags.Smoothed']/value" /> = <c>Smoothed</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.CharacterStyleFlags.Smoothed']/summary" />
						</description>
					</item>
				</list>
			</syntax>
			<seealso cref="P:DoubleAgent.Control.Character.Style" suffix="Property" prefix="The" />
			<seealso cref="P:DoubleAgent.Control.Control.CharacterStyle" suffix="Property" prefix="The" />
		</member>

		<member name="F:DoubleAgent.Control.CharacterStyleFlags.AutoPopupMenu">
			<summary>
				A right-click on the character or it's notification icon automatically shows a pop-up menu.
			</summary>
			<value>&amp;H00000004</value>
			<seealso cref="P:DoubleAgent.Control.Character.AutoPopupMenu" suffix="Property" prefix="The" />
		</member>

		<member name="F:DoubleAgent.Control.CharacterStyleFlags.IconShown">
			<summary>The character has an icon in the taskbar notification area.</summary>
			<value>&amp;H00000008</value>
			<seealso cref="P:DoubleAgent.Control.Character.IconShown" suffix="Property" prefix="The" />
		</member>

		<member name="F:DoubleAgent.Control.CharacterStyleFlags.IdleEnabled">
			<summary>
				The character enters idle mode and shows it's idling animations when it's not doing anything
				else.
			</summary>
			<value>&amp;H00000002</value>
			<seealso cref="P:DoubleAgent.Control.Character.IdleEnabled" suffix="Property" prefix="The" />
		</member>

		<member name="F:DoubleAgent.Control.CharacterStyleFlags.Smoothed">
			<summary>Image smoothing (antialiasing) is applied to the character's animations.</summary>
			<value>&amp;H00000030</value>
			<seealso cref="P:DoubleAgent.Control.Character.Smoothed" suffix="Property" prefix="The" />
		</member>

		<member name="F:DoubleAgent.Control.CharacterStyleFlags.SmoothEdges">
			<summary>Image smoothing (antialiasing) is applied to the edges of the character's animations.</summary>
			<value>&amp;H00000020</value>
			<seealso cref="P:DoubleAgent.Control.Character.SmoothEdges" suffix="Property" prefix="The" />
		</member>

		<member name="F:DoubleAgent.Control.CharacterStyleFlags.SoundEffects">
			<summary>The animation sound effects are played.</summary>
			<value>&amp;H00000001</value>
			<seealso cref="P:DoubleAgent.Control.Character.SoundEffectsEnabled" suffix="Property" prefix="The" />
		</member>

		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.ListenCompleteType" kind="Enumeration">
			<summary></summary>
			<syntax>
				<list type="table">
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.ListenCompleteType.ProgramDisabled']/value" /> = <c>ProgramDisabled</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.ListenCompleteType.ProgramDisabled']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.ListenCompleteType.ProgramTimedOut']/value" /> = <c>ProgramTimedOut</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.ListenCompleteType.ProgramTimedOut']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.ListenCompleteType.UserTimedOut']/value" /> = <c>UserTimedOut</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.ListenCompleteType.UserTimedOut']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.ListenCompleteType.UserReleasedKey']/value" /> = <c>UserReleasedKey</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.ListenCompleteType.UserReleasedKey']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.ListenCompleteType.UserSpeechEnded']/value" /> = <c>UserSpeechEnded</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.ListenCompleteType.UserSpeechEnded']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.ListenCompleteType.CharacterClientDeactivated']/value" /> = <c>CharacterClientDeactivated</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.ListenCompleteType.CharacterClientDeactivated']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.ListenCompleteType.DefaultCharacterChanged']/value" /> = <c>DefaultCharacterChanged</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.ListenCompleteType.DefaultCharacterChanged']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.ListenCompleteType.UserDisabled']/value" /> = <c>UserDisabled</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.ListenCompleteType.UserDisabled']/summary" />
						</description>
					</item>
				</list>
			</syntax>
			<seealso cref="E:DoubleAgent.Control.Control.ListenComplete" suffix="Event" prefix="The" />
		</member>

		<member name="F:DoubleAgent.Control.ListenCompleteType.CharacterClientDeactivated">
			<summary>The character is no longer active or it's active client has changed.</summary>
			<value>6</value>
		</member>

		<member name="F:DoubleAgent.Control.ListenCompleteType.DefaultCharacterChanged">
			<summary>
				The default character was changed in the <see cref="T:DoubleAgent.Control.PropertySheet" text=" Advanced Character Options" />
				window.
			</summary>
			<value>7</value>
		</member>

		<member name="F:DoubleAgent.Control.ListenCompleteType.ProgramDisabled">
			<summary>
				This program turned off the <em>Listening mode </em>with the <see cref="M:DoubleAgent.Control.Character.Listen" />
				method.
			</summary>
			<value>1</value>
		</member>

		<member name="F:DoubleAgent.Control.ListenCompleteType.ProgramTimedOut">
			<summary>
				The <em>Listening mode </em>was started by this program with the <see cref="M:DoubleAgent.Control.Character.Listen" />
				method, and it timed out.
			</summary>
			<value>2</value>
		</member>

		<member name="F:DoubleAgent.Control.ListenCompleteType.UserDisabled">
			<summary>
				Speech recognition was disabled in the <see cref="T:DoubleAgent.Control.PropertySheet" text=" Advanced Character Options" />
				window.
			</summary>
			<value>8</value>
		</member>

		<member name="F:DoubleAgent.Control.ListenCompleteType.UserReleasedKey">
			<summary>
				The <em>Listening mode </em>was started with the <em>Listening key</em>, and the key
				was released.
			</summary>
			<value>4</value>
		</member>

		<member name="F:DoubleAgent.Control.ListenCompleteType.UserSpeechEnded">
			<summary>Speech recognition has produced a result.</summary>
			<value>5</value>
		</member>

		<member name="F:DoubleAgent.Control.ListenCompleteType.UserTimedOut">
			<summary>
				The <em>Listening mode </em>was started with the <em>Listening key</em>, and it timed
				out.
			</summary>
			<value>3</value>
		</member>

		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.ListeningStatusType" kind="Enumeration">
			<summary></summary>
			<syntax>
				<list type="table">
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.ListeningStatusType.Available']/value" /> = <c>Available</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.ListeningStatusType.Available']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.ListeningStatusType.CharacterInactive']/value" /> = <c>CharacterInactive</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.ListeningStatusType.CharacterInactive']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.ListeningStatusType.InitializeFailed']/value" /> = <c>InitializeFailed</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.ListeningStatusType.InitializeFailed']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.ListeningStatusType.InputDisabled']/value" /> = <c>InputDisabled</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.ListeningStatusType.InputDisabled']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.ListeningStatusType.Error']/value" /> = <c>Error</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.ListeningStatusType.Error']/summary" />
						</description>
					</item>
				</list>
			</syntax>
			<seealso cref="P:DoubleAgent.Control.Character.ListeningStatus" prefix="The" suffix="Property" />
			<seealso cref="P:DoubleAgent.Control.Settings.SREnabled" suffix="Property" prefix="The" />
		</member>

		<member name="F:DoubleAgent.Control.ListeningStatusType.Available">
			<summary>Conditions support speech input.</summary>
			<value>0</value>
		</member>

		<member name="F:DoubleAgent.Control.ListeningStatusType.CharacterInactive">
			<summary>
				Speech recognition is unavailable because another client is the active client of this character,
				or the current character is not input-active.
			</summary>
			<value>2</value>
		</member>

		<member name="F:DoubleAgent.Control.ListeningStatusType.Error">
			<summary>The speech recognition status could not be determined.</summary>
			<value>6</value>
		</member>

		<member name="F:DoubleAgent.Control.ListeningStatusType.InitializeFailed">
			<summary>
				Speech recognition is unavailable because it could not be initialized. This includes the
				possibility that there is no speech engine available matching the character's language setting.
			</summary>
			<value>4</value>
		</member>

		<member name="F:DoubleAgent.Control.ListeningStatusType.InputDisabled">
			<summary>
				The user has disabled speech input in the <see cref="T:DoubleAgent.Control.PropertySheet" text=" Advanced Character Options" />
				window.
			</summary>
			<value>5</value>
		</member>

		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.MoveCauseType" kind="Enumeration">
			<summary>Specifies the reason a character moved.</summary>
			<syntax>
				<list type="table">
					<item name="NeverMoved">
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.MoveCauseType.NeverMoved']/value" /> = <c>NeverMoved</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.MoveCauseType.NeverMoved']/summary" />
						</description>
					</item>
					<item name="UserMoved">
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.MoveCauseType.UserMoved']/value" /> = <c>UserMoved</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.MoveCauseType.UserMoved']/summary" />
						</description>
					</item>
					<item name="ProgramMoved">
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.MoveCauseType.ProgramMoved']/value" /> = <c>ProgramMoved</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.MoveCauseType.ProgramMoved']/summary" />
						</description>
					</item>
					<item name="OtherProgramMoved">
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.MoveCauseType.OtherProgramMoved']/value" /> = <c>OtherProgramMoved</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.MoveCauseType.OtherProgramMoved']/summary" />
						</description>
					</item>
				</list>
			</syntax>
			<seealso cref="P:DoubleAgent.Control.Character.MoveCause" suffix="Property" prefix="The" />
			<seealso cref="E:DoubleAgent.Control.Control.Move" suffix="Event" prefix="The" />
		</member>

		<member name="F:DoubleAgent.Control.MoveCauseType.NeverMoved">
			<summary>The character hasn't moved.</summary>
			<value>0</value>
		</member>

		<member name="F:DoubleAgent.Control.MoveCauseType.OtherProgramMoved">
			<summary>Another client application moved the character.</summary>
			<value>3</value>
		</member>

		<member name="F:DoubleAgent.Control.MoveCauseType.ProgramMoved">
			<summary>Your client application moved the character.</summary>
			<value>2</value>
		</member>

		<member name="F:DoubleAgent.Control.MoveCauseType.UserMoved">
			<summary>The user dragged the character.</summary>
			<value>1</value>
		</member>

		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.PrepareResourceType" kind="Enumeration">
			<summary>
				Specifies the type of resource that is being requested with the <see cref="M:DoubleAgent.Control.Character.Prepare" />
				method.
			</summary>
			<syntax>
				<list type="table">
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.PrepareResourceType.Animation']/value" /> = <c>Animation</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.PrepareResourceType.Animation']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.PrepareResourceType.State']/value" /> = <c>State</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.PrepareResourceType.State']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.PrepareResourceType.Wave']/value" /> = <c>Wave</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.PrepareResourceType.Wave']/summary" />
						</description>
					</item>
				</list>
			</syntax>
			<seealso cref="M:DoubleAgent.Control.Character.Prepare" suffix="Method" prefix="The" />
		</member>

		<member name="F:DoubleAgent.Control.PrepareResourceType.Animation">
			<summary>Download an animation.</summary>
			<value>0</value>
		</member>

		<member name="F:DoubleAgent.Control.PrepareResourceType.State">
			<summary>Download all animations for a state.</summary>
			<value>1</value>
		</member>

		<member name="F:DoubleAgent.Control.PrepareResourceType.Wave">
			<summary>Download a sound file.</summary>
			<value>2</value>
		</member>

		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.RequestStatus" kind="Enumeration">
			<summary>
				Specifies the <see cref="P:DoubleAgent.Control.Request.Status" /> of a <see cref="T:DoubleAgent.Control.Request" />
				object.
			</summary>
			<syntax>
				<list type="table">
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.RequestStatus.Success']/value" /> = <c>Success</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.RequestStatus.Success']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.RequestStatus.Failed']/value" /> = <c>Failed</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.RequestStatus.Failed']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.RequestStatus.Pending']/value" /> = <c>Pending</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.RequestStatus.Pending']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.RequestStatus.Interrupted']/value" /> = <c>Interrupted</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.RequestStatus.Interrupted']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.RequestStatus.InProgress']/value" /> = <c>InProgress</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.RequestStatus.InProgress']/summary" />
						</description>
					</item>
				</list>
			</syntax>
			<seealso cref="P:DoubleAgent.Control.Request.Status" suffix="Property" prefix="The" />
		</member>

		<member name="F:DoubleAgent.Control.RequestStatus.Failed">
			<summary>
				The request failed and an error code is available in the <see cref="T:DoubleAgent.Control.Request" />
				object's <see cref="P:DoubleAgent.Control.Request.Number" /> property.
			</summary>
			<value>1</value>
		</member>

		<member name="F:DoubleAgent.Control.RequestStatus.InProgress">
			<summary>The request is currently in progress.</summary>
			<value>4</value>
		</member>

		<member name="F:DoubleAgent.Control.RequestStatus.Interrupted">
			<summary>
				The request was interrupted and an error code is available in the <see cref="T:DoubleAgent.Control.Request" />
				object's <see cref="P:DoubleAgent.Control.Request.Number" /> property.
			</summary>
			<value>3</value>
		</member>

		<member name="F:DoubleAgent.Control.RequestStatus.Pending">
			<summary>The request is on the queue.</summary>
			<value>2</value>
		</member>

		<member name="F:DoubleAgent.Control.RequestStatus.Success">
			<summary>The request was successfully completed.</summary>
			<value>0</value>
		</member>

		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.SpeechGenderType" kind="Enumeration">
			<summary>Specifies the gender of a text-to-speech voice.</summary>
			<syntax>
				<list type="table">
					<item name="Female">
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.SpeechGenderType.Female']/value" /> = <c>Female</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.SpeechGenderType.Female']/summary" />
						</description>
					</item>
					<item name="Male">
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.SpeechGenderType.Male']/value" /> = <c>Male</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.SpeechGenderType.Male']/summary" />
						</description>
					</item>
					<item name="Neutral">
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.SpeechGenderType.Neutral']/value" /> = <c>Neutral</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.SpeechGenderType.Neutral']/summary" />
						</description>
					</item>
				</list>
			</syntax>
		</member>

		<member name="F:DoubleAgent.Control.SpeechGenderType.Female">
			<summary>A female voice.</summary>
			<value>1</value>
		</member>

		<member name="F:DoubleAgent.Control.SpeechGenderType.Male">
			<summary>A male voice.</summary>
			<value>2</value>
		</member>

		<member name="F:DoubleAgent.Control.SpeechGenderType.Neutral">
			<summary>Either a female or male voice.</summary>
			<value>0</value>
		</member>

		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.StopAllFlags" kind="Enumeration">
			<summary>
				Defines the scope of the <see cref="M:DoubleAgent.Control.Character.StopAll" /> method.
			</summary>
			<syntax>
				<list type="table">
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.StopAllFlags.Play']/value" /> = <c>Play</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.StopAllFlags.Play']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.StopAllFlags.Move']/value" /> = <c>Move</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.StopAllFlags.Move']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.StopAllFlags.Speak']/value" /> = <c>Speak</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.StopAllFlags.Speak']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.StopAllFlags.QueuedPrepare']/value" /> = <c>QueuedPrepare</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.StopAllFlags.QueuedPrepare']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.StopAllFlags.ImmediatePrepare']/value" /> = <c>ImmediatePrepare</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.StopAllFlags.ImmediatePrepare']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.StopAllFlags.Visibility']/value" /> = <c>Visibility</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.StopAllFlags.Visibility']/summary" />
						</description>
					</item>
					<item>
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.StopAllFlags.Everything']/value" /> = <c>Everything</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.StopAllFlags.Everything']/summary" />
						</description>
					</item>
				</list>
			</syntax>
		</member>

		<member name="F:DoubleAgent.Control.StopAllFlags.Everything">
			<summary>Stop all pending actions.</summary>
			<value>&amp;HFFFFFFFF</value>
		</member>

		<member name="F:DoubleAgent.Control.StopAllFlags.ImmediatePrepare">
			<summary>
				Stop any non-queued animation or file downloads (<c>Prepare </c>method with <c>Queue</c>
				parameter set to <c>False</c>)
			</summary>
			<value>&amp;H00000010</value>
		</member>

		<member name="F:DoubleAgent.Control.StopAllFlags.Move">
			<summary>Stop any pending or running move requests.</summary>
			<value>&amp;H00000002</value>
		</member>

		<member name="F:DoubleAgent.Control.StopAllFlags.Play">
			<summary>Stop any pending or running animations.</summary>
			<value>&amp;H00000001</value>
		</member>

		<member name="F:DoubleAgent.Control.StopAllFlags.QueuedPrepare">
			<summary>
				Stop any queued animation or file downloads (<c>Prepare </c>method with <c>Queue </c>parameter
				set to <c>True</c>).
			</summary>
			<value>&amp;H00000008</value>
		</member>

		<member name="F:DoubleAgent.Control.StopAllFlags.Speak">
			<summary>Stop any pending or running speech requests.</summary>
			<value>&amp;H00000004</value>
		</member>

		<member name="F:DoubleAgent.Control.StopAllFlags.Visibility">
			<summary>Stop any pending show or hide requests.</summary>
			<value>&amp;H00000020</value>
		</member>

		<!--=============================================================================================-->

		<member name="T:DoubleAgent.Control.VisibilityCauseType" kind="Enumeration">
			<summary>
				<para>Enumerates the possible causes for a character to be shown or hidden.</para>
			</summary>
			<syntax>
				<list type="table">
					<item name="NeverShown">
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.VisibilityCauseType.NeverShown']/value" /> = <c>NeverShown</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.VisibilityCauseType.NeverShown']/summary" />
						</description>
					</item>
					<item name="UserHid">
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.VisibilityCauseType.UserHid']/value" /> = <c>UserHid</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.VisibilityCauseType.UserHid']/summary" />
						</description>
					</item>
					<item name="UserShowed">
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.VisibilityCauseType.UserShowed']/value" /> = <c>UserShowed</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.VisibilityCauseType.UserShowed']/summary" />
						</description>
					</item>
					<item name="ProgramHid">
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.VisibilityCauseType.ProgramHid']/value" /> = <c>ProgramHid</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.VisibilityCauseType.ProgramHid']/summary" />
						</description>
					</item>
					<item name="ProgramShowed">
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.VisibilityCauseType.ProgramShowed']/value" /> = <c>ProgramShowed</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.VisibilityCauseType.ProgramShowed']/summary" />
						</description>
					</item>
					<item name="OtherProgramHid">
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.VisibilityCauseType.OtherProgramHid']/value" /> = <c>OtherProgramHid</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.VisibilityCauseType.OtherProgramHid']/summary" />
						</description>
					</item>
					<item name="OtherProgramShowed">
						<term xml:space="preserve">
<include path="/doc/members/member[@name='F:DoubleAgent.Control.VisibilityCauseType.OtherProgramShowed']/value" /> = <c>OtherProgramShowed</c>
</term>
						<description>
							<include path="/doc/members/member[@name='F:DoubleAgent.Control.VisibilityCauseType.OtherProgramShowed']/summary" />
						</description>
					</item>
				</list>
			</syntax>
			<seealso cref="P:DoubleAgent.Control.Character.VisibilityCause" suffix="Property" prefix="The" />
			<seealso cref="E:DoubleAgent.Control.Control.Show" prefix="The" suffix="Event" />
			<seealso cref="E:DoubleAgent.Control.Control.Hide" prefix="The" suffix="Event" />
		</member>

		<member name="F:DoubleAgent.Control.VisibilityCauseType.NeverShown">
			<summary>The character has not been shown.</summary>
			<value>0</value>
		</member>

		<member name="F:DoubleAgent.Control.VisibilityCauseType.OtherProgramHid">
			<summary>Another client application hid the character.</summary>
			<value>5</value>
		</member>

		<member name="F:DoubleAgent.Control.VisibilityCauseType.OtherProgramShowed">
			<summary>Another client application showed the character.</summary>
			<value>6</value>
		</member>

		<member name="F:DoubleAgent.Control.VisibilityCauseType.ProgramHid">
			<summary>Your application hid the character.</summary>
			<value>3</value>
		</member>

		<member name="F:DoubleAgent.Control.VisibilityCauseType.ProgramShowed">
			<summary>Your application showed the character.</summary>
			<value>4</value>
		</member>

		<member name="F:DoubleAgent.Control.VisibilityCauseType.UserHid">
			<summary>
				The user hid the character using the command on the character's taskbar icon pop-up menu
				or using speech input.
			</summary>
			<value>1</value>
		</member>

		<member name="F:DoubleAgent.Control.VisibilityCauseType.UserShowed">
			<summary>
				The user showed the character using the command on the character's taskbar icon pop-up menu
				or using speech input.
			</summary>
			<value>2</value>
		</member>

	</members>
</doc>
