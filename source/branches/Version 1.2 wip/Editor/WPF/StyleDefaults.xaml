<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:sys="clr-namespace:System;assembly=mscorlib"
					xmlns:ui="clr-namespace:System.Windows.Documents;assembly=PresentationUI">

	<!-- =========================================================================== -->
	<!-- Shared                                                                       -->
	<!-- =========================================================================== -->

	<Duration x:Key="StateAnimationDuration">0:0:0.2</Duration>
	<Duration x:Key="FastAnimationDuration">0:0:0.2</Duration>
	<sys:Double x:Key="ItemDisabledOpacity">0.3</sys:Double>

	<!-- =========================================================================== -->

	<Thickness x:Key="ItemSelectionPadding">3,1,4,2</Thickness>
	<Thickness x:Key="ItemSelectionMargin">1,1,1,1</Thickness>
	<sys:Double x:Key="ItemSelectionStroke">0.8</sys:Double>
	<sys:Double x:Key="ItemSelectionRounding">2</sys:Double>

	<Color x:Key="ItemSelectedOuterColor">#FF8AD2F4</Color>
	<!--133 200 180-->
	<Color x:Key="ItemSelectedTopColor">#FFEDF7FC</Color>
	<!--133 180 230-->
	<Color x:Key="ItemSelectedBottomColor">#FFC5E6F7</Color>
	<!--133 180 210-->
	<Color x:Key="ItemHighlitedOuterColor">#FF8AD2F4</Color>
	<!--133 200 180-->
	<Color x:Key="ItemHighlitedTopColor">#FFDCF0FA</Color>
	<!--133 180 220-->
	<Color x:Key="ItemHighlitedBottomColor">#FF8FD0EF</Color>
	<!--133 180 180-->
	<Color x:Key="ItemUnfocusedOuterColor">#FF6399CF</Color>
	<!--140 128 144-->
	<Color x:Key="ItemUnfocusedTopColor">#FFDEEAF5</Color>
	<!--140 128 220-->
	<Color x:Key="ItemUnfocusedBottomColor">#FF6C9FD2</Color>
	<!--140 128 150-->

	<SolidColorBrush x:Key="ItemHighlitedOuterBrush"
					 Color="{StaticResource ItemHighlitedOuterColor}"
					 Opacity="0.6" />
	<LinearGradientBrush x:Key="ItemHighlitedFillBrush"
						 StartPoint="0,0"
						 EndPoint="0,1"
						 Opacity="0.3">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="{StaticResource ItemHighlitedTopColor}"
						  Offset="0" />
			<GradientStop Color="{StaticResource ItemHighlitedBottomColor}"
						  Offset="1" />
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>

	<SolidColorBrush x:Key="ItemSelectedOuterBrush"
					 Color="{StaticResource ItemSelectedOuterColor}" />
	<LinearGradientBrush x:Key="ItemSelectedFillBrush"
						 StartPoint="0,0"
						 EndPoint="0,1">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="{StaticResource ItemSelectedTopColor}"
						  Offset="0" />
			<GradientStop Color="{StaticResource ItemSelectedBottomColor}"
						  Offset="1" />
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>

	<SolidColorBrush x:Key="ItemUnfocusedOuterBrush"
					 Color="{StaticResource ItemUnfocusedOuterColor}"
					 Opacity="0.6" />
	<LinearGradientBrush x:Key="ItemUnfocusedFillBrush"
						 StartPoint="0,0"
						 EndPoint="0,1"
						 Opacity="0.3">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="{StaticResource ItemUnfocusedTopColor}"
						  Offset="0" />
			<GradientStop Color="{StaticResource ItemUnfocusedBottomColor}"
						  Offset="1" />
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>

	<SolidColorBrush x:Key="ItemSelectionInnerBrush"
					 Color="White" />
	<sys:Double x:Key="ItemSelectionInnerOpacity">0.25</sys:Double>

	<!-- =========================================================================== -->

	<Color x:Key="BorderNormalColor">#FF4C84B6</Color>
	<Color x:Key="BorderFocusedColor">#FF15487B</Color>

	<SolidColorBrush x:Key="BorderNormalBrush"
					 Color="{StaticResource BorderNormalColor}" />
	<SolidColorBrush x:Key="BorderFocusedBrush"
					 Color="{StaticResource BorderFocusedColor}" />

	<Thickness x:Key="BorderNormalThickness">1.5</Thickness>
	<Thickness x:Key="BorderNormalPadding">1</Thickness>
	<Thickness x:Key="BorderFocusedThickness">2.5</Thickness>
	<Thickness x:Key="BorderFocusedPadding">0</Thickness>
	<Thickness x:Key="BorderMargin">2,2,2,2</Thickness>
	<CornerRadius x:Key="BorderRounding">2</CornerRadius>

	<!-- =========================================================================== -->

	<Style x:Key="BorderNormal"
		   TargetType="{x:Type Border}">
		<Setter Property="Padding"
				Value="{StaticResource BorderNormalPadding}" />
		<Setter Property="BorderThickness"
				Value="{StaticResource BorderNormalThickness}" />
		<Setter Property="CornerRadius"
				Value="{StaticResource BorderRounding}" />
		<Setter Property="SnapsToDevicePixels"
				Value="True" />
		<Setter Property="BorderBrush">
			<Setter.Value>
				<SolidColorBrush Color="{StaticResource BorderNormalColor}" />
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="BorderFocused"
		   TargetType="{x:Type Border}">
		<Setter Property="Background"
				Value="{x:Null}" />
		<Setter Property="Opacity"
				Value="0" />
		<Setter Property="Padding"
				Value="{StaticResource BorderFocusedPadding}" />
		<Setter Property="BorderThickness"
				Value="{StaticResource BorderFocusedThickness}" />
		<Setter Property="CornerRadius"
				Value="{StaticResource BorderRounding}" />
		<Setter Property="SnapsToDevicePixels"
				Value="True" />
		<Setter Property="BorderBrush">
			<Setter.Value>
				<SolidColorBrush Color="{StaticResource BorderFocusedColor}" />
			</Setter.Value>
		</Setter>
	</Style>

	<Storyboard x:Key="ShowBorderFocused">
		<DoubleAnimation Storyboard.TargetName="BdFocused"
						 Storyboard.TargetProperty="Opacity"
						 Duration="{StaticResource StateAnimationDuration}"
						 To="1" />
	</Storyboard>

	<Storyboard x:Key="HideBorderFocused">
		<DoubleAnimation Storyboard.TargetName="BdFocused"
						 Storyboard.TargetProperty="Opacity"
						 Duration="{StaticResource StateAnimationDuration}"
						 To="0" />
	</Storyboard>

	<Storyboard x:Key="BorderNormalHit">
		<ColorAnimation Storyboard.TargetName="BdNormal"
						Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
						Duration="{StaticResource StateAnimationDuration}"
						To="{StaticResource BorderFocusedColor}" />
	</Storyboard>

	<Storyboard x:Key="BorderNormalUnhit">
		<ColorAnimation Storyboard.TargetName="BdNormal"
						Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
						Duration="{StaticResource StateAnimationDuration}"
						To="{StaticResource BorderNormalColor}" />
	</Storyboard>

	<!-- =========================================================================== -->
	<!-- Menu Components                                                             -->
	<!-- =========================================================================== -->

	<LinearGradientBrush x:Key="MenuBackgroundBrush"
						 StartPoint="0,0"
						 EndPoint="0,1">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="{StaticResource {x:Static SystemColors.ControlLightLightColorKey}}"
						  Offset="0.0" />
			<GradientStop Color="{StaticResource {x:Static SystemColors.ControlLightColorKey}}"
						  Offset="1.0" />
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>

	<!-- =========================================================================== -->

	<Color x:Key="MenuItemGlyphBackgroundColor">#FFE6F0FA</Color>
	<Color x:Key="MenuItemGlyphBorderColor">#FF3399FF</Color>
	<Color x:Key="MenuItemGlyphColor">#FF0C12A1</Color>

	<SolidColorBrush x:Key="MenuItemGlyphBackgroundBrush"
					 Color="{StaticResource MenuItemGlyphBackgroundColor}" />
	<SolidColorBrush x:Key="MenuItemGlyphBorderBrush"
					 Color="{StaticResource MenuItemGlyphBorderColor}" />
	<SolidColorBrush x:Key="MenuItemGlyphFillBrush"
					 Color="{StaticResource MenuItemGlyphColor}" />
	<SolidColorBrush x:Key="MenuItemGlyphDisabledBackgroundBrush"
					 Color="{StaticResource {x:Static SystemColors.ControlLightColorKey}}" />
	<SolidColorBrush x:Key="MenuItemGlyphDisabledBorderBrush"
					 Color="{StaticResource {x:Static SystemColors.ControlDarkColorKey}}" />
	<SolidColorBrush x:Key="MenuItemGlyphDisabledBrush"
					 Color="{StaticResource {x:Static SystemColors.ControlDarkDarkColorKey}}" />

	<Thickness x:Key="MenuIconMargin">4,0,6,0</Thickness>
	<Thickness x:Key="MenuGlyphMargin">7,0,0,0</Thickness>

	<!-- =========================================================================== -->

	<SolidColorBrush x:Key="SubMenuBorderBrush"
					 Color="{StaticResource {x:Static SystemColors.ControlDarkDarkColorKey}}" />
	<SolidColorBrush x:Key="SubMenuLeftBrush"
					 Color="{StaticResource {x:Static SystemColors.ControlLightLightColorKey}}" />
	<LinearGradientBrush x:Key="SubMenuBackgroundBrush"
						 StartPoint="0,0"
						 EndPoint="0,1">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="{StaticResource {x:Static SystemColors.ControlLightLightColorKey}}"
						  Offset="0.0" />
			<GradientStop Color="{StaticResource {x:Static SystemColors.ControlLightColorKey}}"
						  Offset="1.0" />
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>

	<MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter" />
	<Geometry x:Key="MenuDownArrow">M 0,0 L 3.5,4 L 7,0 Z</Geometry>
	<Geometry x:Key="MenuUpArrow">M 0,4 L 3.5,0 L 7,4 Z</Geometry>
	<Geometry x:Key="MenuRightArrow">M 0,0 L 4,3.5 L 0,7 Z</Geometry>
	<Geometry x:Key="MenuCheckmark">M 0,5.1 L 1.7,5.2 L 3.4,7.1 L 8,0.4 L 9.2,0 L 3.3,10.8 Z</Geometry>

	<Thickness x:Key="SubMenuBorderThickness">1,1,1,1</Thickness>
	<Thickness x:Key="SubMenuBorderPadding">3,3,3,3</Thickness>
	<Thickness x:Key="SubMenuShadowMargin">0,0,5,5</Thickness>

	<sys:Double x:Key="SubMenuLeftWidth">28</sys:Double>
	<sys:Double x:Key="SubMenuIconGap">4</sys:Double>
	<sys:Double x:Key="SubMenuGesturreGap">37</sys:Double>
	<sys:Double x:Key="SubMenuExpandGap">17</sys:Double>
	<sys:Double x:Key="SubMenuIconWidth">24</sys:Double>
	<Thickness x:Key="SubMenuIconMargin">1,1,1,1</Thickness>

	<sys:Double x:Key="SubMenuGlyphWidth">9</sys:Double>
	<sys:Double x:Key="SubMenuGlyphHeight">11</sys:Double>
	<sys:Double x:Key="SubMenuGlyphBorderWidth">22</sys:Double>
	<sys:Double x:Key="SubMenuGlyphBorderHeight">22</sys:Double>
	<Thickness x:Key="SubMenuGlyphMargin">1,1,1,1</Thickness>
	<Thickness x:Key="SubMenuGlyphBorderThickness">1,1,1,1</Thickness>
	<CornerRadius x:Key="SubMenuGlyphRounding">3,3,3,3</CornerRadius>
	<Thickness x:Key="SubMenuExpandGlyphMargin">4,0,0,0</Thickness>

	<!-- =========================================================================== -->

	<Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type Menu}, ResourceId=SubMenuShadow}"
		   TargetType="{x:Type Grid}">
		<Setter Property="SnapsToDevicePixels"
				Value="True" />
		<Setter Property="Margin"
				Value="{StaticResource SubMenuShadowMargin}" />
	</Style>

	<Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type Menu}, ResourceId=SubMenuContainer}"
		   TargetType="{x:Type ContentControl}">
		<Setter Property="IsTabStop"
				Value="false" />
		<Setter Property="Effect">
			<Setter.Value>
				<DropShadowEffect Color="Black"
								  ShadowDepth="3"
								  Opacity="0.5" />
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type Menu}, ResourceId=SubMenuItemsPresenter}"
		   TargetType="{x:Type ItemsPresenter}">
		<Setter Property="Margin"
				Value="{StaticResource SubMenuBorderPadding}" />
		<Setter Property="SnapsToDevicePixels"
				Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SnapsToDevicePixels}" />
		<Setter Property="KeyboardNavigation.TabNavigation"
				Value="Cycle" />
		<Setter Property="KeyboardNavigation.DirectionalNavigation"
				Value="Cycle" />
		<Setter Property="Grid.IsSharedSizeScope"
				Value="True" />
	</Style>

	<!-- =========================================================================== -->

	<Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=SubMenuScrollButton}"
		   TargetType="{x:Type RepeatButton}"
		   BasedOn="{x:Null}">
		<Setter Property="ClickMode"
				Value="Hover" />
		<Setter Property="MinWidth"
				Value="0" />
		<Setter Property="MinHeight"
				Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Grid Background="Transparent"
						  SnapsToDevicePixels="true">
						<Rectangle x:Name="Bg"
								   Fill="Transparent"
								   Stroke="Transparent"
								   StrokeThickness="1" />
						<ContentPresenter x:Name="ContentContainer"
										  Margin="2,2,2,2"
										  VerticalAlignment="Center"
										  HorizontalAlignment="Center" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsPressed"
								 Value="true">
							<Setter TargetName="Bg"
									Property="Fill"
									Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
							<Setter TargetName="Bg"
									Property="Stroke"
									Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=SubMenuScrollViewer}"
		   TargetType="{x:Type ScrollViewer}"
		   BasedOn="{x:Null}">
		<Setter Property="HorizontalScrollBarVisibility"
				Value="Hidden" />
		<Setter Property="VerticalScrollBarVisibility"
				Value="Auto" />
		<Setter Property="CanContentScroll"
				Value="True" />
		<Setter Property="Grid.ColumnSpan"
				Value="2" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollViewer}">
					<Grid SnapsToDevicePixels="true">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="*" />
							<RowDefinition Height="Auto" />
						</Grid.RowDefinitions>
						<Border Grid.Row="1"
								Grid.Column="0">
							<ScrollContentPresenter Margin="{TemplateBinding Padding}" />
						</Border>
						<RepeatButton Style="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=SubMenuScrollButton}}"
									  Grid.Row="0"
									  Grid.Column="0"
									  Command="{x:Static ScrollBar.LineUpCommand}"
									  CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
									  Focusable="false">
							<RepeatButton.Visibility>
								<MultiBinding FallbackValue="Visibility.Collapsed"
											  Converter="{StaticResource MenuScrollingVisibilityConverter}"
											  ConverterParameter="0">
									<Binding RelativeSource="{RelativeSource TemplatedParent}"
											 Path="ComputedVerticalScrollBarVisibility" />
									<Binding RelativeSource="{RelativeSource TemplatedParent}"
											 Path="VerticalOffset" />
									<Binding RelativeSource="{RelativeSource TemplatedParent}"
											 Path="ExtentHeight" />
									<Binding RelativeSource="{RelativeSource TemplatedParent}"
											 Path="ViewportHeight" />
								</MultiBinding>
							</RepeatButton.Visibility>
							<Path Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
								  Data="{StaticResource MenuUpArrow}" />
						</RepeatButton>
						<RepeatButton Style="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=SubMenuScrollButton}}"
									  Grid.Row="2"
									  Grid.Column="0"
									  Command="{x:Static ScrollBar.LineDownCommand}"
									  CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
									  Focusable="false">
							<RepeatButton.Visibility>
								<MultiBinding FallbackValue="Visibility.Collapsed"
											  Converter="{StaticResource MenuScrollingVisibilityConverter}"
											  ConverterParameter="100">
									<Binding RelativeSource="{RelativeSource TemplatedParent}"
											 Path="ComputedVerticalScrollBarVisibility" />
									<Binding RelativeSource="{RelativeSource TemplatedParent}"
											 Path="VerticalOffset" />
									<Binding RelativeSource="{RelativeSource TemplatedParent}"
											 Path="ExtentHeight" />
									<Binding RelativeSource="{RelativeSource TemplatedParent}"
											 Path="ViewportHeight" />
								</MultiBinding>
							</RepeatButton.Visibility>
							<Path Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
								  Data="{StaticResource MenuDownArrow}" />
						</RepeatButton>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- =========================================================================== -->
	<!-- Menu                                                                        -->
	<!-- =========================================================================== -->

	<Style x:Key="{x:Type Menu}"
		   TargetType="{x:Type Menu}">
		<Setter Property="Background"
				Value="{StaticResource MenuBackgroundBrush}" />
		<Setter Property="Margin"
				Value="0,0,0,0" />
		<Setter Property="Padding"
				Value="0,1,0,1" />
	</Style>

	<!-- =========================================================================== -->

	<Style x:Key="{x:Static MenuItem.SeparatorStyleKey}"
		   TargetType="{x:Type Separator}">
		<Setter Property="OverridesDefaultStyle"
				Value="true" />
		<Setter Property="Background"
				Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
		<Setter Property="BorderBrush"
				Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="Height"
				Value="1" />
		<Setter Property="Margin"
				Value="0,1,0,1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Separator}">
					<Grid SnapsToDevicePixels="true">
						<Grid.ColumnDefinitions>
							<ColumnDefinition MinWidth="{StaticResource SubMenuIconWidth}"
											  Width="Auto"
											  SharedSizeGroup="MenuItemIconColumnGroup" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<Border Grid.Column="1"
								Margin="8,0,0,0"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- =========================================================================== -->
	<!-- Context Menu                                                                -->
	<!-- =========================================================================== -->

	<Style x:Key="{x:Type ContextMenu}"
		   TargetType="{x:Type ContextMenu}">
		<Setter Property="FontFamily"
				Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}" />
		<Setter Property="FontSize"
				Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}" />
		<Setter Property="FontStyle"
				Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}" />
		<Setter Property="FontWeight"
				Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}" />
		<Setter Property="Foreground"
				Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
		<Setter Property="Background"
				Value="{StaticResource SubMenuBackgroundBrush}" />
		<Setter Property="BorderBrush"
				Value="{StaticResource SubMenuBorderBrush}" />
		<Setter Property="BorderThickness"
				Value="{StaticResource SubMenuBorderThickness}" />
		<Setter Property="Padding"
				Value="{StaticResource SubMenuBorderPadding}" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="HasDropShadow"
				Value="{DynamicResource {x:Static SystemParameters.DropShadowKey}}" />
		<Setter Property="ScrollViewer.PanningMode"
				Value="Both" />
		<Setter Property="Stylus.IsFlicksEnabled"
				Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate>
					<Grid Name="SubMenuShadow"
						  Style="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type Menu}, ResourceId=SubMenuShadow}}">
						<ContentControl Name="SubMenuContainer"
										Style="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type Menu}, ResourceId=SubMenuContainer}}">
							<ScrollViewer Name="SubMenuScrollViewer"
										  Style="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=SubMenuScrollViewer}}">
								<Grid RenderOptions.ClearTypeHint="Enabled">
									<Canvas Height="0"
											Width="0"
											HorizontalAlignment="Left"
											VerticalAlignment="Top">
										<Border Name="ClearTypeOpaqueBase"
												Height="{Binding ElementName=SubMenuContainer,Path=ActualHeight}"
												Width="{Binding ElementName=SubMenuContainer,Path=ActualWidth}"
												Background="{StaticResource SubMenuBackgroundBrush}"
												BorderBrush="{StaticResource SubMenuBorderBrush}"
												BorderThickness="{StaticResource SubMenuBorderThickness}">
											<Rectangle Fill="{StaticResource SubMenuLeftBrush}"
													   Width="{StaticResource SubMenuLeftWidth}"
													   HorizontalAlignment="Left" />
										</Border>
									</Canvas>
									<ItemsPresenter Name="ItemsPresenter"
													Style="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type Menu}, ResourceId=SubMenuItemsPresenter}}" />
								</Grid>
							</ScrollViewer>
						</ContentControl>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="ContextMenu.HasDropShadow"
								 Value="False">
							<Setter TargetName="SubMenuShadow"
									Property="Margin"
									Value="0,0,0,0" />
							<Setter TargetName="SubMenuContainer"
									Property="Effect"
									Value="{x:Null}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- =========================================================================== -->

	<ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=TopLevelHeaderTemplateKey}"
					 TargetType="{x:Type MenuItem}">
		<Grid SnapsToDevicePixels="true">
			<Rectangle Name="Bg"
					   Fill="Transparent"
					   Stroke="{TemplateBinding MenuItem.BorderBrush}"
					   StrokeThickness="{StaticResource ItemSelectionStroke}"
					   RadiusX="{StaticResource ItemSelectionRounding}"
					   RadiusY="{StaticResource ItemSelectionRounding}" />
			<Rectangle Name="InnerBorder"
					   Margin="1"
					   Opacity="{StaticResource ItemSelectionInnerOpacity}"
					   RadiusX="{StaticResource ItemSelectionRounding}"
					   RadiusY="{StaticResource ItemSelectionRounding}" />
			<DockPanel>
				<ContentPresenter x:Name="Icon"
								  Margin="{StaticResource MenuIconMargin}"
								  VerticalAlignment="Center"
								  ContentSource="Icon"
								  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
				<Path x:Name="GlyphPanel"
					  Margin="{StaticResource MenuGlyphMargin}"
					  Visibility="Collapsed"
					  VerticalAlignment="Center"
					  Fill="{TemplateBinding MenuItem.Foreground}"
					  FlowDirection="LeftToRight"
					  Data="{StaticResource MenuCheckmark}" />
				<ContentPresenter ContentSource="Header"
								  Margin="{TemplateBinding MenuItem.Padding}"
								  RecognizesAccessKey="True"
								  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
			</DockPanel>
			<Popup x:Name="PART_Popup"
				   Placement="Bottom"
				   HorizontalOffset="0"
				   VerticalOffset="-3"
				   AllowsTransparency="true"
				   Focusable="false"
				   IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
				   PopupAnimation="None">
				<!--PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"-->
				<Grid Name="SubMenuShadow"
					  Style="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type Menu}, ResourceId=SubMenuShadow}}">
					<ContentControl Name="SubMenuContainer"
									Style="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type Menu}, ResourceId=SubMenuContainer}}">
						<ScrollViewer Name="TopMenuScrollViewer"
									  Style="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=SubMenuScrollViewer}}">
							<Grid RenderOptions.ClearTypeHint="Enabled">
								<Canvas Height="0"
										Width="0"
										HorizontalAlignment="Left"
										VerticalAlignment="Top">
									<Border Name="ClearTypeOpaqueBase"
											Height="{Binding ElementName=SubMenuContainer,Path=ActualHeight}"
											Width="{Binding ElementName=SubMenuContainer,Path=ActualWidth}"
											Background="{StaticResource SubMenuBackgroundBrush}"
											BorderBrush="{StaticResource SubMenuBorderBrush}"
											BorderThickness="{StaticResource SubMenuBorderThickness}">
										<Rectangle Fill="{StaticResource SubMenuLeftBrush}"
												   Width="{StaticResource SubMenuLeftWidth}"
												   HorizontalAlignment="Left" />
									</Border>
								</Canvas>
								<ItemsPresenter Name="ItemsPresenter"
												Style="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type Menu}, ResourceId=SubMenuItemsPresenter}}" />
								<Border Name="SubMenuTopLeft"
										Background="{StaticResource SubMenuLeftBrush}"
										BorderBrush="Transparent"
										BorderThickness="1"
										HorizontalAlignment="Left"
										VerticalAlignment="Top"
										Width="{TemplateBinding ActualWidth}"
										Height="5"
										Margin="0,-1,0,-1">
								</Border>
							</Grid>
						</ScrollViewer>
					</ContentControl>
				</Grid>
			</Popup>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger SourceName="PART_Popup"
					 Property="Popup.HasDropShadow"
					 Value="False">
				<Setter TargetName="SubMenuShadow"
						Property="Margin"
						Value="0,0,0,0" />
				<Setter TargetName="SubMenuContainer"
						Property="Effect"
						Value="{x:Null}" />
			</Trigger>
			<Trigger Property="Icon"
					 Value="{x:Null}">
				<Setter TargetName="Icon"
						Property="Visibility"
						Value="Collapsed" />
			</Trigger>
			<Trigger Property="IsChecked"
					 Value="true">
				<Setter TargetName="GlyphPanel"
						Property="Visibility"
						Value="Visible" />
				<Setter TargetName="Icon"
						Property="Visibility"
						Value="Collapsed" />
			</Trigger>
			<Trigger Property="IsHighlighted"
					 Value="true">
				<Setter TargetName="Bg"
						Property="Fill"
						Value="{StaticResource ItemHighlitedFillBrush}" />
				<Setter TargetName="Bg"
						Property="Stroke"
						Value="{StaticResource ItemHighlitedOuterBrush}" />
				<Setter TargetName="InnerBorder"
						Property="Stroke"
						Value="{StaticResource ItemSelectionInnerBrush}" />
			</Trigger>
			<Trigger Property="IsSubmenuOpen"
					 Value="true">
				<Setter TargetName="Bg"
						Property="Fill"
						Value="{StaticResource SubMenuLeftBrush}" />
				<Setter TargetName="Bg"
						Property="Stroke"
						Value="{StaticResource SubMenuBorderBrush}" />
				<Setter TargetName="InnerBorder"
						Property="Stroke"
						Value="{StaticResource ItemSelectionInnerBrush}" />
			</Trigger>
			<Trigger Property="IsEnabled"
					 Value="false">
				<Setter Property="Foreground"
						Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
				<Setter TargetName="Icon"
						Property="Opacity"
						Value="{StaticResource ItemDisabledOpacity}" />
				<Setter TargetName="GlyphPanel"
						Property="Fill"
						Value="{StaticResource MenuItemGlyphDisabledBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- =========================================================================== -->

	<ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=SubmenuItemTemplateKey}"
					 TargetType="{x:Type MenuItem}">
		<Grid SnapsToDevicePixels="True">
			<Rectangle Name="Bg"
					   Fill="Transparent"
					   Stroke="{TemplateBinding MenuItem.BorderBrush}"
					   StrokeThickness="{StaticResource ItemSelectionStroke}"
					   RadiusX="{StaticResource ItemSelectionRounding}"
					   RadiusY="{StaticResource ItemSelectionRounding}" />
			<Rectangle Name="InnerBorder"
					   Margin="1"
					   Opacity="{StaticResource ItemSelectionInnerOpacity}"
					   RadiusX="{StaticResource ItemSelectionRounding}"
					   RadiusY="{StaticResource ItemSelectionRounding}" />
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition MinWidth="{StaticResource SubMenuIconWidth}"
									  Width="Auto"
									  SharedSizeGroup="MenuItemIconColumnGroup" />
					<ColumnDefinition Width="Auto"
									  MinWidth="{StaticResource SubMenuIconGap}"
									  MaxWidth="{StaticResource SubMenuIconGap}" />
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="Auto"
									  MinWidth="{StaticResource SubMenuGesturreGap}"
									  MaxWidth="{StaticResource SubMenuGesturreGap}" />
					<ColumnDefinition Width="Auto"
									  SharedSizeGroup="MenuItemIGTColumnGroup" />
					<ColumnDefinition Width="Auto"
									  MinWidth="{StaticResource SubMenuExpandGap}"
									  MaxWidth="{StaticResource SubMenuExpandGap}" />
				</Grid.ColumnDefinitions>
				<Border x:Name="GlyphPanel"
						Background="{StaticResource MenuItemGlyphBackgroundBrush}"
						BorderBrush="{StaticResource MenuItemGlyphBorderBrush}"
						BorderThickness="{StaticResource SubMenuGlyphBorderThickness}"
						CornerRadius="{StaticResource SubMenuGlyphRounding}"
						Margin="{StaticResource SubMenuGlyphMargin}"
						Visibility="Hidden"
						Width="{StaticResource SubMenuGlyphBorderWidth}"
						Height="{StaticResource SubMenuGlyphBorderHeight}">
					<Path Name="Glyph"
						  Visibility="Hidden"
						  Width="{StaticResource SubMenuGlyphWidth}"
						  Height="{StaticResource SubMenuGlyphHeight}"
						  Fill="{StaticResource MenuItemGlyphFillBrush}"
						  FlowDirection="LeftToRight"
						  Data="{StaticResource MenuCheckmark}" />
				</Border>
				<ContentPresenter x:Name="Icon"
								  Margin="{StaticResource SubMenuIconMargin}"
								  VerticalAlignment="Center"
								  ContentSource="Icon"
								  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
				<ContentPresenter Grid.Column="2"
								  ContentSource="Header"
								  Margin="{TemplateBinding MenuItem.Padding}"
								  RecognizesAccessKey="True"
								  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
				<TextBlock Grid.Column="4"
						   Text="{TemplateBinding MenuItem.InputGestureText}"
						   Margin="{TemplateBinding MenuItem.Padding}"
						   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
			</Grid>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="Icon"
					 Value="{x:Null}">
				<Setter TargetName="Icon"
						Property="Visibility"
						Value="Collapsed" />
				<Setter TargetName="Glyph"
						Property="Visibility"
						Value="Visible" />
			</Trigger>
			<Trigger Property="IsChecked"
					 Value="true">
				<Setter TargetName="GlyphPanel"
						Property="Visibility"
						Value="Visible" />
			</Trigger>
			<Trigger Property="IsHighlighted"
					 Value="true">
				<Setter TargetName="Bg"
						Property="Fill"
						Value="{StaticResource ItemHighlitedFillBrush}" />
				<Setter TargetName="Bg"
						Property="Stroke"
						Value="{StaticResource ItemHighlitedOuterBrush}" />
				<Setter TargetName="InnerBorder"
						Property="Stroke"
						Value="{StaticResource ItemSelectionInnerBrush}" />
			</Trigger>
			<Trigger Property="IsEnabled"
					 Value="false">
				<Setter Property="Foreground"
						Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
				<Setter TargetName="Icon"
						Property="Opacity"
						Value="{StaticResource ItemDisabledOpacity}" />
				<Setter TargetName="GlyphPanel"
						Property="Background"
						Value="{StaticResource MenuItemGlyphDisabledBackgroundBrush}" />
				<Setter TargetName="GlyphPanel"
						Property="BorderBrush"
						Value="{StaticResource MenuItemGlyphDisabledBorderBrush}" />
				<Setter TargetName="Glyph"
						Property="Fill"
						Value="{StaticResource MenuItemGlyphDisabledBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=SubmenuHeaderTemplateKey}"
					 TargetType="{x:Type MenuItem}">
		<Grid SnapsToDevicePixels="true">
			<Rectangle Name="Bg"
					   Fill="Transparent"
					   Stroke="{TemplateBinding MenuItem.BorderBrush}"
					   StrokeThickness="{StaticResource ItemSelectionStroke}"
					   RadiusX="{StaticResource ItemSelectionRounding}"
					   RadiusY="{StaticResource ItemSelectionRounding}" />
			<Rectangle Name="InnerBorder"
					   Margin="1"
					   Opacity="{StaticResource ItemSelectionInnerOpacity}"
					   RadiusX="{StaticResource ItemSelectionRounding}"
					   RadiusY="{StaticResource ItemSelectionRounding}" />
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition MinWidth="{StaticResource SubMenuIconWidth}"
									  Width="Auto"
									  SharedSizeGroup="MenuItemIconColumnGroup" />
					<ColumnDefinition Width="Auto"
									  MinWidth="{StaticResource SubMenuIconGap}"
									  MaxWidth="{StaticResource SubMenuIconGap}" />
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="Auto"
									  MinWidth="{StaticResource SubMenuGesturreGap}"
									  MaxWidth="{StaticResource SubMenuGesturreGap}" />
					<ColumnDefinition Width="Auto"
									  SharedSizeGroup="MenuItemIGTColumnGroup" />
					<ColumnDefinition Width="Auto"
									  MinWidth="{StaticResource SubMenuExpandGap}"
									  MaxWidth="{StaticResource SubMenuExpandGap}" />
				</Grid.ColumnDefinitions>
				<Border x:Name="GlyphPanel"
						Background="{StaticResource MenuItemGlyphBackgroundBrush}"
						BorderBrush="{StaticResource MenuItemGlyphBorderBrush}"
						BorderThickness="{StaticResource SubMenuGlyphBorderThickness}"
						CornerRadius="{StaticResource SubMenuGlyphRounding}"
						Margin="{StaticResource SubMenuGlyphMargin}"
						Visibility="Hidden"
						Width="{StaticResource SubMenuGlyphBorderWidth}"
						Height="{StaticResource SubMenuGlyphBorderHeight}">
					<Path Name="Glyph"
						  Visibility="Hidden"
						  Width="{StaticResource SubMenuGlyphWidth}"
						  Height="{StaticResource SubMenuGlyphHeight}"
						  Fill="{StaticResource MenuItemGlyphFillBrush}"
						  FlowDirection="LeftToRight"
						  Data="{StaticResource MenuCheckmark}" />
				</Border>
				<ContentPresenter x:Name="Icon"
								  Margin="{StaticResource SubMenuIconMargin}"
								  VerticalAlignment="Center"
								  ContentSource="Icon"
								  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
				<ContentPresenter Grid.Column="2"
								  ContentSource="Header"
								  Margin="{TemplateBinding MenuItem.Padding}"
								  RecognizesAccessKey="True"
								  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
				<TextBlock Grid.Column="4"
						   Text="{TemplateBinding MenuItem.InputGestureText}"
						   Margin="{TemplateBinding MenuItem.Padding}"
						   Visibility="Collapsed" />
				<Path Grid.Column="5"
					  VerticalAlignment="Center"
					  Margin="{StaticResource SubMenuExpandGlyphMargin}"
					  Fill="{TemplateBinding MenuItem.Foreground}"
					  Data="{StaticResource MenuRightArrow}" />
			</Grid>
			<Popup x:Name="PART_Popup"
				   Placement="Right"
				   VerticalOffset="0"
				   HorizontalOffset="0"
				   AllowsTransparency="true"
				   Focusable="false"
				   IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
				   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
				<Grid Name="SubMenuShadow"
					  Style="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type Menu}, ResourceId=SubMenuShadow}}">
					<ContentControl Name="SubMenuContainer"
									Style="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type Menu}, ResourceId=SubMenuContainer}}">
						<ScrollViewer Name="SubMenuScrollViewer"
									  Style="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=SubMenuScrollViewer}}">
							<Grid RenderOptions.ClearTypeHint="Enabled">
								<Canvas Height="0"
										Width="0"
										HorizontalAlignment="Left"
										VerticalAlignment="Top">
									<Border Name="ClearTypeOpaqueBase"
											Height="{Binding ElementName=SubMenuContainer,Path=ActualHeight}"
											Width="{Binding ElementName=SubMenuContainer,Path=ActualWidth}"
											Background="{StaticResource SubMenuBackgroundBrush}"
											BorderBrush="{StaticResource SubMenuBorderBrush}"
											BorderThickness="{StaticResource SubMenuBorderThickness}">
										<Rectangle Fill="{StaticResource SubMenuLeftBrush}"
												   Width="{StaticResource SubMenuLeftWidth}"
												   HorizontalAlignment="Left" />
									</Border>
								</Canvas>
								<ItemsPresenter Name="ItemsPresenter"
												Style="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type Menu}, ResourceId=SubMenuItemsPresenter}}" />
							</Grid>
						</ScrollViewer>
					</ContentControl>
				</Grid>
			</Popup>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsSuspendingPopupAnimation"
					 Value="true">
				<Setter TargetName="PART_Popup"
						Property="PopupAnimation"
						Value="None" />
			</Trigger>
			<Trigger SourceName="PART_Popup"
					 Property="Popup.HasDropShadow"
					 Value="false">
				<Setter TargetName="SubMenuShadow"
						Property="Margin"
						Value="0,0,0,0" />
				<Setter TargetName="SubMenuContainer"
						Property="Effect"
						Value="{x:Null}" />
			</Trigger>
			<Trigger Property="Icon"
					 Value="{x:Null}">
				<Setter TargetName="Icon"
						Property="Visibility"
						Value="Collapsed" />
				<Setter TargetName="Glyph"
						Property="Visibility"
						Value="Visible" />
			</Trigger>
			<Trigger Property="IsChecked"
					 Value="true">
				<Setter TargetName="GlyphPanel"
						Property="Visibility"
						Value="Visible" />
			</Trigger>
			<Trigger Property="IsHighlighted"
					 Value="true">
				<Setter TargetName="Bg"
						Property="Fill"
						Value="{StaticResource ItemHighlitedFillBrush}" />
				<Setter TargetName="Bg"
						Property="Stroke"
						Value="{StaticResource ItemHighlitedOuterBrush}" />
				<Setter TargetName="InnerBorder"
						Property="Stroke"
						Value="{StaticResource ItemSelectionInnerBrush}" />
			</Trigger>
			<Trigger Property="IsEnabled"
					 Value="false">
				<Setter Property="Foreground"
						Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
				<Setter TargetName="Icon"
						Property="Opacity"
						Value="{StaticResource ItemDisabledOpacity}" />
				<Setter TargetName="GlyphPanel"
						Property="Background"
						Value="{StaticResource MenuItemGlyphDisabledBackgroundBrush}" />
				<Setter TargetName="GlyphPanel"
						Property="BorderBrush"
						Value="{StaticResource MenuItemGlyphDisabledBorderBrush}" />
				<Setter TargetName="Glyph"
						Property="Fill"
						Value="{StaticResource MenuItemGlyphDisabledBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- =========================================================================== -->
	<!-- ToolBar                                                                     -->
	<!-- =========================================================================== -->

	<Color x:Key="ToolBarLightFillColor">#FFF7F7FF</Color>
	<Color x:Key="ToolBarMediumFillColor">#FFD6DBE7</Color>
	<Color x:Key="ToolBarDarkFillColor">#FF99CCFF</Color>
	<Color x:Key="ToolBarDisabledFillColor">#FFF7F7F7</Color>
	<Color x:Key="ToolBarDisabledBorderColor">#FFB5B2B5</Color>
	<Color x:Key="ToolBarSeparatorFillColor">#FFC6C6C6</Color>

	<SolidColorBrush x:Key="ToolBarLightFill"
					 Color="{StaticResource ToolBarLightFillColor}" />
	<SolidColorBrush x:Key="ToolBarMediumFill"
					 Color="{StaticResource ToolBarMediumFillColor}" />
	<SolidColorBrush x:Key="ToolBarDarkFill"
					 Color="{StaticResource ToolBarDarkFillColor}" />
	<SolidColorBrush x:Key="ToolBarDisabledFill"
					 Color="{StaticResource ToolBarDisabledFillColor}" />
	<SolidColorBrush x:Key="ToolBarDisabledBorder"
					 Color="{StaticResource ToolBarDisabledBorderColor}" />
	<SolidColorBrush x:Key="ToolBarSeparatorFill"
					 Color="{StaticResource ToolBarSeparatorFillColor}" />

	<Color x:Key="ToolBarButtonBorderColor">#FFB1D5F8</Color>
	<!--140 200 200-->
	<Color x:Key="ToolBarButtonTopColor">#FFEDF4FC</Color>
	<!--140 180 230-->
	<Color x:Key="ToolBarButtonBottomColor">#FFC8DFF7</Color>
	<!--140 180 210-->
	<Color x:Key="ToolBarButtonHoverBorderColor">#FF8ABFF4</Color>
	<!--140 200 180-->
	<Color x:Key="ToolBarButtonHoverTopColor">#FFF5FAFE</Color>
	<!--140 180 235-->
	<Color x:Key="ToolBarButtonHoverBottomColor">#FFDAEAFA</Color>
	<!--140 180 220-->
	<Color x:Key="ToolBarButtonPressedBorderColor">#FF3399FF</Color>
	<!--140 240 144-->
	<Color x:Key="ToolBarButtonPressedTopColor">#FFE3EFFB</Color>
	<!--140 180 225-->
	<Color x:Key="ToolBarButtonPressedBottomColor">#FFB5D5F4</Color>
	<!--140 180 200-->
	<Color x:Key="ToolBarButtonCheckedBorderColor">#FF3399FF</Color>
	<!--140 240 144-->
	<Color x:Key="ToolBarButtonCheckedTopColor">#FFD5EAFF</Color>
	<!--140 240 220-->
	<Color x:Key="ToolBarButtonCheckedBottomColor">#FFAAD5FF</Color>
	<!--140 240 200-->

	<SolidColorBrush x:Key="ToolBarButtonBorder"
					 Color="{StaticResource ToolBarButtonBorderColor}" />
	<LinearGradientBrush x:Key="ToolBarButtonFill"
						 StartPoint="0,0"
						 EndPoint="0,1">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="{StaticResource ToolBarButtonTopColor}"
						  Offset="0" />
			<GradientStop Color="{StaticResource ToolBarButtonBottomColor}"
						  Offset="1" />
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>
	<SolidColorBrush x:Key="ToolBarButtonHoverBorder"
					 Color="{StaticResource ToolBarButtonHoverBorderColor}" />
	<LinearGradientBrush x:Key="ToolBarButtonHover"
						 StartPoint="0,0"
						 EndPoint="0,1">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="{StaticResource ToolBarButtonHoverTopColor}"
						  Offset="0" />
			<GradientStop Color="{StaticResource ToolBarButtonHoverBottomColor}"
						  Offset="1" />
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>
	<SolidColorBrush x:Key="ToolBarButtonCheckedBorder"
					 Color="{StaticResource ToolBarButtonCheckedBorderColor}" />
	<LinearGradientBrush x:Key="ToolBarButtonChecked"
						 StartPoint="0,0"
						 EndPoint="0,1">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="{StaticResource ToolBarButtonCheckedTopColor}"
						  Offset="0" />
			<GradientStop Color="{StaticResource ToolBarButtonCheckedBottomColor}"
						  Offset="1" />
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>
	<SolidColorBrush x:Key="ToolBarButtonPressedBorder"
					 Color="{StaticResource ToolBarButtonPressedBorderColor}" />
	<LinearGradientBrush x:Key="ToolBarButtonPressed"
						 StartPoint="0,0"
						 EndPoint="0,1">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="{StaticResource ToolBarButtonPressedTopColor}"
						  Offset="0" />
			<GradientStop Color="{StaticResource ToolBarButtonPressedBottomColor}"
						  Offset="1" />
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>

	<Thickness x:Key="ToolBarButtonGlowMargin">-1,-1,-1,-1</Thickness>
	<BlurEffect x:Key="ToolBarButtonGlowEffect"
				Radius="3"
				RenderingBias="Quality"
				KernelType="Gaussian" />

	<!-- =========================================================================== -->

	<Style x:Key="{x:Type ToolBar}"
		   TargetType="{x:Type ToolBar}">
		<Setter Property="Background"
				Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ToolBarTray}, Path=Background}" />
	</Style>

	<!--<Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type Thumb}, ResourceId=ToolBarThumbStyle}"
		   TargetType="{x:Type Thumb}">
		<Setter Property="Thumb.Visibility"
				Value="Collapsed" />
	</Style>-->

	<!--<Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ToggleButton}, ResourceId=ToolBarHorizontalOverflowButtonStyle}"
		   TargetType="{x:Type ToggleButton}">
		<Setter Property="ToggleButton.Visibility"
				Value="Collapsed" />
	</Style>-->

	<Style x:Key="{x:Static ToolBar.SeparatorStyleKey}"
		   TargetType="{x:Type Separator}">
		<Setter Property="Background"
				Value="{StaticResource ToolBarSeparatorFill}" />
		<Setter Property="MinWidth"
				Value="1" />
		<Setter Property="MinHeight"
				Value="1" />
		<Setter Property="Margin"
				Value="2,2,2,2" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Separator}">
					<Border Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="true" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- =========================================================================== -->
	<!-- ToolBar Buttons                                                             -->
	<!-- =========================================================================== -->

	<Style x:Key="{x:Static ToolBar.ButtonStyleKey}"
		   TargetType="{x:Type ButtonBase}">
		<Setter Property="OverridesDefaultStyle"
				Value="true" />
		<Setter Property="Foreground"
				Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
		<Setter Property="Margin"
				Value="1,0,1,0" />
		<Setter Property="Padding"
				Value="3" />
		<Setter Property="BorderThickness"
				Value="0" />
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="BorderBrush"
				Value="Transparent" />
		<Setter Property="HorizontalAlignment"
				Value="Center" />
		<Setter Property="VerticalAlignment"
				Value="Center" />
		<Setter Property="HorizontalContentAlignment"
				Value="Center" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="Focusable"
				Value="False" />
		<Setter Property="IsTabStop"
				Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<Border Name="Bd"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="true">
						<Grid Background="Transparent">
							<Rectangle Name="Glow"
									   Opacity="0"
									   ClipToBounds="False"
									   Fill="White"
									   Stroke="White"
									   StrokeThickness="{StaticResource ItemSelectionStroke}"
									   RadiusX="{StaticResource ItemSelectionRounding}"
									   RadiusY="{StaticResource ItemSelectionRounding}"
									   Margin="{StaticResource ToolBarButtonGlowMargin}"
									   Effect="{StaticResource ToolBarButtonGlowEffect}" />
							<Rectangle Name="Bg"
									   Fill="{StaticResource ToolBarButtonFill}"
									   Stroke="{StaticResource ToolBarButtonBorder}"
									   StrokeThickness="{StaticResource ItemSelectionStroke}"
									   RadiusX="{StaticResource ItemSelectionRounding}"
									   RadiusY="{StaticResource ItemSelectionRounding}" />
							<Rectangle Name="InnerBorder"
									   Margin="1"
									   Opacity="{StaticResource ItemSelectionInnerOpacity}"
									   Stroke="{StaticResource ItemSelectionInnerBrush}"
									   RadiusX="{StaticResource ItemSelectionRounding}"
									   RadiusY="{StaticResource ItemSelectionRounding}" />
							<ContentPresenter Margin="{TemplateBinding Padding}"
											  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
											  SnapsToDevicePixels="False"
											  UseLayoutRounding="False" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver"
								 Value="true">
							<Setter TargetName="Bg"
									Property="Stroke"
									Value="{StaticResource ToolBarButtonHoverBorder}" />
							<Setter TargetName="Bg"
									Property="Fill"
									Value="{StaticResource ToolBarButtonHover}" />
						</Trigger>
						<Trigger Property="IsKeyboardFocused"
								 Value="true">
							<Setter TargetName="Bg"
									Property="Stroke"
									Value="{StaticResource ToolBarButtonHoverBorder}" />
							<Setter TargetName="Bg"
									Property="Fill"
									Value="{StaticResource ToolBarButtonHover}" />
						</Trigger>
						<Trigger Property="IsPressed"
								 Value="true">
							<Setter TargetName="Bg"
									Property="Stroke"
									Value="{StaticResource ToolBarButtonPressedBorder}" />
							<Setter TargetName="Bg"
									Property="Fill"
									Value="{StaticResource ToolBarButtonPressed}" />
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="Glow"
														 Storyboard.TargetProperty="Opacity"
														 Duration="{StaticResource StateAnimationDuration}"
														 To="1" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="Glow"
														 Storyboard.TargetProperty="Opacity"
														 Duration="{StaticResource StateAnimationDuration}"
														 To="0" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Foreground"
									Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
							<Setter Property="Opacity"
									Value="{StaticResource ItemDisabledOpacity}" />
							<Setter TargetName="InnerBorder"
									Property="Visibility"
									Value="Hidden" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- =========================================================================== -->

	<Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}"
		   TargetType="{x:Type ToggleButton}">
		<Setter Property="OverridesDefaultStyle"
				Value="true" />
		<Setter Property="Foreground"
				Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
		<Setter Property="Margin"
				Value="1,0,1,0" />
		<Setter Property="Padding"
				Value="3" />
		<Setter Property="BorderThickness"
				Value="0" />
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="BorderBrush"
				Value="Transparent" />
		<Setter Property="HorizontalAlignment"
				Value="Center" />
		<Setter Property="VerticalAlignment"
				Value="Center" />
		<Setter Property="HorizontalContentAlignment"
				Value="Center" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="Focusable"
				Value="False" />
		<Setter Property="IsTabStop"
				Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="true">
						<Grid Background="Transparent">
							<Rectangle Name="Glow"
									   Opacity="0"
									   ClipToBounds="False"
									   Fill="White"
									   Stroke="White"
									   StrokeThickness="{StaticResource ItemSelectionStroke}"
									   RadiusX="{StaticResource ItemSelectionRounding}"
									   RadiusY="{StaticResource ItemSelectionRounding}"
									   Margin="{StaticResource ToolBarButtonGlowMargin}"
									   Effect="{StaticResource ToolBarButtonGlowEffect}" />
							<Rectangle Name="Bg"
									   Fill="{StaticResource ToolBarButtonFill}"
									   Stroke="{StaticResource ToolBarButtonBorder}"
									   StrokeThickness="{StaticResource ItemSelectionStroke}"
									   RadiusX="{StaticResource ItemSelectionRounding}"
									   RadiusY="{StaticResource ItemSelectionRounding}" />
							<Rectangle Name="InnerBorder"
									   Margin="1"
									   Opacity="{StaticResource ItemSelectionInnerOpacity}"
									   Stroke="{StaticResource ItemSelectionInnerBrush}"
									   RadiusX="{StaticResource ItemSelectionRounding}"
									   RadiusY="{StaticResource ItemSelectionRounding}" />
							<ContentPresenter Margin="{TemplateBinding Padding}"
											  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
											  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked"
								 Value="true">
							<Setter TargetName="Bg"
									Property="Stroke"
									Value="{StaticResource ToolBarButtonCheckedBorder}" />
							<Setter TargetName="Bg"
									Property="Fill"
									Value="{StaticResource ToolBarButtonChecked}" />
							<Setter TargetName="InnerBorder"
									Property="Opacity"
									Value="0.5" />
						</Trigger>
						<Trigger Property="IsMouseOver"
								 Value="true">
							<Setter TargetName="Bg"
									Property="Stroke"
									Value="{StaticResource ToolBarButtonHoverBorder}" />
							<Setter TargetName="Bg"
									Property="Fill"
									Value="{StaticResource ToolBarButtonHover}" />
						</Trigger>
						<Trigger Property="IsKeyboardFocused"
								 Value="true">
							<Setter TargetName="Bg"
									Property="Stroke"
									Value="{StaticResource ToolBarButtonHoverBorder}" />
							<Setter TargetName="Bg"
									Property="Fill"
									Value="{StaticResource ToolBarButtonHover}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver"
										   Value="true" />
								<Condition Property="IsChecked"
										   Value="true" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Bg"
									Property="Stroke"
									Value="{StaticResource ToolBarButtonPressedBorder}" />
							<Setter TargetName="Bg"
									Property="Fill"
									Value="{StaticResource ToolBarButtonPressed}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsKeyboardFocused"
										   Value="true" />
								<Condition Property="IsChecked"
										   Value="true" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Bg"
									Property="Stroke"
									Value="{StaticResource ToolBarButtonPressedBorder}" />
							<Setter TargetName="Bg"
									Property="Fill"
									Value="{StaticResource ToolBarButtonPressed}" />
						</MultiTrigger>
						<Trigger Property="IsPressed"
								 Value="true">
							<Setter TargetName="Bg"
									Property="Stroke"
									Value="{StaticResource ToolBarButtonPressedBorder}" />
							<Setter TargetName="Bg"
									Property="Fill"
									Value="{StaticResource ToolBarButtonPressed}" />
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="Glow"
														 Storyboard.TargetProperty="Opacity"
														 Duration="{StaticResource StateAnimationDuration}"
														 To="1" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="Glow"
														 Storyboard.TargetProperty="Opacity"
														 Duration="{StaticResource StateAnimationDuration}"
														 To="0" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Foreground"
									Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
							<Setter Property="Opacity"
									Value="{StaticResource ItemDisabledOpacity}" />
							<Setter TargetName="InnerBorder"
									Property="Visibility"
									Value="Hidden" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}"
		   BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
		   TargetType="{x:Type CheckBox}" />
	<Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}"
		   BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
		   TargetType="{x:Type RadioButton}" />

	<!-- =========================================================================== -->
	<!-- Scroll Bars                                                                 -->
	<!-- =========================================================================== -->

	<!--140 128 205-->
	<Color x:Key="ScrollBarTopColor">#FFC6DAEE</Color>
	<!--140 128 220-->
	<Color x:Key="ScrollBarMiddleColor">#FFDEEAF5</Color>
	<!--140 128 210-->
	<Color x:Key="ScrollBarBottomColor">#FFCEDFF0</Color>
	<!--140 128 220-->
	<Color x:Key="ScrollButtonTopColor">#FFDEEAF5</Color>
	<!--140 128 190-->
	<Color x:Key="ScrollButtonBottomColor">#FFADCAE7</Color>
	<!--140 128 225-->
	<Color x:Key="ScrollButtonHighlitedTopColor">#FFE7EFF8</Color>
	<!--140 128 205-->
	<Color x:Key="ScrollButtonHighlitedBottomColor">#FFC6DAEE</Color>
	<!--140 128 144-->
	<Color x:Key="ScrollButtonBorderColor">#FF6399CF</Color>
	<!--140 128 70-->
	<Color x:Key="ScrollButtonGlyphColor">#FF234A72</Color>
	<Color x:Key="ScrollBarDisabledColor">#FFF4F4F4</Color>

	<LinearGradientBrush x:Key="VerticalScrollBarBrush"
						 StartPoint="0,0"
						 EndPoint="1,0">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="{StaticResource ScrollBarTopColor}"
						  Offset="0" />
			<GradientStop Color="{StaticResource ScrollBarMiddleColor}"
						  Offset="0.20" />
			<GradientStop Color="{StaticResource ScrollBarMiddleColor}"
						  Offset="0.80" />
			<GradientStop Color="{StaticResource ScrollBarBottomColor}"
						  Offset="1" />
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="HorizontalScrollBarBrush"
						 StartPoint="0,0"
						 EndPoint="0,1">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="{StaticResource ScrollBarTopColor}"
						  Offset="0" />
			<GradientStop Color="{StaticResource ScrollBarMiddleColor}"
						  Offset="0.20" />
			<GradientStop Color="{StaticResource ScrollBarMiddleColor}"
						  Offset="0.80" />
			<GradientStop Color="{StaticResource ScrollBarBottomColor}"
						  Offset="1" />
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>

	<SolidColorBrush x:Key="ScrollButtonBorderBrush"
					 Color="{StaticResource ScrollButtonBorderColor}" />
	<SolidColorBrush x:Key="ScrollButtonGlyphBrush"
					 Color="{StaticResource ScrollButtonGlyphColor}" />

	<LinearGradientBrush x:Key="VerticalScrollButtonBrush"
						 StartPoint="0,0"
						 EndPoint="1,0">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="{StaticResource ScrollButtonTopColor}"
						  Offset="0" />
			<GradientStop Color="{StaticResource ScrollButtonBottomColor}"
						  Offset="1" />
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="HorizontalScrollButtonBrush"
						 StartPoint="0,0"
						 EndPoint="0,1">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="{StaticResource ScrollButtonTopColor}"
						  Offset="0" />
			<GradientStop Color="{StaticResource ScrollButtonBottomColor}"
						  Offset="1" />
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="VerticalScrollButtonHilitedBrush"
						 StartPoint="0,0"
						 EndPoint="1,0">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="{StaticResource ScrollButtonHighlitedTopColor}"
						  Offset="0" />
			<GradientStop Color="{StaticResource ScrollButtonHighlitedBottomColor}"
						  Offset="1" />
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="HorizontalScrollButtonHilitedBrush"
						 StartPoint="0,0"
						 EndPoint="0,1">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="{StaticResource ScrollButtonHighlitedTopColor}"
						  Offset="0" />
			<GradientStop Color="{StaticResource ScrollButtonHighlitedBottomColor}"
						  Offset="1" />
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>

	<SolidColorBrush x:Key="ScrollBarDisabledBrush"
					 Color="{StaticResource ScrollBarDisabledColor}" />

	<Geometry x:Key="ScrollButtonDownArrow">M 0,0 L 2,0 L 3.5,1 L 5,0 L 7,0 L 3.5,4 Z</Geometry>
	<Geometry x:Key="ScrollButtonUpArrow">M 0,4 L 2,4 L 3.5,3 L 5,4 L 7,4 L 3.5,0 Z</Geometry>
	<Geometry x:Key="ScrollButtonRightArrow">M 0,0 L 0,2 L 1,3.5 L 0,5 L 0,7 L 4,3.5Z</Geometry>
	<Geometry x:Key="ScrollButtonLeftArrow">M 4,0 L 4,0 L 3,3.5 L 4,5 L 4,7 L 0,3.5Z</Geometry>

	<!-- =========================================================================== -->

	<Style x:Key="ScrollBarButton"
		   TargetType="{x:Type RepeatButton}">
		<Setter Property="OverridesDefaultStyle"
				Value="true" />
		<Setter Property="Focusable"
				Value="false" />
		<Setter Property="IsTabStop"
				Value="false" />
		<Setter Property="Background"
				Value="{StaticResource VerticalScrollButtonBrush}" />
		<Setter Property="Foreground"
				Value="{StaticResource VerticalScrollButtonHilitedBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Grid SnapsToDevicePixels="True">
						<Rectangle Name="Chrome"
								   Fill="{TemplateBinding Background}"
								   Stroke="{StaticResource ScrollButtonBorderBrush}"
								   StrokeThickness="{StaticResource ItemSelectionStroke}"
								   RadiusX="{StaticResource ItemSelectionRounding}"
								   RadiusY="{StaticResource ItemSelectionRounding}" />
						<Rectangle Name="Highlite"
								   Fill="{TemplateBinding Foreground}"
								   Stroke="{StaticResource ScrollButtonBorderBrush}"
								   StrokeThickness="{StaticResource ItemSelectionStroke}"
								   RadiusX="{StaticResource ItemSelectionRounding}"
								   RadiusY="{StaticResource ItemSelectionRounding}"
								   Opacity="0" />
						<ContentPresenter HorizontalAlignment="Center"
										  VerticalAlignment="Center"
										  SnapsToDevicePixels="false"
										  UseLayoutRounding="False" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver"
								 Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="Highlite"
														 Storyboard.TargetProperty="Opacity"
														 Duration="{StaticResource FastAnimationDuration}"
														 To="1" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="Highlite"
														 Storyboard.TargetProperty="Opacity"
														 Duration="{StaticResource FastAnimationDuration}"
														 To="0" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
						<Trigger Property="IsPressed"
								 Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="Highlite"
														 Storyboard.TargetProperty="StrokeThickness"
														 Duration="{StaticResource FastAnimationDuration}"
														 To="1.5" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="Highlite"
														 Storyboard.TargetProperty="StrokeThickness"
														 Duration="{StaticResource FastAnimationDuration}"
														 From="1.5" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ScrollBarThumb"
		   TargetType="{x:Type Thumb}">
		<Setter Property="OverridesDefaultStyle"
				Value="true" />
		<Setter Property="IsTabStop"
				Value="false" />
		<Setter Property="Background"
				Value="{StaticResource VerticalScrollButtonBrush}" />
		<Setter Property="Foreground"
				Value="{StaticResource VerticalScrollButtonHilitedBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Grid SnapsToDevicePixels="True">
						<Rectangle Name="Chrome"
								   Fill="{TemplateBinding Background}"
								   Stroke="{StaticResource ScrollButtonBorderBrush}"
								   StrokeThickness="{StaticResource ItemSelectionStroke}"
								   RadiusX="{StaticResource ItemSelectionRounding}"
								   RadiusY="{StaticResource ItemSelectionRounding}" />
						<Rectangle Name="Highlite"
								   Fill="{TemplateBinding Foreground}"
								   Stroke="{StaticResource ScrollButtonBorderBrush}"
								   StrokeThickness="{StaticResource ItemSelectionStroke}"
								   RadiusX="{StaticResource ItemSelectionRounding}"
								   RadiusY="{StaticResource ItemSelectionRounding}"
								   Opacity="0" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver"
								 Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="Highlite"
														 Storyboard.TargetProperty="Opacity"
														 Duration="{StaticResource FastAnimationDuration}"
														 To="1" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="Highlite"
														 Storyboard.TargetProperty="Opacity"
														 Duration="{StaticResource FastAnimationDuration}"
														 To="0" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
						<Trigger Property="IsDragging"
								 Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="Highlite"
														 Storyboard.TargetProperty="StrokeThickness"
														 Duration="{StaticResource FastAnimationDuration}"
														 To="1.5" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="Highlite"
														 Storyboard.TargetProperty="StrokeThickness"
														 Duration="{StaticResource FastAnimationDuration}"
														 From="1.5" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="False">
							<Setter Property="Visibility"
									Value="Hidden" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="VerticalScrollBarPageButton"
		   TargetType="{x:Type RepeatButton}">
		<Setter Property="OverridesDefaultStyle"
				Value="true" />
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="Focusable"
				Value="false" />
		<Setter Property="IsTabStop"
				Value="false" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Rectangle Fill="{TemplateBinding Background}"
							   Width="{TemplateBinding Width}"
							   Height="{TemplateBinding Height}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="HorizontalScrollBarPageButton"
		   BasedOn="{StaticResource VerticalScrollBarPageButton}"
		   TargetType="{x:Type RepeatButton}" />

	<!-- =========================================================================== -->

	<Style x:Key="{x:Type ScrollBar}"
		   TargetType="{x:Type ScrollBar}">
		<Setter Property="Background"
				Value="{StaticResource VerticalScrollBarBrush}" />
		<Setter Property="Stylus.IsPressAndHoldEnabled"
				Value="false" />
		<Setter Property="Stylus.IsFlicksEnabled"
				Value="false" />
		<Setter Property="Foreground"
				Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
		<Setter Property="Width"
				Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
		<Setter Property="MinWidth"
				Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollBar}">
					<Grid Name="Bg"
						  Background="{TemplateBinding Background}"
						  SnapsToDevicePixels="true">
						<Grid.RowDefinitions>
							<RowDefinition
									MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
							<RowDefinition Height="0.00001*" />
							<RowDefinition
									MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
						</Grid.RowDefinitions>
						<RepeatButton Style="{StaticResource ScrollBarButton}"
									  Background="{StaticResource VerticalScrollButtonBrush}"
									  Foreground="{StaticResource VerticalScrollButtonHilitedBrush}"
									  Command="{x:Static ScrollBar.LineUpCommand}">
							<Path Fill="{StaticResource ScrollButtonGlyphBrush}"
								  Data="{StaticResource ScrollButtonUpArrow}" />
						</RepeatButton>
						<Track Grid.Row="1"
							   Name="PART_Track"
							   Margin="0,0,0,0"
							   IsEnabled="{TemplateBinding IsEnabled}"
							   IsDirectionReversed="true">
							<Track.DecreaseRepeatButton>
								<RepeatButton Style="{StaticResource VerticalScrollBarPageButton}"
											  Command="{x:Static ScrollBar.PageUpCommand}" />
							</Track.DecreaseRepeatButton>
							<Track.IncreaseRepeatButton>
								<RepeatButton Style="{StaticResource VerticalScrollBarPageButton}"
											  Command="{x:Static ScrollBar.PageDownCommand}" />
							</Track.IncreaseRepeatButton>
							<Track.Thumb>
								<Thumb Style="{StaticResource ScrollBarThumb}"
									   Background="{StaticResource VerticalScrollButtonBrush}"
									   Foreground="{StaticResource VerticalScrollButtonHilitedBrush}"
									   IsEnabled="{TemplateBinding IsEnabled}" />
							</Track.Thumb>
						</Track>
						<RepeatButton Grid.Row="2"
									  Style="{StaticResource ScrollBarButton}"
									  Background="{StaticResource VerticalScrollButtonBrush}"
									  Foreground="{StaticResource VerticalScrollButtonHilitedBrush}"
									  Command="{x:Static ScrollBar.LineDownCommand}">
							<Path Fill="{StaticResource ScrollButtonGlyphBrush}"
								  Data="{StaticResource ScrollButtonDownArrow}" />
						</RepeatButton>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter TargetName="Bg"
									Property="Background"
									Value="{StaticResource ScrollBarDisabledBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="Orientation"
					 Value="Horizontal">
				<Setter Property="Width"
						Value="Auto" />
				<Setter Property="MinWidth"
						Value="0" />
				<Setter Property="Height"
						Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
				<Setter Property="MinHeight"
						Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
				<Setter Property="Background"
						Value="{StaticResource HorizontalScrollBarBrush}" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ScrollBar}">
							<Grid Name="Bg"
								  Background="{TemplateBinding Background}"
								  SnapsToDevicePixels="true">
								<Grid.ColumnDefinitions>
									<ColumnDefinition
											MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
									<ColumnDefinition Width="0.00001*" />
									<ColumnDefinition
											MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
								</Grid.ColumnDefinitions>
								<RepeatButton Style="{StaticResource ScrollBarButton}"
											  Background="{StaticResource HorizontalScrollButtonBrush}"
											  Foreground="{StaticResource HorizontalScrollButtonHilitedBrush}"
											  Command="{x:Static ScrollBar.LineLeftCommand}">
									<Path Fill="{StaticResource ScrollButtonGlyphBrush}"
										  Data="{StaticResource ScrollButtonLeftArrow}" />
								</RepeatButton>
								<Track Grid.Column="1"
									   Name="PART_Track"
									   Margin="0,0,0,0"
									   IsEnabled="{TemplateBinding IsEnabled}">
									<Track.DecreaseRepeatButton>
										<RepeatButton Style="{StaticResource HorizontalScrollBarPageButton}"
													  Command="{x:Static ScrollBar.PageLeftCommand}" />
									</Track.DecreaseRepeatButton>
									<Track.IncreaseRepeatButton>
										<RepeatButton Style="{StaticResource HorizontalScrollBarPageButton}"
													  Command="{x:Static ScrollBar.PageRightCommand}" />
									</Track.IncreaseRepeatButton>
									<Track.Thumb>
										<Thumb Style="{StaticResource ScrollBarThumb}"
											   Background="{StaticResource HorizontalScrollButtonBrush}"
											   Foreground="{StaticResource HorizontalScrollButtonHilitedBrush}"
											   IsEnabled="{TemplateBinding IsEnabled}" />
									</Track.Thumb>
								</Track>
								<RepeatButton Grid.Column="2"
											  Style="{StaticResource ScrollBarButton}"
											  Background="{StaticResource HorizontalScrollButtonBrush}"
											  Foreground="{StaticResource HorizontalScrollButtonHilitedBrush}"
											  Command="{x:Static ScrollBar.LineRightCommand}">
									<Path Fill="{StaticResource ScrollButtonGlyphBrush}"
										  Data="{StaticResource ScrollButtonRightArrow}" />
								</RepeatButton>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsEnabled"
										 Value="false">
									<Setter TargetName="Bg"
											Property="Background"
											Value="{StaticResource ScrollBarDisabledBrush}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- =========================================================================== -->
	<!-- PushButton                                                                  -->
	<!-- =========================================================================== -->

	<Color x:Key="PushButtonTopColor">#FFDCF0FA</Color>
	<Color x:Key="PushButtonBottomColor">#FFB5D6E7</Color>
	<Color x:Key="PushButtonHighlitedTopColor">#FFF3FBFF</Color>
	<Color x:Key="PushButtonHighlitedBottomColor">#FFC5E6F7</Color>

	<SolidColorBrush x:Key="PushButtonBorderBrush"
					 Color="{StaticResource ItemSelectedOuterColor}" />
	<LinearGradientBrush x:Key="PushButtonFillBrush"
						 StartPoint="0,0"
						 EndPoint="0,1">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="{StaticResource PushButtonTopColor}"
						  Offset="0" />
			<GradientStop Color="{StaticResource PushButtonBottomColor}"
						  Offset="1" />
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="PushButtonHighlitedFillBrush"
						 StartPoint="0,0"
						 EndPoint="0,1">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="{StaticResource PushButtonHighlitedTopColor}"
						  Offset="0" />
			<GradientStop Color="{StaticResource PushButtonHighlitedBottomColor}"
						  Offset="1" />
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>

	<Thickness x:Key="PushButtonDefaultPadding">0,0,0,0</Thickness>
	<Thickness x:Key="PushButtonBorderPadding">2,2,2,2</Thickness>
	<Thickness x:Key="PushButtonBorderThickness">1,1,1,1</Thickness>
	<Thickness x:Key="PushButtonBorderPaddingPressed">0,0,0,0</Thickness>
	<Thickness x:Key="PushButtonBorderThicknessPressed">3,3,3,3</Thickness>
	<CornerRadius x:Key="PushButtonRounding">3</CornerRadius>
	<Duration x:Key="PushButtonTransitionDuration">0:0:0.2</Duration>

	<Thickness x:Key="PushButtonGlowMargin">-2,-2,-2,-2</Thickness>
	<BlurEffect x:Key="PushButtonGlowEffect"
				Radius="4"
				RenderingBias="Quality"
				KernelType="Gaussian" />

	<!-- =========================================================================== -->

	<Style x:Key="PushButtonFocusVisual"
		   TargetType="{x:Type Control}">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="0"
							   StrokeThickness="1"
							   RadiusX="3"
							   RadiusY="3"
							   Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
							   StrokeDashArray="1 2" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Type Button}"
		   TargetType="{x:Type Button}">
		<Setter Property="FocusVisualStyle"
				Value="{StaticResource PushButtonFocusVisual}" />
		<Setter Property="Background"
				Value="{StaticResource PushButtonFillBrush}" />
		<Setter Property="BorderBrush"
				Value="{StaticResource PushButtonBorderBrush}" />
		<Setter Property="BorderThickness"
				Value="{StaticResource PushButtonBorderThickness}" />
		<Setter Property="Padding"
				Value="{StaticResource PushButtonDefaultPadding}" />
		<Setter Property="Foreground"
				Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
		<Setter Property="HorizontalContentAlignment"
				Value="Center" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<Grid Background="Transparent"
						  SnapsToDevicePixels="True"
						  UseLayoutRounding="False">
						<Rectangle Name="Glow"
								   Fill="White"
								   Opacity="0"
								   RadiusX="3"
								   RadiusY="3"
								   Margin="{StaticResource PushButtonGlowMargin}"
								   Effect="{StaticResource PushButtonGlowEffect}"
								   ClipToBounds="False" />
						<Border Name="Chrome"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{StaticResource PushButtonBorderThickness}"
								CornerRadius="{StaticResource PushButtonRounding}"
								Padding="{StaticResource PushButtonBorderPadding}" />
						<Border Name="Highlite"
								Background="{StaticResource PushButtonHighlitedFillBrush}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{StaticResource PushButtonBorderThickness}"
								CornerRadius="{StaticResource PushButtonRounding}"
								Padding="{StaticResource PushButtonBorderPadding}"
								Opacity="0" />
						<Border Background="Transparent"
								BorderBrush="Transparent"
								BorderThickness="{StaticResource PushButtonBorderThickness}"
								CornerRadius="{StaticResource PushButtonRounding}"
								Padding="{StaticResource PushButtonBorderPadding}">
							<ContentPresenter Margin="{TemplateBinding Padding}"
											  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
											  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											  RecognizesAccessKey="True"
											  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
											  UseLayoutRounding="{TemplateBinding UseLayoutRounding}" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsKeyboardFocused"
								 Value="True">
						</Trigger>
						<Trigger Property="Button.IsDefault"
								 Value="True">
							<Setter TargetName="Chrome"
									Property="BorderThickness"
									Value="2" />
							<Setter TargetName="Chrome"
									Property="Padding"
									Value="1" />
							<Setter TargetName="Highlite"
									Property="BorderThickness"
									Value="2" />
							<Setter TargetName="Highlite"
									Property="Padding"
									Value="1" />
						</Trigger>
						<Trigger Property="IsMouseOver"
								 Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="Highlite"
														 Storyboard.TargetProperty="Opacity"
														 Duration="{StaticResource StateAnimationDuration}"
														 To="1" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="Highlite"
														 Storyboard.TargetProperty="Opacity"
														 Duration="{StaticResource StateAnimationDuration}"
														 To="0" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
						<Trigger Property="Button.IsPressed"
								 Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="Glow"
														 Storyboard.TargetProperty="Opacity"
														 Duration="{StaticResource StateAnimationDuration}"
														 To="1" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="Glow"
														 Storyboard.TargetProperty="Opacity"
														 Duration="{StaticResource StateAnimationDuration}"
														 To="0" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Foreground"
									Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
							<Setter TargetName="Chrome"
									Property="Opacity"
									Value="0.7" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- =========================================================================== -->
	<!-- ToggleButton                                                                -->
	<!-- =========================================================================== -->

	<Geometry x:Key="ToggleButtonCheckmark">M 1,6.1 L 2.7,6.2 L 4.4,8.1 L 9,1.4 L 10.2,1 L 4.3,11.8 Z</Geometry>
	<Geometry x:Key="ToggleButtonUncheckmark">M 1,1 L 2,1 L 6,5 L 10,1 L 11,1 L 11,2 L 7,6 L 11,10 L 11,11 L 10,11 L 6,7 L 2,11 L 1,11 L 1,10 L 5,6 L 1,2 Z</Geometry>
	<Duration x:Key="ToggleButtonTransitionDuration">0:0:0.2</Duration>

	<Thickness x:Key="ToggleButtonCheckMargin">0,2,2,2</Thickness>
	<Thickness x:Key="ToggleButtonGlowMargin">-2,-2,-2,-2</Thickness>
	<BlurEffect x:Key="ToggleButtonGlowEffect"
				Radius="4"
				RenderingBias="Quality"
				KernelType="Gaussian" />

	<!-- =========================================================================== -->
	<!-- TextBox                                                                     -->
	<!-- =========================================================================== -->

	<Style x:Key="{x:Type TextBox}"
		   TargetType="{x:Type TextBox}">
		<Setter Property="Padding"
				Value="0,1,0,1" />
		<Setter Property="Margin"
				Value="{StaticResource BorderMargin}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<Grid>
						<Border x:Name="BdNormal"
								Style="{StaticResource BorderNormal}"
								Background="{TemplateBinding Background}">
							<ScrollViewer x:Name="PART_ContentHost"
										  Margin="{TemplateBinding Padding}"
										  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Border>
						<Border x:Name="BdFocused"
								Style="{StaticResource BorderFocused}" />
					</Grid>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsFocused"
										   Value="True" />
								<Condition Property="IsEnabled"
										   Value="True" />
								<Condition Property="IsReadOnly"
										   Value="false" />
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource ShowBorderFocused}" />
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource HideBorderFocused}" />
							</MultiTrigger.ExitActions>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsFocused"
										   Value="True" />
								<Condition Property="IsEnabled"
										   Value="True" />
								<Condition Property="IsReadOnly"
										   Value="True" />
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource BorderNormalHit}" />
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource BorderNormalUnhit}" />
							</MultiTrigger.ExitActions>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver"
										   Value="True" />
								<Condition Property="IsKeyboardFocusWithin"
										   Value="false" />
								<Condition Property="IsEnabled"
										   Value="True" />
								<Condition Property="IsReadOnly"
										   Value="false" />
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource BorderNormalHit}" />
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource BorderNormalUnhit}" />
							</MultiTrigger.ExitActions>
						</MultiTrigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Foreground"
									Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="NumericUpDown"
		   BasedOn="{StaticResource {x:Type TextBox}}"
		   TargetType="{x:Type TextBox}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<Grid>
						<Border x:Name="BdNormal"
								Style="{StaticResource BorderNormal}"
								Background="{TemplateBinding Background}">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto"
													  MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
								</Grid.ColumnDefinitions>
								<ScrollViewer x:Name="PART_ContentHost"
											  Margin="{TemplateBinding Padding}"
											  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								<Grid Name="Buttons"
									  Grid.Column="1"
									  Visibility="Hidden"
									  SnapsToDevicePixels="true">
									<Grid.RowDefinitions>
										<RowDefinition Height="*" />
										<RowDefinition Height="*" />
									</Grid.RowDefinitions>
									<RepeatButton Name="UpButton"
												  Grid.Row="0"
												  Style="{StaticResource ScrollBarButton}"
												  Background="{StaticResource VerticalScrollButtonBrush}"
												  Foreground="{StaticResource VerticalScrollButtonHilitedBrush}"
												  Command="{x:Static ScrollBar.LineUpCommand}">
										<Path Fill="{StaticResource ScrollButtonGlyphBrush}"
											  Data="{StaticResource ScrollButtonUpArrow}" />
									</RepeatButton>
									<RepeatButton Name="DownButton"
												  Grid.Row="1"
												  Style="{StaticResource ScrollBarButton}"
												  Background="{StaticResource VerticalScrollButtonBrush}"
												  Foreground="{StaticResource VerticalScrollButtonHilitedBrush}"
												  Command="{x:Static ScrollBar.LineDownCommand}">
										<Path Fill="{StaticResource ScrollButtonGlyphBrush}"
											  Data="{StaticResource ScrollButtonDownArrow}" />
									</RepeatButton>
								</Grid>
							</Grid>
						</Border>
						<Border x:Name="BdFocused"
								Style="{StaticResource BorderFocused}" />
					</Grid>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsFocused"
										   Value="True" />
								<Condition Property="IsEnabled"
										   Value="True" />
								<Condition Property="IsReadOnly"
										   Value="false" />
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource ShowBorderFocused}" />
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource HideBorderFocused}" />
							</MultiTrigger.ExitActions>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsFocused"
										   Value="True" />
								<Condition Property="IsEnabled"
										   Value="True" />
								<Condition Property="IsReadOnly"
										   Value="True" />
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource BorderNormalHit}" />
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource BorderNormalUnhit}" />
							</MultiTrigger.ExitActions>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver"
										   Value="True" />
								<Condition Property="IsKeyboardFocusWithin"
										   Value="false" />
								<Condition Property="IsEnabled"
										   Value="True" />
								<Condition Property="IsReadOnly"
										   Value="false" />
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource BorderNormalHit}" />
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource BorderNormalUnhit}" />
							</MultiTrigger.ExitActions>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver"
										   Value="True" />
								<Condition Property="IsEnabled"
										   Value="True" />
								<Condition Property="IsReadOnly"
										   Value="false" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Buttons"
									Property="Visibility"
									Value="Visible" />
						</MultiTrigger>
						<Trigger Property="IsReadOnly"
								 Value="True">
							<Setter TargetName="Buttons"
									Property="Visibility"
									Value="Collapsed" />
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="False">
							<Setter Property="Foreground"
									Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- =========================================================================== -->
	<!-- ListBox                                                                     -->
	<!-- =========================================================================== -->

	<Style x:Key="{x:Type ListBox}"
		   TargetType="{x:Type ListBox}">
		<Setter Property="Padding"
				Value="0" />
		<Setter Property="Margin"
				Value="{StaticResource BorderMargin}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBox}">
					<Grid>
						<Border x:Name="BdNormal"
								Style="{StaticResource BorderNormal}"
								Background="{TemplateBinding Background}">
							<ScrollViewer Name="ScrollHost"
										  Padding="{TemplateBinding Padding}">
								<ItemsPresenter Name="ItemsHost"
												SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</ScrollViewer>
						</Border>
						<Border x:Name="BdFocused"
								Style="{StaticResource BorderFocused}" />
					</Grid>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsKeyboardFocusWithin"
										   Value="True" />
								<Condition Property="IsEnabled"
										   Value="True" />
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource ShowBorderFocused}" />
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource HideBorderFocused}" />
							</MultiTrigger.ExitActions>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver"
										   Value="True" />
								<Condition Property="IsKeyboardFocusWithin"
										   Value="false" />
								<Condition Property="IsEnabled"
										   Value="True" />
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource BorderNormalHit}" />
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource BorderNormalUnhit}" />
							</MultiTrigger.ExitActions>
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- =========================================================================== -->
	<!-- ListView                                                                    -->
	<!-- =========================================================================== -->

	<Style x:Key="{x:Type ListView}"
		   BasedOn="{StaticResource {x:Type ListBox}}"
		   TargetType="{x:Type ListView}" />

	<ControlTemplate x:Key="ListViewGridTemplate"
					 TargetType="{x:Type ListView}">
		<Grid>
			<Border x:Name="BdNormal"
					Style="{StaticResource BorderNormal}"
					Background="{TemplateBinding Background}">
				<ScrollViewer Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}"
							  Padding="{TemplateBinding Padding}">
					<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
				</ScrollViewer>
			</Border>
			<Border x:Name="BdFocused"
					Style="{StaticResource BorderFocused}" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsGrouping"
					 Value="True">
				<Setter Property="ScrollViewer.CanContentScroll"
						Value="false" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsKeyboardFocusWithin"
							   Value="True" />
					<Condition Property="IsEnabled"
							   Value="True" />
				</MultiTrigger.Conditions>
				<MultiTrigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource ShowBorderFocused}" />
				</MultiTrigger.EnterActions>
				<MultiTrigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource HideBorderFocused}" />
				</MultiTrigger.ExitActions>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver"
							   Value="True" />
					<Condition Property="IsKeyboardFocusWithin"
							   Value="false" />
					<Condition Property="IsEnabled"
							   Value="True" />
				</MultiTrigger.Conditions>
				<MultiTrigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource BorderNormalHit}" />
				</MultiTrigger.EnterActions>
				<MultiTrigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource BorderNormalUnhit}" />
				</MultiTrigger.ExitActions>
			</MultiTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style x:Key="ListViewGrid"
		   BasedOn="{StaticResource {x:Type ListBox}}"
		   TargetType="{x:Type ListView}">
		<Setter Property="Template"
				Value="{StaticResource ListViewGridTemplate}" />
	</Style>

	<!-- =========================================================================== -->

	<ControlTemplate x:Key="ListViewItemTemplate"
					 TargetType="{x:Type ListBoxItem}">
		<Border Background="{TemplateBinding Background}"
				BorderBrush="{TemplateBinding BorderBrush}"
				BorderThickness="{TemplateBinding BorderThickness}"
				SnapsToDevicePixels="True">
			<Grid Background="Transparent">
				<Rectangle Name="Bg"
						   Fill="Transparent"
						   Stroke="Transparent"
						   StrokeThickness="{StaticResource ItemSelectionStroke}"
						   RadiusX="{StaticResource ItemSelectionRounding}"
						   RadiusY="{StaticResource ItemSelectionRounding}" />
				<Rectangle Name="InnerBorder"
						   Margin="1"
						   Opacity="{StaticResource ItemSelectionInnerOpacity}"
						   RadiusX="{StaticResource ItemSelectionRounding}"
						   RadiusY="{StaticResource ItemSelectionRounding}" />
				<ContentPresenter Margin="{TemplateBinding Padding}"
								  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
								  UseLayoutRounding="{TemplateBinding UseLayoutRounding}" />
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="Focusable"
							   Value="True" />
					<Condition Property="IsMouseOver"
							   Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Bg"
						Property="Fill"
						Value="{StaticResource ItemHighlitedFillBrush}" />
				<Setter TargetName="Bg"
						Property="Stroke"
						Value="{StaticResource ItemHighlitedOuterBrush}" />
				<Setter TargetName="InnerBorder"
						Property="Stroke"
						Value="{StaticResource ItemSelectionInnerBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="Focusable"
							   Value="True" />
					<Condition Property="IsSelected"
							   Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Bg"
						Property="Fill"
						Value="{StaticResource ItemSelectedFillBrush}" />
				<Setter TargetName="Bg"
						Property="Stroke"
						Value="{StaticResource ItemSelectedOuterBrush}" />
				<Setter TargetName="InnerBorder"
						Property="Stroke"
						Value="{StaticResource ItemSelectionInnerBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="Focusable"
							   Value="True" />
					<Condition Property="IsSelected"
							   Value="True" />
					<Condition Property="Selector.IsSelectionActive"
							   Value="False" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Bg"
						Property="Fill"
						Value="{StaticResource ItemUnfocusedFillBrush}" />
				<Setter TargetName="Bg"
						Property="Stroke"
						Value="{StaticResource ItemUnfocusedOuterBrush}" />
				<Setter TargetName="InnerBorder"
						Property="Stroke"
						Value="{StaticResource ItemSelectionInnerBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="Focusable"
							   Value="True" />
					<Condition Property="IsSelected"
							   Value="True" />
					<Condition Property="IsMouseOver"
							   Value="True" />
					<Condition Property="Selector.IsSelectionActive"
							   Value="False" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Bg"
						Property="Fill"
						Value="{StaticResource ItemSelectedFillBrush}" />
				<Setter TargetName="Bg"
						Property="Stroke"
						Value="{StaticResource ItemSelectedOuterBrush}" />
				<Setter TargetName="InnerBorder"
						Property="Stroke"
						Value="{StaticResource ItemSelectionInnerBrush}" />
			</MultiTrigger>
			<Trigger Property="IsEnabled"
					 Value="false">
				<Setter Property="Foreground"
						Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<ControlTemplate x:Key="ListViewGridItemTemplate"
					 TargetType="{x:Type ListViewItem}">
		<Border Background="{TemplateBinding Background}"
				BorderBrush="{TemplateBinding BorderBrush}"
				BorderThickness="{TemplateBinding BorderThickness}"
				SnapsToDevicePixels="True">
			<Grid Background="Transparent">
				<Rectangle Name="Bg"
						   Fill="Transparent"
						   Stroke="Transparent"
						   StrokeThickness="{StaticResource ItemSelectionStroke}"
						   RadiusX="{StaticResource ItemSelectionRounding}"
						   RadiusY="{StaticResource ItemSelectionRounding}" />
				<Rectangle Name="InnerBorder"
						   Margin="1"
						   Opacity="{StaticResource ItemSelectionInnerOpacity}"
						   RadiusX="{StaticResource ItemSelectionRounding}"
						   RadiusY="{StaticResource ItemSelectionRounding}" />
				<GridViewRowPresenter Columns="{TemplateBinding GridView.ColumnCollection}"
									  Content="{TemplateBinding Content}"
									  Margin="{TemplateBinding Padding}"
									  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="Focusable"
							   Value="True" />
					<Condition Property="IsMouseOver"
							   Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Bg"
						Property="Fill"
						Value="{StaticResource ItemHighlitedFillBrush}" />
				<Setter TargetName="Bg"
						Property="Stroke"
						Value="{StaticResource ItemHighlitedOuterBrush}" />
				<Setter TargetName="InnerBorder"
						Property="Stroke"
						Value="{StaticResource ItemSelectionInnerBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="Focusable"
							   Value="True" />
					<Condition Property="IsSelected"
							   Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Bg"
						Property="Fill"
						Value="{StaticResource ItemSelectedFillBrush}" />
				<Setter TargetName="Bg"
						Property="Stroke"
						Value="{StaticResource ItemSelectedOuterBrush}" />
				<Setter TargetName="InnerBorder"
						Property="Stroke"
						Value="{StaticResource ItemSelectionInnerBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="Focusable"
							   Value="True" />
					<Condition Property="IsSelected"
							   Value="True" />
					<Condition Property="Selector.IsSelectionActive"
							   Value="false" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Bg"
						Property="Fill"
						Value="{StaticResource ItemUnfocusedFillBrush}" />
				<Setter TargetName="Bg"
						Property="Stroke"
						Value="{StaticResource ItemUnfocusedOuterBrush}" />
				<Setter TargetName="InnerBorder"
						Property="Stroke"
						Value="{StaticResource ItemSelectionInnerBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="Focusable"
							   Value="True" />
					<Condition Property="IsSelected"
							   Value="True" />
					<Condition Property="IsMouseOver"
							   Value="True" />
					<Condition Property="Selector.IsSelectionActive"
							   Value="False" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Bg"
						Property="Fill"
						Value="{StaticResource ItemSelectedFillBrush}" />
				<Setter TargetName="Bg"
						Property="Stroke"
						Value="{StaticResource ItemSelectedOuterBrush}" />
				<Setter TargetName="InnerBorder"
						Property="Stroke"
						Value="{StaticResource ItemSelectionInnerBrush}" />
			</MultiTrigger>
			<Trigger Property="IsEnabled"
					 Value="false">
				<Setter Property="Foreground"
						Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style x:Key="{x:Type ListBoxItem}"
		   TargetType="{x:Type ListBoxItem}">
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="HorizontalContentAlignment"
				Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="VerticalContentAlignment"
				Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="Margin"
				Value="{StaticResource ItemSelectionMargin}" />
		<Setter Property="Padding"
				Value="{StaticResource ItemSelectionPadding}" />
		<Setter Property="Template"
				Value="{StaticResource ListViewItemTemplate}" />
	</Style>

	<Style x:Key="{x:Type ListViewItem}"
		   BasedOn="{StaticResource {x:Type ListBoxItem}}"
		   TargetType="{x:Type ListViewItem}">
	</Style>

	<Style x:Key="ListViewItemCommon"
		   BasedOn="{StaticResource {x:Type ListViewItem}}"
		   TargetType="{x:Type ListViewItem}">
	</Style>

	<Style x:Key="ListViewItemNpNm"
		   BasedOn="{StaticResource {x:Type ListViewItem}}"
		   TargetType="{x:Type ListViewItem}">
		<Setter Property="Margin"
				Value="0,0,0,0" />
		<Setter Property="Padding"
				Value="0,0,0,0" />
	</Style>

	<Style x:Key="ListViewGridItem"
		   BasedOn="{StaticResource {x:Type ListViewItem}}"
		   TargetType="{x:Type ListViewItem}">
		<Setter Property="Template"
				Value="{StaticResource ListViewGridItemTemplate}" />
	</Style>

	<!-- =========================================================================== -->
	<!-- TreeView                                                                    -->
	<!-- =========================================================================== -->

	<Style x:Key="{x:Type TreeView}"
		   TargetType="{x:Type TreeView}">
		<Setter Property="Padding"
				Value="0" />
		<Setter Property="Margin"
				Value="{StaticResource BorderMargin}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeView}">
					<Grid>
						<Border x:Name="BdNormal"
								Style="{StaticResource BorderNormal}"
								Background="{TemplateBinding Background}">
							<ScrollViewer Name="_tv_scrollviewer_"
										  Background="{TemplateBinding Background}"
										  Focusable="false"
										  CanContentScroll="false"
										  HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
										  VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
										  Padding="{TemplateBinding Padding}"
										  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
								<ItemsPresenter />
							</ScrollViewer>
						</Border>
						<Border x:Name="BdFocused"
								Style="{StaticResource BorderFocused}" />
					</Grid>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsKeyboardFocusWithin"
										   Value="True" />
								<Condition Property="IsEnabled"
										   Value="True" />
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource ShowBorderFocused}" />
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource HideBorderFocused}" />
							</MultiTrigger.ExitActions>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver"
										   Value="True" />
								<Condition Property="IsKeyboardFocusWithin"
										   Value="false" />
								<Condition Property="IsEnabled"
										   Value="True" />
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource BorderNormalHit}" />
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource BorderNormalUnhit}" />
							</MultiTrigger.ExitActions>
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- =========================================================================== -->
	<!-- TreeViewItem                                                                -->
	<!-- =========================================================================== -->

	<!--0 0 130-->
	<Color x:Key="TreeArrowBorder">#FF8A8A8A</Color>
	<!--0 0 220-->
	<Color x:Key="TreeArrowFill">#FFE9E9E9</Color>
	<!--0 0 50-->
	<Color x:Key="TreeArrowCheckedBorder">#FF353535</Color>
	<!--0 0 150-->
	<Color x:Key="TreeArrowCheckedFill">#FF9F9F9F</Color>
	<!--133 200 130-->
	<Color x:Key="TreeArrowHiliteBorder">#FF28ACEC</Color>
	<!--133 200 220-->
	<Color x:Key="TreeArrowHiliteFill">#FFD8F0FC</Color>
	<!--133 200 50-->
	<Color x:Key="TreeArrowCheckedHiliteBorder">#FF094562</Color>
	<!--133 200 100-->
	<!--<Color x:Key="TreeArrowCheckedHiliteFill">#FF1289C2</Color>-->

	<PathGeometry x:Key="TreeArrow">
		<PathGeometry.Figures>
			<PathFigureCollection>
				<PathFigure IsFilled="True"
							IsClosed="True"
							StartPoint="0 0">
					<PathFigure.Segments>
						<PathSegmentCollection>
							<LineSegment Point="0 6" />
							<LineSegment Point="6 0" />
						</PathSegmentCollection>
					</PathFigure.Segments>
				</PathFigure>
			</PathFigureCollection>
		</PathGeometry.Figures>
	</PathGeometry>

	<Style x:Key="ExpandCollapseToggleStyle"
		   TargetType="{x:Type ToggleButton}">
		<Setter Property="Focusable"
				Value="False" />
		<Setter Property="Width"
				Value="16" />
		<Setter Property="Height"
				Value="16" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Width="16"
							Height="16"
							Background="Transparent">
						<Path x:Name="ExpandPath"
							  Fill="#FFE9E9E9"
							  Stroke="#FF8A8A8A"
							  StrokeThickness="0.8"
							  StrokeLineJoin="Miter"
							  StrokeMiterLimit="3"
							  HorizontalAlignment="Center"
							  VerticalAlignment="Center"
							  SnapsToDevicePixels="False"
							  UseLayoutRounding="False"
							  Data="{StaticResource TreeArrow}">
							<Path.RenderTransform>
								<RotateTransform Angle="135"
												 CenterX="3"
												 CenterY="3" />
							</Path.RenderTransform>
						</Path>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked"
								 Value="True">
							<Setter TargetName="ExpandPath"
									Property="RenderTransform">
								<Setter.Value>
									<RotateTransform Angle="180"
													 CenterX="3"
													 CenterY="3" />
								</Setter.Value>
							</Setter>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver"
										   Value="False" />
								<Condition Property="IsChecked"
										   Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="ExpandPath"
									Property="Stroke"
									Value="#FF353535" />
							<Setter TargetName="ExpandPath"
									Property="Fill"
									Value="#FF9F9F9F" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver"
										   Value="True" />
								<Condition Property="IsChecked"
										   Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="ExpandPath"
									Property="Stroke"
									Value="#FF28ACEC" />
							<Setter TargetName="ExpandPath"
									Property="Fill"
									Value="#FFD8F0FC" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver"
										   Value="True" />
								<Condition Property="IsChecked"
										   Value="False" />
							</MultiTrigger.Conditions>
							<Setter TargetName="ExpandPath"
									Property="Stroke"
									Value="#FF28ACEC" />
							<Setter TargetName="ExpandPath"
									Property="Fill"
									Value="#FFD8F0FC" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Type TreeViewItem}"
		   TargetType="{x:Type TreeViewItem}">
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="HorizontalContentAlignment"
				Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="VerticalContentAlignment"
				Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="Margin"
				Value="{StaticResource ItemSelectionMargin}" />
		<Setter Property="Padding"
				Value="{StaticResource ItemSelectionPadding}" />
		<Setter Property="Foreground"
				Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeViewItem}">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition MinWidth="16"
											  Width="Auto" />
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition />
						</Grid.RowDefinitions>
						<ToggleButton x:Name="Expander"
									  Style="{StaticResource ExpandCollapseToggleStyle}"
									  IsChecked="{Binding Path=IsExpanded,RelativeSource={RelativeSource TemplatedParent}}"
									  ClickMode="Press" />
						<Border Name="HeaderBorder"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								SnapsToDevicePixels="True"
								Grid.Column="1">
							<Grid Background="Transparent">
								<Rectangle Name="Bg"
										   Fill="Transparent"
										   Stroke="Transparent"
										   StrokeThickness="{StaticResource ItemSelectionStroke}"
										   RadiusX="{StaticResource ItemSelectionRounding}"
										   RadiusY="{StaticResource ItemSelectionRounding}" />
								<Rectangle Name="InnerBorder"
										   Margin="1"
										   Opacity="{StaticResource ItemSelectionInnerOpacity}"
										   RadiusX="{StaticResource ItemSelectionRounding}"
										   RadiusY="{StaticResource ItemSelectionRounding}" />
								<ContentPresenter x:Name="PART_Header"
												  ContentSource="Header"
												  Margin="{TemplateBinding Padding}"
												  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
												  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
												  UseLayoutRounding="{TemplateBinding UseLayoutRounding}" />
							</Grid>
						</Border>
						<ItemsPresenter x:Name="ItemsHost"
										Grid.Row="1"
										Grid.Column="1"
										Grid.ColumnSpan="2" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsExpanded"
								 Value="false">
							<Setter TargetName="ItemsHost"
									Property="Visibility"
									Value="Collapsed" />
						</Trigger>
						<Trigger Property="HasItems"
								 Value="false">
							<Setter TargetName="Expander"
									Property="Visibility"
									Value="Collapsed" />
							<Setter TargetName="HeaderBorder"
									Property="Grid.Column"
									Value="0" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition SourceName="PART_Header"
										   Property="IsMouseOver"
										   Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Bg"
									Property="Fill"
									Value="{StaticResource ItemHighlitedFillBrush}" />
							<Setter TargetName="Bg"
									Property="Stroke"
									Value="{StaticResource ItemHighlitedOuterBrush}" />
							<Setter TargetName="InnerBorder"
									Property="Stroke"
									Value="{StaticResource ItemSelectionInnerBrush}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected"
										   Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Bg"
									Property="Fill"
									Value="{StaticResource ItemSelectedFillBrush}" />
							<Setter TargetName="Bg"
									Property="Stroke"
									Value="{StaticResource ItemSelectedOuterBrush}" />
							<Setter TargetName="InnerBorder"
									Property="Stroke"
									Value="{StaticResource ItemSelectionInnerBrush}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected"
										   Value="True" />
								<Condition Property="Selector.IsSelectionActive"
										   Value="false" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Bg"
									Property="Fill"
									Value="{StaticResource ItemUnfocusedFillBrush}" />
							<Setter TargetName="Bg"
									Property="Stroke"
									Value="{StaticResource ItemUnfocusedOuterBrush}" />
							<Setter TargetName="InnerBorder"
									Property="Stroke"
									Value="{StaticResource ItemSelectionInnerBrush}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected"
										   Value="True" />
								<Condition SourceName="PART_Header"
										   Property="IsMouseOver"
										   Value="True" />
								<Condition Property="Selector.IsSelectionActive"
										   Value="False" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Bg"
									Property="Fill"
									Value="{StaticResource ItemSelectedFillBrush}" />
							<Setter TargetName="Bg"
									Property="Stroke"
									Value="{StaticResource ItemSelectedOuterBrush}" />
							<Setter TargetName="InnerBorder"
									Property="Stroke"
									Value="{StaticResource ItemSelectionInnerBrush}" />
						</MultiTrigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Foreground"
									Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="VirtualizingStackPanel.IsVirtualizing"
					 Value="True">
				<Setter Property="ItemsPanel">
					<Setter.Value>
						<ItemsPanelTemplate>
							<VirtualizingStackPanel />
						</ItemsPanelTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- =========================================================================== -->
	<!-- ComboBox                                                                    -->
	<!-- =========================================================================== -->

	<Style x:Key="ComboBoxReadonlyToggleButton"
		   TargetType="{x:Type ToggleButton}">
		<Setter Property="OverridesDefaultStyle"
				Value="True" />
		<Setter Property="IsTabStop"
				Value="false" />
		<Setter Property="Focusable"
				Value="false" />
		<Setter Property="ClickMode"
				Value="Press" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Grid Background="Transparent"
						  SnapsToDevicePixels="True"
						  UseLayoutRounding="False">
						<Rectangle Name="Glow"
								   Fill="White"
								   Opacity="0"
								   RadiusX="3"
								   RadiusY="3"
								   Margin="{StaticResource ToggleButtonGlowMargin}"
								   Effect="{StaticResource ToggleButtonGlowEffect}"
								   ClipToBounds="False" />
						<Border Name="Chrome"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{StaticResource PushButtonBorderThickness}"
								CornerRadius="{StaticResource PushButtonRounding}"
								Padding="{StaticResource PushButtonBorderPadding}" />
						<Border Name="Highlite"
								Background="{StaticResource PushButtonHighlitedFillBrush}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{StaticResource PushButtonBorderThickness}"
								CornerRadius="{StaticResource PushButtonRounding}"
								Padding="{StaticResource PushButtonBorderPadding}"
								Opacity="0" />
						<Border Background="Transparent"
								BorderBrush="Transparent"
								BorderThickness="{StaticResource PushButtonBorderThickness}"
								CornerRadius="{StaticResource PushButtonRounding}"
								Padding="{StaticResource PushButtonBorderPadding}">
							<Grid Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
								  HorizontalAlignment="Right">
								<Path Name="Arrow"
									  Margin="3,1,0,0"
									  Fill="Black"
									  Data="{StaticResource MenuDownArrow}"
									  HorizontalAlignment="Center"
									  VerticalAlignment="Center" />
							</Grid>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver"
								 Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="Highlite"
														 Storyboard.TargetProperty="Opacity"
														 Duration="{StaticResource StateAnimationDuration}"
														 To="1" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="Highlite"
														 Storyboard.TargetProperty="Opacity"
														 Duration="{StaticResource StateAnimationDuration}"
														 To="0" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
						<Trigger Property="IsChecked"
								 Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="Glow"
														 Storyboard.TargetProperty="Opacity"
														 Duration="{StaticResource StateAnimationDuration}"
														 To="1" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="Glow"
														 Storyboard.TargetProperty="Opacity"
														 Duration="{StaticResource StateAnimationDuration}"
														 To="0" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter TargetName="Arrow"
									Property="Fill"
									Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Type ComboBox}"
		   TargetType="{x:Type ComboBox}">
		<Setter Property="FocusVisualStyle"
				Value="{StaticResource PushButtonFocusVisual}" />
		<Setter Property="Background"
				Value="{StaticResource PushButtonFillBrush}" />
		<Setter Property="BorderBrush"
				Value="{StaticResource PushButtonBorderBrush}" />
		<Setter Property="BorderThickness"
				Value="{StaticResource PushButtonBorderThickness}" />
		<Setter Property="Padding"
				Value="4,3" />
		<Setter Property="Foreground"
				Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
				Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility"
				Value="Auto" />
		<Setter Property="ScrollViewer.CanContentScroll"
				Value="True" />
		<Setter Property="ScrollViewer.PanningMode"
				Value="Both" />
		<Setter Property="Stylus.IsFlicksEnabled"
				Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBox}">
					<Grid Name="MainGrid"
						  SnapsToDevicePixels="True">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition
									MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
											  Width="0" />
						</Grid.ColumnDefinitions>
						<Popup Name="PART_Popup"
							   AllowsTransparency="True"
							   Grid.ColumnSpan="2"
							   Placement="Bottom"
							   HorizontalOffset="10"
							   VerticalOffset="3"
							   MaxHeight="{TemplateBinding MaxDropDownHeight}"
							   IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
							   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
							<Border x:Name="DropDownBorder"
									Margin="10"
									BorderThickness="1"
									BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
									Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
								<Border.Effect>
									<DropShadowEffect Color="Black"
													  ShadowDepth="3"
													  Opacity="0.5" />
								</Border.Effect>
								<ScrollViewer Name="DropDownScrollViewer">
									<Grid RenderOptions.ClearTypeHint="Enabled">
										<Canvas Height="0"
												Width="0"
												HorizontalAlignment="Left"
												VerticalAlignment="Top">
											<Rectangle Name="ClearTypeOpaqueBase"
													   ClipToBounds="True"
													   Height="{Binding ElementName=DropDownBorder,Path=ActualHeight}"
													   Width="{Binding ElementName=DropDownBorder,Path=ActualWidth}"
													   Fill="{Binding ElementName=DropDownBorder,Path=Background}" />
										</Canvas>
										<ItemsPresenter Name="ItemsPresenter"
														KeyboardNavigation.DirectionalNavigation="Contained"
														SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
									</Grid>
								</ScrollViewer>
							</Border>
						</Popup>
						<ToggleButton Grid.ColumnSpan="2"
									  Background="{TemplateBinding Background}"
									  BorderBrush="{TemplateBinding BorderBrush}"
									  Style="{StaticResource ComboBoxReadonlyToggleButton}"
									  IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" />
						<ContentPresenter IsHitTestVisible="false"
										  Margin="{TemplateBinding Padding}"
										  Content="{TemplateBinding SelectionBoxItem}"
										  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
										  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
										  ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										  UseLayoutRounding="{TemplateBinding UseLayoutRounding}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger SourceName="PART_Popup"
								 Property="Popup.HasDropShadow"
								 Value="false">
							<Setter TargetName="DropDownBorder"
									Property="Effect"
									Value="{x:Null}" />
						</Trigger>
						<Trigger Property="HasItems"
								 Value="false">
							<Setter TargetName="DropDownBorder"
									Property="Height"
									Value="95" />
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Foreground"
									Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
						</Trigger>
						<Trigger Property="IsGrouping"
								 Value="True">
							<Setter Property="ScrollViewer.CanContentScroll"
									Value="false" />
						</Trigger>
						<Trigger SourceName="DropDownScrollViewer"
								 Property="ScrollViewer.CanContentScroll"
								 Value="false">
							<Setter TargetName="ClearTypeOpaqueBase"
									Property="Canvas.Top"
									Value="{Binding ElementName=DropDownScrollViewer, Path=VerticalOffset}" />
							<Setter TargetName="ClearTypeOpaqueBase"
									Property="Canvas.Left"
									Value="{Binding ElementName=DropDownScrollViewer, Path=HorizontalOffset}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- =========================================================================== -->
	<!-- ComboBoxItem                                                                -->
	<!-- =========================================================================== -->

	<Style x:Key="{x:Type ComboBoxItem}"
		   TargetType="{x:Type ComboBoxItem}">
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="HorizontalContentAlignment"
				Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="VerticalContentAlignment"
				Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="Margin"
				Value="{StaticResource ItemSelectionMargin}" />
		<Setter Property="Padding"
				Value="{StaticResource ItemSelectionPadding}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBoxItem}">
					<Border Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="True">
						<Grid Background="Transparent">
							<Rectangle Name="Bg"
									   Fill="Transparent"
									   Stroke="Transparent"
									   StrokeThickness="{StaticResource ItemSelectionStroke}"
									   RadiusX="{StaticResource ItemSelectionRounding}"
									   RadiusY="{StaticResource ItemSelectionRounding}" />
							<Rectangle Name="InnerBorder"
									   Margin="1"
									   Opacity="{StaticResource ItemSelectionInnerOpacity}"
									   RadiusX="{StaticResource ItemSelectionRounding}"
									   RadiusY="{StaticResource ItemSelectionRounding}" />
							<ContentPresenter Margin="{TemplateBinding Padding}"
											  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
											  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
											  UseLayoutRounding="{TemplateBinding UseLayoutRounding}" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver"
										   Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Bg"
									Property="Fill"
									Value="{StaticResource ItemHighlitedFillBrush}" />
							<Setter TargetName="Bg"
									Property="Stroke"
									Value="{StaticResource ItemHighlitedOuterBrush}" />
							<Setter TargetName="InnerBorder"
									Property="Stroke"
									Value="{StaticResource ItemSelectionInnerBrush}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected"
										   Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Bg"
									Property="Fill"
									Value="{StaticResource ItemSelectedFillBrush}" />
							<Setter TargetName="Bg"
									Property="Stroke"
									Value="{StaticResource ItemSelectedOuterBrush}" />
							<Setter TargetName="InnerBorder"
									Property="Stroke"
									Value="{StaticResource ItemSelectionInnerBrush}" />
						</MultiTrigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Foreground"
									Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- =========================================================================== -->

</ResourceDictionary>