<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:theme="clr-namespace:DoubleAgent.Theme">

	<!-- =========================================================================== -->
	<!-- ToolBar                                                                     -->
	<!-- =========================================================================== -->

	<Color x:Key="{x:Static theme:BlueTheme.ToolBarLightFillColorKey}">#FFF7F7FF</Color>
	<Color x:Key="{x:Static theme:BlueTheme.ToolBarMediumFillColorKey}">#FFD6DBE7</Color>
	<Color x:Key="{x:Static theme:BlueTheme.ToolBarDarkFillColorKey}">#FF99CCFF</Color>
	<Color x:Key="{x:Static theme:BlueTheme.ToolBarDisabledFillColorKey}">#FFF7F7F7</Color>
	<Color x:Key="{x:Static theme:BlueTheme.ToolBarDisabledBorderColorKey}">#FFB5B2B5</Color>
	<Color x:Key="{x:Static theme:BlueTheme.ToolBarSeparatorFillColorKey}">#FFC6C6C6</Color>

	<SolidColorBrush x:Key="{x:Static theme:BlueTheme.ToolBarLightFillBrushKey}"
					 Color="{StaticResource {x:Static theme:BlueTheme.ToolBarLightFillColorKey}}" />
	<SolidColorBrush x:Key="{x:Static theme:BlueTheme.ToolBarMediumFillBrushKey}"
					 Color="{StaticResource {x:Static theme:BlueTheme.ToolBarMediumFillColorKey}}" />
	<SolidColorBrush x:Key="{x:Static theme:BlueTheme.ToolBarDarkFillBrushKey}"
					 Color="{StaticResource {x:Static theme:BlueTheme.ToolBarDarkFillColorKey}}" />
	<SolidColorBrush x:Key="{x:Static theme:BlueTheme.ToolBarDisabledFillBrushKey}"
					 Color="{StaticResource {x:Static theme:BlueTheme.ToolBarDisabledFillColorKey}}" />
	<SolidColorBrush x:Key="{x:Static theme:BlueTheme.ToolBarDisabledBorderBrushKey}"
					 Color="{StaticResource {x:Static theme:BlueTheme.ToolBarDisabledBorderColorKey}}" />
	<SolidColorBrush x:Key="{x:Static theme:BlueTheme.ToolBarSeparatorFillBrushKey}"
					 Color="{StaticResource {x:Static theme:BlueTheme.ToolBarSeparatorFillColorKey}}" />

	<Color x:Key="{x:Static theme:BlueTheme.ToolBarButtonBorderColorKey}">#FFB1D5F8</Color>
	<!--140 200 200-->
	<Color x:Key="{x:Static theme:BlueTheme.ToolBarButtonTopColorKey}">#FFEDF4FC</Color>
	<!--140 180 230-->
	<Color x:Key="{x:Static theme:BlueTheme.ToolBarButtonBottomColorKey}">#FFC8DFF7</Color>
	<!--140 180 210-->
	<Color x:Key="{x:Static theme:BlueTheme.ToolBarButtonHoverBorderColorKey}">#FF8ABFF4</Color>
	<!--140 200 180-->
	<Color x:Key="{x:Static theme:BlueTheme.ToolBarButtonHoverTopColorKey}">#FFF5FAFE</Color>
	<!--140 180 235-->
	<Color x:Key="{x:Static theme:BlueTheme.ToolBarButtonHoverBottomColorKey}">#FFDAEAFA</Color>
	<!--140 180 220-->
	<Color x:Key="{x:Static theme:BlueTheme.ToolBarButtonPressedBorderColorKey}">#FF3399FF</Color>
	<!--140 240 144-->
	<Color x:Key="{x:Static theme:BlueTheme.ToolBarButtonPressedTopColor}">#FFE3EFFB</Color>
	<!--140 180 225-->
	<Color x:Key="{x:Static theme:BlueTheme.ToolBarButtonPressedBottomColorKey}">#FFB5D5F4</Color>
	<!--140 180 200-->
	<Color x:Key="{x:Static theme:BlueTheme.ToolBarButtonCheckedBorderColorKey}">#FF3399FF</Color>
	<!--140 240 144-->
	<Color x:Key="{x:Static theme:BlueTheme.ToolBarButtonCheckedTopColorKey}">#FFD5EAFF</Color>
	<!--140 240 220-->
	<Color x:Key="{x:Static theme:BlueTheme.ToolBarButtonCheckedBottomColorKey}">#FFAAD5FF</Color>
	<!--140 240 200-->

	<SolidColorBrush x:Key="{x:Static theme:BlueTheme.ToolBarButtonBorderBrushKey}"
					 Color="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonBorderColorKey}}" />
	<LinearGradientBrush x:Key="{x:Static theme:BlueTheme.ToolBarButtonFillBrushKey}"
						 StartPoint="0,0"
						 EndPoint="0,1">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonTopColorKey}}"
						  Offset="0" />
			<GradientStop Color="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonBottomColorKey}}"
						  Offset="1" />
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>
	<SolidColorBrush x:Key="{x:Static theme:BlueTheme.ToolBarButtonHoverBorderBrushKey}"
					 Color="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonHoverBorderColorKey}}" />
	<LinearGradientBrush x:Key="{x:Static theme:BlueTheme.ToolBarButtonHoverBrushKey}"
						 StartPoint="0,0"
						 EndPoint="0,1">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonHoverTopColorKey}}"
						  Offset="0" />
			<GradientStop Color="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonHoverBottomColorKey}}"
						  Offset="1" />
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>
	<SolidColorBrush x:Key="{x:Static theme:BlueTheme.ToolBarButtonCheckedBorderBrushKey}"
					 Color="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonCheckedBorderColorKey}}" />
	<LinearGradientBrush x:Key="{x:Static theme:BlueTheme.ToolBarButtonCheckedBrushKey}"
						 StartPoint="0,0"
						 EndPoint="0,1">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonCheckedTopColorKey}}"
						  Offset="0" />
			<GradientStop Color="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonCheckedBottomColorKey}}"
						  Offset="1" />
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>
	<SolidColorBrush x:Key="{x:Static theme:BlueTheme.ToolBarButtonPressedBorderBrushKey}"
					 Color="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonPressedBorderColorKey}}" />
	<LinearGradientBrush x:Key="{x:Static theme:BlueTheme.ToolBarButtonPressedBrushKey}"
						 StartPoint="0,0"
						 EndPoint="0,1">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonPressedTopColor}}"
						  Offset="0" />
			<GradientStop Color="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonPressedBottomColorKey}}"
						  Offset="1" />
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>

	<Thickness x:Key="{x:Static theme:BlueTheme.ToolBarButtonGlowMarginKey}">-1,-1,-1,-1</Thickness>
	<BlurEffect x:Key="{x:Static theme:BlueTheme.ToolBarButtonGlowEffectKey}"
				Radius="3"
				RenderingBias="Quality"
				KernelType="Gaussian" />

	<!-- =========================================================================== -->

	<Style x:Key="{x:Type ToolBar}"
		   TargetType="{x:Type ToolBar}">
		<Setter Property="Background"
				Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ToolBarTray}, Path=Background}" />
	</Style>

	<!--<Style x:Key="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type Thumb}, ResourceId=ToolBarThumbStyle}"
		   TargetType="{x:Type Thumb}">
		<Setter Property="Thumb.Visibility"
				Value="Collapsed" />
	</Style>-->

	<!--<Style x:Key="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type ToggleButton}, ResourceId=ToolBarHorizontalOverflowButtonStyle}"
		   TargetType="{x:Type ToggleButton}">
		<Setter Property="ToggleButton.Visibility"
				Value="Collapsed" />
	</Style>-->

	<Style x:Key="{x:Static ToolBar.SeparatorStyleKey}"
		   TargetType="{x:Type Separator}">
		<Setter Property="Background"
				Value="{StaticResource {x:Static theme:BlueTheme.ToolBarSeparatorFillBrushKey}}" />
		<Setter Property="MinWidth"
				Value="1" />
		<Setter Property="MinHeight"
				Value="1" />
		<Setter Property="Margin"
				Value="2,2,2,2" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Separator}">
					<Border Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="true" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- =========================================================================== -->
	<!-- ToolBar Buttons                                                             -->
	<!-- =========================================================================== -->

	<Style x:Key="{x:Static ToolBar.ButtonStyleKey}"
		   TargetType="{x:Type ButtonBase}">
		<Setter Property="OverridesDefaultStyle"
				Value="true" />
		<Setter Property="Foreground"
				Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
		<Setter Property="Margin"
				Value="1,0,1,0" />
		<Setter Property="Padding"
				Value="3" />
		<Setter Property="BorderThickness"
				Value="0" />
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="BorderBrush"
				Value="Transparent" />
		<Setter Property="HorizontalAlignment"
				Value="Center" />
		<Setter Property="VerticalAlignment"
				Value="Center" />
		<Setter Property="HorizontalContentAlignment"
				Value="Center" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="Focusable"
				Value="False" />
		<Setter Property="IsTabStop"
				Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<Border Name="Bd"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="true">
						<Grid Background="Transparent">
							<Rectangle Name="Glow"
									   Opacity="0"
									   ClipToBounds="False"
									   Fill="White"
									   Stroke="White"
									   StrokeThickness="{DynamicResource {x:Static theme:BlueTheme.SelectionStrokeKey}}"
									   RadiusX="{DynamicResource {x:Static theme:BlueTheme.SelectionRoundingKey}}"
									   RadiusY="{DynamicResource {x:Static theme:BlueTheme.SelectionRoundingKey}}"
									   Margin="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonGlowMarginKey}}"
									   Effect="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonGlowEffectKey}}" />
							<Rectangle Name="Bg"
									   Fill="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonFillBrushKey}}"
									   Stroke="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonBorderBrushKey}}"
									   StrokeThickness="{DynamicResource {x:Static theme:BlueTheme.SelectionStrokeKey}}"
									   RadiusX="{DynamicResource {x:Static theme:BlueTheme.SelectionRoundingKey}}"
									   RadiusY="{DynamicResource {x:Static theme:BlueTheme.SelectionRoundingKey}}" />
							<Rectangle Name="InnerBorder"
									   Margin="1"
									   Opacity="{DynamicResource {x:Static theme:BlueTheme.SelectionInnerOpacityKey}}"
									   Stroke="{DynamicResource {x:Static theme:BlueTheme.SelectionInnerBrushKey}}"
									   RadiusX="{DynamicResource {x:Static theme:BlueTheme.SelectionRoundingKey}}"
									   RadiusY="{DynamicResource {x:Static theme:BlueTheme.SelectionRoundingKey}}" />
							<ContentPresenter Margin="{TemplateBinding Padding}"
											  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
											  SnapsToDevicePixels="False"
											  UseLayoutRounding="False" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver"
								 Value="true">
							<Setter TargetName="Bg"
									Property="Stroke"
									Value="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonHoverBorderBrushKey}}" />
							<Setter TargetName="Bg"
									Property="Fill"
									Value="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonHoverBrushKey}}" />
						</Trigger>
						<Trigger Property="IsKeyboardFocused"
								 Value="true">
							<Setter TargetName="Bg"
									Property="Stroke"
									Value="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonHoverBorderBrushKey}}" />
							<Setter TargetName="Bg"
									Property="Fill"
									Value="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonHoverBrushKey}}" />
						</Trigger>
						<Trigger Property="IsPressed"
								 Value="true">
							<Setter TargetName="Bg"
									Property="Stroke"
									Value="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonPressedBorderBrushKey}}" />
							<Setter TargetName="Bg"
									Property="Fill"
									Value="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonPressedBrushKey}}" />
							<Trigger.EnterActions>
								<!--<BeginStoryboard Storyboard="{StaticResource {x:Static theme:BlueTheme.ButtonGlowShowAnimationKey}}" />-->
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="Glow"
														 Storyboard.TargetProperty="Opacity"
														 Duration="0:0:0.2"
														 To="1" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<!--<BeginStoryboard Storyboard="{StaticResource {x:Static theme:BlueTheme.ButtonGlowHideAnimationKey}}" />-->
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="Glow"
														 Storyboard.TargetProperty="Opacity"
														 Duration="0:0:0.2"
														 To="0" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Foreground"
									Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
							<Setter Property="Opacity"
									Value="{x:Static theme:BlueTheme.ItemDisabledOpacity}" />
							<Setter TargetName="InnerBorder"
									Property="Visibility"
									Value="Hidden" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- =========================================================================== -->

	<Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}"
		   TargetType="{x:Type ToggleButton}">
		<Setter Property="OverridesDefaultStyle"
				Value="true" />
		<Setter Property="Foreground"
				Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
		<Setter Property="Margin"
				Value="1,0,1,0" />
		<Setter Property="Padding"
				Value="3" />
		<Setter Property="BorderThickness"
				Value="0" />
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="BorderBrush"
				Value="Transparent" />
		<Setter Property="HorizontalAlignment"
				Value="Center" />
		<Setter Property="VerticalAlignment"
				Value="Center" />
		<Setter Property="HorizontalContentAlignment"
				Value="Center" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="Focusable"
				Value="False" />
		<Setter Property="IsTabStop"
				Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="true">
						<Grid Background="Transparent">
							<Rectangle Name="Glow"
									   Opacity="0"
									   ClipToBounds="False"
									   Fill="White"
									   Stroke="White"
									   StrokeThickness="{DynamicResource {x:Static theme:BlueTheme.SelectionStrokeKey}}"
									   RadiusX="{DynamicResource {x:Static theme:BlueTheme.SelectionRoundingKey}}"
									   RadiusY="{DynamicResource {x:Static theme:BlueTheme.SelectionRoundingKey}}"
									   Margin="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonGlowMarginKey}}"
									   Effect="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonGlowEffectKey}}" />
							<Rectangle Name="Bg"
									   Fill="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonFillBrushKey}}"
									   Stroke="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonBorderBrushKey}}"
									   StrokeThickness="{DynamicResource {x:Static theme:BlueTheme.SelectionStrokeKey}}"
									   RadiusX="{DynamicResource {x:Static theme:BlueTheme.SelectionRoundingKey}}"
									   RadiusY="{DynamicResource {x:Static theme:BlueTheme.SelectionRoundingKey}}" />
							<Rectangle Name="InnerBorder"
									   Margin="1"
									   Opacity="{DynamicResource {x:Static theme:BlueTheme.SelectionInnerOpacityKey}}"
									   Stroke="{DynamicResource {x:Static theme:BlueTheme.SelectionInnerBrushKey}}"
									   RadiusX="{DynamicResource {x:Static theme:BlueTheme.SelectionRoundingKey}}"
									   RadiusY="{DynamicResource {x:Static theme:BlueTheme.SelectionRoundingKey}}" />
							<ContentPresenter Margin="{TemplateBinding Padding}"
											  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
											  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked"
								 Value="true">
							<Setter TargetName="Bg"
									Property="Stroke"
									Value="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonCheckedBorderBrushKey}}" />
							<Setter TargetName="Bg"
									Property="Fill"
									Value="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonCheckedBrushKey}}" />
							<Setter TargetName="InnerBorder"
									Property="Opacity"
									Value="0.5" />
						</Trigger>
						<Trigger Property="IsMouseOver"
								 Value="true">
							<Setter TargetName="Bg"
									Property="Stroke"
									Value="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonHoverBorderBrushKey}}" />
							<Setter TargetName="Bg"
									Property="Fill"
									Value="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonHoverBrushKey}}" />
						</Trigger>
						<Trigger Property="IsKeyboardFocused"
								 Value="true">
							<Setter TargetName="Bg"
									Property="Stroke"
									Value="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonHoverBorderBrushKey}}" />
							<Setter TargetName="Bg"
									Property="Fill"
									Value="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonHoverBrushKey}}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver"
										   Value="true" />
								<Condition Property="IsChecked"
										   Value="true" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Bg"
									Property="Stroke"
									Value="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonPressedBorderBrushKey}}" />
							<Setter TargetName="Bg"
									Property="Fill"
									Value="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonPressedBrushKey}}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsKeyboardFocused"
										   Value="true" />
								<Condition Property="IsChecked"
										   Value="true" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Bg"
									Property="Stroke"
									Value="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonPressedBorderBrushKey}}" />
							<Setter TargetName="Bg"
									Property="Fill"
									Value="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonPressedBrushKey}}" />
						</MultiTrigger>
						<Trigger Property="IsPressed"
								 Value="true">
							<Setter TargetName="Bg"
									Property="Stroke"
									Value="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonPressedBorderBrushKey}}" />
							<Setter TargetName="Bg"
									Property="Fill"
									Value="{StaticResource {x:Static theme:BlueTheme.ToolBarButtonPressedBrushKey}}" />
							<Trigger.EnterActions>
								<!--<BeginStoryboard Storyboard="{StaticResource {x:Static theme:BlueTheme.ButtonGlowShowAnimationKey}}" />-->
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="Glow"
														 Storyboard.TargetProperty="Opacity"
														 Duration="0:0:0.2"
														 To="1" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<!--<BeginStoryboard Storyboard="{StaticResource {x:Static theme:BlueTheme.ButtonGlowHideAnimationKey}}" />-->
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="Glow"
														 Storyboard.TargetProperty="Opacity"
														 Duration="0:0:0.2"
														 To="0" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Foreground"
									Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
							<Setter Property="Opacity"
									Value="{x:Static theme:BlueTheme.ItemDisabledOpacity}" />
							<Setter TargetName="InnerBorder"
									Property="Visibility"
									Value="Hidden" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}"
		   BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
		   TargetType="{x:Type CheckBox}" />
	<Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}"
		   BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
		   TargetType="{x:Type RadioButton}" />

</ResourceDictionary>