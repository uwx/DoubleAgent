<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:theme="clr-namespace:DoubleAgent.Theme">

	<!-- =========================================================================== -->
	<!-- ListBox                                                                     -->
	<!-- =========================================================================== -->

	<Style x:Key="{x:Type ListBox}"
		   TargetType="{x:Type ListBox}">
		<Setter Property="Padding"
				Value="0" />
		<Setter Property="Margin"
				Value="{DynamicResource {x:Static theme:BlueTheme.BorderMarginKey}}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBox}">
					<Grid>
						<Border x:Name="BdNormal"
								Style="{DynamicResource {x:Static theme:BlueTheme.BorderNormalStyleKey}}"
								Background="{TemplateBinding Background}">
							<ScrollViewer Name="ScrollHost"
										  Padding="{TemplateBinding Padding}">
								<ItemsPresenter Name="ItemsHost"
												SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</ScrollViewer>
						</Border>
						<Border x:Name="BdFocused"
								Style="{DynamicResource {x:Static theme:BlueTheme.BorderFocusedStyleKey}}" />
					</Grid>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsKeyboardFocusWithin"
										   Value="True" />
								<Condition Property="IsEnabled"
										   Value="True" />
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{DynamicResource {x:Static theme:BlueTheme.BorderFocusedShowAnimationKey}}" />
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{DynamicResource {x:Static theme:BlueTheme.BorderFocusedHideAnimationKey}}" />
							</MultiTrigger.ExitActions>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver"
										   Value="True" />
								<Condition Property="IsKeyboardFocusWithin"
										   Value="false" />
								<Condition Property="IsEnabled"
										   Value="True" />
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{DynamicResource {x:Static theme:BlueTheme.BorderHitShowAnimationKey}}" />
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{DynamicResource {x:Static theme:BlueTheme.BorderHitHideAnimationKey}}" />
							</MultiTrigger.ExitActions>
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- =========================================================================== -->
	<!-- ListView                                                                    -->
	<!-- =========================================================================== -->

	<Style x:Key="{x:Type ListView}"
		   BasedOn="{StaticResource {x:Type ListBox}}"
		   TargetType="{x:Type ListView}" />

	<ControlTemplate x:Key="{x:Static theme:BlueTheme.ListViewGridTemplateKey}"
					 TargetType="{x:Type ListView}">
		<Grid>
			<Border x:Name="BdNormal"
					Style="{DynamicResource {x:Static theme:BlueTheme.BorderNormalStyleKey}}"
					Background="{TemplateBinding Background}">
				<ScrollViewer Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}"
							  Padding="{TemplateBinding Padding}">
					<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
				</ScrollViewer>
			</Border>
			<Border x:Name="BdFocused"
					Style="{DynamicResource {x:Static theme:BlueTheme.BorderFocusedStyleKey}}" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsGrouping"
					 Value="True">
				<Setter Property="ScrollViewer.CanContentScroll"
						Value="false" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsKeyboardFocusWithin"
							   Value="True" />
					<Condition Property="IsEnabled"
							   Value="True" />
				</MultiTrigger.Conditions>
				<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{DynamicResource {x:Static theme:BlueTheme.BorderFocusedShowAnimationKey}}" />
				</MultiTrigger.EnterActions>
				<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{DynamicResource {x:Static theme:BlueTheme.BorderFocusedHideAnimationKey}}" />
				</MultiTrigger.ExitActions>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver"
							   Value="True" />
					<Condition Property="IsKeyboardFocusWithin"
							   Value="false" />
					<Condition Property="IsEnabled"
							   Value="True" />
				</MultiTrigger.Conditions>
				<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{DynamicResource {x:Static theme:BlueTheme.BorderHitShowAnimationKey}}" />
				</MultiTrigger.EnterActions>
				<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{DynamicResource {x:Static theme:BlueTheme.BorderHitHideAnimationKey}}" />
				</MultiTrigger.ExitActions>
			</MultiTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style x:Key="{x:Static theme:BlueTheme.ListViewGridStyleKey}"
		   BasedOn="{StaticResource {x:Type ListBox}}"
		   TargetType="{x:Type ListView}">
		<Setter Property="Template"
				Value="{StaticResource {x:Static theme:BlueTheme.ListViewGridTemplateKey}}" />
	</Style>

	<!-- =========================================================================== -->

	<ControlTemplate x:Key="{x:Static theme:BlueTheme.ListViewItemTemplateKey}"
					 TargetType="{x:Type ListBoxItem}">
		<Border Background="{TemplateBinding Background}"
				BorderBrush="{TemplateBinding BorderBrush}"
				BorderThickness="{TemplateBinding BorderThickness}"
				SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
				UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
			<Grid Background="Transparent">
				<Rectangle Name="Bg"
						   Fill="Transparent"
						   Stroke="Transparent"
						   StrokeThickness="{DynamicResource {x:Static theme:BlueTheme.SelectionStrokeKey}}"
						   RadiusX="{DynamicResource {x:Static theme:BlueTheme.SelectionRoundingKey}}"
						   RadiusY="{DynamicResource {x:Static theme:BlueTheme.SelectionRoundingKey}}" />
				<Rectangle Name="InnerBorder"
						   Margin="1"
						   Opacity="{DynamicResource {x:Static theme:BlueTheme.SelectionInnerOpacityKey}}"
						   RadiusX="{DynamicResource {x:Static theme:BlueTheme.SelectionRoundingKey}}"
						   RadiusY="{DynamicResource {x:Static theme:BlueTheme.SelectionRoundingKey}}" />
				<ContentPresenter Margin="{TemplateBinding Padding}"
								  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
								  UseLayoutRounding="{TemplateBinding UseLayoutRounding}" />
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="Focusable"
							   Value="True" />
					<Condition Property="IsMouseOver"
							   Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Bg"
						Property="Fill"
						Value="{DynamicResource {x:Static theme:BlueTheme.SelectionHighlitedFillBrushKey}}" />
				<Setter TargetName="Bg"
						Property="Stroke"
						Value="{DynamicResource {x:Static theme:BlueTheme.SelectionHighlitedOuterBrushKey}}" />
				<Setter TargetName="InnerBorder"
						Property="Stroke"
						Value="{DynamicResource {x:Static theme:BlueTheme.SelectionInnerBrushKey}}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="Focusable"
							   Value="True" />
					<Condition Property="IsSelected"
							   Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Bg"
						Property="Fill"
						Value="{DynamicResource {x:Static theme:BlueTheme.SelectionFillBrushKey}}" />
				<Setter TargetName="Bg"
						Property="Stroke"
						Value="{DynamicResource {x:Static theme:BlueTheme.SelectionOuterBrushKey}}" />
				<Setter TargetName="InnerBorder"
						Property="Stroke"
						Value="{DynamicResource {x:Static theme:BlueTheme.SelectionInnerBrushKey}}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="Focusable"
							   Value="True" />
					<Condition Property="IsSelected"
							   Value="True" />
					<Condition Property="Selector.IsSelectionActive"
							   Value="False" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Bg"
						Property="Fill"
						Value="{DynamicResource {x:Static theme:BlueTheme.SelectionUnfocusedFillBrushKey}}" />
				<Setter TargetName="Bg"
						Property="Stroke"
						Value="{DynamicResource {x:Static theme:BlueTheme.SelectionUnfocusedOuterBrushKey}}" />
				<Setter TargetName="InnerBorder"
						Property="Stroke"
						Value="{DynamicResource {x:Static theme:BlueTheme.SelectionInnerBrushKey}}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="Focusable"
							   Value="True" />
					<Condition Property="IsSelected"
							   Value="True" />
					<Condition Property="IsMouseOver"
							   Value="True" />
					<Condition Property="Selector.IsSelectionActive"
							   Value="False" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Bg"
						Property="Fill"
						Value="{DynamicResource {x:Static theme:BlueTheme.SelectionFillBrushKey}}" />
				<Setter TargetName="Bg"
						Property="Stroke"
						Value="{DynamicResource {x:Static theme:BlueTheme.SelectionOuterBrushKey}}" />
				<Setter TargetName="InnerBorder"
						Property="Stroke"
						Value="{DynamicResource {x:Static theme:BlueTheme.SelectionInnerBrushKey}}" />
			</MultiTrigger>
			<Trigger Property="IsEnabled"
					 Value="false">
				<Setter Property="Foreground"
						Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<ControlTemplate x:Key="{x:Static theme:BlueTheme.ListViewGridItemTemplateKey}"
					 TargetType="{x:Type ListViewItem}">
		<Border Background="{TemplateBinding Background}"
				BorderBrush="{TemplateBinding BorderBrush}"
				BorderThickness="{TemplateBinding BorderThickness}"
				SnapsToDevicePixels="True">
			<Grid Background="Transparent">
				<Rectangle Name="Bg"
						   Fill="Transparent"
						   Stroke="Transparent"
						   StrokeThickness="{DynamicResource {x:Static theme:BlueTheme.SelectionStrokeKey}}"
						   RadiusX="{DynamicResource {x:Static theme:BlueTheme.SelectionRoundingKey}}"
						   RadiusY="{DynamicResource {x:Static theme:BlueTheme.SelectionRoundingKey}}" />
				<Rectangle Name="InnerBorder"
						   Margin="1"
						   Opacity="{DynamicResource {x:Static theme:BlueTheme.SelectionInnerOpacityKey}}"
						   RadiusX="{DynamicResource {x:Static theme:BlueTheme.SelectionRoundingKey}}"
						   RadiusY="{DynamicResource {x:Static theme:BlueTheme.SelectionRoundingKey}}" />
				<GridViewRowPresenter Columns="{TemplateBinding GridView.ColumnCollection}"
									  Content="{TemplateBinding Content}"
									  Margin="{TemplateBinding Padding}"
									  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="Focusable"
							   Value="True" />
					<Condition Property="IsMouseOver"
							   Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Bg"
						Property="Fill"
						Value="{DynamicResource {x:Static theme:BlueTheme.SelectionHighlitedFillBrushKey}}" />
				<Setter TargetName="Bg"
						Property="Stroke"
						Value="{DynamicResource {x:Static theme:BlueTheme.SelectionHighlitedOuterBrushKey}}" />
				<Setter TargetName="InnerBorder"
						Property="Stroke"
						Value="{DynamicResource {x:Static theme:BlueTheme.SelectionInnerBrushKey}}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="Focusable"
							   Value="True" />
					<Condition Property="IsSelected"
							   Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Bg"
						Property="Fill"
						Value="{DynamicResource {x:Static theme:BlueTheme.SelectionFillBrushKey}}" />
				<Setter TargetName="Bg"
						Property="Stroke"
						Value="{DynamicResource {x:Static theme:BlueTheme.SelectionOuterBrushKey}}" />
				<Setter TargetName="InnerBorder"
						Property="Stroke"
						Value="{DynamicResource {x:Static theme:BlueTheme.SelectionInnerBrushKey}}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="Focusable"
							   Value="True" />
					<Condition Property="IsSelected"
							   Value="True" />
					<Condition Property="Selector.IsSelectionActive"
							   Value="false" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Bg"
						Property="Fill"
						Value="{DynamicResource {x:Static theme:BlueTheme.SelectionUnfocusedFillBrushKey}}" />
				<Setter TargetName="Bg"
						Property="Stroke"
						Value="{DynamicResource {x:Static theme:BlueTheme.SelectionUnfocusedOuterBrushKey}}" />
				<Setter TargetName="InnerBorder"
						Property="Stroke"
						Value="{DynamicResource {x:Static theme:BlueTheme.SelectionInnerBrushKey}}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="Focusable"
							   Value="True" />
					<Condition Property="IsSelected"
							   Value="True" />
					<Condition Property="IsMouseOver"
							   Value="True" />
					<Condition Property="Selector.IsSelectionActive"
							   Value="False" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Bg"
						Property="Fill"
						Value="{DynamicResource {x:Static theme:BlueTheme.SelectionFillBrushKey}}" />
				<Setter TargetName="Bg"
						Property="Stroke"
						Value="{DynamicResource {x:Static theme:BlueTheme.SelectionOuterBrushKey}}" />
				<Setter TargetName="InnerBorder"
						Property="Stroke"
						Value="{DynamicResource {x:Static theme:BlueTheme.SelectionInnerBrushKey}}" />
			</MultiTrigger>
			<Trigger Property="IsEnabled"
					 Value="false">
				<Setter Property="Foreground"
						Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style x:Key="{x:Type ListBoxItem}"
		   TargetType="{x:Type ListBoxItem}">
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="HorizontalContentAlignment"
				Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="VerticalContentAlignment"
				Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="Margin"
				Value="{DynamicResource {x:Static theme:BlueTheme.SelectionMarginKey}}" />
		<Setter Property="Padding"
				Value="{DynamicResource {x:Static theme:BlueTheme.SelectionPaddingKey}}" />
		<Setter Property="Template"
				Value="{StaticResource {x:Static theme:BlueTheme.ListViewItemTemplateKey}}" />
	</Style>

	<Style x:Key="{x:Type ListViewItem}"
		   BasedOn="{StaticResource {x:Type ListBoxItem}}"
		   TargetType="{x:Type ListViewItem}">
	</Style>

	<Style x:Key="{x:Static theme:BlueTheme.ListViewItemStyleKey}"
		   BasedOn="{StaticResource {x:Type ListViewItem}}"
		   TargetType="{x:Type ListViewItem}">
	</Style>

	<Style x:Key="{x:Static theme:BlueTheme.ListViewItemStyleNpNmKey}"
		   BasedOn="{StaticResource {x:Type ListViewItem}}"
		   TargetType="{x:Type ListViewItem}">
		<Setter Property="Margin"
				Value="0,0,0,0" />
		<Setter Property="Padding"
				Value="0,0,0,0" />
	</Style>

	<Style x:Key="{x:Static theme:BlueTheme.ListViewGridItemStyleKey}"
		   BasedOn="{StaticResource {x:Type ListViewItem}}"
		   TargetType="{x:Type ListViewItem}">
		<Setter Property="Template"
				Value="{StaticResource {x:Static theme:BlueTheme.ListViewGridItemTemplateKey}}" />
	</Style>

</ResourceDictionary>