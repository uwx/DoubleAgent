<?xml version="1.0" encoding="utf-8"?>
<topic id="e0846712-419c-11e1-9d4f-002421116fb2" revisionNumber="1">
	<developerConceptualDocument
	  xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
	  xmlns:xlink="http://www.w3.org/1999/xlink">

		<introduction>
			<para>
				<token>DA</token>'s animation services manage the animation and movement of a character's image on the screen.
				An animation is defined as a sequence of timed and optionally branched frames, composed of one or more
				images.
			</para>
			<para>
				While <token>MA</token>'s animation services are only available through it's server, the
				<token>DA</token> control can run in <link xlink:href="e084673a-419c-11e1-9d4f-002421116fb2">
					<token>standalone</token>
				</link> mode, not
				connected to the <token>DA</token> server. When the shared server is used, each character can only be loaded
				<legacyItalic>once per user</legacyItalic> and is shared by all applications that use it. When the <token>DA</token> control
				is used <link xlink:href="e084673a-419c-11e1-9d4f-002421116fb2">
					<token>standalone</token>
				</link>, each character can be loaded
				<legacyItalic>once per process</legacyItalic>. If multiple applications use the same character in <link xlink:href="e084673a-419c-11e1-9d4f-002421116fb2">
					<token>standalone</token>
				</link> mode, there will be multiple copies of the character (one per application).
			</para>
			<para>
				If multiple copies of the same character are shown as <token>Popup</token> windows, it will be confusing to the user.
				Application developers are encouraged to use <link xlink:href="e084673a-419c-11e1-9d4f-002421116fb2">
					<token>standalone</token>
				</link>
				characters only when using the <token>DA</token> control as a <legacyItalic>child</legacyItalic> window. This will make it obvious
				to the user which application that particular instance of the character belongs to.
			</para>
			<autoOutline/>
		</introduction>

		<section address="LoadCharacter">
			<title>Loading a Character</title>
			<content>
				<para>
					To animate a character, you must first load the character. Use the <unmanagedCodeEntityReference>Load</unmanagedCodeEntityReference> method
					to load the character's data. <token>DA</token> supports two formats for character and animation data: a
					single structured file and separate files. Typically, you use the single file format (<localUri>.ACS</localUri>)
					when the data is stored locally. The multiple file format (<localUri>.ACF</localUri>,
					<localUri>.ACA</localUri>) works best when you want to download animations individually, such as when accessing
					animations from an <application>HTTP</application> server.

				</para>
				<para>
					A <token>DA</token> control or server client can load only a single instance of the same character. Any attempt
					to load the same character more than once will fail. However, an application can load the same character
					multiple times by providing separate connections to <token>DA</token>. For example, an application could
					load the same character from two copies of the <token>DA</token> control.
				</para>
				<para>
					Even if an application loads multiple instances of the same character from multiple clients of the
					<token>DA</token> server, or from multiple copies of the <token>DA</token> control connected to the server, only a single
					instance of the character will be created by the server. It will be shared by all of the clients that
					use it.
				</para>
				<para>
					However, when the <token>DA</token> control is used in
					 <link xlink:href="e084673a-419c-11e1-9d4f-002421116fb2">
						 <token>standalone</token>
					 </link> mode (not connected to the server) then a single instance of each loaded character is created
					for the <token>Windows</token>&#160;<legacyItalic>process</legacyItalic> that owns the control(s). Generally, an application has only a single
					process, and each application has a different process.
				</para>
			</content>
		</section>

		<section address="LoadDefault">
			<title>Loading the Default Character</title>
			<content>
				<para>
					Instead of loading a specific character directly by specifying its file name, you can load the
					<link xlink:href="e08466be-419c-11e1-9d4f-002421116fb2#Gallery">default character</link>.
					Using the default character allows the user to choose the specific character to use
					in the <link xlink:href="e0846716-419c-11e1-9d4f-002421116fb2#PropSheet">
						<token>AdvancedCharacterOptions</token>
					</link> window, or the <link xlink:href="e08466bf-419c-11e1-9d4f-002421116fb2">
						<token>DaControlPanel</token>
					</link>.
				</para>
				<para>
					However, because the default character is intended for general-purpose use and may be shared by other
					applications at the same time, avoid loading the default character when you want a character exclusively
					for your application.
				</para>
				<para>
					To load the default character, call the <unmanagedCodeEntityReference>Load</unmanagedCodeEntityReference> method without specifying a file
					name or path. <token>DA</token> automatically loads the default character. If the user has not yet selected
					a default character, <token>DA</token> will select the first character it finds. If none is available, the
					method will fail and report back the cause.
				</para>
				<para>
					Although a client application can query the identity of the default character, only the user can change
					it. You can use the <unmanagedCodeEntityReference>ShowDefaultCharacterProperties</unmanagedCodeEntityReference>
					method to display the <link xlink:href="e08466be-419c-11e1-9d4f-002421116fb2#Gallery">
						<token>GalleryPage</token>
					</link> page of the
					<link xlink:href="e0846716-419c-11e1-9d4f-002421116fb2#PropSheet">
						<token>AdvancedCharacterOptions</token>
					</link> window.
				</para>
				<para>
					The server will notify clients that have loaded the default character when a user changes the default
					character selection, and pass the GUID of the new character. The server automatically unloads the former
					character and reloads the new character. The queues of any clients that have loaded the default character
					are halted and flushed. However, the queues of clients that have loaded the character explicitly using
					the character's file name are not affected. If necessary, the server also handles automatically resetting
					the text-to-speech (TTS) engine for the new character.
				</para>
			</content>
		</section>

		<section address="AnimateCharacter">
			<title>Animating a Character</title>
			<content>
				<para>
					Once a character is loaded, you can use several of <token>DA</token>'s methods for animating the character.
					The first one you use is typically the <unmanagedCodeEntityReference>Show</unmanagedCodeEntityReference> method. <unmanagedCodeEntityReference>Show</unmanagedCodeEntityReference>
					makes the character's image visible and plays the animation assigned to the character's
					<legacyItalic>Showing</legacyItalic> state.
				</para>
				<para>
					Once the character is visible, you can use the <unmanagedCodeEntityReference>Play</unmanagedCodeEntityReference> method, specifying the name
					of an animation, to play that animation. Animation names are specific to a character definition. As
					an animation plays, it's frames are layered over the desktop window. This results in a movable graphic
					image, or <legacyItalic>sprite</legacyItalic>, displayed on top of the desktop and all application windows.
				</para>
				<para>
					If the character's file is stored locally, you can simply call the <unmanagedCodeEntityReference>Play</unmanagedCodeEntityReference> method.
					In other cases, such as when you've loaded an .ACF character from an <application>HTTP</application>
					server, you should use the Prepare method to first retrieve the animation data. This will cause
					<token>DA</token> to request the animation file from the server cache it on the local machine.
				</para>
				<para>
					The <unmanagedCodeEntityReference>Speak</unmanagedCodeEntityReference> method lets you program the character to speak, automatically lip-syncing
					the output. Further details are covered in the <link xlink:href="e0846713-419c-11e1-9d4f-002421116fb2"/> section of this document.
				</para>
				<para>
					You can use the <unmanagedCodeEntityReference>MoveTo</unmanagedCodeEntityReference> method to position the character at a new location. When
					you call the <unmanagedCodeEntityReference>MoveTo</unmanagedCodeEntityReference> method, <token>DA</token> automatically plays the appropriate
					animation based on the character's current location, then moves the character's image. Similarly, when
					you call <unmanagedCodeEntityReference>GestureAt</unmanagedCodeEntityReference>, <token>DA</token> plays the appropriate gesturing animation
					based on the character's location and the location specified in the call.
				</para>
				<para>
					To hide the character, call the <unmanagedCodeEntityReference>Hide</unmanagedCodeEntityReference> method. This automatically plays the animation
					associated with the character's <legacyItalic>Hiding</legacyItalic> state, then hides the character's image.
					However, you can also show or hide a character by setting the character's <unmanagedCodeEntityReference>Visible</unmanagedCodeEntityReference>
					property.
				</para>
				<para>
					When a character is hidden, the server does not play animations; however, it still queues and processes
					the animation request and passes a request status back to the client. In the hidden state, the character
					cannot become <link xlink:href="e0846714-419c-11e1-9d4f-002421116fb2#Active">
						<token>InputActive</token>
					</link>. However, if the user speaks
					the name of the character (when speech input is enabled), the server automatically shows the character.
				</para>

			</content>
		</section>

		<section address="Requests">
			<title>Requests and Synchronization</title>
			<content>
				<para>
					<token>DA</token> processes all animation calls, or <legacyItalic>requests</legacyItalic>, asynchronously. This enables your application's
					code to continue handling other events while the request is being processed. For example, calls to the
					<unmanagedCodeEntityReference>Play</unmanagedCodeEntityReference> method place the animation in a queue for the character so that the animations
					can be played sequentially. However, this means you cannot assume that a call to other functions will
					necessarily execute after an animation it follows in your code. For example, typically, a statement
					following a call to <unmanagedCodeEntityReference>Play</unmanagedCodeEntityReference> or <unmanagedCodeEntityReference>MoveTo</unmanagedCodeEntityReference> will execute before
					the animation finishes.
				</para>
				<para>
					You can synchronize your code with animations in a character's queue by creating an object reference
					to the animation request, and, when the animation starts or completes, monitoring the
					<unmanagedCodeEntityReference>Request</unmanagedCodeEntityReference> events that the control and server use to notify the character's clients. For example,
					if you want a message box to appear when the character finishes an animation, you can put the message
					box call in your <unmanagedCodeEntityReference>RequestComplete</unmanagedCodeEntityReference> event handling routine, checking for the particular
					request ID.
				</para>
				<para>
					When your client application loads multiple characters at the same time, <token>DA</token>'s animation services
					allow you to animate the characters independently, or use the <unmanagedCodeEntityReference>Wait</unmanagedCodeEntityReference>,
					<unmanagedCodeEntityReference>Interrupt</unmanagedCodeEntityReference>,
					and <unmanagedCodeEntityReference>Stop</unmanagedCodeEntityReference> methods to synchronize their animations.
				</para>
			</content>
		</section>

		<section address="States">
			<title>State Animations</title>
			<content>
				<para>
					<token>DA</token> also plays other animations automatically. For example, if the character's state hasn't
					changed for several seconds, <token>DA</token> begins playing the character's <legacyItalic>Idling</legacyItalic>
					animations. Similarly, when speech input is enabled, <token>DA</token> plays the character's
					<legacyItalic>Listening</legacyItalic> animations and then its <legacyItalic>Hearing</legacyItalic> animations. There server-managed
					animations are called <legacyItalic>states</legacyItalic>, and are defined when a character is created.
				</para>
			</content>
		</section>

		<relatedTopics>
		</relatedTopics>

	</developerConceptualDocument>
</topic>
