<?xml version="1.0" encoding="utf-8"?>
<topic id="e08466d1-419c-11e1-9d4f-002421116fb2" revisionNumber="1">
	<developerConceptualDocument
	  xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
	  xmlns:xlink="http://www.w3.org/1999/xlink">

		<introduction>
			<para>This is a summary of what has changed between version 1.0 and version 1.1 of Double Agent.</para>
		</introduction>


		<section address="UI">
			<title>The User Interface</title>
			<content>
				<para>
					A few changes have been made to the Double Agent user interface. Mostly, these changes are aimed at improving
					the quality of the visual presentation.
				</para>
				<list class="bullet">
					<listItem>
						<para>Animations can be smoothed with a bicubic interpolation algorithm.</para>
					</listItem>
					<listItem>
						<para>
							The application has more control over the <link xlink:href="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">
								<token>NotificationIcon</token>
							</link>:
						</para>
						<list class="bullet">
							<listItem>
								<para>
									It can control if and when the <link xlink:href="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">
										<token>NotificationIcon</token>
									</link> is shown.
								</para>
							</listItem>
							<listItem>
								<para>
									It can set it&#39;s own <link xlink:href="e08466bc-419c-11e1-9d4f-002421116fb2#Icon">
										<token>NotificationIcon</token>
									</link> tip text.
								</para>
							</listItem>
							<listItem>
								<para>Characters without pre-defined icons can have icons generated for them.</para>
							</listItem>
							<listItem>
								<para>
									Characters with pre-defined icons can also have icons generated for them. The pre-defined icons have
									a color depth of 4 bits (16 colors). The generated icons are higher quality.
								</para>
							</listItem>
						</list>
					</listItem>
					<listItem>
						<para>
							The <link xlink:href="e08466bc-419c-11e1-9d4f-002421116fb2#Balloon">
								<token>WordBalloon</token>
							</link> is now drawn with full antialiasing.
							It now looks smoother and more modern.
						</para>
					</listItem>
					<listItem>
						<para>
							The <token>DefaultCharacterProperties</token> window has been removed, and it&#39;s
							<token>GalleryPage</token> added to the <token>AdvancedCharacterOptions</token> window.
						</para>
					</listItem>
				</list>

			</content>
		</section>

		<section address="API">
			<title>The Programming Interfaces</title>
			<content>
				<para>
					A lot of changes have been made to the programming interfaces. These are aimed at supporting more programming
					languages and providing more flexibility. Developers can now choose whether to write to the Server
					or Control interfaces based on their application&#39;s requirements, not just which language
					they&#39;re using.
				</para>
				<list class="bullet">
					<listItem>
						<para>
							Many of the differences between the Server and Control programming interfaces have been
							removed:
						</para>
						<list class="bullet">
							<listItem>
								<para>
									Some functionality was present in Server interfaces but not the Control interfaces. Both interfaces
									now include all functionality.
								</para>
							</listItem>
							<listItem>
								<para>
									A lot of functionality was implemented as properties in the Control interfaces and Get/Set methods in
									the Server interfaces. The Server interfaces have been changed to use properties.
								</para>
							</listItem>
							<listItem>
								<para>
									There were some naming differences (such as the Prepare method for the Server and the Get method for
									the Control). These differences have been resolved.
								</para>
							</listItem>
						</list>
					</listItem>
					<listItem>
						<para>
							The Control interfaces still target programming languages that are limited to the <token>COMauto</token>
							data types (basically any data type that can be contained in a VARIANT).
						</para>
						<list class="bullet">
							<listItem>
								<para>
									Specifically, anywhere a bit-field is used (such as the Balloon.Style property), an alternative property
									is provided for each bit.
								</para>
							</listItem>
							<listItem>
								<para>
									Any non-<token>COMauto</token> data types are passed as strings (for example, GUID data).
								</para>
							</listItem>
							<listItem>
								<para>
									Optional method parameters are always passed as VARIANT, in strict compliance with the <token>COMauto</token>
									standard.
								</para>
							</listItem>
						</list>
					</listItem>
					<listItem>
						<para>
							The Server interfaces still target C/C++/C#, but are now useable with other languages as well
							(they always <legacyItalic>did</legacyItalic> support <token>COMauto</token>, mostly, and undocumented, but with a few deviations
							from the standard).
						</para>
						<list class="bullet">
							<listItem>
								<para>
									They now conform better to the <token>COMauto</token> standard. The IUnknown interface is no longer used.
								</para>
							</listItem>
							<listItem>
								<para>
									They still use a couple of <token>Windows</token> native data types (such as the GUID type).
								</para>
							</listItem>
							<listItem>
								<para>
									They <legacyItalic>do not</legacyItalic> provide alternatives to bit-fields, and they use the VARIANT type only where multiple
									data types are supported.
								</para>
							</listItem>
						</list>
					</listItem>
					<listItem>
						<para>Numeric constants for codes and flags are now declared as enumerations.</para>
					</listItem>
					<listItem>
						<para>
							The <codeInline>AudioOutputProperties</codeInline> and <codeInline>SpeechInputProperties</codeInline>
							objects have been combined into a single <codeInline>Settings</codeInline> object. It now includes <legacyItalic>all</legacyItalic>
							of the settings in the <token>AdvancedCharacterOptions</token> window.
						</para>
					</listItem>
					<listItem>
						<para>
							There are new classes that allow an application to discover what resources are available:
						</para>
						<list class="bullet">
							<listItem>
								<para>There&#39;s a new object for finding locally installed character files.</para>
							</listItem>
							<listItem>
								<para>
									There are new objects for determining which speech engines are available and matching them against a
									character&#39;s requirements.
								</para>
							</listItem>
							<listItem>
								<para>
									These objects include enough information to allow an application to effectively choose a speech engine,
									or present a choice to the user.
								</para>
							</listItem>
						</list>
					</listItem>
					<listItem>
						<para>
							A lot of work has been done to support <token>dotNET</token> languages. The
							<token>IAs</token> have been revamped:
						</para>
						<list class="bullet">
							<listItem>
								<para>They now use proper namespaces.</para>
							</listItem>
							<listItem>
								<para>They now use straightforward interface, class, and member names (without all the added prefixes).</para>
							</listItem>
							<listItem>
								<para>
									They now include a full <newTerm>RCW (Runtime Callable Wrapper)</newTerm> for each class. This
									makes the classes indistinguishable from any other managed class and means that Double Agent is accessed
									through <newTerm>classes</newTerm> rather than <newTerm>interfaces</newTerm>, like any other managed assembly.
								</para>
							</listItem>
							<listItem>
								<para>
									Collection classes now implement <codeInline>System.Collections.Generic.IEnumerable&lt;T&gt;</codeInline>
									instead of just <codeInline>System.Collections.IEnumerable</codeInline>. The enumerations are now type-safe,
									and the enumerated objects are known to the debugger.
								</para>
							</listItem>
							<listItem>
								<para>
									They are now <legacyBold>Primary</legacyBold>&#160;<token>IAs</token>.
									This means they are strong-named and signed, suitable for installation in the <token>GACname</token>.
								</para>
							</listItem>
						</list>
					</listItem>
				</list>
				<para>
					Of course, the programming interfaces are fully backward-compatible with Double Agent 1.0, and still
					binary-compatible with <token>MsAgent</token>.
				</para>

			</content>
		</section>

		<section address="Refactoring">
			<title>Refactoring</title>
			<content>
				<para>
					One of the biggest changes in Double Agent 1.1 is a refactoring of the Server and Control
					components. Changes to the programming interfaces give developers a better choice of which component
					to use. Changes to the Control make it a first-class component rather than just a portal to the
					Server.
				</para>
				<list class="bullet">
					<listItem>
						<para>
							The Double Agent Control can now operate in three different <link xlink:href="e084673a-419c-11e1-9d4f-002421116fb2">modes</link>:
						</para>
						<list class="bullet">
							<listItem>
								<para>It can act as a portal to the Server, as in previous versions.</para>
							</listItem>
							<listItem>
								<para>It can now run stand-alone, providing full functionality without any connection to the Server.</para>
							</listItem>
							<listItem>
								<para>
									It can now work as a <token>ActiveXCtl</token>, with it&#39;s character contained within
									the control window.
								</para>
							</listItem>
						</list>
					</listItem>
					<listItem>
						<para>
							The <link xlink:href="e084673a-419c-11e1-9d4f-002421116fb2">mode</link> a developer chooses depends on the application&#39;s
							requirements:
						</para>
						<list class="bullet">
							<listItem>
								<para>
									In <legacyItalic>connected</legacyItalic> mode, a character belongs to the Server and is shared
									among all applications using it. A particular character will only have a single instance, with multiple
									client applications.
								</para>
							</listItem>
							<listItem>
								<para>
									In <legacyItalic>stand-alone</legacyItalic> mode, a character belongs to the Control (and thus the
									application that created the Control). Each application that uses the Control in <legacyItalic>stand-alone</legacyItalic>
									mode has its own <legacyItalic>private</legacyItalic> instance of a character. If another application is using the same character
									at the same time, there will be two copies of the character on the screen and two <token>NotificationIcon</token>s,
									one for each application.
								</para>
							</listItem>
							<listItem>
								<para>
									In <legacyItalic>contained</legacyItalic> mode (which is also stand-alone), a character belongs to the
									Control. However, since it&#39;s limited to the Control&#39;s child window, it is visibly clear
									that it belongs to that application. Also, in <legacyItalic>contained</legacyItalic> mode a character doesn&#39;t
									have a <token>NotificationIcon</token>.
								</para>
							</listItem>
						</list>
					</listItem>
				</list>
				<para>
					For more information, see <link xlink:href="e084673a-419c-11e1-9d4f-002421116fb2"/>
				</para>
			</content>
		</section>

		<section address="SpeechText">
			<title>Speech Text</title>
			<content>
				<para>
					The preprocessing that's performed on speech text has been exposed in the API. This allows applications
					to improve speech performance for long texts. It's accompanied by new events that allow an application
					to follow the progress of the speech output.
				</para>
				<list class="bullet">
					<listItem>
						<para>
							The new <codeInline>FormattedText</codeInline> object exposes the speech text preprocessing.
						</para>
					</listItem>
					<listItem>
						<para>
							The <codeInline>Character</codeInline> object has new <codeInline>SpeakFormattedText</codeInline> and
							<codeInline>ThinkFormattedText</codeInline> methods.
						</para>
					</listItem>
					<listItem>
						<para>
							The <codeInline>SpeechStart</codeInline>, <codeInline>SpeechEnd</codeInline>, and
							<codeInline>SpeechWord</codeInline> events allow the application to closely follow speech output progress.
						</para>
					</listItem>
				</list>
			</content>
		</section>

		<relatedTopics>
		</relatedTopics>

	</developerConceptualDocument>
</topic>
