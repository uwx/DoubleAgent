<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:theme="clr-namespace:DoubleAgent.Theme">

	<!-- =========================================================================== -->
	<!-- ComboBox                                                                    -->
	<!-- =========================================================================== -->

	<Geometry x:Key="{x:Static theme:BlueTheme.ComboBoxDownArrowKey}">M 0,0 L 3.5,4 L 7,0 Z</Geometry>

	<Style x:Key="{x:Static theme:BlueTheme.ComboReadOnlyButtonStyle}"
		   TargetType="{x:Type ToggleButton}">
		<Setter Property="OverridesDefaultStyle"
				Value="True" />
		<Setter Property="IsTabStop"
				Value="false" />
		<Setter Property="Focusable"
				Value="false" />
		<Setter Property="ClickMode"
				Value="Press" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Grid Background="Transparent"
						  SnapsToDevicePixels="True"
						  UseLayoutRounding="False">
						<Rectangle Name="Glow"
								   Fill="White"
								   Opacity="0"
								   RadiusX="3"
								   RadiusY="3"
								   Margin="{DynamicResource {x:Static theme:BlueTheme.ToggleButtonGlowMarginKey}}"
								   Effect="{DynamicResource {x:Static theme:BlueTheme.ToggleButtonGlowEffectKey}}"
								   ClipToBounds="False" />
						<Border Name="Chrome"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{DynamicResource {x:Static theme:BlueTheme.PushButtonBorderThicknessKey}}"
								CornerRadius="{DynamicResource {x:Static theme:BlueTheme.PushButtonRoundingKey}}"
								Padding="{DynamicResource {x:Static theme:BlueTheme.PushButtonBorderPaddingKey}}" />
						<Border Name="Highlite"
								Background="{DynamicResource {x:Static theme:BlueTheme.PushButtonHighlitedFillBrushKey}}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{DynamicResource {x:Static theme:BlueTheme.PushButtonBorderThicknessKey}}"
								CornerRadius="{DynamicResource {x:Static theme:BlueTheme.PushButtonRoundingKey}}"
								Padding="{DynamicResource {x:Static theme:BlueTheme.PushButtonBorderPaddingKey}}"
								Opacity="0" />
						<Border Background="Transparent"
								BorderBrush="Transparent"
								BorderThickness="{DynamicResource {x:Static theme:BlueTheme.PushButtonBorderThicknessKey}}"
								CornerRadius="{DynamicResource {x:Static theme:BlueTheme.PushButtonRoundingKey}}"
								Padding="{DynamicResource {x:Static theme:BlueTheme.PushButtonBorderPaddingKey}}">
							<Grid Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
								  HorizontalAlignment="Right">
								<Path Name="Arrow"
									  Margin="3,1,0,0"
									  Fill="Black"
									  Data="{StaticResource {x:Static theme:BlueTheme.ComboBoxDownArrowKey}}"
									  HorizontalAlignment="Center"
									  VerticalAlignment="Center" />
							</Grid>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver"
								 Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="Highlite"
														 Storyboard.TargetProperty="Opacity"
														 Duration="{x:Static theme:BlueTheme.StateAnimationDuration}"
														 To="1" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="Highlite"
														 Storyboard.TargetProperty="Opacity"
														 Duration="{x:Static theme:BlueTheme.StateAnimationDuration}"
														 To="0" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
						<Trigger Property="IsChecked"
								 Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{DynamicResource {x:Static theme:BlueTheme.ButtonGlowShowAnimationKey}}" />
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{DynamicResource {x:Static theme:BlueTheme.ButtonGlowHideAnimationKey}}" />
							</Trigger.ExitActions>
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter TargetName="Arrow"
									Property="Fill"
									Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- =========================================================================== -->

	<Style x:Key="{x:Type ComboBox}"
		   TargetType="{x:Type ComboBox}">
		<Setter Property="FocusVisualStyle"
				Value="{DynamicResource {x:Static theme:BlueTheme.PushButtonFocusVisualKey}}" />
		<Setter Property="Background"
				Value="{DynamicResource {x:Static theme:BlueTheme.PushButtonFillBrushKey}}" />
		<Setter Property="BorderBrush"
				Value="{DynamicResource {x:Static theme:BlueTheme.PushButtonBorderBrushKey}}" />
		<Setter Property="BorderThickness"
				Value="{DynamicResource {x:Static theme:BlueTheme.PushButtonBorderThicknessKey}}" />
		<Setter Property="Padding"
				Value="4,3" />
		<Setter Property="VerticalAlignment"
				Value="Top" />
		<Setter Property="Foreground"
				Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
				Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility"
				Value="Auto" />
		<Setter Property="ScrollViewer.CanContentScroll"
				Value="True" />
		<Setter Property="ScrollViewer.PanningMode"
				Value="Both" />
		<Setter Property="Stylus.IsFlicksEnabled"
				Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBox}">
					<Grid Name="MainGrid"
						  SnapsToDevicePixels="True">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition
									MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
											  Width="0" />
						</Grid.ColumnDefinitions>
						<Popup Name="PART_Popup"
							   AllowsTransparency="True"
							   Grid.ColumnSpan="2"
							   Placement="Bottom"
							   HorizontalOffset="10"
							   VerticalOffset="3"
							   MaxHeight="{TemplateBinding MaxDropDownHeight}"
							   IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
							   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
							<Border x:Name="DropDownBorder"
									Margin="10"
									BorderThickness="1"
									BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
									Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
								<Border.Effect>
									<DropShadowEffect Color="Black"
													  ShadowDepth="3"
													  Opacity="0.5" />
								</Border.Effect>
								<ScrollViewer Name="DropDownScrollViewer">
									<Grid RenderOptions.ClearTypeHint="Enabled">
										<Canvas Height="0"
												Width="0"
												HorizontalAlignment="Left"
												VerticalAlignment="Top">
											<Rectangle Name="ClearTypeOpaqueBase"
													   ClipToBounds="True"
													   Height="{Binding ElementName=DropDownBorder,Path=ActualHeight}"
													   Width="{Binding ElementName=DropDownBorder,Path=ActualWidth}"
													   Fill="{Binding ElementName=DropDownBorder,Path=Background}" />
										</Canvas>
										<ItemsPresenter Name="ItemsPresenter"
														KeyboardNavigation.DirectionalNavigation="Contained"
														SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
									</Grid>
								</ScrollViewer>
							</Border>
						</Popup>
						<ToggleButton Grid.ColumnSpan="2"
									  Background="{TemplateBinding Background}"
									  BorderBrush="{TemplateBinding BorderBrush}"
									  Style="{StaticResource {x:Static theme:BlueTheme.ComboReadOnlyButtonStyle}}"
									  IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" />
						<ContentPresenter IsHitTestVisible="false"
										  Margin="{TemplateBinding Padding}"
										  Content="{TemplateBinding SelectionBoxItem}"
										  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
										  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
										  ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										  UseLayoutRounding="{TemplateBinding UseLayoutRounding}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger SourceName="PART_Popup"
								 Property="Popup.HasDropShadow"
								 Value="false">
							<Setter TargetName="DropDownBorder"
									Property="Effect"
									Value="{x:Null}" />
						</Trigger>
						<Trigger Property="HasItems"
								 Value="false">
							<Setter TargetName="DropDownBorder"
									Property="Height"
									Value="95" />
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Foreground"
									Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
						</Trigger>
						<Trigger Property="IsGrouping"
								 Value="True">
							<Setter Property="ScrollViewer.CanContentScroll"
									Value="false" />
						</Trigger>
						<Trigger SourceName="DropDownScrollViewer"
								 Property="ScrollViewer.CanContentScroll"
								 Value="false">
							<Setter TargetName="ClearTypeOpaqueBase"
									Property="Canvas.Top"
									Value="{Binding ElementName=DropDownScrollViewer, Path=VerticalOffset}" />
							<Setter TargetName="ClearTypeOpaqueBase"
									Property="Canvas.Left"
									Value="{Binding ElementName=DropDownScrollViewer, Path=HorizontalOffset}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- =========================================================================== -->
	<!-- ComboBoxItem                                                                -->
	<!-- =========================================================================== -->

	<Style x:Key="{x:Type ComboBoxItem}"
		   TargetType="{x:Type ComboBoxItem}">
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="HorizontalContentAlignment"
				Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="VerticalContentAlignment"
				Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="Margin"
				Value="{DynamicResource {x:Static theme:BlueTheme.SelectionMarginKey}}" />
		<Setter Property="Padding"
				Value="{DynamicResource {x:Static theme:BlueTheme.SelectionPaddingKey}}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBoxItem}">
					<Border Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="True">
						<Grid Background="Transparent">
							<Rectangle Name="Bg"
									   Fill="Transparent"
									   Stroke="Transparent"
									   StrokeThickness="{DynamicResource {x:Static theme:BlueTheme.SelectionStrokeKey}}"
									   RadiusX="{DynamicResource {x:Static theme:BlueTheme.SelectionRoundingKey}}"
									   RadiusY="{DynamicResource {x:Static theme:BlueTheme.SelectionRoundingKey}}" />
							<Rectangle Name="InnerBorder"
									   Margin="1"
									   Opacity="{DynamicResource {x:Static theme:BlueTheme.SelectionInnerOpacityKey}}"
									   RadiusX="{DynamicResource {x:Static theme:BlueTheme.SelectionRoundingKey}}"
									   RadiusY="{DynamicResource {x:Static theme:BlueTheme.SelectionRoundingKey}}" />
							<ContentPresenter Margin="{TemplateBinding Padding}"
											  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
											  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
											  UseLayoutRounding="{TemplateBinding UseLayoutRounding}" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver"
										   Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Bg"
									Property="Fill"
									Value="{DynamicResource {x:Static theme:BlueTheme.SelectionHighlitedFillBrushKey}}" />
							<Setter TargetName="Bg"
									Property="Stroke"
									Value="{DynamicResource {x:Static theme:BlueTheme.SelectionHighlitedOuterBrushKey}}" />
							<Setter TargetName="InnerBorder"
									Property="Stroke"
									Value="{DynamicResource {x:Static theme:BlueTheme.SelectionInnerBrushKey}}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected"
										   Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Bg"
									Property="Fill"
									Value="{DynamicResource {x:Static theme:BlueTheme.SelectionFillBrushKey}}" />
							<Setter TargetName="Bg"
									Property="Stroke"
									Value="{DynamicResource {x:Static theme:BlueTheme.SelectionOuterBrushKey}}" />
							<Setter TargetName="InnerBorder"
									Property="Stroke"
									Value="{DynamicResource {x:Static theme:BlueTheme.SelectionInnerBrushKey}}" />
						</MultiTrigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Foreground"
									Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>